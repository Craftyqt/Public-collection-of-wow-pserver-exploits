<?xml version="1.0" encoding="utf-8" ?><PALADIN><Ability><Name>-- Functions --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not FuncLoaded then
	FuncLoaded = true

	function CalculateHP(t)
		local ActualWithIncoming = 100 * UnitHealth(t) / UnitHealthMax(t)
		if ActualWithIncoming then
			return ActualWithIncoming
		else
			return 100
		end
	end
		
	function CanHeal(t)
		if not UnitIsCharmed(t) 
		and not UnitIsDeadOrGhost(t) 
		and not UnitDebuffID(t, 33786) then --Clone
			return true 
		end 
	end




	--New Healing Engine
	function SheuronEngine(MO, TARGETHEAL, LOWHP, HEALPET)
		local MouseoverCheck = MO or false
		local LowHPTarget = LOWHP or 80
		local TargetHealCheck = TARGETHEAL or false
		local HEALPET = HEALPET or true
		lowhpmembers = 0
		
		playerHP = CalculateHP(&amp;quot;player&amp;quot;)
			
		members = { { 	
			Unit = &amp;quot;player&amp;quot;, 
			HP = playerHP, 
			GUID = UnitGUID(&amp;quot;player&amp;quot;), 
			IsPlayer = true, 
			} } 
			
		--Adding player to low hp table
		if playerHP &amp;lt; LowHPTarget then
			lowhpmembers = lowhpmembers + 1
		end	
			
			
		local group = &amp;quot;party&amp;quot;
		local groupmembers = GetNumPartyMembers()

		if GetNumRaidMembers() &amp;gt; 0 then
			group = &amp;quot;raid&amp;quot;
			groupmembers = GetNumRaidMembers()
		end
			
			
		for i = 1, groupmembers do 
			local member, memberhp, uidmember = group..i, CalculateHP(group..i), UnitGUID(group..i)	
			-- Checking all Party/Raid Members for Range/Health
			if ((UnitExists(member) and CanHeal(member)) or UnitIsUnit(&amp;quot;player&amp;quot;,member))
			and member ~= nil and memberhp ~= nil and uidmember ~= nil then 	
				table.insert( members,{ Unit = member, HP = memberhp, GUID = uidmember, IsPlayer = true } ) 
					
				-- Setting Low HP Members variable for AoE Healing
				if memberhp &amp;lt; LowHPTarget then
					lowhpmembers = lowhpmembers + 1
				end	
			end 
				
			-- Checking Pets in the group
			if HEALPET and lowhpmembers == 0 and UnitExists(group..i..&amp;quot;pet&amp;quot;) and CanHeal(group..i..&amp;quot;pet&amp;quot;) then
				local memberpet, memberpethp,  uidmemberpet = nil, nil, nil
				memberpet = group..i..&amp;quot;pet&amp;quot; 
				memberpethp = CalculateHP(memberpet)		
				uidmemberpet = UnitGUID(memberpet)
						
				if memberpet ~= nil and memberpethp ~= nil and uidmemberpet ~= nil then
					table.insert(members, { Unit = memberpet, HP = memberpethp, GUID = uidmemberpet, IsPlayer = false } )
				end			
			end
		end 
		-- Checking Priority Targeting
		if TargetHealCheck and CanHeal(&amp;quot;target&amp;quot;) then
			table.sort(members, function(x) return UnitIsUnit(&amp;quot;target&amp;quot;,x.Unit) end)
		elseif MouseoverCheck and CanHeal(&amp;quot;mouseover&amp;quot;) and GetMouseFocus() ~= WorldFrame then
			table.sort(members, function(x) return UnitIsUnit(&amp;quot;mouseover&amp;quot;,x.Unit) end)
		end
	end


	--CastSpell--
	function _castSpell(spellid,tar)
		if UnitCastingInfo(&amp;quot;player&amp;quot;) == nil
		and UnitChannelInfo(&amp;quot;player&amp;quot;) == nil
		--and IsPlayerSpell(spellid) == true
		and cdRemains(spellid) == 0
		then
			if tar ~= nil
			and rangeCheck(spellid,tar) == nil
				then
				return false
			elseif tar ~= nil
			and rangeCheck(spellid,tar) == true
				then
				CastSpellByID(spellid, tar)
				return true
			elseif tar == nil
				then
				CastSpellByID(spellid)
				return true
			else
		return false
		end
	end
	end
	
	
	--Combat Check--
	function inCombat()
	if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil
		then
			return true
		end
	end
	
	--Get HP simple--
	function getHp(unit)
	if UnitExists(unit) ~= nil
		then
			return 100 * UnitHealth(unit) / UnitHealthMax(unit)
		end
	end
	
	--Range Check Simple--
	function rangeCheck(spellid,unit)
	if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
	then
		return true
	end
	end
	
	
	--Amount of Cooldown that remains--
	function cdRemains(spellid)
		if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) &amp;gt; 0
			then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
		else return 0
		end
	end


	-- Checks if our Cleanse will have a valid Debuff to Cleanse
	function ValidDispel(t)
		local HasValidDispel = false
		local i = 1
		local debuff = UnitDebuff(t, i)
		while debuff do
			local debuffType = select(5, UnitDebuff(t, i))
			if debuffType == &amp;quot;Curse&amp;quot;
			or debuffType  == &amp;quot;Poison&amp;quot;  
			or debuffType  == &amp;quot;Disease&amp;quot;  then
				HasValidDispel = true
			end
			i = i + 1
			debuff = UnitDebuff(t, i)
		end
		return HasValidDispel
	end


--End for FuncLoad
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Options --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Available options are as followed: Devo, Ret, Conc, Shadow, Frost, Fire, Crusader
-- This option is case sensitive
Aura = &amp;quot;Ret&amp;quot;

--Enables the use of Divine Prot and Sacred Shield
UseDefenciveCDs = true

SacredShieldHP = 50
DivineProtectionHP = 30
LayOnHandsHP = 10</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Seals</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>SoC = UnitBuffID(&amp;quot;player&amp;quot;, 53736)
SoV = UnitBuffID(&amp;quot;player&amp;quot;, 31801)

if IsSpellKnown(53736) then
	if not SoC then
		_castSpell(53736)
		return true
	end
end
if IsSpellKnown(31801) then
	if not SoV then
		_castSpell(31801)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Auras</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>DevoBuff = UnitBuffID(&amp;quot;player&amp;quot;, 48942)
RetBuff = UnitBuffID(&amp;quot;player&amp;quot;, 54043)
ConcBuff = UnitBuffID(&amp;quot;player&amp;quot;, 19746)
ShadowBuff = UnitBuffID(&amp;quot;player&amp;quot;, 48943)
FrostBuff = UnitBuffID(&amp;quot;player&amp;quot;, 48945)
FireBuff = UnitBuffID(&amp;quot;player&amp;quot;, 48947)
CrusaderBuff = UnitBuffID(&amp;quot;player&amp;quot;, 32223)

if Aura == &amp;quot;Crusader&amp;quot;
or IsMounted() then
	if not CrusaderBuff then
		CastSpellByID(32223)
		return true
	end
end
if Aura == &amp;quot;Devo&amp;quot; then
	if not DevoBuff then
		CastSpellByID(48942)
		return true
	end
end
if Aura == &amp;quot;Ret&amp;quot; then
	if not RetBuff then
		CastSpellByID(54043)
		return true
	end
end
if Aura == &amp;quot;Conc&amp;quot; then
	if not ConcBuff then
		CastSpellByID(19746)
		return true
	end
end
if Aura == &amp;quot;Shadow&amp;quot; then
	if not ShadowBuff then
		CastSpellByID(48943)
		return true
	end
end
if Aura == &amp;quot;Frost&amp;quot; then
	if not FrostBuff then
		CastSpellByID(48945)
		return true
	end
end
if Aura == &amp;quot;Fire&amp;quot; then
	if not FireBuff then
		CastSpellByID(48947)
		return true
	end
end
if Aura == &amp;quot;Crusader&amp;quot; then
	if not CrusaderBuff then
		CastSpellByID(32223)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Avenging Wrath</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local debuffs = { 53742,
}

for i=1, #debuffs do
	local MS, _, _, Stack = UnitDebuffID( &amp;quot;target&amp;quot;, debuffs[i], &amp;quot;player&amp;quot; )
	
	if MS ~= nil then
		if Stack == 5 then	
			_castSpell(31884)
		end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Judgement</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(53408) 
and OpenerFinished  then
	_castSpell(53408, &amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Start Fight --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsMounted()
or SpellIsTargeting()
or UnitInVehicle(&amp;quot;player&amp;quot;)
or UnitIsDead(&amp;quot;target&amp;quot;) 
or UnitIsDead(&amp;quot;player&amp;quot;)
or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
or not UnitExists(&amp;quot;target&amp;quot;) then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Consecration</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(48819)
and OpenerFinished 
and IsSpellInRange(GetSpellInfo(35395),&amp;quot;target&amp;quot;)  == 1  then
	_castSpell(48819)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Hammer of Wrath</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local unithealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)


if PQR_SpellAvailable(48806)
and unithealth &amp;lt;= 20
and OpenerFinished  then
	_castSpell(48806, &amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Cleanse</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ValidDispel(&amp;quot;player&amp;quot;) then
    _castSpell(51886, &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Defencive Cooldowns</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local myHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

if UseDefenciveCDs then



if  cdRemains(474) == 0
and myHP &amp;lt; DivineProtectionHP then
	_castSpell(474, &amp;quot;player&amp;quot;)
	return true
end

if  cdRemains(48788) == 0
and myHP &amp;lt; LayOnHandsHP then
	_castSpell(48788, &amp;quot;player&amp;quot;)
	return true
end

if cdRemains(53601) == 0
and not UnitBuffID(&amp;quot;player&amp;quot;, 53601)
and myHP &amp;lt; SacredShieldHP then
	_castSpell(53601, &amp;quot;player&amp;quot;)
	return true
end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Cursader Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(35395) 
and OpenerFinished  then
	_castSpell(35395, &amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Dicine Plea</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PlayerMana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)

if cdRemains(54428) == 0
and PlayerMana &amp;lt;= 75  then
	_castSpell(54428)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Buffs</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Might
if not UnitBuffID(&amp;quot;player&amp;quot;, 48932)
and not UnitBuffID(&amp;quot;player&amp;quot;, 48934) then
	_castSpell(48932, &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Divine Storm</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(53385)
and OpenerFinished  then
	_castSpell(53385)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Exorcism</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(48801)
and UnitBuffID(&amp;quot;player&amp;quot;, 59578) 
and OpenerFinished then
	_castSpell(48801,&amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>AoE Seals</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>SoC = UnitBuffID(&amp;quot;player&amp;quot;, 20375)


if IsSpellKnown(20375) then
	if not SoC then
		_castSpell(20375)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Init --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not retinit then
	retinit = true
	OpenerFinished = true

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Opener</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not OpenerFinished then

if OpenConc 
and OpenDS 
and OpenJudgement 
and OpenCS then
	OpenerFinished = true
	return true
end

--Conq
if cdRemains(48819) ==0
and IsSpellInRange(GetSpellInfo(35395),&amp;quot;target&amp;quot;)  == 1 
and not OpenConc then
	_castSpell(48819)
	OpenConc = true
	return true
end

--DS
if cdRemains(53385) == 0
and OpenConc
and not OpenDS then
	_castSpell(53385)
	OpenDS  = true
	return true
end

--Judgement
if cdRemains(53408)  == 0
and OpenConc
and OpenDS
and not OpenJudgement  then
	_castSpell(53408)
	OpenJudgement = true
	return true
end

--Crusader Strike
if cdRemains(35395) == 0
and OpenConc
and OpenDS
and OpenJudgement 
and not OpenCS  then
	_castSpell(35395, &amp;quot;target&amp;quot;)
	OpenCS  = true
	return true
end

--End of opener
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Init Boss--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not retinit then
	retinit = true
	OpenerFinished = false
	OpenConc = false
	OpenDS = false
	OpenJudgement = false
	OpenCS = false
end

if not inCombat()
and OpenerFinished == true then
	OpenerFinished = false
	OpenConc = false
	OpenDS = false
	OpenJudgement = false
	OpenCS = false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability></PALADIN>