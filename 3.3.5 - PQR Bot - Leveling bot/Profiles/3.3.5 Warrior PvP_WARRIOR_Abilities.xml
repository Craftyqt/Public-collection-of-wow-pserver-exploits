<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>Mortal Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if inMelee()
and cdRemains(47486) == 0 
and rage &amp;gt;= 30  then
	DebugPrint(&amp;quot;Casting Mortal strike&amp;quot;)
	_castSpell(47486,&amp;quot;target&amp;quot;)
	return true

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>--functions--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not FuncLoaded then
	FuncLoaded = true
	
	function BurstModeText()
		if AutoBurstMode then
			return &amp;quot;|cffFFBE69BurstMode: |cFF00FF00Enabled&amp;quot;
		else
			return &amp;quot;|cffFFBE69BurstMode: |cffb73737Disabled&amp;quot; 
		end
	end	



	function IsTwoHanderEquiped()
		if IsEquippedItem(TwoHander) then
			return true
		end
	end

	function IsOneHandAndShieldEquiped()
		if IsEquippedItem(OneHander) 
		and IsEquippedItem(Shield) then
			return true
		end
	end

	function EquipTwoHander()
		EquipItemByName(TwoHander)
		print(&amp;quot;Equiping 2h&amp;quot;)
		return
	end

	function EquipOneHandAndShield()
		EquipItemByName(OneHander)
		EquipItemByName(Shield)
		print(&amp;quot;Equiping 1h/shield&amp;quot;)
		return
	end	

	function StringSplicer(s,sep)
	  sep=sep or&amp;quot;,&amp;quot;
	  local table={}
	  local i=1;
	  for s in string.gmatch(s,&amp;quot;([^&amp;quot;..sep..&amp;quot;!%s]+)&amp;quot;)do 
	    table[i]=s;
	    i=i+1 
	  end 
	  return table 
	end 
	

	function DebugPrint(s)
		if debug then
			PQR_WriteToChat(s)
		end
	end
	
	function CalculateHP(t)
		local ActualWithIncoming = 100 * UnitHealth(t) / UnitHealthMax(t)
		if ActualWithIncoming then
			return ActualWithIncoming
		else
			return 100
		end
	end
		
	function CanHeal(t)
		if not UnitIsCharmed(t) 
		and not UnitIsDeadOrGhost(t) 
		and not UnitDebuffID(t, 33786) then --Clone
			return true 
		end 
	end




	--New Healing Engine
	function SheuronEngine(MO, TARGETHEAL, LOWHP, HEALPET)
		local MouseoverCheck = MO or false
		local LowHPTarget = LOWHP or 80
		local TargetHealCheck = TARGETHEAL or false
		local HEALPET = HEALPET or true
		lowhpmembers = 0
		
		playerHP = CalculateHP(&amp;quot;player&amp;quot;)
			
		members = { { 	
			Unit = &amp;quot;player&amp;quot;, 
			HP = playerHP, 
			GUID = UnitGUID(&amp;quot;player&amp;quot;), 
			IsPlayer = true, 
			} } 
			
		--Adding player to low hp table
		if playerHP &amp;lt; LowHPTarget then
			lowhpmembers = lowhpmembers + 1
		end	
			
			
		local group = &amp;quot;party&amp;quot;
		local groupmembers = GetNumPartyMembers()

		if GetNumRaidMembers() &amp;gt; 0 then
			group = &amp;quot;raid&amp;quot;
			groupmembers = GetNumRaidMembers()
		end
			
			
		for i = 1, groupmembers do 
			local member, memberhp, uidmember = group..i, CalculateHP(group..i), UnitGUID(group..i)	
			-- Checking all Party/Raid Members for Range/Health
			if ((UnitExists(member) and CanHeal(member)) or UnitIsUnit(&amp;quot;player&amp;quot;,member))
			and member ~= nil and memberhp ~= nil and uidmember ~= nil then 	
				table.insert( members,{ Unit = member, HP = memberhp, GUID = uidmember, IsPlayer = true } ) 
					
				-- Setting Low HP Members variable for AoE Healing
				if memberhp &amp;lt; LowHPTarget then
					lowhpmembers = lowhpmembers + 1
				end	
			end 
				
			-- Checking Pets in the group
			if HEALPET and lowhpmembers == 0 and UnitExists(group..i..&amp;quot;pet&amp;quot;) and CanHeal(group..i..&amp;quot;pet&amp;quot;) then
				local memberpet, memberpethp,  uidmemberpet = nil, nil, nil
				memberpet = group..i..&amp;quot;pet&amp;quot; 
				memberpethp = CalculateHP(memberpet)		
				uidmemberpet = UnitGUID(memberpet)
						
				if memberpet ~= nil and memberpethp ~= nil and uidmemberpet ~= nil then
					table.insert(members, { Unit = memberpet, HP = memberpethp, GUID = uidmemberpet, IsPlayer = false } )
				end			
			end
		end 
		-- Checking Priority Targeting
		if TargetHealCheck and CanHeal(&amp;quot;target&amp;quot;) then
			table.sort(members, function(x) return UnitIsUnit(&amp;quot;target&amp;quot;,x.Unit) end)
		elseif MouseoverCheck and CanHeal(&amp;quot;mouseover&amp;quot;) and GetMouseFocus() ~= WorldFrame then
			table.sort(members, function(x) return UnitIsUnit(&amp;quot;mouseover&amp;quot;,x.Unit) end)
		end
	end


	--CastSpell--
	function _castSpell(spellid,tar)
		if UnitCastingInfo(&amp;quot;player&amp;quot;) == nil
		and UnitChannelInfo(&amp;quot;player&amp;quot;) == nil
		--and IsPlayerSpell(spellid) == true
		and cdRemains(spellid) == 0
		then
			if tar ~= nil
			and rangeCheck(spellid,tar) == nil
				then
				return false
			elseif tar ~= nil
			and rangeCheck(spellid,tar) == true
				then
				CastSpellByID(spellid, tar)
				return true
			elseif tar == nil
				then
				CastSpellByID(spellid)
				return true
			else
		return false
		end
	end
	end
	
	
	--Combat Check--
	function inCombat()
	if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil
		then
			return true
		end
	end
	
	--Get HP simple--
	function getHp(unit)
	if UnitExists(unit) ~= nil
		then
			return 100 * UnitHealth(unit) / UnitHealthMax(unit)
		end
	end
	
	--Range Check Simple--
	function rangeCheck(spellid,unit)
	if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
	then
		return true
	end
	end
	
	
--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) &amp;gt; 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end


function inMelee()
	if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil
	and IsSpellInRange(GetSpellInfo(47450),&amp;quot;target&amp;quot;) == 1
	and UnitExists(&amp;quot;target&amp;quot;) ~= nil
	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) ~= nil
	then return true
	end
end

	 --Function Check Snares--
	local PvPslows 			= {
		45524,			-- Chains of Ice
		50435,			-- Chilblains
		50259,			-- Dazed 
		58180,			-- Infected Wounds
		5116,			-- Concussive Shot
		120,				-- Cone of Cold
		116,				-- Frostbolt
		44614,			-- Frostfire Bolt
		3409,			-- Crippling Poison
		8056,			-- Frost Shock
		51490,			-- Thunderstorm
		1715,			-- Hamstring
		1604,			-- Dazed 
		12323,          -- Piercing Howl
					}
	function isSlowed(unit)
	for i=1,#PvPslows do
		if UnitDebuffID(unit,PvPslows[i]) ~= nil
			then
				return true
			end
		end
	end
	


--End for FuncLoad
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Rend</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if inMelee()
and cdRemains(47465) == 0 
and not UnitDebuffID(&amp;quot;target&amp;quot;, 47465) 
and rage &amp;gt;= 10 then
	DebugPrint(&amp;quot;Casting Rend&amp;quot;)
	_castSpell(47465,&amp;quot;target&amp;quot;)
	return true

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Hamstring</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if inMelee()
and cdRemains(1715) == 0 
and not isSlowed(&amp;quot;target&amp;quot;)
and not UnitBuffID(&amp;quot;target&amp;quot;, 1044) 
and rage &amp;gt;= 7 then
	DebugPrint(&amp;quot;Casting Hamstring&amp;quot;)
	_castSpell(1715,&amp;quot;target&amp;quot;)
	return true

end

if not inMelee()
and CheckInteractDistance(&amp;quot;target&amp;quot;, 3) 
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;)
and cdRemains(12323) == 0 
and not isSlowed(&amp;quot;target&amp;quot;)
and not UnitBuffID(&amp;quot;target&amp;quot;, 1044) 
and rage &amp;gt;= 10 then
	DebugPrint(&amp;quot;Casting Piercing Howl&amp;quot;)
	_castSpell(12323)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Overpower</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if inMelee()
and cdRemains(7384) == 0 
and UnitBuffID(&amp;quot;player&amp;quot;,60503)  
and rage &amp;gt;= 5  then
	DebugPrint(&amp;quot;Casting Overpower&amp;quot;)
	_castSpell(7384,&amp;quot;target&amp;quot;)
	return true

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Rage Dumps</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if rage &amp;lt; 50
and IsCurrentSpell(GetSpellInfo(47450)) then
	SpellStopCasting()
end


if rage &amp;gt;= 50  then

--heroic throw
if cdRemains(57755) == 0  then
	DebugPrint(&amp;quot;Casting Heroic Throw, Rage Dump&amp;quot;)
	_castSpell(57755,&amp;quot;target&amp;quot;)
	return true

end

--Mocking Blow
if cdRemains(694) == 0  
and inMelee() then
	DebugPrint(&amp;quot;Casting Mocking Blow, Rage Dump&amp;quot;)
	_castSpell(694,&amp;quot;target&amp;quot;)
	return true

end

--Heroic Strike
if cdRemains(47450) == 0  
and inMelee()
and not IsCurrentSpell(GetSpellInfo(47450)) then
	DebugPrint(&amp;quot;Casting Heroic Strike, Rage Dump&amp;quot;)
	_castSpell(47450,&amp;quot;target&amp;quot;)
	return true

end

--Thunder Clap
if cdRemains(47502) == 0 
and inMelee()  then
	DebugPrint(&amp;quot;Casting Thunder Clap, Rage Dump&amp;quot;)
	_castSpell(47502)
	return true

end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>--init--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>rage = UnitPower(&amp;quot;player&amp;quot;)
debug = false

--This makes the Bot Determine when to burst
AutoBurstMode = true

--AT Defaults
--  &amp;quot;Relentless Gladiator&amp;apos;s Longblade&amp;quot;   --1h
--  &amp;quot;Crystal Plated Vanguard&amp;quot; -- shield
-- &amp;quot;Relentless Gladiator&amp;apos;s Sunderer&amp;quot; -- 2h


-- replace nil with your weapon in &amp;quot;&amp;quot; 
-- Example : OneHander = &amp;quot;Relentless Gladiator&amp;apos;s Longblade&amp;quot;

OneHander = nil
Shield = nil
TwoHander = nil

--Do not edit below here



if OneHander == nil
or Shield == nil
or TwoHander == nil then
	print(&amp;quot;Stop the Rotation. &amp;quot;)
print(&amp;quot;Please open the Rotation editor Go to Warrior -&amp;gt; 3.3.5 WArrior PvP -&amp;gt; init and enter your weapons.&amp;quot;)


end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Shouts</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if cdRemains(47436) == 0
and not UnitBuffID(&amp;quot;player&amp;quot;, 47436)
and rage &amp;gt;= 10 then
	DebugPrint(&amp;quot;Casting Battle Shout&amp;quot;)
	_castSpell(47436)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Spell Reflect Macro</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if macros[&amp;quot;spellreflect&amp;quot;]
and cdRemains(23920) &amp;gt; 4
and not UnitBuffID(&amp;quot;player&amp;quot;, 23920)  then 
	ResetMacros()
	MacroStatusFrameUpdate()
	if not IsTwoHanderEquiped() then
		EquipTwoHander()
	end
end 
if cdRemains(23920) == 0
and macros[&amp;quot;spellreflect&amp;quot;] then 
	local t = StringSplicer(GetCVar(&amp;quot;SRtargs&amp;quot;)) 
	for i=0,#t do 
		local SRTarget = t[i] 
		
		if SRTarget == &amp;quot;debug&amp;quot; 
		and rage &amp;gt;= 10 then
			if not IsOneHandAndShieldEquiped() then
				EquipOneHandAndShield()
			end		
			_castSpell(23920)
		end
		
		if UnitExists(SRTarget )
		and UnitCanAttack(&amp;quot;player&amp;quot;, SRTarget ) ~= nil  
		and UnitCastingInfo(SRTarget) 
		and rage &amp;gt;= 10 then

		local castName,_,_,_,castStartTime,castEndTime,_,_,castNotInterruptable = UnitCastingInfo(SRTarget)
		local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
		local castTime = castEndTime - castStartTime	
		local currentPercent = timeSinceStart / castTime * 100000

			if currentPercent &amp;gt;= 70  then
				if not IsOneHandAndShieldEquiped() then
					EquipOneHandAndShield()
				end		
				_castSpell(23920)
			end
		end 
	end 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>--Macros--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not MacroInit then
	MacroInit = true

	CreateFont(&amp;quot;cpoworksPvP&amp;quot;)
	cpoworksPvP:SetFont(&amp;quot;Fonts\\calibrib.ttf&amp;quot;,12,&amp;quot;OUTLINE&amp;quot;) 
	cpoworksPvP:SetJustifyH(&amp;quot;LEFT&amp;quot;)
	
	if cpoworksPvP:GetFont()~=nil then 
	  	if StatusFrame==nil then 
		    StatusFrame=CreateFrame(&amp;quot;Frame&amp;quot;)
		    StatusFrame:ClearAllPoints() 
		    StatusFrame:SetHeight(12)
		    StatusFrame:SetWidth(300)
		    StatusFrame:Show() 
		    StatusFrame.text=StatusFrame:CreateFontString( nil,&amp;quot;BACKGROUND&amp;quot;,&amp;quot;cpoworksPvP&amp;quot;)
		    StatusFrame.text:SetAllPoints()
		    StatusFrame:SetPoint(&amp;quot;TOP&amp;quot;,ChatFrame1, 0,40) 
		    StatusFrame:SetScript(&amp;quot;OnUpdate&amp;quot;,StatusFrame_OnUpdate)
		    StatusFrame:EnableMouse(true) 
		    StatusFrame:SetMovable(true)
		    StatusFrame:RegisterForDrag(&amp;quot;LeftButton&amp;quot;) 
		    StatusFrame:SetScript(&amp;quot;OnDragStart&amp;quot;,StatusFrame.StartMoving) 
		    StatusFrame:SetScript(&amp;quot;OnDragStop&amp;quot;,StatusFrame.StopMovingOrSizing) 
		    StatusFrame.text:SetText(&amp;quot;|cffFFBE69Macros: |cffb73737None&amp;quot;..&amp;quot;     &amp;quot;..BurstModeText())
	  	end
	  	SLASH_STATUSFRAME1=&amp;quot;/statusframe&amp;quot; 
		SlashCmdList.STATUSFRAME=function() 
		  	if StatusFrame:IsShown()then 
		      	StatusFrame:Hide()
		    else 
		      	StatusFrame:Show()
		    end 
	  	end 
	end 

	function MacroStatusFrameUpdate()
	  	if StatusFrame==nil then 
	      return false 
	    end;
	    local MacroEnabled=false;
	    if macros[&amp;quot;toggle&amp;quot;]then 
	      MacroEnabled=GetCVar(&amp;quot;zugqa&amp;quot;)
	    end 
	    if not MacroEnabled then 
	      macroKeys={&amp;quot;spellreflect&amp;quot;, &amp;quot;fastkick&amp;quot;, &amp;quot;fastcharge&amp;quot;, &amp;quot;fastintercept&amp;quot;} 
	      for i=1, #macroKeys do 
	        if macros[macroKeys[i]]then 
	          MacroEnabled = macroKeys[i] 
	        end 
	      end 
	    end 
	    
	    local function X(E2NZK,WNWWe)
	      return E2NZK:upper()..WNWWe:lower()
	    end 
	    local MacroStatusTextString=(MacroEnabled)and &amp;quot;|cffFFBE69Macros: |cFF00FF00&amp;quot;..MacroEnabled:gsub(&amp;quot;(%a)([%w_&amp;apos;]*)&amp;quot;,X)or&amp;quot;|cffFFBE69Macros: |cffb73737None&amp;quot; 
	    StatusFrame.text:SetText(MacroStatusTextString..&amp;quot;     &amp;quot;..BurstModeText())
	    return true 
	end 


	macros = {
				[&amp;quot;spellreflect&amp;quot;]=false,
				[&amp;quot;toggle&amp;quot;]=false,
				[&amp;quot;fastkick&amp;quot;]=false,
				[&amp;quot;fastcharge&amp;quot;]=false,
				[&amp;quot;fastintercept&amp;quot;]=false,
				}
	
	function ResetMacros()
	  	macros[&amp;quot;spellreflect&amp;quot;]=false
		macros[&amp;quot;fastkick&amp;quot;]=false
		macros[&amp;quot;fastcharge&amp;quot;]=false
		macros[&amp;quot;fastintercept&amp;quot;]=false
		macros[&amp;quot;toggle&amp;quot;]=false
	end
				
	if lastMacro == nil then lastMacro=0 end
	
	SLASH_SPELLREFLECT1=&amp;quot;/SPELLREFLECT&amp;quot; 
	SLASH_SPELLREFLECT2=&amp;quot;/SR&amp;quot; 
	function SlashCmdList.SPELLREFLECT(Msg) 
		if not macros[&amp;quot;spellreflect&amp;quot;]then 
	      	ResetMacros()
		   	if not GetCVar(&amp;quot;SRtargs&amp;quot;) then 
		     	RegisterCVar(&amp;quot;SRtargs&amp;quot;,nil)
		    end 
		    if string.len(Msg)&amp;gt;0 then 
		        SetCVar(&amp;quot;SRtargs&amp;quot;,Msg)
		    else 
		        SetCVar(&amp;quot;SRtargs&amp;quot;,&amp;quot;mouseover, focus, target&amp;quot;)
		    end
			macros[&amp;quot;spellreflect&amp;quot;]=true;
			lastMacro=GetTime()
			MacroStatusFrameUpdate()
		 elseif (GetTime() - lastMacro) &amp;gt; 2 then 
      		macros[&amp;quot;spellreflect&amp;quot;]=false
      		MacroStatusFrameUpdate()
      	end 
	end
	
	SLASH_FASTKICK1=&amp;quot;/FASTKICK&amp;quot; 
	function SlashCmdList.FASTKICK(Msg) 
		if not macros[&amp;quot;fastkick&amp;quot;]then 
	      	ResetMacros()
		   	if not GetCVar(&amp;quot;FKtargs&amp;quot;) then 
		     	RegisterCVar(&amp;quot;FKtargs&amp;quot;,nil)
		    end 
		    if string.len(Msg)&amp;gt;0 then 
		        SetCVar(&amp;quot;FKtargs&amp;quot;,Msg)
		    else 
		        SetCVar(&amp;quot;FKtargs&amp;quot;,&amp;quot;mouseover, focus, target&amp;quot;)
		    end
			macros[&amp;quot;fastkick&amp;quot;]=true;
			lastMacro=GetTime()
			MacroStatusFrameUpdate()
		 elseif (GetTime() - lastMacro) &amp;gt; 2 then 
      		macros[&amp;quot;fastkick&amp;quot;]=false
      		MacroStatusFrameUpdate()
      	end 
	end
	
	SLASH_FASTCHARGE1=&amp;quot;/FASTCHARGE&amp;quot; 
	function SlashCmdList.FASTCHARGE(Msg) 
		if not macros[&amp;quot;fastcharge&amp;quot;]then 
	      	ResetMacros()
		   	if not GetCVar(&amp;quot;FCtargs&amp;quot;) then 
		     	RegisterCVar(&amp;quot;FCtargs&amp;quot;,nil)
		    end 
		    if string.len(Msg)&amp;gt;0 then 
		        SetCVar(&amp;quot;FCtargs&amp;quot;,Msg)
		    else 
		        SetCVar(&amp;quot;FCtargs&amp;quot;,&amp;quot;mouseover, focus, target&amp;quot;)
		    end
			macros[&amp;quot;fastcharge&amp;quot;]=true;
			lastMacro=GetTime()
			MacroStatusFrameUpdate()
		 elseif (GetTime() - lastMacro) &amp;gt; 2 then 
      		macros[&amp;quot;fastcharge&amp;quot;]=false
      		MacroStatusFrameUpdate()
      	end 
	end
	
	SLASH_FASTINTERCEPT1=&amp;quot;/FASTINTERCEPT&amp;quot; 
	function SlashCmdList.FASTINTERCEPT(Msg) 
		if not macros[&amp;quot;fastintercept&amp;quot;]then 
	      	ResetMacros()
		   	if not GetCVar(&amp;quot;FItargs&amp;quot;) then 
		     	RegisterCVar(&amp;quot;FItargs&amp;quot;,nil)
		    end 
		    if string.len(Msg)&amp;gt;0 then 
		        SetCVar(&amp;quot;FItargs&amp;quot;,Msg)
		    else 
		        SetCVar(&amp;quot;FItargs&amp;quot;,&amp;quot;mouseover, focus, target&amp;quot;)
		    end
			macros[&amp;quot;fastintercept&amp;quot;]=true;
			lastMacro=GetTime()
			MacroStatusFrameUpdate()
		 elseif (GetTime() - lastMacro) &amp;gt; 2 then 
      		macros[&amp;quot;fastintercept&amp;quot;]=false
      		MacroStatusFrameUpdate()
      	end 
	end
	
	SLASH_SETUPMACROS1=&amp;quot;/SETUPMACROS&amp;quot; 
	function SlashCmdList.SETUPMACROS(Msg) 
		print(&amp;quot;Setting up Macros&amp;quot;)

		
		if not GetMacroInfo(&amp;quot;Spell Reflect&amp;quot;) then
			CreateMacro(&amp;quot;Spell Reflect&amp;quot;, 1, &amp;quot;#showtooltip Spell Reflection \n/spellreflect target&amp;quot;, 1)
		end
		if not GetMacroInfo(&amp;quot;Fast Kick&amp;quot;) then
			CreateMacro(&amp;quot;Fast Kick&amp;quot;, 1, &amp;quot;#showtooltip Pummel \n/fastkick target&amp;quot;, 1)
		end
		if not GetMacroInfo(&amp;quot;Fast Charge&amp;quot;) then
			CreateMacro(&amp;quot;Fast Charge&amp;quot;, 1, &amp;quot;#showtooltip Charge \n/fastcharge target&amp;quot;, 1)
		end
		if not GetMacroInfo(&amp;quot;Fast Intercept&amp;quot;) then
			CreateMacro(&amp;quot;Fast Intercept&amp;quot;, 1, &amp;quot;#showtooltip Intercept \n/fastintercept target&amp;quot;, 1)
		end
		
		
	end
	
	

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Interupt or Overpower</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if cdRemains(72) &amp;gt; 3
and not IsTwoHanderEquiped() then
	EquipTwoHander()
end

if cdRemains(6552) &amp;gt; 3
and GetShapeshiftForm() ~= 1 then
		CastShapeshiftForm(1)
end



if UnitCastingInfo(&amp;quot;target&amp;quot;) then
	local castName,_,_,_,castStartTime,castEndTime,_,_,castNotInterruptable = UnitCastingInfo(&amp;quot;target&amp;quot;)
	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
	local castTime = castEndTime - castStartTime	
	local currentPercent = timeSinceStart / castTime * 100000
	
	KickPercent =   random(25, 95)

	
	
	if currentPercent &amp;gt;= KickPercent then
	
		--Shield Bash
		if cdRemains(72) == 0 
		and inMelee() then
		
			if not IsOneHandAndShieldEquiped() then
				EquipOneHandAndShield()
			end
			DebugPrint(&amp;quot;Casting Shield Bash at &amp;quot;..KickPercent..&amp;quot;%&amp;quot;)
			_castSpell(72,&amp;quot;target&amp;quot;)
			return true
		end
	
		--Pummel
		if cdRemains(6552) == 0 
		and cdRemains(72) &amp;gt; 3
		and inMelee() then
		
			if GetShapeshiftForm() ~= 3 then
				CastShapeshiftForm(3)
			end
			DebugPrint(&amp;quot;Casting Pummel at &amp;quot;..KickPercent..&amp;quot;%&amp;quot;)
			_castSpell(6552,&amp;quot;target&amp;quot;)
			return true
		end
		
		
		
		
		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Burst</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AutoBurstMode then
	BladeStormCD = cdRemains(46924)
	SweepingStrikesCD = cdRemains(12328)
	ReckCD = cdRemains(1719)
	
	if  BladeStormCD == 0 
	and SweepingStrikesCD == 0 
	and isSlowed(&amp;quot;target&amp;quot;) 
	and inMelee() 
	and UnitBuffID(&amp;quot;player&amp;quot;, 57522) --Enrage
	then 
	
		--Pooling
		if rage &amp;lt; 55 then
			_castSpell(2687)
			return true
		end
		
		--Going ham
		if rage &amp;gt;= 55 then
			if not IsTwoHanderEquiped() then
				EquipTwoHander()
			end
			_castSpell(12328)
			_castSpell(46924)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Fast Charge</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if macros[&amp;quot;fastcharge&amp;quot;]
and cdRemains(11578) &amp;gt; 4  then 
	ResetMacros()
	MacroStatusFrameUpdate()
end 
if cdRemains(11578) == 0
and macros[&amp;quot;fastcharge&amp;quot;] then 
	local t = StringSplicer(GetCVar(&amp;quot;FCtargs&amp;quot;)) 
	for i=0,#t do 
		local FCtargs= t[i] 
		
		
		if UnitExists(FCtargs)
		and UnitCanAttack(&amp;quot;player&amp;quot;, FCtargs) ~= nil   then

			_castSpell(11578, FCtargs)
		end 
	end 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Fast Intercept</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if  cdRemains(20252) &amp;gt; 4  then 

	if  GetShapeshiftForm() ~= 1 then
		CastShapeshiftForm(1)
	end
 	if macros[&amp;quot;fastintercept&amp;quot;] then

	ResetMacros()
	MacroStatusFrameUpdate()
	end
end 
if cdRemains(20252) == 0
and macros[&amp;quot;fastintercept&amp;quot;]
and rage &amp;gt;= 10  then 
	local t = StringSplicer(GetCVar(&amp;quot;FItargs&amp;quot;)) 
	for i=0,#t do 
		local FItargs= t[i] 
		
		
		if UnitExists(FItargs)
		and UnitCanAttack(&amp;quot;player&amp;quot;, FItargs) ~= nil   then
			if  GetShapeshiftForm() ~= 3 then
				CastShapeshiftForm(3)
			end
			_castSpell(20252, FItargs)
		end 
	end 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability></WARRIOR>