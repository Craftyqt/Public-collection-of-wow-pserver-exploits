<?xml version="1.0" encoding="utf-8" ?><HUNTER><Ability><Name>-- Initialisation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  Init --
--------------------------------------------------------------------
-- Credits goes to Team Nova for most of the Init and Frame setup --
--------------------------------------------------------------------
if PQR_RotationStarted == true then
	_AbilityList = false
	PQR_RotationStarted = false
	PQR_InterruptDelay =  0
	PQR_ResetMovementTime = 0.025
--	RunMacroText(&amp;quot;/script UIErrorsFrame:Hide();&amp;quot;)
	LastTarget = GetTime() - 2
	SteadyCast = 0
	SerpentCast = 0
	FervorCast = 0
	VerNum = 2.01
	--SpellFailPrinter = true
	PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;CodeMyLife Hunter &amp;quot;..VerNum,nil,&amp;quot;7EBF37&amp;quot;)
end

if macros == nil then

	-- Macros
	macros = { 
	    [&amp;quot;AoE&amp;quot;]    				= 1,  
	    [&amp;quot;ActiveCooldowns&amp;quot;]   	= false,
	    [&amp;quot;CallPet1Queue&amp;quot;]		= false,
		[&amp;quot;CallPet2Queue&amp;quot;]		= false,
		[&amp;quot;CallPet3Queue&amp;quot;]		= false,
		[&amp;quot;CallPet4Queue&amp;quot;]		= false,
		[&amp;quot;CallPet5Queue&amp;quot;]		= false,
	    [&amp;quot;Camouflage&amp;quot;]			= false,
		[&amp;quot;ConcShotQueue&amp;quot;]		= false,
		[&amp;quot;DisengageQueue&amp;quot;] 		= false, 
		[&amp;quot;DismissPetQueue&amp;quot;]		= false,
		[&amp;quot;DistractingShotQueue&amp;quot;]= false,	
		[&amp;quot;ExplosiveTrapQueue&amp;quot;]	= false,
		[&amp;quot;FreezingTrapQueue&amp;quot;]	= false,
		[&amp;quot;IceTrapQueue&amp;quot;]		= false,
		[&amp;quot;SnakesTrapQueue&amp;quot;]		= false,
		[&amp;quot;Pause&amp;quot;]				= false,
		[&amp;quot;ScatterQueue&amp;quot;]		= false,
		[&amp;quot;StampedeQueue&amp;quot;]		= false,
		[&amp;quot;WidowVenomQueue&amp;quot;] 	= false, 
	} 
	if not _AoE then _AoE = false end
	
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_CodeMyLife_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_CodeMyLife_Data.lua. Get this file on my SVN and put it into PQR/Data folder. Until then my profiles will not work.&amp;quot;, &amp;quot;Error&amp;quot;)
		else 
			if not BoomedYet then
	 			BoomGoesTheDynamite()
	 			BoomedYet = true
			end
		end
	end	
end

CML_MeleeSpellsTable = { 0, 35395, 19503, 1776, 0, 0, 0, 0, 0, 0, }
CML_RangedSpellsTable = { 0, 20271, 3044, 121733 , 0, 0, 0, 0, 0, 0 }

if UnitExists(&amp;quot;target&amp;quot;) then LastTarget = GetTime() end

-- Latency Adjuster
local minValue = 0.05
local maxValue = 0.3
local curPing = tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000) + .025
if curPing &amp;lt; minValue then curPing = minValue elseif curPing &amp;gt; maxValue then curPing = maxValue end
PQR_SpellAvailableTime = curPing	

_MyClass = select(3,UnitClass(&amp;quot;player&amp;quot;))
_Chat = print
_HP = ( 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) )
_Mana = ( 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) )
_SA = PQR_SpellAvailable
_UB = UnitBuffID
_UDB = UnitDebuffID
_GI	= GetSpellInfo
_Spec = GetSpecialization()
_Focus = UnitPower(&amp;quot;player&amp;quot;)
_FocusMax = UnitPowerMax(&amp;quot;player&amp;quot;)
_Members = GetNumGroupMembers()
if _Members == 0 then _Members = 1 end
if _Spec == 1 then
	PQR_SwapRotation(&amp;quot;Beast Master (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 1
	_AbilityList = false
end
if _Spec == 2 then
	PQR_SwapRotation(&amp;quot;Marksmanship (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 2
	_AbilityList = false
end
if _Spec == 3 then
	PQR_SwapRotation(&amp;quot;Survival (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 3
	_AbilityList = false
end
if _Spec == nil then
	PQR_SwapRotation(&amp;quot;Survival (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 3
	_AbilityList = false
end

--------------------
-- Slash Commands --
--------------------
if SlashMacros == nil then
	SlashMacros = true
	
	SLASH_ACTIVECOOLDOWNS1 = &amp;quot;/activecooldowns&amp;quot;
	SLASH_ACTIVECOOLDOWNS2 = &amp;quot;/activecooldown&amp;quot;
	function SlashCmdList.ACTIVECOOLDOWNS(msg, editbox)
		if not macros[&amp;quot;ActiveCooldowns&amp;quot;] then
			xrn:message(&amp;quot;|cff9933ffCooldowns - Active.&amp;quot;)
			macros[&amp;quot;ActiveCooldowns&amp;quot;] = true
		else			
			xrn:message(&amp;quot;|cff9933ffCooldowns - Inactive.&amp;quot;)
			macros[&amp;quot;ActiveCooldowns&amp;quot;] = false
		end
	end
	
	SLASH_AOE1 = &amp;quot;/aoe&amp;quot;
	function SlashCmdList.AOE(msg, editbox)
	    if macros[&amp;quot;AoE&amp;quot;] == 1 then 
	        macros[&amp;quot;AoE&amp;quot;] = 2 
	        xrn:message(&amp;quot;\124cFF3BB0FFArea of Effect&amp;quot;)
	    else 
	    	macros[&amp;quot;AoE&amp;quot;] = 1 
	        xrn:message(&amp;quot;\124cFF3BB0FFSingle Target&amp;quot;)
	    end
	end 
	
	SLASH_CAMOUFLAGE1 = &amp;quot;/camouflage&amp;quot;
	SLASH_CAMOUFLAGE2 = &amp;quot;/camo&amp;quot;
	function SlashCmdList.CAMOUFLAGE(msg, editbox)
		if macros[&amp;quot;Camouflage&amp;quot;] == false then 
	        macros[&amp;quot;Camouflage&amp;quot;] = true 
	        xrn:message(&amp;quot;\124cFF6699FFCamouflage Active&amp;quot;)
	    else 
	        macros[&amp;quot;Camouflage&amp;quot;] = false
	        xrn:message(&amp;quot;\124cFFFFFFFFCamouflage Inactive&amp;quot;)
	    end
	end	
	
	SLASH_PAUSE1 = &amp;quot;/pause&amp;quot;
	function SlashCmdList.PAUSE(msg, editbox)
		if not macros[&amp;quot;Pause&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFF3300Profile Paused.&amp;quot;)
			macros[&amp;quot;Pause&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFF0033FFProfile Resumed.&amp;quot;)
			macros[&amp;quot;Pause&amp;quot;] = false		
		end
	end
	
	SLASH_SETTALENTS1 = &amp;quot;/settalents&amp;quot;
	SLASH_SETTALENTS2 = &amp;quot;/settalent&amp;quot;
	function SlashCmdList.SETTALENTS(msg, editbox)
		CML_ToggleSwapper()
	end	
end

if SetTalentsTrue then 
	if _Spec == 1 then CML_TalentSwap(3,1,2,1,3,1) end
	if _Spec == 2 then CML_TalentSwap(1,1,2,2,1,3) end
	if _Spec == 3 then CML_TalentSwap(2,3,2,2,1,3) end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Events Handler</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CML_Debug then	
	if DebugSpell ~= 0 and CML_LastSpell ~= nil then
		PQR_WriteToChat(&amp;quot;Casted: |cffffcc00 &amp;quot; .. CML_LastSpell)
		DebugSpell = 0
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Functions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Functions --
if not NoFacingCheckCheck then
	uid = PQR_UnitInfo()
end

if not Functions then
	Functions = true
	
CML_ActiveCooldowns = nil
    function CML_ActiveCooldowns()
        if UnitExists(&amp;quot;target&amp;quot;) ~= 1 or CML_HaveDebuff(&amp;quot;target&amp;quot;,_SerpentSting,0,&amp;quot;player&amp;quot;) ~= true then return false end

        if RacialsCheck and RacialsValue == 2 then
            if not _Hero then CML_Berserking() end
            CML_BloodFury()
        end

        if TrinketsCheck and ( TrinketsValue == 2 or TrinketsValue == 6 ) then
            RunMacroText(&amp;quot;/use 13&amp;quot;) 
        end

        if TrinketsCheck and (  TrinketsValue == 4 or TrinketsValue == 6 ) then
            RunMacroText(&amp;quot;/use 14&amp;quot;) 
        end

        if SynapseSpringsCheck and SynapseSpringsValue == 2 then
            RunMacroText(&amp;quot;/use 10&amp;quot;)
        end
        if FocusFireCheck and FocusFireValue == 2 and not _Hero then
            if select(4,UnitBuffID(&amp;quot;player&amp;quot;,19615)) == 5 
              and not CML_HaveBuff(&amp;quot;player&amp;quot;, 34471) 
              and GetSpellCD(_KillCommand) &amp;gt; 1
              and ( GetSpellCD(19574) &amp;gt; 20 or not BestialWrathCheck or BestialWrathValue == 3 or ( BestialWrathValue == 1 and not macros[&amp;quot;ActiveCooldowns&amp;quot;] )  ) 
              and CML_HaveBuff(&amp;quot;player&amp;quot;, 3045) ~= true 
              and ( GetSpellCD(3045) &amp;gt;= 5 or not RapidFireCheck or RapidFireValue == 3 or ( RapidFireValue == 1 and not macros[&amp;quot;ActiveColldowns&amp;quot;] )  ) then
                _Cast(82692, &amp;quot;player&amp;quot;)
            end
        end
        if _Spec == 1 and StampedeCheck and StampedeValue == 2 then
            if StampedeCheck and Spells[_Stampede].known  and _SA(_Stampede) and GetSpellCD(19574) &amp;gt; 1.6  then
                _Cast(_Stampede, nil)
            end 
        end
        if BestialWrathCheck and BestialWrathValue == 2 and Spells[_BestialWrath].known  and _SA(_BestialWrath) and GetSpellCD(19574) &amp;lt; 0.1 then
            if GetSpellCD(_KillCommand) &amp;lt; 2 then
                _Cast(_BestialWrath, nil)
                BWCast = GetTime()
                RunMacroText(&amp;quot;/cast &amp;quot;..GetSpellInfo(53401))         
            end
        end
        if RapidFireCheck and RapidFireValue == 2 and not _Hero then
            if Spells[_RapidFire].known  and _SA(_RapidFire) and CML_HaveBuff(&amp;quot;player&amp;quot;, 82692) ~= true 
              and ( ( GetSpellCD(_BestialWrath) &amp;gt; 10 or GetSpellCD(_BestialWrath) &amp;lt; 3 ) or not BestialWrathCheck or BestialWrathValue == 3 or ( BestialWrathValue == 1 and not macros[&amp;quot;ActiveCooldowns&amp;quot;] ) )
              and ( ( GetSpellCD(_Stampede) &amp;gt; 10 or GetSpellCD(_Stampede) &amp;lt; 3 ) or not StampedeCheck or StampedeValue == 3 or ( StampedeValue == 1 and not macros[&amp;quot;ActiveCooldowns&amp;quot;] ) )
            --and ( UnitBuffID(&amp;quot;player&amp;quot;,19615) == nil or select(4,UnitBuffID(&amp;quot;player&amp;quot;,19615)) &amp;lt; 5 or GetSpellCD(19574) &amp;lt; 15 or _Spec ~= 1 ) 
            then 
                _Cast(_RapidFire, &amp;quot;player&amp;quot;)
            end
        end
        if StampedeCheck and StampedeValue == 2 then
            if Spells[_Stampede].known  and _SA(_Stampede) then
                _Cast(_Stampede, nil)
            end 
        end
        if macros[&amp;quot;ActiveCooldowns&amp;quot;] then
            if RacialsCheck and RacialsValue == 1 then
                if not _Hero then CML_Berserking() end 
                CML_BloodFury()
            end
            if TrinketsCheck and ( TrinketsValue == 1 or TrinketsValue == 5 ) then
                RunMacroText(&amp;quot;/use 13&amp;quot;) 
            end
            if TrinketsCheck and (  TrinketsValue == 3 or TrinketsValue == 5 ) then
                RunMacroText(&amp;quot;/use 14&amp;quot;) 
            end
            if SynapseSpringsCheck and SynapseSpringsValue == 1 then
                RunMacroText(&amp;quot;/use 10&amp;quot;)
            end
            if AgiPotHeroCheck then CML_DPSPotion(76089) end
            if StampedeCheck and StampedeValue == 1 then
                if Spells[_Stampede].known  and _SA(_Stampede) and GetSpellCD(121818) &amp;lt; 0.1 then
                    _Cast(_Stampede, nil)
                end 
            end
            if RapidFireCheck and RapidFireValue == 1 and not _Hero then
                if Spells[_RapidFire].known  and _SA(_RapidFire) and CML_HaveBuff(&amp;quot;player&amp;quot;, 82692) ~= true 
              and ( ( GetSpellCD(_BestialWrath) &amp;gt; 10 or GetSpellCD(_BestialWrath) &amp;lt; 3 ) or not BestialWrathCheck or BestialWrathValue == 3 or ( BestialWrathValue == 1 and not macros[&amp;quot;ActiveCooldowns&amp;quot;] ) )
              and ( ( GetSpellCD(_Stampede) &amp;gt; 10 or GetSpellCD(_Stampede) &amp;lt; 3 ) or not StampedeCheck or StampedeValue == 3 or ( StampedeValue == 1 and not macros[&amp;quot;ActiveCooldowns&amp;quot;] ) )
            	--and ( UnitBuffID(&amp;quot;player&amp;quot;,19615) == nil or select(4,UnitBuffID(&amp;quot;player&amp;quot;,19615)) &amp;lt; 5 or GetSpellCD(19574) &amp;lt; 15 or _Spec ~= 1 ) 
                then 
                    _Cast(_RapidFire, &amp;quot;player&amp;quot;)
                end
            end
            if (not CML_HaveBuff(&amp;quot;player&amp;quot;, 34692) and GetSpellCD(_KillCommand) &amp;lt; 2) or _Spec ~= 1 then
            	if StampedeCheck and StampedeValue == 1 then
			        if Spells[_Stampede].known  and _SA(_Stampede) then
			            _Cast(_Stampede, nil)
			        end 
			    end
                if FocusFireCheck and FocusFireValue == 1 and not _Hero then
		            if select(4,UnitBuffID(&amp;quot;player&amp;quot;,19615)) == 5 
		              and not CML_HaveBuff(&amp;quot;player&amp;quot;, 34471) 
		              and GetSpellCD(_KillCommand) &amp;gt; 1
		              and ( GetSpellCD(19574) &amp;gt; 20 or not BestialWrathCheck or BestialWrathValue == 3 or ( BestialWrathValue == 1 and not macros[&amp;quot;ActiveCooldowns&amp;quot;] )  ) 
		              and CML_HaveBuff(&amp;quot;player&amp;quot;, 3045) ~= true 
		              and ( GetSpellCD(3045) &amp;gt;= 5 or not RapidFireCheck or RapidFireValue == 3 or ( RapidFireValue == 1 and not macros[&amp;quot;ActiveColldowns&amp;quot;] )  ) then
		                _Cast(82692, &amp;quot;player&amp;quot;)
		            end
		        end            
		        if BestialWrathCheck and BestialWrathValue == 1 and Spells[_BestialWrath].known  and _SA(_BestialWrath) then
		            if GetSpellCD(_KillCommand) &amp;lt; 2 then
		                _Cast(_BestialWrath, nil)
                		BWCast = GetTime()
		                RunMacroText(&amp;quot;/cast &amp;quot;..GetSpellInfo(53401))         
		            end
		        end
            end
        end
    end 
    
	APBonus = nil
	function APBonus()
		if OocAP == nil then OocAP = UnitAttackPower(&amp;quot;player&amp;quot;) end
		local ActiveAP, _, _ = UnitAttackPower(&amp;quot;player&amp;quot;)
		if ActiveAP &amp;gt; OocAP + 6000 then
			return true	
		else
			return false
		end
	end	

	CML_Interrupts = nil
	function CML_Interrupts()
		-- Credit goes to Xelper for his interupt code. Thank you very much Xelper!!
		if CounterShot == 1 and RandomInterrupt == nil then RandomInterrupt = math.random(0,50) end
		if CounterShot == 2 then RandomInterrupt = 30 end
		if CounterShot == 3 then RandomInterrupt = 0 end
	
		if not CounterShotCheck then 
			return false 
		end
		
		function PQR_InterruptSpell()
			if Spells[_CounterShot].known  and _SA(_CounterShot) then
				return _CounterShot
			elseif Spells[_SilencingShot].known  and _SA(_SilencingShot) then
				return _SilencingShot
			else
				return 0
			end    
		end   
		
		local PQR_InterruptPercent = RandomInterrupt
		local interruptSpell = PQR_InterruptSpell()
		local interruptName = GetSpellInfo(interruptSpell)
		
		InterruptTargetsList = { &amp;quot;target&amp;quot;, &amp;quot;focus&amp;quot;, &amp;quot;mouseover&amp;quot; }
		-- Interrupt Casts and Channels on Target and Focus.
		if interruptSpell ~= 0 then
			for i = 1, #InterruptTargetsList do
				if UnitExists(InterruptTargetsList[i]) == 1 then
					
					local customTarget = InterruptTargetsList[i]
					local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
					local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
						
					if channelName ~= nil then
						--target is channeling a spell that is interruptable
						--load the channel variables into the cast variables to make logic a little easier.
						castName = channelName
						castStartTime = channelStartTime
						castEndTime = channelEndTime
						castInterruptable = channelInterruptable
						PQR_InterruptPercent = 0
						IsChannel = true
					end
					
					--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
					if castInterruptable == false then
						castInterruptable = true
					else
						castInterruptable = false
					end	
					
					if castInterruptable then
					  	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
						local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
						local castTime = castEndTime - castStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					  	if IsSpellInRange(GetSpellInfo(interruptSpell), customTarget) ~= nil
					  	  and UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) ~= nil then
						--target is casting something that is interruptable.
						--the following 2 variables are named logically... value is in seconds.
							if currentPercent &amp;lt; RandomInterrupt and not IsChannel then return false end
							_Cast(interruptSpell, customTarget)
							InteruptTimer = GetTime()
							RandomInterrupt = nil
						end
					end
				end
			end
		end
	end
	xrn:message(&amp;quot;\124cFF7EBF37...CodeMyLife Hunter...&amp;quot;)
end

-- Convert Table to Var
if macros[&amp;quot;AoE&amp;quot;] == 3 then
	_AoE = true
end
if macros[&amp;quot;AoE&amp;quot;] == (1 or 2) then
	_AoE = false
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PQI Config</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- PQI Config --
if _PQIConfigValue == 1 then
	if  ActivePQI ~= 1 then
		ActivePQI = 1
		local config = {
			name	= &amp;quot;Beastmaster&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
				
				----  DPS Cooldowns  ----
			    { 	name	= &amp;quot;Combat Check&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUncheck for Aggressive Mode.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;No Facing Check&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Checking this |cffFFFFFFturns off Facing Checks and Multi-Target|cff7EBF37. This is to be used only |cffFFFFFFif you experiment framerate issues|cff7EBF37.&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Player Status&amp;quot;, 
					tooltip	= &amp;quot;|cff7EBF37Enables |cffFFFFFFPlayer Bar.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Green&amp;quot;,&amp;quot;|cff00CC00Colored&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFHealth Bar Color|cff7EBF37.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Spam Filter&amp;quot;, 
					tooltip	= &amp;quot;|cff7EBF37Enables |cffFFFFFFSpam Filter.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE00000Disable&amp;quot;,&amp;quot;|cff00E0DCSound&amp;quot;,&amp;quot;|cffFF9D00Alerts&amp;quot;,&amp;quot;|cff62FF00Both&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFSpam Filter Mode|cff7EBF37.|cffE00000Disable will do nothing.|cff00E0DCSound will turn off sound for casting.|cffFF9D00Alerts will toggle off Red Alerts in middle of sreen.|cff62FF00Both will turn off Sound and Alerts.&amp;quot;,	
					},
				},				
				----  Survival  ----
				{ 	name	= &amp;quot;Exhilaration&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to cast |cffFFFFFFExhilaration |cff7EBF37on me.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to cast |cffFFFFFFExhilaration |cff7EBF37on me.&amp;quot;,
					},
					newSection = true,
				},

				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFHealthstone|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 25,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFHealthstone|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Deterrence&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFDeterrence|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 20,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFDeterrence|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Feign Death&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFFeign Death|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 10,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFFeign Death|cff7EBF37.&amp;quot;,
					},
				},	
				
				----  Utility  ----	
				{ 	name	= &amp;quot;Hunters Mark&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Hunter&amp;apos;s Mark |cff7EBF37will use |cff7EBF37 when |cffFFFFFFout of combat after desired time(seconds).&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						min		= 0,
						max 	= 10,
						value	= 3,
						width 	= 70,
						step	= 1,
						tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Hunter&amp;apos;s Mark |cff7EBF37will use |cff7EBF37 when |cffFFFFFFout of combat after desired time(seconds).&amp;quot;,
					},
					newSection = true,
				},				
				{ 	name	= &amp;quot;Misdirection&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFMisdirection |cff7EBF37on |cffFFFFFFFocus or Pet |cff7EBF37when aggro on me.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Save Me&amp;quot;,&amp;quot;|cffD90000Help Tank&amp;quot;,&amp;quot;|cffFFFFFFAlways&amp;quot;},
						value = 1,
						width = 80,
						tooltip = &amp;quot;|cffFFFFFFSet |cff7EBF37 Misdirection |cffFFFFFFMode.&amp;quot;,	
					},
				},		
			    { 	name	= &amp;quot;Raiding Events&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Activate the raiding programmed functions. As these scripts are experimental, turn this off if it causes issues when you engage a raid boss.&amp;quot;,
					enable	= false,
				},			
				{ 	name	= &amp;quot;Active Aspects&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Aspects |cff7EBF37will use |cffFFFFFFTraveling Aspect|cff7EBF37 when |cffFFFFFFout of combat and moving.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 6,
						width 	= 70,
						max 	= 30,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFTime to wait before casting Traveling Aspect.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Masters Call&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFActive Master&amp;apos;s Call |cff7EBF37on me|cff7EBF37.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Active Pet Whistle&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFCall Pet Slot |cff7EBF37to use when we |cffFFFFFFWhistle|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 1,
						width 	= 70,
						step	= 1,
						min		= 1,
						max 	= 5,
						tooltip	= &amp;quot;|cffFFFFFFCall Pet Slot |cff7EBF37to use when we |cffFFFFFFWhistle|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Mend Pet&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFPet Health value |cff7EBF37to use |cffFFFFFFMend Pet|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 40,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFPet Health value |cff7EBF37to use |cffFFFFFFMend Pet|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Fervor&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFCheck |cff7EBF37to activate |cffFFFFFFFervor.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						width 	= 70,
						max 	= 45,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFFocus value |cff7EBF37to cast |cffFFFFFFFervor.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Counter Shot&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Counter Shot |cff7EBF37On target.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Random&amp;quot;,&amp;quot;|cff00CC0030&amp;quot;,&amp;quot;|cff00CC000&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Treshold to use|cff7EBF37 Counter Shot |cffFFFFFF on |cff7EBF37Target/Mouseover/Focus.&amp;quot;,	
					},
					newSection = true,
				},
				{ 	name	= &amp;quot;Explosive Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Snakes Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Ice Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},							
				{ 	name	= &amp;quot;Pet Passive Behaviour&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFPet Passive Behaviour|cff7EBF37.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE07000Target&amp;quot;,&amp;quot;|cff5EAB00Focus&amp;quot;,&amp;quot;|cff00A8ABMouse&amp;quot;,&amp;quot;|cffFFFFFFFollow&amp;quot;},
						value = 2,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet target to use|cff7EBF37 for your Pet. |cffFFFFFFIf invilaid it will attack Target|cff7EBF37.&amp;quot;,	
					},
				},				
				{ 	name	= &amp;quot;Debug&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUsed to see your Abilities in chat.&amp;quot;,
					enable	= true,
					newSection = true,
				},	
					
			},
			hotkeys = {
				{	name	= &amp;quot;Traps&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ls&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFTrap Launcher |cff7EBF37Hold to throw your |cffFFFFFFExplosive and Ice |cff7EBF37traps on your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Freezing Trap&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rs&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFFreezing Trap |cffFFFFFFHold |cff7EBF37to throw |cffFFFFFFFreezing Trap |cff7EBF37on your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Stack Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;la&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFStack Focus |cff7EBF37Use this to keep high focus before burn phases.&amp;quot;,
				},
				{	name	= &amp;quot;Pause&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ra&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFPause |cff7EBF37Will |cffFFFFFFStop Rotation, ClearTarget |cff7EBF37and |cffFFFFFFPet Stop Attack.&amp;quot;,
				},
				{	name	= &amp;quot;Pet Move To Mouse&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rc&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFPet Move To Mouse |cff7EBF37Use this to |cffFFFFFFmove your pet |cff7EBF37toward your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Set Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;lc&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFMouseover Focus |cff7EBF37Set focus to mouseover.&amp;quot;,
				},
			},	
		}
		CODEMYLIFE_BEASTMASTER = PQI:AddRotation(config)
		local cooldowns = {
			name	= &amp;quot;Beastmaster Cooldowns&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
				{ 	name	= &amp;quot;Bestial Wrath&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Bestial Wrath.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
					newSection = true,
				},	
				{ 	name	= &amp;quot;Focus Fire&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Focus Fire.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Stampede&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Stampede.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Rapid Fire&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Rapid Fire.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Racials&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Racials.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Synapse Springs&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Synapse Springs.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},					
				{ 	name	= &amp;quot;Trinkets&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Trinkets|cff7EBF37.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF001st Active&amp;quot;,&amp;quot;|cffFFE1001st On CD&amp;quot;,&amp;quot;|cff0DFF002nd Active&amp;quot;,&amp;quot;|cffFFE1002nd On CD&amp;quot;,&amp;quot;|cff0DFF00Both Active&amp;quot;,&amp;quot;|cffFFE100Both On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 80,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFTrinkets to use|cff7EBF37.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Agility Potion on Heroism&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Agility Potions|cff7EBF37 when |cffFFFFFFHeroism |cff7EBF37starts.&amp;quot;,
					enable	= true,
				},	
							
	
			},
		}
		CODEMYLIFE_BEASTMASTER = PQI:AddRotation(cooldowns)
	end
	-- Traps
	ExplosiveTrapValue 			= PQI_CodeMyLifeBeastmaster_ExplosiveTrap_value
	ExplosiveTrapCheck 			= PQI_CodeMyLifeBeastmaster_ExplosiveTrap_enable

	IceTrapValue 				= PQI_CodeMyLifeBeastmaster_IceTrap_value
	IceTrapCheck 				= PQI_CodeMyLifeBeastmaster_IceTrap_enable		

	SnakesTrapValue 			= PQI_CodeMyLifeBeastmaster_SnakesTrap_value
	SnakesTrapCheck 			= PQI_CodeMyLifeBeastmaster_SnakesTrap_enable
			
	-- Cooldowns	
	BestialWrathValue	 		= PQI_CodeMyLifeBeastmasterCooldowns_BestialWrath_value
	BestialWrathCheck			= PQI_CodeMyLifeBeastmasterCooldowns_BestialWrath_enable
	
	FocusFireValue	 			= PQI_CodeMyLifeBeastmasterCooldowns_FocusFire_value
	FocusFireCheck				= PQI_CodeMyLifeBeastmasterCooldowns_FocusFire_enable
	
	StampedeValue	 			= PQI_CodeMyLifeBeastmasterCooldowns_Stampede_value
	StampedeCheck				= PQI_CodeMyLifeBeastmasterCooldowns_Stampede_enable
	
	RapidFireValue	 			= PQI_CodeMyLifeBeastmasterCooldowns_RapidFire_value
	RapidFireCheck				= PQI_CodeMyLifeBeastmasterCooldowns_RapidFire_enable		

	RacialsValue	 			= PQI_CodeMyLifeBeastmasterCooldowns_Racials_value
	RacialsCheck				= PQI_CodeMyLifeBeastmasterCooldowns_Racials_enable

	SynapseSpringsValue	 		= PQI_CodeMyLifeBeastmasterCooldowns_SynapseSprings_value
	SynapseSpringsCheck			= PQI_CodeMyLifeBeastmasterCooldowns_SynapseSprings_enable

	TrinketsValue	 			= PQI_CodeMyLifeBeastmasterCooldowns_Trinkets_value
	TrinketsCheck				= PQI_CodeMyLifeBeastmasterCooldowns_Trinkets_enable
	
	AgiPotHeroCheck				= PQI_CodeMyLifeBeastmasterCooldowns_AgilityPotiononHeroism_enable	
	
	ActiveAspectValue			= PQI_CodeMyLifeBeastmaster_ActiveAspects_value
	ActiveAspectsCheck			= PQI_CodeMyLifeBeastmaster_ActiveAspects_enable
	
	ActivePetWhistle			= PQI_CodeMyLifeBeastmaster_ActivePetWhistle_value
	ActivePetWhistleCheck		= PQI_CodeMyLifeBeastmaster_ActivePetWhistle_enable
	
	CML_Debug					= PQI_CodeMyLifeBeastmaster_Debug_enable	
	
	CombatCheckCheck			= PQI_CodeMyLifeBeastmaster_CombatCheck_enable
	
	if _Spec ~= 2 then
		CounterShot					= PQI_CodeMyLifeBeastmaster_CounterShot_value
		CounterShotCheck			= PQI_CodeMyLifeBeastmaster_CounterShot_enable
	else
		CounterShot					= PQI_CodeMyLifeBeastmaster_SilencingShot_value
		CounterShotCheck			= PQI_CodeMyLifeBeastmaster_SilencingShot_enable
	end
	
	Deterrence	 				= PQI_CodeMyLifeBeastmaster_Deterrence_value
	DeterrenceCheck 			= PQI_CodeMyLifeBeastmaster_Deterrence_enable
	
	Exhilaration	 			= PQI_CodeMyLifeBeastmaster_Exhilaration_value
	ExhilarationCheck 			= PQI_CodeMyLifeBeastmaster_Exhilaration_enable
	
	FeastTakerCheck 			= PQI_CodeMyLifeBeastmaster_FeastTaker_enable
	
	FeignDeath	 				= PQI_CodeMyLifeBeastmaster_FeignDeath_value
	FeignDeathCheck 			= PQI_CodeMyLifeBeastmaster_FeignDeath_enable
	
	FervorCheck					= PQI_CodeMyLifeBeastmaster_Fervor_enable
	FervorValue					= PQI_CodeMyLifeBeastmaster_Fervor_value
	
	Healthstone	 				= PQI_CodeMyLifeBeastmaster_Healthstone_value
	HealthstoneCheck 			= PQI_CodeMyLifeBeastmaster_Healthstone_enable
	
	HuntersMark					= PQI_CodeMyLifeBeastmaster_HuntersMark_value
	HuntersMarkCheck			= PQI_CodeMyLifeBeastmaster_HuntersMark_enable
	
	MastersCallCheck			= PQI_CodeMyLifeBeastmaster_MastersCall_enable
	
	MendPet						= PQI_CodeMyLifeBeastmaster_MendPet_value
	MendPetCheck				= PQI_CodeMyLifeBeastmaster_MendPet_enable
	
	MisdirectionValue			= PQI_CodeMyLifeBeastmaster_Misdirection_value
	MisdirectionCheck			= PQI_CodeMyLifeBeastmaster_Misdirection_enable
	
	NoFacingCheckCheck			= PQI_CodeMyLifeBeastmaster_NoFacingCheck_enable
	
	PlayerStatusCheck			= PQI_CodeMyLifeBeastmaster_PlayerStatus_enable
	PlayerStatusValue			= PQI_CodeMyLifeBeastmaster_PlayerStatus_value
	
	PetPassiveBehaviourCheck	= PQI_CodeMyLifeBeastmaster_PetPassiveBehaviour_enable
	PetPassiveBehaviour			= PQI_CodeMyLifeBeastmaster_PetPassiveBehaviour_value
	
	RaidingEventsCheck			= PQI_CodeMyLifeBeastmaster_RaidingEvents_enable
	
	SilencingShotCheck			= PQI_CodeMyLifeBeastmaster_MastersCall_enable
	
	SpamFilter					= PQISpamFilter_value
	SpamFilterCheck				= PQI_CodeMyLifeBeastmaster_SpamFilter_enable
	
	--Keybinds
	FocusKey					= PQI:IsHotkeys(PQI_CodeMyLifeBeastmaster_SetFocus_key)
	FocusKeyCheck				= PQI_CodeMyLifeBeastmaster_SetFocus_enable
	
	FreezingTrapKey				= PQI:IsHotkeys(PQI_CodeMyLifeBeastmaster_FreezingTrap_key)
	FreezingTrapKeyCheck		= PQI_CodeMyLifeBeastmaster_FreezingTrap_enable
	
	PauseKey					= PQI:IsHotkeys(PQI_CodeMyLifeBeastmaster_Pause_key)
	PauseKeyCheck				= PQI_CodeMyLifeBeastmaster_Pause_enable
	
	PetMoveToMouseKey			= PQI:IsHotkeys(PQI_CodeMyLifeBeastmaster_PetMoveToMouse_key)
	PetMoveToMouseKeyCheck		= PQI_CodeMyLifeBeastmaster_PetMoveToMouse_enable
	
	StackFocusKey				= PQI:IsHotkeys(PQI_CodeMyLifeBeastmaster_StackFocus_key)
	StackFocusKeyCheck			= PQI_CodeMyLifeBeastmaster_StackFocus_enable
	
	TrapsKey					= PQI:IsHotkeys(PQI_CodeMyLifeBeastmaster_Traps_key)
	TrapsKeyCheck				= PQI_CodeMyLifeBeastmaster_Traps_enable
end

if _PQIConfigValue == 2 then	
	if  ActivePQI ~= 2 then
		ActivePQI = 2
		local config = {
			name	= &amp;quot;Marksmanship&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
				
				----  DPS Cooldowns  ----
			    { 	name	= &amp;quot;Combat Check&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUncheck for Aggressive Mode.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;No Facing Check&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Checking this |cffFFFFFFturns off Facing Checks and Multi-Target|cff7EBF37. This is to be used only |cffFFFFFFif you experiment framerate issues|cff7EBF37.&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Player Status&amp;quot;, 
					tooltip	= &amp;quot;|cff7EBF37Enables |cffFFFFFFPlayer Bar.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Green&amp;quot;,&amp;quot;|cff00CC00Colored&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFHealth Bar Color|cff7EBF37.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Spam Filter&amp;quot;, 
					tooltip	= &amp;quot;|cff7EBF37Enables |cffFFFFFFSpam Filter.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE00000Disable&amp;quot;,&amp;quot;|cff00E0DCSound&amp;quot;,&amp;quot;|cffFF9D00Alerts&amp;quot;,&amp;quot;|cff62FF00Both&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFSpam Filter Mode|cff7EBF37.|cffE00000Disable will do nothing.|cff00E0DCSound will turn off sound for casting.|cffFF9D00Alerts will toggle off Red Alerts in middle of sreen.|cff62FF00Both will turn off Sound and Alerts.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Exhilaration&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to cast |cffFFFFFFExhilaration |cff7EBF37on me.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to cast |cffFFFFFFExhilaration |cff7EBF37on me.&amp;quot;,
					},
					newSection = true,
				},					
				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFHealthstone|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 25,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFHealthstone|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Deterrence&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFDeterrence|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 20,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFDeterrence|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Feign Death&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFFeign Death|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 10,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFFeign Death|cff7EBF37.&amp;quot;,
					},
				},	
				
				----  Utility  ----	
				{ 	name	= &amp;quot;Hunters Mark&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Hunter&amp;apos;s Mark |cff7EBF37will use |cff7EBF37 when |cffFFFFFFout of combat after desired time(seconds).&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						min		= 0,
						max 	= 10,
						value	= 3,
						step	= 1,
						tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Hunter&amp;apos;s Mark |cff7EBF37will use |cff7EBF37 when |cffFFFFFFout of combat after desired time(seconds).&amp;quot;,
					},
					newSection = true,
				},				
				{ 	name	= &amp;quot;Misdirection&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFMisdirection |cff7EBF37on |cffFFFFFFFocus or Pet |cff7EBF37when aggro on me.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Save Me&amp;quot;,&amp;quot;|cff00CC00Help Tank&amp;quot;,&amp;quot;|cff00CC00Always&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet |cff7EBF37 Misdirection |cffFFFFFFMode.&amp;quot;,	
					},
				},			
				{ 	name	= &amp;quot;Active Aspects&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Aspects |cff7EBF37will use |cffFFFFFFTraveling Aspect|cff7EBF37 when |cffFFFFFFout of combat and moving.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 6,
						width 	= 70,
						max 	= 30,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFTime to wait before casting Traveling Aspect.&amp;quot;,
					},
				},		
				{ 	name	= &amp;quot;Masters Call&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFActive Master&amp;apos;s Call |cff7EBF37on me|cff7EBF37.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Active Pet Whistle&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFCall Pet Slot |cff7EBF37to use when we |cffFFFFFFWhistle|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 1,
						width 	= 70,
						step	= 1,
						min		= 1,
						max 	= 5,
						tooltip	= &amp;quot;|cffFFFFFFCall Pet Slot |cff7EBF37to use when we |cffFFFFFFWhistle|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Mend Pet&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFPet Health value |cff7EBF37to use |cffFFFFFFMend Pet|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 40,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFPet Health value |cff7EBF37to use |cffFFFFFFMend Pet|cff7EBF37.&amp;quot;,
					},
				},		
				{ 	name	= &amp;quot;Fervor&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFCheck |cff7EBF37to activate |cffFFFFFFFervor.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						width 	= 70,
						max 	= 45,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFFocus value |cff7EBF37to cast |cffFFFFFFFervor.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Silencing Shot&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Silencing Shot |cff7EBF37On target.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Random&amp;quot;,&amp;quot;|cff00CC0030&amp;quot;,&amp;quot;|cff00CC000&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Treshold to use|cff7EBF37 Silencing Shot |cffFFFFFF on |cff7EBF37Target/Mouseover/Focus.&amp;quot;,	
					},
					newSection = true,
				},
			{ 	name	= &amp;quot;Explosive Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Snakes Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Ice Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Pet Passive Behaviour&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFPet Passive Behaviour|cff7EBF37.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE07000Target&amp;quot;,&amp;quot;|cff5EAB00Focus&amp;quot;,&amp;quot;|cff00A8ABMouse&amp;quot;,&amp;quot;|cffFFFFFFFollow&amp;quot;},
						value = 2,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet target to use|cff7EBF37 for your Pet. |cffFFFFFFIf invilaid it will attack Target|cff7EBF37.&amp;quot;,	
					},
				},				
				{ 	name	= &amp;quot;Debug&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUsed to see your Abilities in chat.&amp;quot;,
					enable	= false,
					newSection = true,
				},		
			},
			hotkeys = {
				{	name	= &amp;quot;Traps&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ls&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFTrap Launcher |cff7EBF37Hold to throw your |cffFFFFFFExplosive and Ice |cff7EBF37traps on your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Freezing Trap&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rs&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFFreezing Trap |cffFFFFFFHold |cff7EBF37to throw |cffFFFFFFFreezing Trap |cff7EBF37on your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Stack Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;la&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFStack Focus |cff7EBF37Use this to keep high focus before burn phases.&amp;quot;,
				},
				{	name	= &amp;quot;Pause&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ra&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFPause |cff7EBF37Will |cffFFFFFFStop Rotation, ClearTarget |cff7EBF37and |cffFFFFFFPet Stop Attack.&amp;quot;,
				},
				{	name	= &amp;quot;Pet Move To Mouse&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rc&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFPet Move To Mouse |cff7EBF37Use this to |cffFFFFFFmove your pet |cff7EBF37toward your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Set Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;lc&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFMouseover Focus |cff7EBF37Set focus to mouseover.&amp;quot;,
				},
			},
		}
		CODEMYLIFE_MARKSMANSHIP = PQI:AddRotation(config)
		local cooldowns = {
			name	= &amp;quot;Marksmanship Cooldowns&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
				{ 	name	= &amp;quot;Stampede&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Stampede.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Rapid Fire&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Rapid Fire.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Racials&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Racials.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Synapse Springs&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Synapse Springs.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},					
				{ 	name	= &amp;quot;Trinkets&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Trinkets|cff7EBF37.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF001st Active&amp;quot;,&amp;quot;|cffFFE1001st On CD&amp;quot;,&amp;quot;|cff0DFF002nd Active&amp;quot;,&amp;quot;|cffFFE1002nd On CD&amp;quot;,&amp;quot;|cff0DFF00Both Active&amp;quot;,&amp;quot;|cffFFE100Both On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 80,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFTrinkets to use|cff7EBF37.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Agility Potion on Heroism&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Agility Potions|cff7EBF37 when |cffFFFFFFHeroism |cff7EBF37starts.&amp;quot;,
					enable	= true,
				},	
							
	
			},	
		}
		CODEMYLIFE_MARKSMANSHIP = PQI:AddRotation(cooldowns)
	end
	
	-- Traps
	ExplosiveTrapValue 			= PQI_CodeMyLifeMarksmanship_ExplosiveTrap_value
	ExplosiveTrapCheck 			= PQI_CodeMyLifeMarksmanship_ExplosiveTrap_enable

	IceTrapValue 				= PQI_CodeMyLifeMarksmanship_IceTrap_value
	IceTrapCheck 				= PQI_CodeMyLifeMarksmanship_IceTrap_enable		

	SnakesTrapValue 			= PQI_CodeMyLifeMarksmanship_SnakesTrap_value
	SnakesTrapCheck 			= PQI_CodeMyLifeMarksmanship_SnakesTrap_enable
	
	-- Cooldowns	
	StampedeValue	 			= PQI_CodeMyLifeMarksmanshipCooldowns_Stampede_value
	StampedeCheck				= PQI_CodeMyLifeMarksmanshipCooldowns_Stampede_enable
	
	RapidFireValue	 			= PQI_CodeMyLifeMarksmanshipCooldowns_RapidFire_value
	RapidFireCheck				= PQI_CodeMyLifeMarksmanshipCooldowns_RapidFire_enable		

	RacialsValue	 			= PQI_CodeMyLifeMarksmanshipCooldowns_Racials_value
	RacialsCheck				= PQI_CodeMyLifeMarksmanshipCooldowns_Racials_enable

	SynapseSpringsValue	 		= PQI_CodeMyLifeMarksmanshipCooldowns_SynapseSprings_value
	SynapseSpringsCheck			= PQI_CodeMyLifeMarksmanshipCooldowns_SynapseSprings_enable

	TrinketsValue	 			= PQI_CodeMyLifeMarksmanshipCooldowns_Trinkets_value
	TrinketsCheck				= PQI_CodeMyLifeMarksmanshipCooldowns_Trinkets_enable	
	
	AgiPotHeroCheck				= PQI_CodeMyLifeMarksmanshipCooldowns_AgilityPotiononHeroism_enable	

	ActiveAspectValue			= PQI_CodeMyLifeMarksmanship_ActiveAspects_value
	ActiveAspectsCheck			= PQI_CodeMyLifeMarksmanship_ActiveAspects_enable
	
	ActivePetWhistle			= PQI_CodeMyLifeMarksmanship_ActivePetWhistle_value
	ActivePetWhistleCheck		= PQI_CodeMyLifeMarksmanship_ActivePetWhistle_enable
	
	ActiveCooldowns				= PQI_CodeMyLifeMarksmanship_ActiveCooldowns_value
	ActiveCooldownsCheck		= PQI_CodeMyLifeMarksmanship_ActiveCooldowns_enable
	
	BestialWrath	 			= PQI_CodeMyLifeMarksmanship_BestialWrath_value
	BestialWrathCheck			= PQI_CodeMyLifeMarksmanship_BestialWrath_enable
	
	CML_Debug					= PQI_CodeMyLifeMarksmanship_Debug_enable	
	
	CombatCheckCheck			= PQI_CodeMyLifeMarksmanship_CombatCheck_enable
	
	if _Spec ~= 2 then
		CounterShot					= PQI_CodeMyLifeMarksmanship_CounterShot_value
		CounterShotCheck			= PQI_CodeMyLifeMarksmanship_CounterShot_enable
	else
		CounterShot					= PQI_CodeMyLifeMarksmanship_SilencingShot_value
		CounterShotCheck			= PQI_CodeMyLifeMarksmanship_SilencingShot_enable
	end
	
	Deterrence	 				= PQI_CodeMyLifeMarksmanship_Deterrence_value
	DeterrenceCheck 			= PQI_CodeMyLifeMarksmanship_Deterrence_enable
	
	Exhilaration	 			= PQI_CodeMyLifeMarksmanship_Exhilaration_value
	ExhilarationCheck 			= PQI_CodeMyLifeMarksmanship_Exhilaration_enable
	
	FeastTakerCheck 			= PQI_CodeMyLifeMarksmanship_FeastTaker_enable
	
	FeignDeath	 				= PQI_CodeMyLifeMarksmanship_FeignDeath_value
	FeignDeathCheck 			= PQI_CodeMyLifeMarksmanship_FeignDeath_enable
	
	FervorCheck					= PQI_CodeMyLifeMarksmanship_Fervor_enable
	FervorValue					= PQI_CodeMyLifeMarksmanship_Fervor_value
	
	Healthstone	 				= PQI_CodeMyLifeMarksmanship_Healthstone_value
	HealthstoneCheck 			= PQI_CodeMyLifeMarksmanship_Healthstone_enable
	
	HuntersMark					= PQI_CodeMyLifeMarksmanship_HuntersMark_value
	HuntersMarkCheck			= PQI_CodeMyLifeMarksmanship_HuntersMark_enable
	
	MastersCallCheck			= PQI_CodeMyLifeMarksmanship_MastersCall_enable
	
	MendPet						= PQI_CodeMyLifeMarksmanship_MendPet_value
	MendPetCheck				= PQI_CodeMyLifeMarksmanship_MendPet_enable
	
	MisdirectionValue			= PQI_CodeMyLifeMarksmanship_Misdirection_value
	MisdirectionCheck			= PQI_CodeMyLifeMarksmanship_Misdirection_enable
	
	NoFacingCheckCheck			= PQI_CodeMyLifeMarksmanship_NoFacingCheck_enable
	
	PlayerStatusCheck			= PQI_CodeMyLifeMarksmanship_PlayerStatus_enable
	PlayerStatusValue			= PQI_CodeMyLifeMarksmanship_PlayerStatus_value
	
	PetPassiveBehaviourCheck	= PQI_CodeMyLifeMarksmanship_PetPassiveBehaviour_enable
	PetPassiveBehaviour			= PQI_CodeMyLifeMarksmanship_PetPassiveBehaviour_value
	
	RaidingEventsCheck			= PQI_CodeMyLifeMarksmanship_RaidingEvents_enable
	
	SilencingShotCheck			= PQI_CodeMyLifeMarksmanship_MastersCall_enable
	
	SpamFilter					= PQI_CodeMyLifeMarksmanship_SpamFilter_value
	SpamFilterCheck				= PQI_CodeMyLifeMarksmanship_SpamFilter_enable
	
	--Keybinds
	FocusKey					= PQI:IsHotkeys(PQI_CodeMyLifeMarksmanship_SetFocus_key)
	FocusKeyCheck				= PQI_CodeMyLifeMarksmanship_SetFocus_enable
	
	FreezingTrapKey				= PQI:IsHotkeys(PQI_CodeMyLifeMarksmanship_FreezingTrap_key)
	FreezingTrapKeyCheck		= PQI_CodeMyLifeMarksmanship_FreezingTrap_enable
	
	PauseKey					= PQI:IsHotkeys(PQI_CodeMyLifeMarksmanship_Pause_key)
	PauseKeyCheck				= PQI_CodeMyLifeMarksmanship_Pause_enable
	
	PetMoveToMouseKey			= PQI:IsHotkeys(PQI_CodeMyLifeMarksmanship_PetMoveToMouse_key)
	PetMoveToMouseKeyCheck		= PQI_CodeMyLifeMarksmanship_PetMoveToMouse_enable
	
	StackFocusKey				= PQI:IsHotkeys(PQI_CodeMyLifeMarksmanship_StackFocus_key)
	StackFocusKeyCheck			= PQI_CodeMyLifeMarksmanship_StackFocus_enable
	
	TrapsKey					= PQI:IsHotkeys(PQI_CodeMyLifeMarksmanship_Traps_key)
	TrapsKeyCheck				= PQI_CodeMyLifeMarksmanship_Traps_enable
end

if _PQIConfigValue == 3 then	
	if  ActivePQI ~= 3 then
		ActivePQI = 3
		local config = {
			name	= &amp;quot;Survival&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
				
				----  DPS Cooldowns  ----
			    { 	name	= &amp;quot;Combat Check&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUncheck for Aggressive Mode.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;No Facing Check&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Checking this |cffFFFFFFturns off Facing Checks and Multi-Target|cff7EBF37. This is to be used only |cffFFFFFFif you experiment framerate issues|cff7EBF37.&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Player Status&amp;quot;, 
					tooltip	= &amp;quot;|cff7EBF37Enables |cffFFFFFFPlayer Bar.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Green&amp;quot;,&amp;quot;|cff00CC00Colored&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFHealth Bar Color|cff7EBF37.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Spam Filter&amp;quot;, 
					tooltip	= &amp;quot;|cff7EBF37Enables |cffFFFFFFSpam Filter.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE00000Disable&amp;quot;,&amp;quot;|cff00E0DCSound&amp;quot;,&amp;quot;|cffFF9D00Alerts&amp;quot;,&amp;quot;|cff62FF00Both&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFSpam Filter Mode|cff7EBF37.|cffE00000Disable will do nothing.|cff00E0DCSound will turn off sound for casting.|cffFF9D00Alerts will toggle off Red Alerts in middle of sreen.|cff62FF00Both will turn off Sound and Alerts.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Exhilaration&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to cast |cffFFFFFFExhilaration |cff7EBF37on me.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to cast |cffFFFFFFExhilaration |cff7EBF37on me.&amp;quot;,
					},
					newSection = true,
				},
				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFHealthstone|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 25,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFHealthstone|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Deterrence&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFDeterrence|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 20,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFDeterrence|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Feign Death&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFFeign Death|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 10,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cff7EBF37to use |cffFFFFFFFeign Death|cff7EBF37.&amp;quot;,
					},
				},	
				
				----  Utility  ----	
				{ 	name	= &amp;quot;Hunters Mark&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Hunter&amp;apos;s Mark |cff7EBF37will use |cff7EBF37 when |cffFFFFFFout of combat after desired time(seconds).&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						min		= 0,
						max 	= 10,
						value	= 3,
						width 	= 70,
						step	= 1,
						tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Hunter&amp;apos;s Mark |cff7EBF37will use |cff7EBF37 when |cffFFFFFFout of combat after desired time(seconds).&amp;quot;,
					},
					newSection = true,
				},				
				{ 	name	= &amp;quot;Misdirection&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFMisdirection |cff7EBF37on |cffFFFFFFFocus or Pet |cff7EBF37when aggro on me.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Save Me&amp;quot;,&amp;quot;|cff00CC00Help Tank&amp;quot;,&amp;quot;|cff00CC00Always&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet |cff7EBF37 Misdirection |cffFFFFFFMode.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Active Aspects&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Aspects |cff7EBF37will use |cffFFFFFFTraveling Aspect|cff7EBF37 when |cffFFFFFFout of combat and moving.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 6,
						width 	= 70,
						max 	= 30,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFTime to wait before casting Traveling Aspect.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Masters Call&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFActive Master&amp;apos;s Call |cff7EBF37on me|cff7EBF37.&amp;quot;,
					enable	= false,
					newSection = true,
		
				},
				{ 	name	= &amp;quot;Active Pet Whistle&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFCall Pet Slot |cff7EBF37to use when we |cffFFFFFFWhistle|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 1,
						width 	= 70,
						step	= 1,
						min		= 1,
						max 	= 5,
						tooltip	= &amp;quot;|cffFFFFFFCall Pet Slot |cff7EBF37to use when we |cffFFFFFFWhistle|cff7EBF37.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Mend Pet&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFPet Health value |cff7EBF37to use |cffFFFFFFMend Pet|cff7EBF37.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 40,
						width 	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFPet Health value |cff7EBF37to use |cffFFFFFFMend Pet|cff7EBF37.&amp;quot;,
					},
				},		
				{ 	name	= &amp;quot;Fervor&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFCheck |cff7EBF37to activate |cffFFFFFFFervor.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						width 	= 70,
						max 	= 45,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFFocus value |cff7EBF37to cast |cffFFFFFFFervor.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Counter Shot&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Counter Shot |cff7EBF37On target.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff7EBF37Random&amp;quot;,&amp;quot;|cff00CC0030&amp;quot;,&amp;quot;|cff00CC000&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Treshold to use|cff7EBF37 Counter Shot |cffFFFFFF on |cff7EBF37Target/Mouseover/Focus.&amp;quot;,	
					},
					newSection = true,
				},
			{ 	name	= &amp;quot;Explosive Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Snakes Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Ice Trap&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFTraps |cff7EBF37on cursor.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff5EAB00Keypress&amp;quot;,&amp;quot;|cff00A8ABAuto&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet Strategy to use|cff7EBF37 Automatic Traps |cffFFFFFF on |cff7EBF37cursor.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Pet Passive Behaviour&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFPet Passive Behaviour|cff7EBF37.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE07000Target&amp;quot;,&amp;quot;|cff5EAB00Focus&amp;quot;,&amp;quot;|cff00A8ABMouse&amp;quot;,&amp;quot;|cffFFFFFFFollow&amp;quot;},
						value = 2,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFSet target to use|cff7EBF37 for your Pet. |cffFFFFFFIf invilaid it will attack Target|cff7EBF37.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Debug&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUsed to see your Abilities in chat.&amp;quot;,
					enable	= true,
					newSection = true,
				},			
			},
			hotkeys = {
				{	name	= &amp;quot;Traps&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ls&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFTrap Launcher |cff7EBF37Hold to throw your |cffFFFFFFExplosive and Ice |cff7EBF37traps on your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Freezing Trap&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rs&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFFreezing Trap |cffFFFFFFHold |cff7EBF37to throw |cffFFFFFFFreezing Trap |cff7EBF37on your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Stack Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;la&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFStack Focus |cff7EBF37Use this to keep high focus before burn phases.&amp;quot;,
				},
				{	name	= &amp;quot;Pause&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ra&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFPause |cff7EBF37Will |cffFFFFFFStop Rotation, ClearTarget |cff7EBF37and |cffFFFFFFPet Stop Attack.&amp;quot;,
				},
				{	name	= &amp;quot;Pet Move To Mouse&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rc&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFPet Move To Mouse |cff7EBF37Use this to |cffFFFFFFmove your pet |cff7EBF37toward your mouse.&amp;quot;,
				},
				{	name	= &amp;quot;Set Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;lc&amp;apos;},
					tooltip	= &amp;quot;|cff7EBF37Assign |cffFFFFFFMouseover Focus |cff7EBF37Set focus to mouseover.&amp;quot;,
				},
			},	
		}
		CODEMYLIFE_SURVIVAL = PQI:AddRotation(config)
		local cooldowns = {
			name	= &amp;quot;Survival Cooldowns&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
				{ 	name	= &amp;quot;Stampede&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Stampede.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Rapid Fire&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Rapid Fire.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Racials&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Racials.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Synapse Springs&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Synapse Springs.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF00Active&amp;quot;,&amp;quot;|cffFFE100On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 4,
						width = 70,
						tooltip = &amp;quot;|cffFFFFFFChoose desired Cooldowns Options.|cff0DFF00Active will use when you activate Active Cooldowns macro.|cffFFE100On CD will fire on Cooldown regardless of Active Cooldowns.|cffD90000Disable will never use this Cooldown.&amp;quot;,	
					},
				},					
				{ 	name	= &amp;quot;Trinkets&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Trinkets|cff7EBF37.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cff0DFF001st Active&amp;quot;,&amp;quot;|cffFFE1001st On CD&amp;quot;,&amp;quot;|cff0DFF002nd Active&amp;quot;,&amp;quot;|cffFFE1002nd On CD&amp;quot;,&amp;quot;|cff0DFF00Both Active&amp;quot;,&amp;quot;|cffFFE100Both On CD&amp;quot;,&amp;quot;|cffD90000Disable&amp;quot;},
						value = 1,
						width = 80,
						tooltip = &amp;quot;|cff7EBF37Choose |cffFFFFFFTrinkets to use|cff7EBF37.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Agility Potion on Heroism&amp;quot;,
					tooltip	= &amp;quot;|cff7EBF37Toggle |cffFFFFFFAutomatic Agility Potions|cff7EBF37 when |cffFFFFFFHeroism |cff7EBF37starts.&amp;quot;,
					enable	= true,
				},	
							
	
			},
		}
		CODEMYLIFE_SURVIVAL = PQI:AddRotation(cooldowns)
	end
	
	-- Traps
	ExplosiveTrapValue 			= PQI_CodeMyLifeSurvival_ExplosiveTrap_value
	ExplosiveTrapCheck 			= PQI_CodeMyLifeSurvival_ExplosiveTrap_enable

	IceTrapValue 				= PQI_CodeMyLifeSurvival_IceTrap_value
	IceTrapCheck 				= PQI_CodeMyLifeSurvival_IceTrap_enable		

	SnakesTrapValue 			= PQI_CodeMyLifeSurvival_SnakesTrap_value
	SnakesTrapCheck 			= PQI_CodeMyLifeSurvival_SnakesTrap_enable	
	
	-- Cooldowns	
	StampedeValue	 			= PQI_CodeMyLifeSurvivalCooldowns_Stampede_value
	StampedeCheck				= PQI_CodeMyLifeSurvivalCooldowns_Stampede_enable
	
	RapidFireValue	 			= PQI_CodeMyLifeSurvivalCooldowns_RapidFire_value
	RapidFireCheck				= PQI_CodeMyLifeSurvivalCooldowns_RapidFire_enable		

	RacialsValue	 			= PQI_CodeMyLifeSurvivalCooldowns_Racials_value
	RacialsCheck				= PQI_CodeMyLifeSurvivalCooldowns_Racials_enable

	SynapseSpringsValue	 		= PQI_CodeMyLifeSurvivalCooldowns_SynapseSprings_value
	SynapseSpringsCheck			= PQI_CodeMyLifeSurvivalCooldowns_SynapseSprings_enable

	TrinketsValue	 			= PQI_CodeMyLifeSurvivalCooldowns_Trinkets_value
	TrinketsCheck				= PQI_CodeMyLifeSurvivalCooldowns_Trinkets_enable
	
	AgiPotHeroCheck				= PQI_CodeMyLifeSurvivalCooldowns_AgilityPotiononHeroism_enable	

	ActiveAspectValue			= PQI_CodeMyLifeSurvival_ActiveAspects_value
	ActiveAspectsCheck			= PQI_CodeMyLifeSurvival_ActiveAspects_enable
	
	ActivePetWhistle			= PQI_CodeMyLifeSurvival_ActivePetWhistle_value
	ActivePetWhistleCheck		= PQI_CodeMyLifeSurvival_ActivePetWhistle_enable
	
	ActiveCooldowns				= PQI_CodeMyLifeSurvival_ActiveCooldowns_value
	ActiveCooldownsCheck		= PQI_CodeMyLifeSurvival_ActiveCooldowns_enable
	
	BestialWrath	 			= PQI_CodeMyLifeSurvival_BestialWrath_value
	BestialWrathCheck			= PQI_CodeMyLifeSurvival_BestialWrath_enable
	
	CML_Debug					= PQI_CodeMyLifeSurvival_Debug_enable	
	
	CombatCheckCheck			= PQI_CodeMyLifeSurvival_CombatCheck_enable
	
	if _Spec ~= 2 then
		CounterShot					= PQI_CodeMyLifeSurvival_CounterShot_value
		CounterShotCheck			= PQI_CodeMyLifeSurvival_CounterShot_enable
	else
		CounterShot					= PQI_CodeMyLifeSurvival_SilencingShot_value
		CounterShotCheck			= PQI_CodeMyLifeSurvival_SilencingShot_enable
	end
	
	Deterrence	 				= PQI_CodeMyLifeSurvival_Deterrence_value
	DeterrenceCheck 			= PQI_CodeMyLifeSurvival_Deterrence_enable
	
	Exhilaration	 			= PQI_CodeMyLifeSurvival_Exhilaration_value
	ExhilarationCheck 			= PQI_CodeMyLifeSurvival_Exhilaration_enable
	
	FeastTakerCheck 			= PQI_CodeMyLifeSurvival_FeastTaker_enable
	
	FeignDeath	 				= PQI_CodeMyLifeSurvival_FeignDeath_value
	FeignDeathCheck 			= PQI_CodeMyLifeSurvival_FeignDeath_enable
	
	FervorCheck					= PQI_CodeMyLifeSurvival_Fervor_enable
	FervorValue					= PQI_CodeMyLifeSurvival_Fervor_value
	
	Healthstone	 				= PQI_CodeMyLifeSurvival_Healthstone_value
	HealthstoneCheck 			= PQI_CodeMyLifeSurvival_Healthstone_enable
	
	HuntersMark					= PQI_CodeMyLifeSurvival_HuntersMark_value
	HuntersMarkCheck			= PQI_CodeMyLifeSurvival_HuntersMark_enable
	
	MastersCallCheck			= PQI_CodeMyLifeSurvival_MastersCall_enable
	
	MendPet						= PQI_CodeMyLifeSurvival_MendPet_value
	MendPetCheck				= PQI_CodeMyLifeSurvival_MendPet_enable
	
	MisdirectionValue			= PQI_CodeMyLifeSurvival_Misdirection_value
	MisdirectionCheck			= PQI_CodeMyLifeSurvival_Misdirection_enable
	
	NoFacingCheckCheck			= PQI_CodeMyLifeSurvival_NoFacingCheck_enable
	
	PlayerStatusCheck			= PQI_CodeMyLifeSurvival_PlayerStatus_enable
	PlayerStatusValue			= PQI_CodeMyLifeSurvival_PlayerStatus_value
	
	PetPassiveBehaviourCheck	= PQI_CodeMyLifeSurvival_PetPassiveBehaviour_enable
	PetPassiveBehaviour			= PQI_CodeMyLifeSurvival_PetPassiveBehaviour_value
	
	RaidingEventsCheck			= PQI_CodeMyLifeSurvival_RaidingEvents_enable
	
	SilencingShotCheck			= PQI_CodeMyLifeSurvival_MastersCall_enable
	
	SpamFilter					= PQI_CodeMyLifeSurvival_SpamFilter_value
	SpamFilterCheck				= PQI_CodeMyLifeSurvival_SpamFilter_enable
	
	--Keybinds
	FocusKey					= PQI:IsHotkeys(PQI_CodeMyLifeSurvival_SetFocus_key)
	FocusKeyCheck				= PQI_CodeMyLifeSurvival_SetFocus_enable
	
	FreezingTrapKey				= PQI:IsHotkeys(PQI_CodeMyLifeSurvival_FreezingTrap_key)
	FreezingTrapKeyCheck		= PQI_CodeMyLifeSurvival_FreezingTrap_enable
	
	PauseKey					= PQI:IsHotkeys(PQI_CodeMyLifeSurvival_Pause_key)
	PauseKeyCheck				= PQI_CodeMyLifeSurvival_Pause_enable
	
	PetMoveToMouseKey			= PQI:IsHotkeys(PQI_CodeMyLifeSurvival_PetMoveToMouse_key)
	PetMoveToMouseKeyCheck		= PQI_CodeMyLifeSurvival_PetMoveToMouse_enable
	
	StackFocusKey				= PQI:IsHotkeys(PQI_CodeMyLifeSurvival_StackFocus_key)
	StackFocusKeyCheck			= PQI_CodeMyLifeSurvival_StackFocus_enable
	
	TrapsKey					= PQI:IsHotkeys(PQI_CodeMyLifeSurvival_Traps_key)
	TrapsKeyCheck				= PQI_CodeMyLifeSurvival_Traps_enable
end

if CounterShot == nil then return true end

if SpamToggle ~= true and SpamFilterCheck and ( SpamFilter == 3 or SpamFilter == 4 ) then
	SpamToggle = true
	RunMacroText(&amp;quot;/script UIErrorsFrame:Hide();&amp;quot;)
end

if SpamToggle ~= false and SpamFilterCheck and ( SpamFilter == 1 or SpamFilter == 2 )then
	SpamToggle = false
	RunMacroText(&amp;quot;/script UIErrorsFrame:Show();&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Beast Master</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local _TrueFocus = _Focus
if FervorCast &amp;gt;= GetTime() - 1 then
	_Focus = _Focus + 50
end
local _Pooling = 0

-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end

CML_ActiveCooldowns()

if GetSpellCD(_BestialWrath) &amp;lt; 3 and BestialWrathCheck and ( BestialWrathValue == 2 or BestialWrathValue == 1 and macros[&amp;quot;ActiveCooldowns&amp;quot;] ) then
	_Pooling = 49
elseif GetSpellCD(_KillCommand) &amp;lt; 4 then
	_Pooling = 40
end

if macros[&amp;quot;ActiveCooldowns&amp;quot;] and GetSpellCD(_BestialWrath) &amp;lt; 3.5 then _Focus = _Focus - 12 end

-- serpent_sting,if=!ticking
if Spells[_SerpentSting].known  and _SA(_SerpentSting) and CML_HaveDebuff(&amp;quot;target&amp;quot;,_SerpentSting,0,&amp;quot;player&amp;quot;) ~= true and not ( SerpentCast ~= nil and SerpentCast &amp;gt;= GetTime() - 2 ) and T2D(&amp;quot;target&amp;quot;) &amp;gt;= 14 then
	_Cast(_SerpentSting,&amp;quot;target&amp;quot;)
	return true
end

-- dire_beast,if=enabled&amp;focus&amp;lt;=90
if Spells[_DireBeast].known  and _SA(_DireBeast) then
	_Cast(_DireBeast,&amp;quot;target&amp;quot;)
	return true
end

-- fervor,if=enabled&amp;focus&amp;lt;=65
if Spells[_Fervor].known  and _SA(_Fervor) and _Focus &amp;lt;= 45 and GetSpellCD(_KillCommand) &amp;gt; 0.2 then
	_Cast(_Fervor,&amp;quot;player&amp;quot;)
	return true
end

-- multi_shot,if=active_enemies&amp;gt;5|(active_enemies&amp;gt;2&amp;buff.beast_cleave.down)
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_MultiShot].known  and _SA(_MultiShot) and GetSpellCD(_KillCommand) &amp;gt; 0.2 and (( _Focus &amp;gt; _Pooling + 30 and CML_HaveBuff(&amp;quot;pet&amp;quot;, 118455,1.5) ~= true ) or _Focus &amp;gt; 95) then
	_Cast(_MultiShot,&amp;quot;target&amp;quot;)
	return true
end

-- cobra_shot,if=active_enemies&amp;gt;5
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_CobraShot].known  and _SA(_CobraShot) and GetSpellCD(_KillCommand) &amp;gt; 0.3 then
	_Cast(_CobraShot,&amp;quot;target&amp;quot;)
	return true
end
-- kill_shot
if Spells[_KillShot].known  and _SA(_KillShot) then
	_Cast(_KillShot,&amp;quot;target&amp;quot;)
	return true
end

-- kill_command
if Spells[_KillCommand].known  and _SA(_KillCommand) and not ( BestialWrathCheck and ( BestialWrathCheck == 2 or ( BestialWrathCheck == 1 and macros[&amp;quot;ActiveCooldowns&amp;quot;] ) )  and Spells[_BestialWrath].known  and _SA(_BestialWrath) and CML_HaveBuff(&amp;quot;player&amp;quot;,34471) ~= true ) and (BWCast == nil or BWCast &amp;lt;= GetTime() - 2 or CML_HaveBuff(&amp;quot;pet&amp;quot;, 19574) ) then
	_Cast(_KillCommand,&amp;quot;target&amp;quot;)
	return true
end

-- a_murder_of_crows,if=enabled&amp;!ticking
if Spells[_AMurderOfCrows].known  and _SA(_AMurderOfCrows) and CML_HaveBuff(&amp;quot;player&amp;quot;,_AMurderOfCrows) ~= true and GetSpellCD(_KillCommand) &amp;gt; 0.15 then
	_Cast(_AMurderOfCrows,&amp;quot;target&amp;quot;)
	return true
end

-- glaive_toss,if=enabled
if Spells[_GlaiveToss].known  and _SA(_GlaiveToss) and GetSpellCD(_KillCommand) &amp;gt; 0.15 then
	_Cast(_GlaiveToss,&amp;quot;target&amp;quot;)
	return true
end

-- lynx_rush,if=enabled&amp;!dot.lynx_rush.ticking
if Spells[_LynxRush].known  and _SA(_LynxRush) and CML_HaveBuff(&amp;quot;player&amp;quot;,_LynxRush) ~= true and GetSpellCD(_KillCommand) &amp;gt; 0.2 then
	_Cast(_LynxRush,&amp;quot;player&amp;quot;)
	return true
end

-- barrage,if=enabled
if Spells[_Barrage].known  and _SA(_Barrage) and GetSpellCD(_KillCommand) &amp;gt; 1 then
	_Cast(_Barrage,&amp;quot;target&amp;quot;)
	return true
end

-- powershot,if=enabled
if Spells[_PowerShot].known  and _SA(_PowerShot) and GetSpellCD(_KillCommand) &amp;gt; 1 then
	_Cast(_PowerShot,&amp;quot;target&amp;quot;)
	return true
end

-- arcane_shot,if=buff.thrill_of_the_hunt.react
if Spells[_ArcaneShot].known  and _SA(_ArcaneShot) and CML_HaveBuff(&amp;quot;player&amp;quot;, 109306) == true and GetSpellCD(_KillCommand) &amp;gt; 0.2 and _Focus &amp;gt; _Pooling + 4 then
	_Cast(_ArcaneShot,&amp;quot;target&amp;quot;)
	return true
end
-- cobra_shot,if=dot.serpent_sting.remains&amp;lt;6
--if Spells[_CobraShot].known  and _SA(_CobraShot) and CML_HaveDebuff(&amp;quot;target&amp;quot;,_SerpentSting,6,&amp;quot;player&amp;quot;) ~= true and GetSpellCD(_KillCommand) &amp;gt; 0.4 then
--	_Cast(_CobraShot,&amp;quot;target&amp;quot;)
--	return true
--end

-- arcane_shot,if=focus&amp;gt;=61|buff.beast_within.up
if Spells[_ArcaneShot].known  and _SA(_ArcaneShot) and ( _Focus &amp;gt;= _Pooling + 27 or ( CML_HaveBuff(&amp;quot;player&amp;quot;,34471) == true and _Focus &amp;gt;= _Pooling + 4 ) or (CML_HaveBuff(&amp;quot;plyaer&amp;quot;,34471) == true and GetSpellCD(_KillCommand) &amp;gt;= select(7,UnitBuffID(&amp;quot;player&amp;quot;,34471)) - GetTime() ) ) and GetSpellCD(_KillCommand) &amp;gt; 0.2 then
	_Cast(_ArcaneShot,&amp;quot;target&amp;quot;)
	return true
end

-- cobra_shot
if Spells[_CobraShot].known  and _SA(_CobraShot) and ( GetSpellCD(_KillCommand) &amp;gt; (select(7,GetSpellInfo(_CobraShot))/4000) or _TrueFocus &amp;lt; 40 ) then
	_Cast(_CobraShot,&amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Stats</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Choose appropriate list based on type of group and number of players.
local playersNumber = GetNumGroupMembers()
if CML_Frames ~= nil then CML_Frames() end
if IsInRaid() then 
	if playersNumber &amp;lt;= 5 then 
		MyTargets = PartyTargets
	 elseif playersNumber &amp;lt;= 12 then
		MyTargets = Raid10Targets 
	elseif playersNumber &amp;gt; 12 then
		MyTargets = Raid25Targets 
	end		
elseif IsInGroup() then
	MyTargets = PartyTargets 
else 
	MyTargets = SingleTargets
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Tables</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Hunter
if not _AbilityList then
	_AbilityList = true

_AimedShot				= 19434
_AMurderOfCrows			= 131894
_ArcaneShot     		= 3044 
_AspectOfTheCheetah		= 5118
_AspectOfTheIronHawk	= 109260
_AspectOfThePack   		= 13159 
_Barrage				= 120360
_BestialWrath			= 19574
_BindingShot	 		= 109248 
_BlackArrow	 			= 3674
_CallPet1				= 883
_CallPet2				= 83242
_CallPet3				= 83243
_CallPet4				= 83244
_CallPet5				= 83245
_Camouflage		  		= 51753 
_ChimeraShot			= 53209
_CobraShot		   		= 77767 
_ConcussiveShot    		= 5116
_CounterShot   			= 147362
_Deterrence    			= 19263
_DireBeast				= 120679
_Disengage    			= 781
_DismissPet    			= 2641 
_DistractingShot		= 20736
_EagleEye	     		= 6197 
_ExplosiveShot   		= 53301 
_FeignDeath   			= 5384 
_Fervor					= 82726
_Flare     				= 1543
_FocusFire				= 82692
_GlaiveToss    			= 117050 
_HeartOfThePhoenix		= 55709
_HuntersMark			= 1130 
_KillCommand			= 34026
_KillShot   			= 53351
_LynxRush				= 120697
_MastersCall			= 53271
_MendPet    			= 136 
_Misdirection			= 34477
_MultiShot		   		= 2643
_PowerShot				= 109259
_RapidFire				= 3045
_RevivePet			  	= 982 
_ScareBeast				= 1513
_ScatterShot	 		= 19503 
_SerpentSting   		= 1978
_SilencingShot			= 34490
_Stampede    			= 121818 
_SteadyShot				= 56641
_TameBeast		   		= 1515 
_TranquilizingShot		= 19801 
_TrapLauncher  			= 77769 
_TrapLauncherExplosive	= 82939
_TrapLauncherFreezing	= 60192
_TrapLauncherIce		= 82941
_TrapLauncherSnakes		= 82948 
_TrapExplosive 			= 13813 
_TrapFreezing			= 1499
_TrapIce	   			= 13809
_TrapSnakes				= 34600 
_WidowVenom	    		= 82654 
_BloodFury				= 20572
_Berserking  			= 26297  
	
  
 Spells = { 
 	[_AimedShot]    		= { known = IsPlayerSpell(19434)  },
	[_AMurderOfCrows]    	= { known = IsPlayerSpell(131894) },
	[_ArcaneShot]    		= { known = IsPlayerSpell(3044)   }, 
	[_AspectOfTheCheetah]   = { known = IsPlayerSpell(5118)   },
	[_AspectOfTheIronHawk]  = { known = IsPlayerSpell(109260) },
	[_AspectOfThePack]    	= { known = IsPlayerSpell(13159)  },
	[_Barrage]    			= { known = IsPlayerSpell(120360) }, 
	[_BestialWrath]    		= { known = IsPlayerSpell(19574)  },
	[_BindingShot]    		= { known = IsPlayerSpell(109248) }, 
	[_BlackArrow]    		= { known = IsPlayerSpell(3674)   },
	[_CallPet1]    			= { known = IsPlayerSpell(883)    },
	[_CallPet2]    			= { known = IsPlayerSpell(83242)  },
	[_CallPet3]    			= { known = IsPlayerSpell(83243)  },
	[_CallPet4]    			= { known = IsPlayerSpell(83244)  },
	[_CallPet5]    			= { known = IsPlayerSpell(83245)  },
	[_Camouflage]    		= { known = IsPlayerSpell(51753)  }, 
	[_ChimeraShot]    		= { known = IsPlayerSpell(53209)  },
	[_CobraShot]    		= { known = IsPlayerSpell(77767)  }, 
	[_ConcussiveShot]    	= { known = IsPlayerSpell(5116)   },
	[_CounterShot]    		= { known = IsPlayerSpell(147362) },
	[_Deterrence]    		= { known = IsPlayerSpell(19263)  },
	[_DireBeast]    		= { known = IsPlayerSpell(120679) },
	[_Disengage]    		= { known = IsPlayerSpell(781)    },
	[_DismissPet]    		= { known = IsPlayerSpell(2641)   }, 
	[_DistractingShot]    	= { known = IsPlayerSpell(20736)  },
	[_EagleEye]    			= { known = IsPlayerSpell(6197)   }, 
	[_ExplosiveShot]    	= { known = IsPlayerSpell(53301)  }, 
	[_Fervor]    			= { known = IsPlayerSpell(82726)  },
	[_FeignDeath]    		= { known = IsPlayerSpell(5384)   }, 
	[_Flare]    			= { known = IsPlayerSpell(1543)   },
	[_FocusFire]    		= { known = IsPlayerSpell(82692)  },
	[_GlaiveToss]    		= { known = IsPlayerSpell(117050) }, 
	[_HeartOfThePhoenix]    = { known = IsPlayerSpell(55709)  }, 
	[_HuntersMark]    		= { known = IsPlayerSpell(1130)   }, 
	[_KillCommand]    		= { known = IsPlayerSpell(34026)  },
	[_KillShot]    			= { known = IsPlayerSpell(53351)  },
	[_LynxRush]    			= { known = IsPlayerSpell(120697) },
	[_MastersCall]    		= { known = IsPlayerSpell(53271)  },
	[_MendPet]    			= { known = IsPlayerSpell(136)    }, 
	[_Misdirection]    		= { known = IsPlayerSpell(34477)  },
	[_MultiShot]    		= { known = IsPlayerSpell(2643)   },
	[_PowerShot]    		= { known = IsPlayerSpell(109259) },
	[_RapidFire]    		= { known = IsPlayerSpell(3045)   },
	[_RevivePet]    		= { known = IsPlayerSpell(982)    }, 
	[_ScareBeast]    		= { known = IsPlayerSpell(1513)   },
	[_ScatterShot]    		= { known = IsPlayerSpell(19503)  }, 
	[_SerpentSting]    		= { known = IsPlayerSpell(1978)   },
	[_SilencingShot]    	= { known = IsPlayerSpell(34490)  },
	[_Stampede]    			= { known = IsPlayerSpell(121818) }, 
	[_SteadyShot]    		= { known = IsPlayerSpell(56641)  },
	[_TameBeast]    		= { known = IsPlayerSpell(1515)   }, 
	[_TranquilizingShot]    = { known = IsPlayerSpell(19801)  }, 
	[_TrapLauncher]    		= { known = IsPlayerSpell(77769)  }, 
	[_TrapExplosive]    	= { known = IsPlayerSpell(13813)  }, 
	[_TrapFreezing]    		= { known = IsPlayerSpell(1499)   },
	[_TrapIce]    			= { known = IsPlayerSpell(13809)  },
	[_TrapSnakes]    		= { known = IsPlayerSpell(34600)  }, 
	[_WidowVenom]    		= { known = IsPlayerSpell(82654 ) }, 
	[_Berserking]      		= { known = IsPlayerSpell(26297)  },
	[_BloodFury]      		= { known = IsPlayerSpell(20572)  },  
 }
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Status</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Focus
CML_VengeanceFrame:GetStatusBarTexture():SetTexture(227/255, 106/255, 0/255,0.90,&amp;quot;OVERLAY&amp;quot;)
CML_VengeanceFrame:SetValue(_Focus)
CML_VengeanceFrame.Text:SetText(_Focus..&amp;quot;/&amp;quot;.._FocusMax, 1, 1, 1, 0.7)
CML_VengeanceFrame:SetMinMaxValues(0, _FocusMax)
-- Health Status
CML_HealthFrame:SetValue(_HP)
CML_HealthFrame.healthbartext:SetText(math.floor(_HP)..&amp;quot;%&amp;quot;, 1, 1, 1, 1)
CML_HealthFrame.healthbarnumbers:SetText(UnitHealth(&amp;quot;player&amp;quot;)..&amp;quot; / &amp;quot;..UnitHealthMax(&amp;quot;player&amp;quot;), 1, 1, 1, 1)
CML_HPYellowValue = math.abs((_HP/100)-1)

if PlayerStatusValue == 1 then
	IlikeMyBarsGreenColored = false
else
	IlikeMyBarsGreenColored = true
end

if IlikeMyBarsGreenColored then
	if _HP &amp;gt;= 91 then CML_HealthFrame:GetStatusBarTexture():SetTexture(126/255, 191/255, 55/255,0.90,0.85,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 90 and _HP &amp;gt;= 81 then CML_HealthFrame:GetStatusBarTexture():SetTexture(90/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 80 and _HP &amp;gt;= 71  then CML_HealthFrame:GetStatusBarTexture():SetTexture(135/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 70 and _HP &amp;gt;= 61 then CML_HealthFrame:GetStatusBarTexture():SetTexture(180/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 60 and _HP &amp;gt;= 51 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 50 and _HP &amp;gt;= 41  then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 180/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 40 and _HP &amp;gt;= 31 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 135/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 30 and _HP &amp;gt;= 21 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 90/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 20 and _HP &amp;gt;= 11  then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 45/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 10 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 40/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
else	
	CML_HealthFrame:GetStatusBarTexture():SetTexture(99/255, 143/255, 51/255,1,&amp;quot;OVERLAY&amp;quot;) 
end

if not PlayerStatusCheck then
	CML_VengeanceFrame:Hide()
else
	CML_VengeanceFrame:Show()
end

if UnitExists(&amp;quot;pet&amp;quot;) == 1 then
	CML_VengeanceFrame.healingmodebartext:SetText(&amp;quot; &amp;quot;, 1, 1, 1, 0.7)
	CML_VengeanceFrame.healingmodebar:SetTexture(126/255, 191/255, 55/255,0.90)
	CML_VengeanceFrame.healingmodebartext:SetTextColor(255/255, 255/255, 255/255,1)
else
	CML_VengeanceFrame.healingmodebartext:SetText(&amp;quot; &amp;quot;, 1, 1, 1, 0.7)
	CML_VengeanceFrame.healingmodebar:SetTexture(191/255,0/255,0/255,0.85)
	CML_VengeanceFrame.healingmodebartext:SetTextColor(255/255, 255/255, 255/255,1)
end

if macros[&amp;quot;ActiveCooldowns&amp;quot;] then
	CML_VengeanceFrame.rangebar:SetTexture(126/255, 191/255, 55/255,0.90,0.85)
	CML_VengeanceFrame.rangebartext:SetText(&amp;quot;ON&amp;quot;, 0, 1, 0, 0.7)
else
	CML_VengeanceFrame.rangebar:SetTexture(191/255,0/255,0/255,0.85)
	CML_VengeanceFrame.rangebartext:SetText(&amp;quot;OFF&amp;quot;, 0, 1, 0, 0.7)
end

if CML_Pause() or macros[&amp;quot;Pause&amp;quot;] == true then
	CML_VengeanceFrame.Border:SetTexture(0/255, 0/255, 0/255,0.35)
elseif not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	CML_VengeanceFrame.Border:SetTexture(99/255, 143/255, 51/255,0.35)
elseif CML_UnitFacing() ~= true or IsSpellInRange(_GI(3044),&amp;quot;target&amp;quot;) ~= 1 then
	CML_VengeanceFrame.Border:SetTexture(1,0,0,0.35)
else
	CML_VengeanceFrame.Border:SetTexture(0,1,0,0.35)
end

-- Display AoE Status
if macros[&amp;quot;AoE&amp;quot;] == 2 then
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;AoE&amp;quot;, 255/255,255/255,0/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(191/255,0/255,0/255,0.85)
elseif macros[&amp;quot;AoE&amp;quot;] == 3 then
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Mass&amp;quot;, 255/255,255/255,255/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(0/255, 0/255, 255/255,0.90)
else
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Single&amp;quot;,255/255,255/255,0/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(126/255, 191/255, 55/255,0.90,0.85)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Survival</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CML_Interrupts()

if FervorCast &amp;gt;= GetTime() - 1 then
	_Focus = _Focus + 50
end

-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end

CML_ActiveCooldowns()

-- auto_shot
RunMacroText(&amp;quot;/startattack&amp;quot;)
RunMacroText(&amp;quot;/petstartattack&amp;quot;)

-- fervor,if=enabled&amp;focus&amp;lt;=50
if Spells[_Fervor].known  and _SA(_Fervor) and _Focus &amp;lt;= 50 then
	_Cast(_Fervor,&amp;quot;player&amp;quot;)
	return true
end

-- a_murder_of_crows,if=enabled&amp;!ticking
if Spells[_AMurderOfCrows].known  and _SA(_AMurderOfCrows) and CML_HaveBuff(&amp;quot;target&amp;quot;,_AMurderOfCrows,0,&amp;quot;player&amp;quot;) ~= true then
	_Cast(_AMurderOfCrows,&amp;quot;target&amp;quot;)
	return true
end

-- lynx_rush,if=enabled&amp;!dot.lynx_rush.ticking
if Spells[_LynxRush].known  and _SA(_LynxRush) and CML_HaveBuff(&amp;quot;player&amp;quot;,_LynxRush) ~= true then
	_Cast(_LynxRush,&amp;quot;player&amp;quot;)
	return true
end

-- black_arrow,if=!ticking&amp;target.time_to_die&amp;gt;=8
if macros[&amp;quot;AoE&amp;quot;] == 3 and Spells[_BlackArrow].known  and _SA(_BlackArrow) and ( UnitHealth(&amp;quot;target&amp;quot;) &amp;gt;= (400000*_Members) or UnitExists(&amp;quot;targettarget&amp;quot;) ~= 1 ) then
	_Cast(_BlackArrow,&amp;quot;target&amp;quot;)
	return true
end

-- explosive_shot,if=buff.lock_and_load.react
if Spells[_ExplosiveShot].known  and _SA(_ExplosiveShot) and CML_HaveBuff(&amp;quot;player&amp;quot;,56453) == true then
	_Cast(_ExplosiveShot,&amp;quot;target&amp;quot;)
	return true
end
-- glaive_toss,if=enabled
if Spells[_GlaiveToss].known  and _SA(_GlaiveToss) then
	_Cast(_GlaiveToss,&amp;quot;target&amp;quot;)
	return true
end
-- powershot,if=enabled
if Spells[_PowerShot].known  and _SA(_PowerShot) then
	_Cast(_PowerShot,&amp;quot;target&amp;quot;)
	return true
end
-- barrage,if=enabled
if Spells[_Barrage].known  and _SA(_Barrage) then
	_Cast(_Barrage,&amp;quot;target&amp;quot;)
	return true
end
-- multi_shot,if=active_enemies&amp;gt;3
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_MultiShot].known  and _SA(_MultiShot) then
	_Cast(_MultiShot,&amp;quot;target&amp;quot;)
	return true
end
-- multi_shot,if cleave every 12 secs to keep SS up.
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_MultiShot].known  and _SA(_MultiShot) and ( MultiShotCast == nil or MultiShotCast &amp;lt;= GetTime() - 12 ) then
	_Cast(_MultiShot, &amp;quot;target&amp;quot;)
	return true
end
-- cobra_shot,if=active_enemies&amp;gt;3
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_CobraShot].known  and _SA(_CobraShot) then
	_Cast(_CobraShot,&amp;quot;target&amp;quot;)
	return true
end
-- serpent_sting,if=!ticking
if Spells[_SerpentSting].known  and _SA(_SerpentSting) and CML_HaveDebuff(&amp;quot;target&amp;quot;,_SerpentSting,0,&amp;quot;player&amp;quot;) ~= true and not ( SerpentCast ~= nil and SerpentCast &amp;gt;= GetTime() - 2 ) and T2D(&amp;quot;target&amp;quot;) &amp;gt;= 14 then
	_Cast(_SerpentSting,&amp;quot;target&amp;quot;)
	return true
end
-- explosive_shot,if=cooldown_react
if Spells[_ExplosiveShot].known  and _SA(_ExplosiveShot) then
	_Cast(_ExplosiveShot,&amp;quot;target&amp;quot;)
	return true
end
-- kill_shot
if Spells[_KillShot].known  and _SA(_KillShot) then
	_Cast(_KillShot,&amp;quot;target&amp;quot;)
	return true
end
-- black_arrow,if=!ticking&amp;target.time_to_die&amp;gt;=8
if Spells[_BlackArrow].known  and _SA(_BlackArrow) then
	_Cast(_BlackArrow,&amp;quot;target&amp;quot;)
	return true
end
-- multi_shot,if=buff.thrill_of_the_hunt.react&amp;dot.serpent_sting.remains&amp;lt;2
if Spells[_MultiShot].known  and _SA(_MultiShot) and CML_HaveDebuff(&amp;quot;target&amp;quot;,_SerpentSting,2,&amp;quot;player&amp;quot;) ~= true and CML_HaveBuff(&amp;quot;player&amp;quot;, 109306) == true then
	_Cast(_MultiShot,&amp;quot;target&amp;quot;)
	return true
end
-- arcane_shot,if=buff.thrill_of_the_hunt.react
if Spells[_ArcaneShot].known  and _SA(_ArcaneShot) and CML_HaveBuff(&amp;quot;player&amp;quot;, 109306) == true and _Focus &amp;gt;= 35 then
	_Cast(_ArcaneShot,&amp;quot;target&amp;quot;)
	return true
end
-- dire_beast,if=enabled
if Spells[_DireBeast].known  and _SA(_DireBeast) then
	_Cast(_DireBeast,&amp;quot;target&amp;quot;)
	return true
end
-- cobra_shot,if=dot.serpent_sting.remains&amp;lt;6
if Spells[_CobraShot].known  and _SA(_CobraShot) and CML_HaveDebuff(&amp;quot;target&amp;quot;,_SerpentSting,6) ~= true then
	_Cast(_CobraShot,&amp;quot;target&amp;quot;)
	return true
end
-- arcane_shot,if=focus&amp;gt;=67
if Spells[_ArcaneShot].known  and _SA(_ArcaneShot) and _Focus &amp;gt;= 55 then
	_Cast(_ArcaneShot,&amp;quot;target&amp;quot;)
	return true
end
-- cobra_shot
if Spells[_CobraShot].known  and _SA(_CobraShot) and ( GetSpellCD(_ExplosiveShot) &amp;gt;= 1.5 or _Focus &amp;lt;= 25 ) then
	_Cast(_CobraShot,&amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Marksman</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CML_Interrupts()

if SteadyCast &amp;gt;= GetTime() - 1 then
	_Focus = _Focus + 14
end
if FervorCast &amp;gt;= GetTime() - 1 then
	_Focus = _Focus + 50
end

-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end

CML_ActiveCooldowns()

-- auto_shot
RunMacroText(&amp;quot;/startattack&amp;quot;)
RunMacroText(&amp;quot;/petstartattack&amp;quot;)

-- powershot,if=enabled
if Spells[_PowerShot].known  and _SA(_PowerShot) then
	_Cast(_PowerShot,&amp;quot;target&amp;quot;)
	return true
end

-- lynx_rush,if=enabled&amp;!dot.lynx_rush.ticking
if Spells[_LynxRush].known  and _SA(_LynxRush) and CML_HaveBuff(&amp;quot;player&amp;quot;,_LynxRush) ~= true then
	_Cast(_LynxRush,&amp;quot;player&amp;quot;)
	return true
end
-- steady_shot,if=buff.steady_focus.remains&amp;lt;(action.steady_shot.cast_time+1)&amp;!in_flight
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_SteadyShot].known  and _SA(_SteadyShot) and CML_HaveBuff(&amp;quot;player&amp;quot;,53220,2,&amp;quot;player&amp;quot;) ~= true and ( SteadyCount ~= nil and SteadyCount &amp;lt; 2 ) then
	_Cast(_SteadyShot,&amp;quot;target&amp;quot;)
	return true
end
-- multi_shot,if=active_enemies&amp;gt;5
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_MultiShot].known  and _SA(_MultiShot) then
	_Cast(_MultiShot,&amp;quot;target&amp;quot;)
	return true
end
-- fervor,if=enabled&amp;focus&amp;lt;=50
if FervorCheck and Spells[_Fervor].known  and _SA(_Fervor) and _Focus &amp;lt;= FervorValue and CML_HaveBuff(&amp;quot;player&amp;quot;,53220,8) then
	_Cast(_Fervor,&amp;quot;player&amp;quot;)
	return true
end
-- a_murder_of_crows,if=enabled&amp;!ticking
if Spells[_AMurderOfCrows].known  and _SA(_AMurderOfCrows) and CML_HaveBuff(&amp;quot;player&amp;quot;,_AMurderOfCrows) ~= true then
	_Cast(_AMurderOfCrows,&amp;quot;target&amp;quot;)
	return true
end
-- dire_beast,if=enabled
if Spells[_DireBeast].known  and _SA(_DireBeast) then
	_Cast(_DireBeast,&amp;quot;target&amp;quot;)
	return true
end
-- glaive_toss,if=enabled
if Spells[_GlaiveToss].known  and _SA(_GlaiveToss) then
	_Cast(_GlaiveToss,&amp;quot;target&amp;quot;)
	return true
end
-- barrage,if=enabled
if Spells[_Barrage].known  and _SA(_Barrage) then
	_Cast(_Barrage,&amp;quot;target&amp;quot;)
	return true
end
-- steady_shot,if=buff.pre_steady_focus.up&amp;buff.steady_focus.remains&amp;lt;=5
if Spells[_SteadyShot].known  and _SA(_SteadyShot) and CML_HaveBuff(&amp;quot;player&amp;quot;,53220,5) ~= true and ( SteadyCount ~= nil and SteadyCount &amp;lt; 2 ) then
	_Cast(_SteadyShot,&amp;quot;target&amp;quot;)
	return true
end
-- aimed_shot,if=buff.master_marksman_fire.react
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_AimedShot].known  and _SA(_AimedShot) and CML_HaveBuff(&amp;quot;player&amp;quot;,82926) == true then
	_Cast(_AimedShot,&amp;quot;target&amp;quot;)
	return true
end
-- steady_shot,if=active_enemies&amp;gt;5
if macros[&amp;quot;AoE&amp;quot;] == 2 and Spells[_SteadyShot].known  and _SA(_SteadyShot) then
	_Cast(_SteadyShot,&amp;quot;target&amp;quot;)
	return true
end
-- serpent_sting,if=!ticking
if Spells[_SerpentSting].known  and _SA(_SerpentSting) and CML_HaveDebuff(&amp;quot;target&amp;quot;,_SerpentSting,0.1,&amp;quot;player&amp;quot;) ~= true and not ( SerpentCast ~= nil and SerpentCast &amp;gt;= GetTime() - 2 ) and T2D(&amp;quot;target&amp;quot;) &amp;gt;= 14 then
	_Cast(_SerpentSting,&amp;quot;target&amp;quot;)
	return true
end
-- chimera_shot
if Spells[_ChimeraShot].known  and _SA(_ChimeraShot) then
	_Cast(_ChimeraShot,&amp;quot;target&amp;quot;)
	return true
end
-- steady_shot,if=buff.steady_focus.remains&amp;lt;(action.steady_shot.cast_time+1)&amp;!in_flight
if Spells[_SteadyShot].known  and _SA(_SteadyShot) and CML_HaveBuff(&amp;quot;player&amp;quot;,53220,2,&amp;quot;player&amp;quot;) ~= true and ( SteadyCount ~= nil and SteadyCount &amp;lt; 2 ) then
	_Cast(_SteadyShot,&amp;quot;target&amp;quot;)
	return true
end

-- arcane_shot if over 90 Focus
if Spells[_ArcaneShot].known  and _SA(_ArcaneShot) and _Focus &amp;gt;= 90 then
	_Cast(_ArcaneShot,&amp;quot;target&amp;quot;)
	return true
end

-- run_action_list,name=careful_aim,if=target.health.pct&amp;gt;80
if Spells[_AimedShot].known  and _SA(_AimedShot) and CML_GetHP(&amp;quot;target&amp;quot;) &amp;gt;= 80 and not PQR_IsMoving() then
	_Cast(_AimedShot,&amp;quot;target&amp;quot;)
	return true
end

-- kill_shot
if Spells[_KillShot].known  and _SA(_KillShot) then
	_Cast(_KillShot,&amp;quot;target&amp;quot;)
	return true
end

-- aimed_shot,if=buff.master_marksman_fire.react
if Spells[_AimedShot].known  and _SA(_AimedShot) and CML_HaveBuff(&amp;quot;player&amp;quot;,82926) == true then
	_Cast(_AimedShot,&amp;quot;target&amp;quot;)
	return true
end

-- arcane_shot,if=buff.thrill_of_the_hunt.react
if Spells[_ArcaneShot].known  and _SA(_ArcaneShot) and ( CML_HaveBuff(&amp;quot;player&amp;quot;, 109306) == true or ( PQR_IsMoving(1) and _Focus &amp;gt;= 60 ) ) then
	_Cast(_ArcaneShot,&amp;quot;target&amp;quot;)
	return true
end

-- aimed_shot,if=cast_time&amp;lt;1.7
if Spells[_AimedShot].known  and _SA(_AimedShot) and select(7,GetSpellInfo(_AimedShot)) &amp;lt;= 1700 then
	_Cast(_AimedShot,&amp;quot;target&amp;quot;)
	return true
end

-- arcane_shot,if=focus&amp;gt;=60|(focus&amp;gt;=43&amp;(cooldown.chimera_shot.remains&amp;gt;=action.steady_shot.cast_time))&amp;(!buff.rapid_fire.up&amp;!buff.bloodlust.react)
if Spells[_ArcaneShot].known  and _SA(_ArcaneShot) and (_Focus &amp;gt;= 61 or CML_HaveBuff(&amp;quot;player&amp;quot;,34471) == true) then
	_Cast(_ArcaneShot,&amp;quot;target&amp;quot;)
	return true
end

-- steady_shot
if Spells[_SteadyShot].known  and _SA(_SteadyShot) then
	_Cast(_SteadyShot,&amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CML_HasHero() == true then _Hero = true else _Hero = false end
--Pause
if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() return true end

-- Set Mouseover Focus
if FocusKey 
  and FocusKeyCheck then
	FocusUnit(&amp;quot;mouseover&amp;quot;)
end

CML_Interrupts()

if PQR_IsMoving(1) and GetUnitSpeed(&amp;quot;player&amp;quot;) &amp;lt; select(2,GetUnitSpeed(&amp;quot;player&amp;quot;)) - 3 then
--	print(&amp;quot;snared&amp;quot;)
end

-- Ment Pet
if UnitExists(&amp;quot;pet&amp;quot;)
  and CML_GetHP(&amp;quot;playerpet&amp;quot;) &amp;lt;= MendPet
  and MendPetCheck
  and not UnitIsDeadOrGhost(&amp;quot;pet&amp;quot;) 
  and not PQR_IsOutOfSight(&amp;quot;pet&amp;quot;)
  and not UnitBuffID(&amp;quot;pet&amp;quot;, 136) then
	_Cast(_MendPet, nil)
end

-- Pet Move To
if UnitExists(&amp;quot;pet&amp;quot;) then
	if PetMoveToMouseKeyCheck
	  and PetMoveToMouseKey
	  and not GetCurrentKeyBoardFocus() then
		PetMoveTo()
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end
end

-- Camouflage
if UnitBuffID(&amp;quot;player&amp;quot;, 51755) then
	CastCamo = nil
end
if not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
  and not UnitBuffID(&amp;quot;player&amp;quot;, 51755) 
  and not UnitBuffID(&amp;quot;player&amp;quot;, 126554) 
  and CastCamo == nil then
	CastCamo = GetTime()
end
if macros[&amp;quot;Camouflage&amp;quot;]
  and not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
  and CastCamo ~= nil 
  and CastCamo &amp;lt; GetTime() - 1 then
	CastSpellByName(GetSpellInfo(51753))
end

-- Aspect of the Cheetah
if not UnitAffectingCombat(&amp;quot;player&amp;quot;)
  and not UnitBuffID(&amp;quot;player&amp;quot;, 136461)
  and not IsMounted()
  and PQR_IsMoving(ActiveAspectValue)
  and not UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
  and ActiveAspectsCheck
  and GetShapeshiftForm() ~= 2 then
    CastShapeshiftForm(2)
end
-- Aspect of the Hawk
if UnitAffectingCombat(&amp;quot;player&amp;quot;)
  and not UnitBuffID(&amp;quot;player&amp;quot;, 136461)
  and GetShapeshiftForm() ~= 1 then
  	CastShapeshiftForm(1)
  	return true
end

-- Freezing Trap
if FreezingTrapKeyCheck and FreezingTrapKey and Spells[_TrapFreezing].known and _SA(_TrapFreezing) then
  	if Spells[_ScatterShot].known and _SA(_ScatterShot) then
  		_Cast(_ScatterShot,&amp;quot;mouseover&amp;quot;)
  	end
	_Cast(_TrapFreezing, nil)
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart()
		CameraOrSelectOrMoveStop()
	end
	return true
end

-- Traps
if TrapsKeyCheck and Spells[_TrapExplosive].known  and _SA(_TrapExplosive)
  and ((ExplosiveTrapCheck and ExplosiveTrapValue == 1 and TrapsKey)
  or (ExplosiveTrapCheck and ExplosiveTrapValue == 2 and (UnitIsUnit(&amp;quot;mouseover&amp;quot;,&amp;quot;target&amp;quot;) or TrapsKey))) then 
	_Cast(_TrapExplosive, nil)
end
if TrapsKeyCheck and Spells[_TrapSnakes].known  and _SA(_TrapSnakes)
  and ((SnakesTrapCheck and SnakesTrapValue == 1 and TrapsKey)
  or (SnakesTrapCheck and SnakesTrapValue == 2 and (UnitIsUnit(&amp;quot;mouseover&amp;quot;,&amp;quot;target&amp;quot;) or TrapsKey))) then 
	_Cast(_TrapSnakes, nil)
end
if TrapsKeyCheck and Spells[_TrapIce].known  and _SA(_TrapIce)
  and ((IceTrapCheck and IceTrapValue == 1 and TrapsKey)
  or (IceTrapCheck and IceTrapValue == 2 and (UnitIsUnit(&amp;quot;mouseover&amp;quot;,&amp;quot;target&amp;quot;) or TrapsKey))) then 
	_Cast(_TrapIce, nil)
end

if macros[&amp;quot;CallPet1Queue&amp;quot;] and not UnitExists(&amp;quot;playerpet&amp;quot;) then
	if Spells[_CallPet1].known and _SA(_CallPet1) then
		_Cast(_CallPet1, nil)
		return true
	end
end
if macros[&amp;quot;CallPet2Queue&amp;quot;] and not UnitExists(&amp;quot;playerpet&amp;quot;) then
	if Spells[_CallPet2].known and _SA(_CallPet2) then
		_Cast(_CallPet2, nil)
		return true
	end
end
if macros[&amp;quot;CallPet3Queue&amp;quot;] and not UnitExists(&amp;quot;playerpet&amp;quot;) then
	if Spells[_CallPet3].known and _SA(_CallPet3) then
		_Cast(_CallPet3, nil)
		return true
	end
end
if macros[&amp;quot;CallPet4Queue&amp;quot;] and not UnitExists(&amp;quot;playerpet&amp;quot;) then
	if Spells[_CallPet4].known and _SA(_CallPet4) then
		_Cast(_CallPet4, nil)
		return true
	end
end
if macros[&amp;quot;CallPet5Queue&amp;quot;] and not UnitExists(&amp;quot;playerpet&amp;quot;) then
	if Spells[_CallPet5].known and _SA(_CallPet5) then
		_Cast(_CallPet5, nil)
		return true
	end
end
if macros[&amp;quot;WidowVenomQueue&amp;quot;] then
	if Spells[_WidowVenom].known and _SA(_WidowVenom) then
		_Cast(_WidowVenom, &amp;quot;target&amp;quot;)
		return true
	end
end

if UnitExists(&amp;quot;target&amp;quot;) ~= nil
  and HuntersMarkCheck then
	if MarkTimer == nil 
	    or OldTarget ~= UnitGUID(&amp;quot;target&amp;quot;) then
		MarkTimer = (GetTime() + HuntersMark)
	end

	if MarkTimer ~= nil then
		if MarkTimer &amp;lt;= GetTime() then
			if not PlayerCombat 
			  and not UnitDebuffID(&amp;quot;target&amp;quot;, 1130)
			  and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) then
				MarkTimer = nil
				_Cast(_HuntersMark, &amp;quot;target&amp;quot;)
			end
		end
	end
	OldTarget = UnitGUID(&amp;quot;target&amp;quot;)	
end


if macros[&amp;quot;ExplosiveTrapQueue&amp;quot;] then
	if Spells[_TrapExplosive].known and _SA(_TrapExplosive) then
		_Cast(_TrapExplosive, nil)
		if SpellIsTargeting() then 
			CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop()
		end
		return true
	end
end
if macros[&amp;quot;FreezingTrapQueue&amp;quot;] then
	if Spells[_TrapFreezing].known and _SA(_TrapFreezing) then
		_Cast(_TrapFreezing, nil)
		if SpellIsTargeting() then 
			CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop()
		end
		return true
	end
end
if macros[&amp;quot;SnakesTrapQueue&amp;quot;] then
	if Spells[_TrapSnakes].known and _SA(_TrapSnakes) then
		_Cast(_TrapSnakes, nil)
		if SpellIsTargeting() then 
			CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop()
		end
		return true
	end
end
if macros[&amp;quot;IceTrapQueue&amp;quot;] then
	if Spells[_TrapIce].known and _SA(_TrapIce) then
		_Cast(_TrapIce, nil)
		if SpellIsTargeting() then 
			CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop()
		end
		return true
	end
end

if CML_StopAll() or UnitBuffID(&amp;quot;player&amp;quot;,_FeignDeath) or ( FeignDeathCast and FeignDeathCast &amp;gt;= GetTime() - 2 ) then return true end
--------- Combat Check ---------
if ( CombatCheckCheck and CML_CombatCheck() ) or UnitExists(&amp;quot;target&amp;quot;) == nil or UnitCastingInfo(&amp;quot;player&amp;quot;) or UnitChannelInfo(&amp;quot;player&amp;quot;) then return true end
if PauseKey and PauseKeyCheck then return true end	
if macros[&amp;quot;Pause&amp;quot;] == true then
   	StopAttack()
   	SpellStopCasting()
	PetFollow()
	ClearTarget()
	return true
end

CML_Facing()

-- Deterrence
if DeterrenceCheck and Spells[_Deterrence].known and _SA(_Deterrence) then
    if _HP &amp;lt;= Deterrence then
      	_Cast(_Deterrence, nil)
      	return true
  	end
end

-- Misdirection
if MisdirectionCheck and Spells[_Misdirection].known and _SA(_Misdirection) and UnitIsUnit(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) ~= 1 then
	local MisdirectionTarget = nil
	if UnitExists(&amp;quot;focus&amp;quot;) and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;) then
		MisdirectionTarget = &amp;quot;focus&amp;quot;
	elseif UnitExists(&amp;quot;pet&amp;quot;) and not UnitIsDeadOrGhost(&amp;quot;pet&amp;quot;) then
	    MisdirectionTarget = &amp;quot;pet&amp;quot;
	end	
  	if UnitThreatSituation(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 3 then
		if MisdirectionTarget ~= nil then
			_Cast(_Misdirection, MisdirectionTarget)
		end
  	end
  	if UnitThreatSituation(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1 and MisdirectionValue == 2 then
		if MisdirectionTarget ~= nil then
			_Cast(_Misdirection, MisdirectionTarget)
		end
  	end
  	if MisdirectionValue == 3 then
		if MisdirectionTarget ~= nil then
			_Cast(_Misdirection, MisdirectionTarget)
		end
  	end  	
end

-- Feign Death
if FeignDeathCheck and Spells[_FeignDeath].known and _SA(_FeignDeath) then
  	if UnitThreatSituation(&amp;quot;player&amp;quot;) == 3 and _HP &amp;lt;= FeignDeath then
  		_Cast(_FeignDeath, nil)
      	return true
  	end
end
	
if macros[&amp;quot;ConcShotQueue&amp;quot;] then
	if Spells[_ConcussiveShot].known and _SA(_ConcussiveShot) then
		_Cast(_ConcussiveShot, &amp;quot;target&amp;quot;)
		return true
	end
end
if macros[&amp;quot;DismissPetQueue&amp;quot;] and UnitExists(&amp;quot;playerpet&amp;quot;) ~= nil and ( _Dismiss == nil or _Dismiss &amp;lt;= GetTime() - 3 ) then
	if Spells[_DismissPet].known and _SA(_DismissPet) then
		_Cast(_DismissPet, nil)
		return true
	end
end
if macros[&amp;quot;DistractingShotQueue&amp;quot;]  then
	if Spells[_DistractingShot].known and _SA(_DistractingShot) then
		_Cast(_DistractingShot, &amp;quot;target&amp;quot;)
		return true
	end
end
if macros[&amp;quot;ScatterQueue&amp;quot;] and UnitExists(&amp;quot;playerpet&amp;quot;) then
	if Spells[_ScatterShot].known and _SA(_ScatterShot) then
		_Cast(_ScatterShot, &amp;quot;target&amp;quot;)
		return true
	end
end
if macros[&amp;quot;StampedeQueue&amp;quot;] and UnitExists(&amp;quot;playerpet&amp;quot;) then
	if Spells[_Stampede].known and _SA(_Stampede) then
		_Cast(_Stampede, nil)
		return true
	end
end

if LastWhistle and LastWhistle &amp;gt;= GetTime() - 2 and not UnitExists(&amp;quot;pet&amp;quot;)  then
	_Cast(_RevivePet)
	return true
end 

if UnitCastingInfo(&amp;quot;player&amp;quot;) or UnitChannelInfo(&amp;quot;player&amp;quot;) then return true end

if Spells[_HeartOfThePhoenix].known and _SA(_HeartOfThePhoenix) and UnitIsDead(&amp;quot;pet&amp;quot;) then
	_Cast(_HeartOfThePhoenix,&amp;quot;pet&amp;quot;)
	return true
end
if Spells[_RevivePet].known and _SA(_RevivePet) and UnitIsDead(&amp;quot;pet&amp;quot;) then
	_Cast(_RevivePet,&amp;quot;pet&amp;quot;)
	return true
end

if not UnitExists(&amp;quot;pet&amp;quot;) 
  and not IsMounted() 
  and not UnitIsDead(&amp;quot;pet&amp;quot;) 
  and ActivePetWhistleCheck 
  and ( LastWhistle and LastWhistle &amp;lt;= GetTime() - 15 or LastWhistle == nil ) then 
  	if ActivePetWhistle == 1 then
		_Cast(883, nil)
	elseif ActivePetWhistle == 2 then
		_Cast(83242, nil)
	elseif ActivePetWhistle == 3 then
		_Cast(83243, nil)
	elseif ActivePetWhistle == 4 then
		_Cast(83244, nil)
	elseif ActivePetWhistle == 5 then
		_Cast(83245, nil)
	end
end

if StackFocusKeyCheck and StackFocusKey then _Focus = _Focus - 30 end

-- auto_shot
RunMacroText(&amp;quot;/startattack&amp;quot;)
RunMacroText(&amp;quot;/petstartattack&amp;quot;)
-- Pet Passive Behaviour
if PetPassiveBehaviourCheck then
	if PetPassiveBehaviour == 1 then
		PetAttack(&amp;quot;target&amp;quot;)
	elseif PetPassiveBehaviour == 2 then
		if UnitExists(&amp;quot;focus&amp;quot;) == 1 then
			PetAttack(&amp;quot;focus&amp;quot;) 
		else
			PetAttack(&amp;quot;target&amp;quot;)
		end
	elseif PetPassiveBehaviour == 3 then
		if UnitExists(&amp;quot;mouseover&amp;quot;) == 1 then
			PetAttack(&amp;quot;mouseover&amp;quot;) 
		else
			PetAttack(&amp;quot;target&amp;quot;)
		end
	elseif PetPassiveBehaviour == 4 then
		PetFollow()
	end
end

-- Thanks and Credits to Xelper for these codes
--Implement PQR_resumeAttack.. this is used to prevent 
--abilities lower in the rotation from being cast. 
if PQR_resumeAttack == nil then 
    PQR_resumeAttack = 0 
elseif PQR_resumeAttack &amp;gt; GetTime() then 
    return true 
else 
    PQR_resumeAttack = 0 
end 

-- Raiding Events -- 
if not RaidingEventsCheck then
	return false
end

local PlayerHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

for i = 1, 4 do
	local bossCheck = &amp;quot;boss&amp;quot;..i

	if UnitExists(bossCheck) then
		
		local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16)
		local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(bossCheck)
		
		if npcID == 62511 or npcID == 62711 then --Amber-Shaper Un&amp;apos;sok or Amber Monstrosity
			local reshapeName = GetSpellInfo(122370)
			local reshapeLife = UnitDebuff(&amp;quot;player&amp;quot;, reshapeName)
			
			if reshapeLife ~= nil then
				local playerCasting = UnitCastingInfo(&amp;quot;vehicle&amp;quot;)
				local playerCasting2 = UnitCastingInfo(&amp;quot;player&amp;quot;)
				--grab spell names for abilities:
				local amberExplosion = GetSpellInfo(122402)
				
				--interrupt self if casting amber explosion
				if playerCasting == amberExplosion then
					--Press the 2nd button (Struggle for Control)
					RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
					return true
				end
				
				--interrupt self if casting amber explosion
				if playerCasting2 == amberExplosion then
					--Press the 2nd button (Struggle for Control)
					RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
					return true
				end
				
				--interrupt the target if casting amber explosion
				if bossCasting and bossCasting == amberExplosion then
					TargetUnit(bossCheck)
					--Press the 1st button (Amber Strike)
					RunMacroText(&amp;quot;/click OverrideActionBarButton1&amp;quot;)
					return true
				end
				
				if UnitExists(&amp;quot;boss2&amp;quot;) then
					if bossCheck == &amp;quot;boss2&amp;quot; then 
						return true --prevent the rotation from executing while reshaped
					end
				else
					return true
				end

			end
			
		elseif npcID == 60709 then --Spirit Kings: Qiang. (Impervious Shield)
			--Stop all attacks until 0.2 seconds after cast time ends and until buff (Impervious Shield) is gone.
			
			--only continue checking if we are targetting the boss or have no target.
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (single == true or aoe == false or aoe == true) then
				local impName = GetSpellInfo(117961)
				local impShieldBuff = UnitBuffID(bossCheck, 117961)
				
				if (bossCasting and bossCasting == impName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.2
					return true
				end
				
				if impShieldBuff then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end
			
		elseif npcID == 60710 then --Spirit Kings: Subetai. (Sleight of Hand)
			--Stop all attacks when casting Sleight of Hand, and until 0.2 seconds after cast time ends.
			--Also stop attacks if not stunned.
			
			--only continue checking if we are targetting the boss or have no target.
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (single == true or aoe == false or aoe == true) then
				local sleightName = GetSpellInfo(118162)
				local sleightBuff = UnitBuffID(bossCheck, 118162)
				--				  HoJ,   FoJ,  Kidney  
				local stunList = { 853, 105593, 408 }
				local isStunned = nil
				for _,v in ipairs(stunList) do
					local debuffCheck = UnitDebuffID(bossCheck, v)
					if debuffCheck then
						isStunned = true
					end
				end
				
				if (bossCasting and bossCasting == sleightName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.2
					return true
				end
				
				if sleightBuff and not isStunned then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end

		elseif npcID == 60701 then --Spirit Kings: Zian. (Shield of Darkness)
			--Stop all attacks until 0.5 seconds after cast time ends and until buff (Shield of Darkness) is gone.
						
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (single == true or aoe == false or aoe == true) then
				local sodName = GetSpellInfo(117697)
				local sodBuff = UnitBuffID(bossCheck, 117697)
				
				if (bossCasting and bossCasting == sodName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.5 --0.5 to account for lag... REALLY do not want to set this off.
					return true
				end
				
				if sodBuff then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end
		end
	end
end

--Gara&amp;apos;jal 
local returnSoul = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
if returnSoul and returnSoul - GetTime() &amp;lt; 2 then 
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end

-- Fading Light
if select(7,UnitDebuffID(&amp;quot;player&amp;quot;, 105925)) and IsRightShiftKeyDown() == nil then
	if select(7,UnitDebuffID(&amp;quot;player&amp;quot;, 105925)) - GetTime() &amp;lt; 1.3 then
		RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
	end
end
	
-- Hour of Twilight
local HoT,_,_,_,_,timer = UnitCastingInfo(&amp;quot;boss1&amp;quot;)
if HoT == GetSpellInfo(103327) and IsRightShiftKeyDown() == nil then
	if timer/1000 - GetTime() &amp;lt; 1.3 then
		RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
	end	
end

-- Avoid Fragmentation on Madness
if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,106791)) and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,106791)) - GetTime() &amp;lt; 0.7 then 
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end

-- Spine of Deathwing
if UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if UnitAura(&amp;quot;player&amp;quot;, &amp;quot;Parachute&amp;quot;) then
		RunMacroText(&amp;quot;/cancelaura Parachute&amp;quot;)
	end
end

-- Darkmoon Faerie Cannon
if select(7,UnitBuffID(&amp;quot;player&amp;quot;,102116)) and select(7,UnitBuffID(&amp;quot;player&amp;quot;,102116)) - GetTime() &amp;lt; 1.07 then 
	CancelUnitBuff(&amp;quot;player&amp;quot;,&amp;quot;Magic Wings&amp;quot;) 
end

-- Bloody Knives Boss Horde Krassarang Wilds.
local BloodyKnives = UnitDebuffID(&amp;quot;player&amp;quot;,135343)
if BloodyKnives then 
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end

-- Pvp Flag
local flag = { &amp;quot;Alliance Flag&amp;quot;, &amp;quot;Horde Flag&amp;quot;, &amp;quot;Netherstorm Flag&amp;quot; }
for i=1,#flag do InteractUnit(flag[i]) end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--- Updates</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CodeMyLife Hunter v2.01
- Fixed Disengage Queues bug.(Completely removedas its an instant off GCD anyway.... Idon&amp;apos;t see why I added it lol)

CodeMyLife Hunter v2.0
- Three Specs into one profile.
- New UI Player Status.
- New PQI Setup.
- New PQI Cooldowns management.
- New Traps Management. Queues, Automated, Keypress.
- New Pet Passive Behaviour allowing you to offtank with your Pet easily.
- New Misdirection Modes.
- All GCD Spells coded to act as Queues. Queueing spells never been that easy.
- Spam Filter.</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></HUNTER>