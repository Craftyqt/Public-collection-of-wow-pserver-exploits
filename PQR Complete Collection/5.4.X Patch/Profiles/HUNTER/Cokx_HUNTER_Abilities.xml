<?xml version="1.0" encoding="utf-8" ?><HUNTER><Ability><Name>PetHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;pet&amp;quot;) 
and not UnitIsDead(&amp;quot;pet&amp;quot;)
and LineOfSight(&amp;quot;pet&amp;quot;)
and ePet[1].PRange &amp;lt; 40
and PQR_SpellAvailable(136)
and not HaveBuff(&amp;quot;pet&amp;quot;,136)
and (100 * UnitHealth(&amp;quot;pet&amp;quot;) / UnitHealthMax(&amp;quot;pet&amp;quot;)) &amp;lt; 95
then 
CastSpellByName(GetSpellInfo(136))
--CastSpellByName(GetSpellInfo(114189))
return true
 end</Lua><RecastDelay>0</RecastDelay><Target>Pet</Target><CancelChannel>False</CancelChannel><SkipUnknown>False</SkipUnknown></Ability><Ability><Name>Aspect of the Hawk</Name><Default>false</Default><SpellID>13165</SpellID><Actions></Actions><Lua>if not HaveBuff(&amp;quot;player&amp;quot;,{109260,13165},0)
and UnitAffectingCombat(&amp;quot;player&amp;quot;)  
then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>&amp;gt; RDY</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted then
  ----------------------------------
  -- Load Data Files
  ----------------------------------

	if not PQR_LoadLua(&amp;quot;PQR_Cokx_PVP_DATA.lua&amp;quot;) then
		PQR_WriteToChat(&amp;quot;You are missing a key file: PQR_Cokx_PVP_DATA.lua. Please put this file in the Data folder and reload PQR. Thank You!&amp;quot;, &amp;quot;Error&amp;quot;)
		PQR_RotationStop()
		return true
	end
	
	if not PQR_LoadLua(&amp;quot;PQR_Cokx_PVP_Settings.lua&amp;quot;) then
		PQR_WriteToChat(&amp;quot;You are missing a key file: PQR_Cokx_PVP_DATA.lua. Please put this file in the Data folder and reload PQR. Thank You!&amp;quot;, &amp;quot;Error&amp;quot;)
		PQR_RotationStop()
		return true
	end
	
	
	PQR_RotationStarted = false
end
if not GetMacroInfo(&amp;quot;AvailableMacros&amp;quot;) then
CreateMacro(&amp;quot;AvailableMacros&amp;quot;, &amp;quot;INV_MISC_QUESTIONMARK&amp;quot;, &amp;quot;/Flare\\n/BurstTarget\\n/Pause&amp;quot;, 1)
end

	--------------------
	-- Register CVars --
	--------------------
	Nova_ValueCheck = {
		{	Var1 = nil,	Text = &amp;quot;Toggles&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;Flare&amp;quot;,			Var2 = 1		},	
		{	Var1 = 0,	Text = &amp;quot;Pause&amp;quot;,			Var2 = 1		},	
		{	Var1 = 0,	Text = &amp;quot;BurstTarget&amp;quot;,			Var2 = 1		}		
	}		

	-----------------------------------------------
	-- Registering the CVars for the CustomFrame --
	-----------------------------------------------
	for i=1, #Nova_ValueCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text) == nil then 
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1) 
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text..&amp;apos;_Enabled&amp;apos;) == nil then 
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;)..&amp;apos;_Enabled&amp;apos;, Nova_ValueCheck[i].Var2) 
		end
	end

	

----------------------------
-- To Integer from String --
----------------------------
for i=1, #Nova_ValueCheck do
	if Nova_ValueCheck[i].Var1 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)] = tonumber(GetCVar(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)))
	end
	if Nova_ValueCheck[i].Var2 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;Check&amp;apos;] = GetCVarBool(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;_Enabled&amp;apos;)
	end
end

--------------------
-- Slash Commands --
--------------------
if SlashMacros == nil then
	SlashMacros = true
	
	SLASH_BURST1 = &amp;quot;/bursttarget&amp;quot;
	function SlashCmdList.BURST(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_BurstTarget&amp;quot;) then
		--	xrn:message(&amp;quot;\124cFF0000FFBurst Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_BurstTarget&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFBurst Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_BurstTarget&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
	
			SLASH_Pause1 = &amp;quot;/Pause&amp;quot;
	function SlashCmdList.Pause(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Pause&amp;quot;) then

			SetCVar(&amp;quot;Nova_Pause&amp;quot;, 1)
		end
	end
	
		SLASH_flare1 = &amp;quot;/flare&amp;quot;
	function SlashCmdList.flare(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_flare&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FFFlare Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_flare&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFFlare Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_flare&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
	end


LCTRL = (IsLeftControlKeyDown() and not IsAltKeyDown())
LSHIFT = IsLeftShiftKeyDown()
LALT = IsLeftAltKeyDown()
RCTRL = IsRightControlKeyDown()
RALT = IsRightAltKeyDown()
RSHIFT = IsRightShiftKeyDown()
MMOUSE = IsMouseButtonDown(3)

if getInfos == nil then
getInfos = 0
end
CastClick()
settings()
checks()
if  GetTime() - getInfos &amp;gt; 1 and (GCDCheck(56641)) then
getInfos = GetTime()
clearCEH()
if cTtimer == nil then cTtimer = 0
end
if GetTime() - cTtimer &amp;gt; 5 then
cTtimer = GetTime()
clearTables()
end
getcTar()
RangeCheckcTar()
clearcTar()
getmembers()
RangeCheckMembers()
clearmembers()
RangeCheckPet()
interrupt()
if GetItemCount(GetItemInfo(80618)) == 0 then
InteractUnit(&amp;quot;&amp;quot;..GetSpellInfo(57287))end

if GetItemCount(GetItemInfo(5512)) == 0 then
InteractUnit(&amp;quot;&amp;quot;..GetSpellInfo(58275))end
RunMacroText(&amp;quot;/run UIErrorsFrame:Clear()&amp;quot;)
end
GroupInfo()
cokxMacros()

if rotationPause == nil then rotationPause = 0 end

if Nova_Pause == 1 then
rotationPause = GetTime()
SetCVar(&amp;quot;Nova_Pause&amp;quot;, 0)
end
if GetTime() - rotationPause &amp;lt; 0.3 then
if MacroSpellNumber ~= 0 and MacroUnitNumber ~= 0 and GCDCheck(MacroSpellNumber) then
CastSpellByName(GetSpellInfo(MacroSpellNumber),MacroCT)
return true
end
return true
end
SetCVar(&amp;quot;MacroSpell&amp;quot;, 0)
SetCVar(&amp;quot;MacroUnit&amp;quot;, 0)
SetCVar(&amp;quot;MacroHP&amp;quot;, 100)
SetCVar(&amp;quot;MacroDR&amp;quot;,nil)
SetCVar(&amp;quot;MacroBuff&amp;quot;,nil)
SetCVar(&amp;quot;MacroDebuff&amp;quot;,nil)


if not playerdpsinc then playerdpsinc = 0 end
if not playerdpssum then playerdpssum = 0 end
if not playerdpscalc then playerdpscalc = 0 end
if not sumDps then sumDps = 0 end
if not lastplayerhp then lastplayerhp = UnitHealth(&amp;quot;player&amp;quot;) end



if modtime == nil then
	modtime = 0
end

if GetTime() - modtime &amp;gt; 1 then
	modtime = GetTime()
	playerdpsinc = lastplayerhp -UnitHealth(&amp;quot;player&amp;quot;)
	playerdpssum = playerdpssum + playerdpsinc
	lastplayerhp = UnitHealth(&amp;quot;player&amp;quot;)
end

if avgmodtime == nil then
	avgmodtime = 0
end

if GetTime() - avgmodtime &amp;gt; 2 then
	avgmodtime = GetTime()
	sumDps = 0
	playerdpscalc = playerdpssum/2
	sumDps = playerdpscalc
	playerdpscalc = 0
	playerdpssum = 0
end




if UnitExists(&amp;quot;target&amp;quot;)
and PQR_UnitFacing(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
then
IsFacing = true
else
IsFacing = false
end

local flag = { &amp;quot;&amp;quot;..GetSpellInfo(23335), &amp;quot;&amp;quot;..GetSpellInfo(23333) }

for _,v in ipairs(flag) do 
InteractUnit(v)end

if not IsSpellKnown(137587)
then
if PQR_IsMoving(.1) then
IsMoving = 0
else
IsMoving = 1
end
else
IsMoving = 1
end


if UnitExists(&amp;quot;pet&amp;quot;)
then lastpet = UnitCreatureFamily(&amp;quot;pet&amp;quot;)
end

if UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 70
or (UnitExists(&amp;quot;target&amp;quot;) and CalculateHP(&amp;quot;target&amp;quot;) &amp;lt; 50) then
goRage = 1
end
if UnitPower(&amp;quot;player&amp;quot;) &amp;lt; 20 then
goRage = 0
end
cokx:message(&amp;quot;Burst=&amp;quot;..onOff(Nova_BurstTarget))</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Interrupt
for j=1 , #cTar do
	 if  UnitExists(cTar[j])
     and (100 * UnitHealth(cTar[j]) / UnitHealthMax(cTar[j])) &amp;lt; 80
     then
     ddislow = 1
    
     
     end
  end
  
  for j=1 , #cTar do
	 if  UnitExists(cTar[j])
     and IsHealer(cTar[j])
     then
     interrupthealer = 1
     end
  end
  
    for i=1, numberfriends do
  if UnitExists(members[i])
  and CalculateHP(members[i]) &amp;lt; 60 then
  interrupthealer = 0
  end
  
end


for i=1, #cTar do
	if UnitExists(cTar[i])
	  and IsHealer(cTar[i])
	  and ddislow == 1
	  and interrupthealer == 1
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i])
	 then
			local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(cTar[i])
			for _, v in ipairs(castInt()) do
				if GetSpellInfo(v) == castName and castInterruptable == false then
						local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000 + (tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000)) 
						local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
						local castTime = castEndTime - castStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					if currentPercent &amp;gt; maxMSinterrupt  
					and currentPercent &amp;lt; minMSinterrupt  
					then
						PQR_CustomTarget = cTar[i]
						if select(2,GetSpellCooldown(147362)) == 0
						and ecTar[i].Facing
							and inRange(cTar[i],147362)
							
							then
							SpellStopCasting()
							CastSpellByName(GetSpellInfo(147362),PQR_CustomTarget)
					--		PQR_DelayRotation(.5)
							return true
						end
					
					end
				end
			end
	
	

---------------------------------------------





	
			local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(cTar[i])
			for _, v in ipairs(channelInt()) do
				if GetSpellInfo(v) == channelName and channelInterruptable == false then
						local timeSinceStart = (GetTime() * 1000 - channelStartTime) / 1000  + (tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000)) 
						local timeLeft = ((GetTime() * 1000 - channelEndTime) * -1) / 1000
						local castTime = channelEndTime - channelStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					if currentPercent &amp;lt; channelInterruptmax  
					and currentPercent &amp;gt; channelInterruptmin  
					then
						PQR_CustomTarget = cTar[i]
						if select(2,GetSpellCooldown(147362)) == 0
							and ecTar[i].Facing
							and inRange(cTar[i],147362)
							then
							SpellStopCasting()
							CastSpellByName(GetSpellInfo(147362),PQR_CustomTarget)
						--	PQR_DelayRotation(.5)
							return true
						end
					
					end
				end
			end
		end
	end






for i=1, #cTar do
	if UnitExists(cTar[i])
	 and (interrupthealer == 0 or (ddislow == 0 and interrupthealer == 1))
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) then
			local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(cTar[i])
			for _, v in ipairs(castInt()) do
				if GetSpellInfo(v) == castName and castInterruptable == false then
						local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000 + (tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000)) 
						local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
						local castTime = castEndTime - castStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					if currentPercent &amp;gt; maxMSinterrupt  
					and currentPercent &amp;lt; minMSinterrupt  
					then
						PQR_CustomTarget = cTar[i]
						if select(2,GetSpellCooldown(147362)) == 0
							and ecTar[i].Facing
							and inRange(cTar[i],147362)
							
							then
							SpellStopCasting()
							CastSpellByName(GetSpellInfo(147362),PQR_CustomTarget)
					--		PQR_DelayRotation(.5)
							return true
						end
					
					end
				end
			end
	
	

---------------------------------------------




	
			local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(cTar[i])
			for _, v in ipairs(channelInt()) do
				if GetSpellInfo(v) == channelName and channelInterruptable == false then
						local timeSinceStart = (GetTime() * 1000 - channelStartTime) / 1000  + (tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000)) 
						local timeLeft = ((GetTime() * 1000 - channelEndTime) * -1) / 1000
						local castTime = channelEndTime - channelStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					if currentPercent &amp;lt; channelInterruptmax  
					and currentPercent &amp;gt; channelInterruptmin  
					then
						PQR_CustomTarget = cTar[i]
						if select(2,GetSpellCooldown(147362)) == 0
							and ecTar[i].Facing
							and inRange(cTar[i],147362)
							then
							SpellStopCasting()
							CastSpellByName(GetSpellInfo(147362),PQR_CustomTarget)
						--	PQR_DelayRotation(.5)
							return true
						end
					
					end
				end
			end
		end
	end



ddislow = 0
interrupthealer = 0</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>PetControle</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if petctrl == nil then
	petctrl = 0
end

if UnitExists(&amp;quot;pet&amp;quot;) 
and UnitIsDead(&amp;quot;pet&amp;quot;) == nil
and UnitExists(&amp;quot;pettarget&amp;quot;)
and ((100 * UnitHealth(&amp;quot;pet&amp;quot;) / UnitHealthMax(&amp;quot;pet&amp;quot;)) &amp;lt; 30
or  (ePet[1].PRange ~= nil and ePet[1].PRange &amp;gt; 80))
then
RunMacroText(&amp;quot;/petfollow&amp;quot;)
end

if UnitExists(&amp;quot;pet&amp;quot;) 
and UnitExists(&amp;quot;target&amp;quot;)
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and UnitIsDead(&amp;quot;pet&amp;quot;) == nil
and (100 * UnitHealth(&amp;quot;pet&amp;quot;) / UnitHealthMax(&amp;quot;pet&amp;quot;)) &amp;gt; 30
and ePet[1].PRange &amp;lt; 70
and not UnitExists(&amp;quot;pettarget&amp;quot;)
then
RunMacroText(&amp;quot;/petattack&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>TotemKill</Name><Default>false</Default><SpellID>77799</SpellID><Actions></Actions><Lua>local typem= UnitCreatureType(&amp;quot;mouseover&amp;quot;)

if UnitExists(&amp;quot;mouseover&amp;quot;)
and typem == &amp;quot;Totem&amp;quot;
then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Serpent Sting</Name><Default>false</Default><SpellID>1978</SpellID><Actions></Actions><Lua>if  UnitExists(&amp;quot;target&amp;quot;) then
	if not HaveDebuff(&amp;quot;target&amp;quot;,1978,3,&amp;quot;player&amp;quot;)
	and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
	and PQR_SpellAvailable(1978)
	 and not HaveBuff(&amp;quot;target&amp;quot;,iSpell(),1)
	and UnitExists(&amp;quot;target&amp;quot;)
		and (UnitCreatureType(&amp;quot;target&amp;quot;) ~= &amp;quot;Totem&amp;quot; or UnitHealth(&amp;quot;target&amp;quot;) == 1)
	and LineOfSight(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
	 then
	PQR_CustomTarget = &amp;quot;target&amp;quot;
--	CastSpellByName(GetSpellInfo(1978), &amp;quot;target&amp;quot;)
	return true
	end
	end</Lua><RecastDelay>1100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Kill Command</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;pettarget&amp;quot;)
and PQR_SpellAvailable(34026)
and not HaveBuff(&amp;quot;pettarget&amp;quot;,iDMG(),0)
and LineOfSight(&amp;quot;pettarget&amp;quot;)
and ePet[1].TRange ~= nil
and ePet[1].TRange &amp;lt; 25 
	 then CastSpellByName(GetSpellInfo(34026),&amp;quot;pettarget&amp;quot;)
	 return true
	 end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blink Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;pettarget&amp;quot;)
and PQR_SpellAvailable(130392)
and LineOfSight(&amp;quot;pettarget&amp;quot;)
and ePet[1].TRange ~= nil
and ePet[1].TRange &amp;lt; 40 
	 then CastSpellByName(GetSpellInfo(130392),&amp;quot;pettarget&amp;quot;)
	 return true
	 end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Powershot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)) &amp;gt; 20
and PQR_SpellAvailable(109259)
and IsSpellKnown(109259)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and not PQR_IsMoving(0.1)

--and chaosbolt

and IsFacing
  then
  if IsSpellKnown(19574)
  and HaveBuff(&amp;quot;player&amp;quot;,34471,0) then
   CastSpellByName(GetSpellInfo(109259),&amp;quot;target&amp;quot;)
   return true
  end
if not IsSpellKnown(19574)
 then
   CastSpellByName(GetSpellInfo(109259),&amp;quot;target&amp;quot;)
   return true
  end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Arcane Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10</Actions><Lua>-- AS
if IsFacing
and GCDCheck(3044)
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and PQR_SpellAvailable(3044)
and (goRage == 1)
 then
CastSpellByName(GetSpellInfo(3044),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Cobra Shot</Name><Default>false</Default><SpellID>56641</SpellID><Actions></Actions><Lua>-- Cobra 
if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
 then
--CastSpellByName(GetSpellInfo(77767),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>50</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Kill Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local spell, _, _, _, _, endTime = UnitCastingInfo(&amp;quot;player&amp;quot;)


for i=1, #cTar do
if UnitExists(cTar[i]) 
and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
and not UnitIsDeadOrGhost(cTar[i])
and LineOfSight(cTar[i])
and ecTar[i].Range ~= nil
and (GetSpellCooldown(GetSpellInfo(53351))+select(2,GetSpellCooldown(GetSpellInfo(53351)))-GetTime()&amp;lt; 1.5 )
and ecTar[i].Facing
and ecTar[i].Range &amp;lt; 45
--and UnitInRange(cTar[i])
and not HaveBuff(cTar[i],iDMG(),0) 
and (100 * UnitHealth(cTar[i]) / UnitHealthMax(cTar[i])) &amp;lt;= 20
then
if spell
then
SpellStopCasting()
end
PQR_CustomTarget = cTar[i]
CastSpellByName(GetSpellInfo(53351),PQR_CustomTarget)
return true
end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Glaive Toss</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and IsSpellKnown(117050)
and PQR_SpellAvailable(117050)
and (goRage == 1)
 then
CastSpellByName(GetSpellInfo(117050),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Explosive Shot</Name><Default>false</Default><SpellID>53301</SpellID><Actions></Actions><Lua>-- ES
if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and PQR_SpellAvailable(53301)
and not HaveDebuff(&amp;quot;target&amp;quot;,53301,2)
 then
return true
end</Lua><RecastDelay>400</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>A Murder of Crows</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- AMC
if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and IsSpellKnown(131894)
and GCDCheck(131894)
and (goRage == 1)
and CalculateHP(&amp;quot;target&amp;quot;) &amp;lt; 70
 then
CastSpellByName(GetSpellInfo(131894),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Barrage</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Barrage
if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and IsSpellKnown(120360)
and PQR_SpellAvailable(120360)
and (goRage == 1)
 then
CastSpellByName(GetSpellInfo(120360),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Black Arrow</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- BA
if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
		and (UnitCreatureType(&amp;quot;target&amp;quot;) ~= &amp;quot;Totem&amp;quot; or UnitHealth(&amp;quot;target&amp;quot;) == 1)
and PQR_SpellAvailable(3674)
 then
CastSpellByName(GetSpellInfo(3674),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Exhilaration</Name><Default>false</Default><SpellID>109304</SpellID><Actions></Actions><Lua>if ExhilarationCheck     
and CalculateHP(&amp;quot;player&amp;quot;) &amp;lt;= ExhilarationValue     
then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fervor</Name><Default>false</Default><SpellID>82726</SpellID><Actions></Actions><Lua>if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and PQR_SpellAvailable(82726)
and (goRage == 0)
 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dire Beast</Name><Default>false</Default><SpellID>120679</SpellID><Actions></Actions><Lua>-- DB
if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and PQR_SpellAvailable(120679)
and (goRage == 0)
 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Lynx Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;pettarget&amp;quot;)
and LineOfSight(&amp;quot;pettarget&amp;quot;)
and  UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;pettarget&amp;quot;) 
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and ePet[1].TRange ~= nil
and ePet[1].TRange &amp;lt; 13
and IsSpellKnown(120697)
and GCDCheck(120697)
and (goRage == 1)
 then
CastSpellByName(GetSpellInfo(120697),&amp;quot;pettarget&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Masters Call</Name><Default>false</Default><SpellID>53271</SpellID><Actions></Actions><Lua>if  UnitExists(&amp;quot;player&amp;quot;)
    
    and LineOfSight(&amp;quot;player&amp;quot;)
     and GCDCheck(53271)
     and UnitInRange(&amp;quot;player&amp;quot;)
    and UnitExists(&amp;quot;target&amp;quot;)
   and CalculateHP(&amp;quot;target&amp;quot;) &amp;lt; 90
  and HaveDebuff(&amp;quot;player&amp;quot;,dRoot(),1)  then
      PQR_CustomTarget = &amp;quot;player&amp;quot;
       return true end

for i=1,numberfriends do 
    if  UnitExists(members[i])
    
    and LineOfSight(members[i])
     and GCDCheck(53271)
     and UnitInRange(members[i])
    and (eMembers[i].Range ~= nil and eMembers[i].Range &amp;lt; 40)
    and  UnitPowerMax(members[i]) &amp;lt; 100000
   and UnitExists(members[i]..&amp;quot;target&amp;quot;)
   and CalculateHP(members[i]..&amp;quot;target&amp;quot;) &amp;lt; 50
  and HaveDebuff(members[i],dRoot(),1)  then
      PQR_CustomTarget = members[i]
       return true end
    end
    
     for i=1,numberfriends do 
     
    if UnitExists(members[i])
    and LineOfSight(members[i])
     and GCDCheck(53271)
          and UnitInRange(members[i])
    and (eMembers[i].Range ~= nil and eMembers[i].Range &amp;lt; 40)
    and IsHealer(members[i])
    and CalculateHP(members[i]) &amp;lt; 60
  and HaveDebuff(members[i],aSRS(),1)  then
      PQR_CustomTarget = members[i]
       return true end
    end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Feign Death</Name><Default>false</Default><SpellID>5384</SpellID><Actions></Actions><Lua>if not GladiusBear then
	GladiusBear = CreateFrame(&amp;quot;FRAME&amp;quot;, nil, UIParent)
	GladiusBear:Hide()
end

function GladiusBear_OnEvent(self, event, ...)
	local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
	if event == &amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot; then
		if type == &amp;quot;SPELL_CAST_SUCCESS&amp;quot;
		or type == &amp;quot;SPELL_CAST_START&amp;quot; then
			if destGUID == UnitGUID(&amp;quot;player&amp;quot;) then
				local spellId = select(12, ...)
				local listId = {
					110698,		-- Hammer of Justice (Paladin)
					1330,		-- Garrote - Silence
					108194,		-- Asphyxiate
					22570,		-- Maim
					44572,		-- DF
					2094,		-- Blind
					19503,		-- Scatter
					118,		-- Polymorph
					61305,
					28272,
					61721,
					61780,
					28271,
					116858,
					17877,
					5782,		-- Fear
					5211,		-- Mighty Bash
					9005,		-- Pounce
					102546,		-- Pounce (Incarnation)
					91800,		-- Gnaw
					91797,		-- Monstrous Blow (Dark Transformation)
					44572,		-- Deep Freeze
					119381,		-- Leg Sweep
					105593,		-- Fist of Justice
					853,		-- Hammer of Justice
					1833,		-- Cheap Shot
					408,		-- Kidney Shot
					30283,		-- Shadowfury
					89766,		-- Axe Toss (Felguard/Wrathguard)
					7922,		-- Charge Stun
					132168,		-- Shockwave
					105771		-- Warbringer
				}
				for i = 1, #listId do
					if listId[i] == spellId then
					SpellStopCasting()
					MoveBackwardStop()
					MoveForwardStop()
					StrafeLeftStop()
					StrafeRightStop()
					TurnLeftStop()
					TurnRightStop()
						CastSpellByName(GetSpellInfo(5384),nil)
						end
				end
			end
		end
	end
end

GladiusBear:SetScript(&amp;quot;OnEvent&amp;quot;, GladiusBear_OnEvent)
GladiusBear:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)

if FeignDeathCheck    
and not PQR_IsMoving(0.01)
and CalculateHP(&amp;quot;player&amp;quot;) &amp;lt;= FeignDeathValue   
then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frenzy</Name><Default>false</Default><SpellID>82692</SpellID><Actions></Actions><Lua>local _,_,_,Fcount,_,_,_ = UnitBuffID(&amp;quot;player&amp;quot;,19615) 

if Fcount == 5 and goRage == 1
and UnitExists(&amp;quot;target&amp;quot;)
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blanket</Name><Default>false</Default><SpellID>34490</SpellID><Actions></Actions><Lua>-- Blanket Heal
for i=1,#cTar do

if   UnitExists(cTar[i])
and (100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)) &amp;lt; 40
	 and not UnitIsDeadOrGhost(cTar[i]) 
	 and GCDCheck(34490)
	 and IsHealer(cTar[i])
	  and ecTar[i].Range ~= nil
     and ecTar[i].Range &amp;lt; 40
     and LineOfSight(cTar[i])
     and ecTar[i].Facing
	 and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
	 and not HaveDebuff(cTar[i],dPoisonCC(),0)
	 and not HaveDebuff(cTar[i],dCurseCC(),0)
	 and not HaveDebuff(cTar[i],dMagicCC(),0)
	 and not HaveDebuff(cTar[i],dSilence(),0)
	 and not HaveDebuff(cTar[i],dSilenceCC(),0)
	 and not HaveDebuff(cTar[i],dCC(),0)
	 and not HaveDebuff(cTar[i],{33786, -- Cyclone
113506}) -- Cyclone
	 and not HaveBuff(cTar[i],iDMG(),0)
	 and not HaveBuff(cTar[i],iSpell(),0)
then
PQR_CustomTarget=cTar[i]
return true
end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if wartekurz == nil then wartekurz = 0 end

if SpellIsTargeting()
and wartekurz + 2 &amp;lt; GetTime() then
wartekurz = GetTime()
end


if SpellIsTargeting()
and (GCDCheck(5116) or GCDCheck(13813) or (IsSpellKnown(147362) and GCDCheck(147362)))
--and not SpellIsTargeting(1543) 
and wartekurz +0.3 &amp;lt; GetTime() then
CameraOrSelectOrMoveStart()
CameraOrSelectOrMoveStop() 
end
if LSHIFT    
or IsMounted()
or SpellIsTargeting() 
or UnitBuffID(&amp;quot;player&amp;quot;,80169)
or UnitBuffID(&amp;quot;player&amp;quot;,5384)
or UnitBuffID(&amp;quot;player&amp;quot;,51753)
or UnitBuffID(&amp;quot;player&amp;quot;,87959)
or UnitBuffID(&amp;quot;player&amp;quot;,40120)

then
	 SpellStopCasting() return true end
	 
	 
if  GetTime() - getInfos &amp;lt; 0.2 and  GetTime() - getInfos &amp;gt; 0.1 and (GCDCheck(56641)) then
return true
end
if  GetTime() - getInfos &amp;lt; 0.6 and  GetTime() - getInfos &amp;gt; 0.5 and (GCDCheck(56641)) then
return true
end
if  GetTime() - getInfos &amp;lt; 0.4 and  GetTime() - getInfos &amp;gt; 0.3 and (GCDCheck(56641)) then
return true
end
if  GetTime() - getInfos &amp;lt; 0.8 and  GetTime() - getInfos &amp;gt; 0.7 and (GCDCheck(56641))  then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Scatter Trap</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if  UnitExists(&amp;quot;mouseover&amp;quot;)
	 and GCDCheck(1499)
	 and LALT    
	 and not UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
	 and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) 
	 and LineOfSight(&amp;quot;mouseover&amp;quot;)
	 	 and not SpellIsTargeting() 
--	 and UnitIsPlayer(&amp;quot;mouseover&amp;quot;)
	 and (HaveDebuff(&amp;quot;mouseover&amp;quot;,ccStuns(),2)
		 or  HaveDebuff(&amp;quot;mouseover&amp;quot;,dRoot(),2))
	 and not  HaveDebuff(&amp;quot;mouseover&amp;quot;,{33786, -- Cyclone
113506}) -- Cyclone
	 and not HaveBuff(&amp;quot;mouseover&amp;quot;,iDMG(),0)
	
	 then
	 SpellStopCasting()
	CastSpellByName(tostring(GetSpellInfo(1499)))
	return true
	end

if not HaveBuff(&amp;quot;player&amp;quot;,77769,0)
	 and LALT       
	then
	CastSpellByName(GetSpellInfo(77769))
	end
if  UnitExists(&amp;quot;mouseover&amp;quot;)
	 and GCDCheck(19503)
	 and LALT   
	 	 and not SpellIsTargeting() 
	 and not UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
	 and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) 
	 and LineOfSight(&amp;quot;mouseover&amp;quot;)
--	 and UnitIsPlayer(&amp;quot;mouseover&amp;quot;)

	 and not HaveDebuff(&amp;quot;mouseover&amp;quot;,{33786, -- Cyclone
113506}) -- Cyclone
	 and not HaveBuff(&amp;quot;mouseover&amp;quot;,iDMG(),0)
	
	 then
	 PQR_CustomTarget=&amp;quot;mouseover&amp;quot;
	 SpellStopCasting()
	CastSpellByName(GetSpellInfo(19503),PQR_CustomTarget)
	return true
	end
	
	
	
		 if GetTime()- scatterTimeCokx &amp;lt; 5
		and GCDCheck(1499)
	 and LALT        
		 and not SpellIsTargeting() 
	 then
	 SpellStopCasting()
	CastSpellByName(tostring(GetSpellInfo(1499)))
	return true
	end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Concussive Shot</Name><Default>false</Default><SpellID>5116</SpellID><Actions></Actions><Lua>-- Conc
if 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;) &amp;gt;= 25
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0) 
and GCDCheck(5116)
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
--and UnitIsPlayer(&amp;quot;target&amp;quot;) 
and not HaveDebuff(&amp;quot;target&amp;quot;,aSRS(),0.1)
and not HaveBuff(&amp;quot;target&amp;quot;,iSlow(),0)
then 
return true end</Lua><RecastDelay>8000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Snake Trap</Name><Default>false</Default><SpellID>34600</SpellID><Actions></Actions><Lua>for i=1,#cTar do
if UnitExists(cTar[i])
and UnitIsPlayer(cTar[i])
and GetTime() - exploTimeCokx &amp;gt; 4
and ecTar[i].Range &amp;lt; 5
and GCDCheck(34600)
then
if HaveBuff(&amp;quot;player&amp;quot;,77769,0)
then
CastSpellByName(GetSpellInfo(77769))
end
return true
end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Explosive Trap</Name><Default>false</Default><SpellID>13813</SpellID><Actions></Actions><Lua>for i=1,#cTar do
if UnitExists(cTar[i])
and UnitIsPlayer(cTar[i])
and GetTime() - snakeTimeCokx &amp;gt; 4
and ecTar[i].Range &amp;lt; 5
and GCDCheck(13813)
then
if HaveBuff(&amp;quot;player&amp;quot;,77769,0)
then
CastSpellByName(GetSpellInfo(77769))
end
return true
end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt MM</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Interrupt
for j=1 , #cTar do
	 if  UnitExists(cTar[j])
     and (100 * UnitHealth(cTar[j]) / UnitHealthMax(cTar[j])) &amp;lt; 80
     then
     ddislow = 1
    
     
     end
  end
  
  for j=1 , #cTar do
	 if  UnitExists(cTar[j])
     and IsHealer(cTar[j])
     then
     interrupthealer = 1
     end
  end
  
    for i=1, numberfriends do
  if UnitExists(members[i])
  and CalculateHP(members[i]) &amp;lt; 60 then
  interrupthealer = 0
  end
  
end


for i=1, #cTar do
	if UnitExists(cTar[i])
	  and IsHealer(cTar[i])
	  and ddislow == 1
	  and interrupthealer == 1
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i])
	 then
			local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(cTar[i])
			for _, v in ipairs(castInt()) do
				if GetSpellInfo(v) == castName and castInterruptable == false then
						local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000 + (tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000)) 
						local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
						local castTime = castEndTime - castStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					if currentPercent &amp;gt; maxMSinterrupt  
					and currentPercent &amp;lt; minMSinterrupt  
					then
						PQR_CustomTarget = cTar[i]
						if select(2,GetSpellCooldown(34490)) == 0
						and ecTar[i].Facing
							and inRange(cTar[i],34490)
							
							then
							SpellStopCasting()
							CastSpellByName(GetSpellInfo(34490),PQR_CustomTarget)
					--		PQR_DelayRotation(.5)
							return true
						end
					
					end
				end
			end
	
	

---------------------------------------------





	
			local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(cTar[i])
			for _, v in ipairs(channelInt()) do
				if GetSpellInfo(v) == channelName and channelInterruptable == false then
						local timeSinceStart = (GetTime() * 1000 - channelStartTime) / 1000  + (tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000)) 
						local timeLeft = ((GetTime() * 1000 - channelEndTime) * -1) / 1000
						local castTime = channelEndTime - channelStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					if currentPercent &amp;lt; channelInterruptmax  
					and currentPercent &amp;gt; channelInterruptmin  
					then
						PQR_CustomTarget = cTar[i]
						if select(2,GetSpellCooldown(34490)) == 0
							and ecTar[i].Facing
							and inRange(cTar[i],34490)
							then
							SpellStopCasting()
							CastSpellByName(GetSpellInfo(34490),PQR_CustomTarget)
						--	PQR_DelayRotation(.5)
							return true
						end
					
					end
				end
			end
		end
	end






for i=1, #cTar do
	if UnitExists(cTar[i])
	 and (interrupthealer == 0 or (ddislow == 0 and interrupthealer == 1))
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) then
			local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(cTar[i])
			for _, v in ipairs(castInt()) do
				if GetSpellInfo(v) == castName and castInterruptable == false then
						local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000 + (tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000)) 
						local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
						local castTime = castEndTime - castStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					if currentPercent &amp;gt; maxMSinterrupt  
					and currentPercent &amp;lt; minMSinterrupt  
					then
						PQR_CustomTarget = cTar[i]
						if select(2,GetSpellCooldown(34490)) == 0
							and ecTar[i].Facing
							and inRange(cTar[i],34490)
							
							then
							SpellStopCasting()
							CastSpellByName(GetSpellInfo(34490),PQR_CustomTarget)
					--		PQR_DelayRotation(.5)
							return true
						end
					
					end
				end
			end
	
	

---------------------------------------------




	
			local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(cTar[i])
			for _, v in ipairs(channelInt()) do
				if GetSpellInfo(v) == channelName and channelInterruptable == false then
						local timeSinceStart = (GetTime() * 1000 - channelStartTime) / 1000  + (tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000)) 
						local timeLeft = ((GetTime() * 1000 - channelEndTime) * -1) / 1000
						local castTime = channelEndTime - channelStartTime
						local currentPercent = timeSinceStart / castTime * 100000
					if currentPercent &amp;lt; channelInterruptmax  
					and currentPercent &amp;gt; channelInterruptmin  
					then
						PQR_CustomTarget = cTar[i]
						if select(2,GetSpellCooldown(34490)) == 0
							and ecTar[i].Facing
							and inRange(cTar[i],34490)
							then
							SpellStopCasting()
							CastSpellByName(GetSpellInfo(34490),PQR_CustomTarget)
						--	PQR_DelayRotation(.5)
							return true
						end
					
					end
				end
			end
		end
	end



ddislow = 0
interrupthealer = 0</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Disengage</Name><Default>false</Default><SpellID>781</SpellID><Actions></Actions><Lua>for i=1,#cTar do
if UnitExists(cTar[i])
and UnitIsPlayer(cTar[i])
and DisengageCheck
and CalculateHP(&amp;quot;player&amp;quot;) &amp;lt; DisengageValue
and ecTar[i].Range &amp;lt; 8
and UnitPowerMax(cTar[i]) &amp;lt; 100000
and not GCDCheck(13813)
and GCDCheck(781)
then
SpellStopCasting()
	JumpOrAscendStart() 
return true
end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Binding Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not HaveBuff(&amp;quot;player&amp;quot;,77769,0)
	 and LCTRL     
	then
	CastSpellByName(GetSpellInfo(77769))
	end
if IsSpellKnown(109248)
	 and GCDCheck(109248)
	 and LCTRL     
	 and not SpellIsTargeting() 
	 then
	 	 SpellStopCasting()
	 	 SpellStopCasting()
	 	 	 SpellStopCasting()
	CastSpellByName(GetSpellInfo(109248))
	return true
	end
	
	 if GCDCheck(13813)
and LCTRL     
	 and not SpellIsTargeting() 
	 then
	 SpellStopCasting()
	 	 SpellStopCasting()
	 	 	 SpellStopCasting()
	CastSpellByName(tostring(GetSpellInfo(82939)))
	return true
	end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Web Wrap</Name><Default>false</Default><SpellID>96201</SpellID><Actions></Actions><Lua>for j=1 , #cTar do
	 if  UnitExists(cTar[j])
	 	 and GCDCheck(96201)
	
	 and not UnitIsDeadOrGhost(cTar[j]) 
		 and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[j]) 
	 and UnitIsPlayer(cTar[j])
	 and not HaveDebuff(cTar[j],605,0) 
	 	 and not HaveBuff(cTar[j],{49039,18499},1.3)
	 and not HaveDebuff(cTar[j],dPoisonCC(),3)
	 and LineOfSight(cTar[j])
	 and ecTar[j].Range ~= nil
     and ecTar[j].Range &amp;lt; 29
     and not HaveDebuff(cTar[j],dCurseCC(),3)
	 and not HaveDebuff(cTar[j],dMagicCC(),3)
	 and not HaveDebuff(cTar[j],dSilence(),3)
	 and not HaveDebuff(cTar[j],dSilenceCC(),3)
	 and not HaveDebuff(cTar[j],dCC(),3)
	 and HaveBuff(cTar[j],attentionBuffs(),1)
	 and not HaveDebuff(cTar[j],{33786, -- Cyclone
113506,18499}) -- Cyclone
	 and not HaveBuff(cTar[j],iDMG(),1.5)
	 and not HaveBuff(cTar[j],iSpell(),1.5)
	
	 then
	 PQR_CustomTarget=cTar[j]
	--CastSpellByName(GetSpellInfo(5782)cTar[j])
	return true
	end
	end
	
	for j=1 , #cTar do
	 if  UnitExists(cTar[j])
	 	 and GCDCheck(96201)

	 and not UnitIsDeadOrGhost(cTar[j]) 
		 and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[j]) 
	 and not HaveDebuff(cTar[j],dPoisonCC(),3)
	 and LineOfSight(cTar[j])
	
	 and UnitIsPlayer(cTar[j])
	 and ecTar[j].Range ~= nil
     and ecTar[j].Range &amp;lt; 29
     and IsHealer(cTar[j])
     and (100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)) &amp;lt; 70
     and not UnitCreatureType(cTar[j]) == &amp;quot;Undead&amp;quot;
	 and not HaveDebuff(cTar[j],dCurseCC(),3)
	 and not HaveDebuff(cTar[j],dMagicCC(),3)
	 and not HaveDebuff(cTar[j],dSilence(),3)
	 and not HaveDebuff(cTar[j],dSilenceCC(),3)
	 and not HaveDebuff(cTar[j],dCC(),3)
	 and not HaveDebuff(cTar[j],{33786, -- Cyclone
113506,18499}) -- Cyclone
	 and not HaveBuff(cTar[j],iDMG(),1.5)
	 and not HaveBuff(cTar[j],iSpell(),1.5)
	
	 then
	 PQR_CustomTarget=cTar[j]
	--CastSpellByName(GetSpellInfo(5782)cTar[j])
	return true
	end
	end
	
	
		
	for j=1 , #cTar do
	 if  UnitExists(cTar[j])
	 	 and GCDCheck(96201)
	 and not UnitIsDeadOrGhost(cTar[j]) 
		 and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[j]) 
	 and UnitIsPlayer(cTar[j])
	 and not HaveDebuff(cTar[j],605,0) 
	 	 and not HaveBuff(cTar[j],{49039,18499},1.3)
	 and not HaveDebuff(cTar[j],dPoisonCC(),3)
	 and LineOfSight(cTar[j])
	 and ecTar[j].Range ~= nil
     and ecTar[j].Range &amp;lt; 29
	 and not HaveDebuff(cTar[j],dPoisonCC(),3)
 	 and not HaveDebuff(cTar[j],dCurseCC(),3)
	 and not HaveDebuff(cTar[j],dMagicCC(),3)
	 and not HaveDebuff(cTar[j],dSilenceCC(),3)
	 and not HaveDebuff(cTar[j],dCC(),3)
	 and ( HaveDebuff(cTar[j],dPoisonCC(),0)
 	 or HaveDebuff(cTar[j],dCurseCC(),0)
	 or HaveDebuff(cTar[j],dMagicCC(),0)
	 or HaveDebuff(cTar[j],dSilenceCC(),0)
	 or HaveDebuff(cTar[j],dCC(),0))
	 and not HaveDebuff(cTar[j],{33786, -- Cyclone
113506,18499}) -- Cyclone
	 and not HaveBuff(cTar[j],iDMG(),1.5)
	 and not HaveBuff(cTar[j],iSpell(),1.5)
	
	 then
	 PQR_CustomTarget=cTar[j]
	--CastSpellByName(GetSpellInfo(5782)cTar[j])
	return true
	end
	end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Chimera Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- CS
if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and PQR_SpellAvailable(53209)
and (goRage == 1)
 then
CastSpellByName(GetSpellInfo(53209),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Aimed Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- AS
if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and GCDCheck(19434)
and (PQR_SpellAvailable(19434) or HaveBuff(&amp;quot;player&amp;quot;,82926,0))
and (goRage == 1 or HaveBuff(&amp;quot;player&amp;quot;,82926,0))
and (not PQR_IsMoving(0.01) or HaveBuff(&amp;quot;player&amp;quot;,82926,0) or GlyphInUse(126095))
 then
CastSpellByName(GetSpellInfo(19434),&amp;quot;target&amp;quot;)
return true
end

if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and GCDCheck(19434)
and  HaveBuff(&amp;quot;player&amp;quot;,82926,0)
then
CastSpellByName(GetSpellInfo(19434),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>&amp;gt; PQI Config</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- PQI Config --


if Cokx_Hunter == nil then
local config = {
	name	= &amp;quot;Hunter&amp;quot;,
	author	= &amp;quot;Cokx&amp;quot;,
	abilities = {
		
		----  Defensive CD  ----
		{ 	name	= &amp;quot;Deterrence&amp;quot;,
			enable	= true,
			widget	= { type = &amp;quot;numBox&amp;quot;,
				value	= 40,
				step	= 1,
							},
				},
			{ 	name	= &amp;quot;Disengage&amp;quot;,
			enable	= true,
			widget	= { type = &amp;quot;numBox&amp;quot;,
				value	= 95,
				step	= 1,
			
			},
		},	
			{ 	name	= &amp;quot;Camouflage&amp;quot;,
			enable	= true,
			widget	= { type = &amp;quot;numBox&amp;quot;,
				value	= 40,
				step	= 1,
			
			},
		},	
		{ 	name	= &amp;quot;Feign Death&amp;quot;,
			enable	= true,
			widget	= { type = &amp;quot;numBox&amp;quot;,
				value	= 20,
				step	= 1,
			},
		},	
				{ 	name	= &amp;quot;Tranq Shot&amp;quot;,
			enable	= true,
			widget	= { type = &amp;quot;numBox&amp;quot;,
				value	= 70,
				step	= 1,
			},
		},	
	{ 	name	= &amp;quot;Exhilaration&amp;quot;,
			enable	= true,
			widget	= { type = &amp;quot;numBox&amp;quot;,
				value	= 30,
				step	= 1,
			},
		},	
			{ 	name	= &amp;quot;Healthstone&amp;quot;,
			enable	= true,
			widget	= { type = &amp;quot;numBox&amp;quot;,
				value	= 30,
				step	= 1,
			},
		},	
	},
}
	
	Cokx_Hunter = PQI:AddRotation(config)
end

-- OPTIONS -- 
DeterrenceCheck						= PQI_CokxHunter_Deterrence_enable
DeterrenceValue						= PQI_CokxHunter_Deterrence_value

DisengageCheck						= PQI_CokxHunter_Disengage_enable
DisengageValue						= PQI_CokxHunter_Disengage_value

CamouflageCheck						= PQI_CokxHunter_Camouflage_enable
CamouflageValue						= PQI_CokxHunter_Camouflage_value

FeignDeathCheck						= PQI_CokxHunter_FeignDeath_enable
FeignDeathValue						= PQI_CokxHunter_FeignDeath_value

TranqShotCheck						= PQI_CokxHunter_TranqShot_enable
TranqShotValue						= PQI_CokxHunter_TranqShot_value

ExhilarationCheck					= PQI_CokxHunter_Exhilaration_enable
ExhilarationValue					= PQI_CokxHunter_Exhilaration_value

HealthstoneCheck					= PQI_CokxHunter_Healthstone_enable
HealthstoneValue					= PQI_CokxHunter_Healthstone_value</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tranq Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>for i=1, #cTar do
	if UnitExists(cTar[i]) then
	if LineOfSight(cTar[i])
	and GCDCheck(19801)
	and ecTar[i].Range &amp;lt; 40
	and ecTar[i].Facing
	and 100 * ( UnitPower(&amp;quot;player&amp;quot;)) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;gt; 10
	and not HaveBuff(cTar[i],iDMG(),1)
	and HaveBuff(cTar[i],{1022,6940,108978},1.5)
	and not UnitIsDeadOrGhost(cTar[i])
	 and not HaveDebuff(cTar[i],ccCanBreak(),0)
	and UnitIsPlayer(cTar[i])
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
	then
	PQR_CustomTarget = cTar[i]
	CastSpellByName(GetSpellInfo(19801),PQR_CustomTarget)
	return true
	end
	end
end

if TranqShotCheck
and UnitExists(&amp;quot;target&amp;quot;)
and CalculateHP(&amp;quot;target&amp;quot;) &amp;gt; TranqShotValue
then
for i=1 , #cTar do
	if UnitExists(cTar[i]) then
	if  LineOfSight(cTar[i])
and GCDCheck(19801)
	and ecTar[i].Range &amp;lt; 40
	and ecTar[i].Facing
	and 100 * ( UnitPower(&amp;quot;player&amp;quot;)) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;gt; 10
	and not HaveBuff(cTar[i],iDMG(),1)
	and HaveBuff(cTar[i],{29166,132158,53271,12472,12043,44549,54428,6940,774,
	10060,6346,16166,16188,117014,79206,48108,124682,1022,6940,1044,974,108978},1.5)
	and not UnitIsDeadOrGhost(cTar[i])
	 and not HaveDebuff(cTar[i],ccCanBreak(),0)
	and UnitIsPlayer(cTar[i])
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
	then
	PQR_CustomTarget = cTar[i]
	   CastSpellByName(GetSpellInfo(19801),PQR_CustomTarget)
	return true
	end
	end
	
if UnitExists(cTar[i]) then
	if  LineOfSight(cTar[i])
and GCDCheck(19801)
	and ecTar[i].Range &amp;lt; 40
		and ecTar[i].Facing
	and 100 * ( UnitPower(&amp;quot;player&amp;quot;)) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;gt; 10
	and not HaveBuff(cTar[i],iDMG(),1)
	and (HaveBuff(cTar[i],{11426},2))
	and not UnitIsDeadOrGhost(cTar[i])
	and UnitIsPlayer(cTar[i])
		 and not HaveDebuff(cTar[i],ccCanBreak(),0)
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
	then
	purgemeter = select(15, UnitBuff(cTar[i],GetSpellInfo(11426),nil))
	if purgemeter &amp;gt; 80000 then
	PQR_CustomTarget = cTar[i]
		   CastSpellByName(GetSpellInfo(19801),PQR_CustomTarget)
	return true
	end
	end
	end
	
	if UnitExists(cTar[i]) then
	if  LineOfSight(cTar[i])
and GCDCheck(19801)
	and ecTar[i].Range &amp;lt; 40
		and ecTar[i].Facing
	and 100 * ( UnitPower(&amp;quot;player&amp;quot;)) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;gt; 10
	and not HaveBuff(cTar[i],iDMG(),1)
	and (HaveBuff(cTar[i],{17},2))
	and not UnitIsDeadOrGhost(cTar[i])
	and UnitIsPlayer(cTar[i])
		 and not HaveDebuff(cTar[i],ccCanBreak(),0)
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
	then
	purgemeter = select(15, UnitBuff(cTar[i],GetSpellInfo(17),nil))
	if purgemeter &amp;gt; 80000 then
	PQR_CustomTarget = cTar[i]
		   CastSpellByName(GetSpellInfo(19801),PQR_CustomTarget)
	return true
	end
	end
	end
	
end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Burst</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if burstTarget == nil then burstTarget=0 end
if Nova_BurstTarget == 1
and UnitExists(&amp;quot;target&amp;quot;)
and burstTarget == 0
then
burstTarget = UnitGUID(&amp;quot;target&amp;quot;)
xrn:message(&amp;quot;\124cFFCC99FFBurst on &amp;quot;..UnitName(&amp;quot;target&amp;quot;))
--SetCVar(&amp;quot;Nova_BurstTarget&amp;quot;, 0)
end
if Nova_BurstTarget == 0
then
burstTarget = 0
end


if UnitExists(&amp;quot;target&amp;quot;)
and burstTarget == UnitGUID(&amp;quot;target&amp;quot;)
--and goRage == 1
and( GCDCheck(3045) or GCDCheck(121818) or (IsSpellKnown(19574) and GCDCheck(19574)))
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and not (type == &amp;quot;Totem&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0) 
then
	RunMacroText(&amp;quot;/use 13&amp;quot;)
	RunMacroText(&amp;quot;/use 10&amp;quot;)
	CastSpellByName(GetSpellInfo(121818),nil)
	CastSpellByName(GetSpellInfo(3045),nil)
	CastSpellByName(GetSpellInfo(19574),nil)
	burstTarget = 0
	xrn:message(&amp;quot;\124cFFCC99FFBurst is Running&amp;quot;)
	
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Camouflage</Name><Default>false</Default><SpellID>51753</SpellID><Actions></Actions><Lua>if CamouflageCheck      
and CalculateHP(&amp;quot;player&amp;quot;) &amp;lt;= CamouflageValue then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Deterrence</Name><Default>false</Default><SpellID>19263</SpellID><Actions></Actions><Lua>if DeterrenceCheck   
and UnitAffectingCombat(&amp;quot;player&amp;quot;)       
and CalculateHP(&amp;quot;player&amp;quot;) &amp;lt;= DeterrenceValue then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wyvern Sting</Name><Default>false</Default><SpellID>19386</SpellID><Actions></Actions><Lua>for j=1 , #cTar do
	 if  UnitExists(cTar[j])
	 and GetTime()- scatterTimeCokx &amp;gt; 5
	 and IsSpellKnown(19386)
	 and GCDCheck(19386)
	 and not UnitIsDeadOrGhost(cTar[j]) 
	  and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[j]) 
	 and UnitIsPlayer(cTar[j])
	 and not primaryTarget(cTar[j])
	 and not HaveDebuff(cTar[j],dPoisonCC(),0)
	 and LineOfSight(cTar[j])
	 and IsHealer(cTar[j])
	 and ecTar[j].Facing
	 and ecTar[j].Range ~= nil
     and ecTar[j].Range &amp;lt; 40
     and (100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)) &amp;lt; 50
	 and not HaveDebuff(cTar[j],dCurseCC(),0)
	 and not HaveDebuff(cTar[j],dMagicCC(),0)
	 and not HaveDebuff(cTar[j],dSilence(),0)
	 and not HaveDebuff(cTar[j],dSilenceCC(),0)
	 and not HaveDebuff(cTar[j],dCC(),0)
	 and not HaveDebuff(cTar[j],{33786, -- Cyclone
113506}) -- Cyclone

	 and not HaveBuff(cTar[j],iDMG(),0)
	 and not HaveBuff(cTar[j],iSpell(),0)
	
	 then
	 PQR_CustomTarget=cTar[j]
	return true
	end
	end
	
	
	for j=1 , #cTar do
	 if  UnitExists(cTar[j])
	 	 and GetTime()- scatterTimeCokx &amp;gt; 5
	 and IsSpellKnown(19386)
	 and GCDCheck(19386)

	 and not UnitIsDeadOrGhost(cTar[j]) 
	  and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[j]) 
	 and not primaryTarget(cTar[j])
	 and UnitIsPlayer(cTar[j])
	 and not HaveDebuff(cTar[j],dPoisonCC(),0)
	 and LineOfSight(cTar[j])
	 	 and not HaveBuff(&amp;quot;player&amp;quot;,114168,0)
	 	  and ecTar[j].Facing
	 and ecTar[j].Range ~= nil
     and ecTar[j].Range &amp;lt; 40
	 and not HaveDebuff(cTar[j],dCurseCC(),0)
	 and not HaveDebuff(cTar[j],dMagicCC(),0)
	 and not HaveDebuff(cTar[j],dSilence(),0)
	 and not HaveDebuff(cTar[j],dSilenceCC(),0)
	 and not HaveDebuff(cTar[j],dCC(),0)
	 and HaveBuff(cTar[j],attentionBuffs(),0)
	 and not HaveDebuff(cTar[j],{33786, -- Cyclone
113506}) -- Cyclone

	 and not HaveBuff(cTar[j],iDMG(),0)
	 and not HaveBuff(cTar[j],iSpell(),0)
	
	 then
	 PQR_CustomTarget=cTar[j]
	return true
	end
	end
	
	
		for j=1 , #cTar do
	 if  UnitExists(cTar[j])
	 	 and GetTime()- scatterTimeCokx &amp;gt; 5
	 and IsSpellKnown(19386)
	 and GCDCheck(19386)
		 and not UnitIsDeadOrGhost(cTar[j]) 
	 and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[j]) 
	 and not primaryTarget(cTar[j])
	 and UnitIsPlayer(cTar[j])
	 and LineOfSight(cTar[j])
	  and ecTar[j].Facing
	 and ecTar[j].Range ~= nil
     and ecTar[j].Range &amp;lt; 40
     and not HaveDebuff(cTar[j],dPoisonCC(),3)
 	 and not HaveDebuff(cTar[j],dCurseCC(),3)
	 and not HaveDebuff(cTar[j],dMagicCC(),3)
	 and not HaveDebuff(cTar[j],dSilenceCC(),3)
	 and not HaveDebuff(cTar[j],dCC(),3)
	 and ( HaveDebuff(cTar[j],dPoisonCC(),0)
 	 or HaveDebuff(cTar[j],dCurseCC(),0)
	 or HaveDebuff(cTar[j],dMagicCC(),0)
	 or HaveDebuff(cTar[j],dSilenceCC(),0)
	 or HaveDebuff(cTar[j],dCC(),0))

	 and not HaveDebuff(cTar[j],{33786, -- Cyclone
113506}) -- Cyclone

	 and not HaveBuff(cTar[j],iDMG(),0)
	 and not HaveBuff(cTar[j],iSpell(),0)
	
	 then
	 PQR_CustomTarget=cTar[j]
	return true
	end
	end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Intimidation</Name><Default>false</Default><SpellID>19577</SpellID><Actions></Actions><Lua>if  UnitExists(&amp;quot;pettarget&amp;quot;)
	 and IsSpellKnown(19577)
	 and GCDCheck(19577)
	 and not UnitIsDeadOrGhost(&amp;quot;pettarget&amp;quot;) 
	  and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;pettarget&amp;quot;) 
	 and UnitIsPlayer(&amp;quot;pettarget&amp;quot;)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dPoisonCC(),0)
	 and IsHealer(&amp;quot;pettarget&amp;quot;)
     and (100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)) &amp;lt; 70
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dCurseCC(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dMagicCC(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dSilence(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dSilenceCC(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dCC(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,{33786, -- Cyclone
113506}) -- Cyclone

	 and not HaveBuff(&amp;quot;pettarget&amp;quot;,iDMG(),0)
	 and not HaveBuff(&amp;quot;pettarget&amp;quot;,iSpell(),0)
	
	 then
	 PQR_CustomTarget=&amp;quot;pettarget&amp;quot;
	return true
	end

	
	

	 if  UnitExists(&amp;quot;pettarget&amp;quot;)
	 and IsSpellKnown(19577)
	 and GCDCheck(19577)

	 and not UnitIsDeadOrGhost(&amp;quot;pettarget&amp;quot;) 
	  and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;pettarget&amp;quot;) 
	 and UnitIsPlayer(&amp;quot;pettarget&amp;quot;)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dPoisonCC(),0)
	 	 and not HaveBuff(&amp;quot;player&amp;quot;,114168,0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dCurseCC(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dMagicCC(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dSilence(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dSilenceCC(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dCC(),0)
	 and HaveBuff(&amp;quot;pettarget&amp;quot;,attentionBuffs(),0)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,{33786, -- Cyclone
113506}) -- Cyclone

	 and not HaveBuff(&amp;quot;pettarget&amp;quot;,iDMG(),0)
	 and not HaveBuff(&amp;quot;pettarget&amp;quot;,iSpell(),0)
	
	 then
	 PQR_CustomTarget=&amp;quot;pettarget&amp;quot;
	return true
	end

	
	

	 if  UnitExists(&amp;quot;pettarget&amp;quot;)
	 and IsSpellKnown(19577)
	 and GCDCheck(19577)
		 and not UnitIsDeadOrGhost(&amp;quot;pettarget&amp;quot;) 
	 and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;pettarget&amp;quot;) 
	 and UnitIsPlayer(&amp;quot;pettarget&amp;quot;)
     and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dPoisonCC(),3)
 	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dCurseCC(),3)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dMagicCC(),3)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dSilenceCC(),3)
	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,dCC(),3)
	 and ( HaveDebuff(&amp;quot;pettarget&amp;quot;,dPoisonCC(),0)
 	 or HaveDebuff(&amp;quot;pettarget&amp;quot;,dCurseCC(),0)
	 or HaveDebuff(&amp;quot;pettarget&amp;quot;,dMagicCC(),0)
	 or HaveDebuff(&amp;quot;pettarget&amp;quot;,dSilenceCC(),0)
	 or HaveDebuff(&amp;quot;pettarget&amp;quot;,dCC(),0))

	 and not HaveDebuff(&amp;quot;pettarget&amp;quot;,{33786, -- Cyclone
113506}) -- Cyclone

	 and not HaveBuff(&amp;quot;pettarget&amp;quot;,iDMG(),0)
	 and not HaveBuff(&amp;quot;pettarget&amp;quot;,iSpell(),0)
	
	 then
	 PQR_CustomTarget=&amp;quot;pettarget&amp;quot;
	return true
	end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Widow Venom</Name><Default>false</Default><SpellID>82654</SpellID><Actions></Actions><Lua>if IsFacing
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and (UnitCreatureType(&amp;quot;target&amp;quot;) ~= &amp;quot;Totem&amp;quot; or UnitHealth(&amp;quot;target&amp;quot;) == 1)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and PQR_SpellAvailable(82654)
and not HaveDebuff(&amp;quot;target&amp;quot;,{12294,100130,8679,82654},0)
 then
return true
end</Lua><RecastDelay>8000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Success</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if scatterTimeCokx == nil then scatterTimeCokx = 0 end
if snakeTimeCokx == nil then snakeTimeCokx = 0 end
if exploTimeCokx == nil then exploTimeCokx = 0 end
if CombatLog == nil then
    BuBa_CombatLog = CreateFrame(&amp;apos;Frame&amp;apos;)
    BuBa_CombatLog:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)

 function OnSuccessfulCast(self, event, ...)
  local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
  if (event==&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;) then
            if (type==&amp;quot;SPELL_CAST_SUCCESS&amp;quot;) 
             then
         if sourceGUID == UnitGUID(&amp;quot;player&amp;quot;) then
	       if select(12, ...) == 19503
	       then
	       scatterTimeCokx = GetTime()
	       end
	        if select(12, ...) == 34600
	       then
	       snakeTimeCokx = GetTime()
	       end
	        if select(12, ...) == 13813
	       then
	       exploTimeCokx = GetTime()
	       end
	        if select(12, ...) == 1543
	       then
	     SetCVar(&amp;quot;Nova_flare&amp;quot;, 0)
	       end
	          if select(12, ...) == 3045
	          or select(12, ...) == 121818
	          or select(12, ...) == 19574
	       then
	     SetCVar(&amp;quot;Nova_BurstTarget&amp;quot;, 0)
	       end
	       
	      
	       
	      end
    end
   end
  end

 BuBa_CombatLog:SetScript(&amp;apos;OnEvent&amp;apos;, OnSuccessfulCast)

    CombatLog = true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if HealthstoneCheck
and CalculateHP(&amp;quot;player&amp;quot;) &amp;lt;= HealthstoneValue
   and GetItemCount(GetItemInfo(5512)) ~= 0
  and select(2,GetItemCooldown(5512)) == 0 
  then 
	UseItemByName(5512)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Flare</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GCDCheck(1543)
and Nova_Flare == 1   
	 and not SpellIsTargeting() 
	 then
	 SpellStopCasting()
	 	 SpellStopCasting()
	 	 	 SpellStopCasting()
	CastSpellByName(tostring(GetSpellInfo(1543)))
	return true
	end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>eventRA</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not CokxLog then
    Cokx_CokxLog = CreateFrame(&amp;apos;Frame&amp;apos;)
    Cokx_CokxLog:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)

 function OnSuccessfulCast(self, event, ...)
  local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
  if (event==&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;) then
            if (type==&amp;quot;SPELL_CAST_SUCCESS&amp;quot;) then
                
	     		
	     		if sourceGUID == UnitGUID(&amp;quot;player&amp;quot;) then
       			targetSpellRA = EspellRA()
       			for i=1,#targetSpellRA do
       				if select(12, ...) == targetSpellRA[i] then
       					if IsSpellKnown(19503) 
       					and GCDCheck(19503)
       					and PQR_UnitDistance(&amp;quot;player&amp;quot;,sourceGUID) &amp;lt; 20 then
						CastSpellByName(GetSpellInfo(19503))
						return true
						end
       				end
       			end
	     		end
	     		
	     		for i = 1, #cTar do
                if sourceGUID == UnitGUID(cTar[i])
                and ecTar[i].Range &amp;lt; 20 then
       				if select(12, ...) == 19503	then
       					if IsSpellKnown(19503)
       					and GCDCheck(19503)
       					then
						CastSpellByName(GetSpellInfo(19503),cTar[i])
						return true
						end
					end
	     		end
	     		end
	     		     		
	     	
	     		for j = 1, #members do
                if destGUID == UnitGUID(members[j])
                and eMembers[j].Range &amp;lt; 40 then
       			allHSpellRA = HealerphysRA()
       			for i=1,#allHSpellRA do
       				if select(12, ...) == allHSpellRA[i] then
       					if IsSpellKnown(19503) 
       					and GCDCheck(19503)
       					and PQR_UnitDistance(&amp;quot;player&amp;quot;,sourceGUID) &amp;lt; 20 then
						CastSpellByName(GetSpellInfo(19503))
						return true
						end
					end
       			end
	     		end
	     		end
	     		
	     	   		
		    end
  end
 end

 Cokx_CokxLog:SetScript(&amp;apos;OnEvent&amp;apos;, OnSuccessfulCast)

    CokxLog = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Focus</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not myFocusID then myFocusID = 0 end

if not UnitExists(&amp;quot;focus&amp;quot;)
or UnitGUID(&amp;quot;focus&amp;quot;) == myFocusID then
for i = 1, #cTar do
if UnitExists(cTar[i]) and IsHealer(cTar[i])
and ecTar[i].Range &amp;lt; 60
and not UnitIsUnit(&amp;quot;target&amp;quot;,cTar[i]) then
FocusUnit(cTar[i])
myFocusID = 0
break
end
end

for i = 1, #cTar do
if UnitExists(cTar[i])
and ecTar[i].Range &amp;lt; 60
and not eHealer()
and not UnitIsUnit(&amp;quot;target&amp;quot;,cTar[i]) then
FocusUnit(cTar[i])
myFocusID=UnitGUID(cTar[i])
break
end
end
end
if UnitExists(&amp;quot;focus&amp;quot;) and not UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;) and UnitGUID(&amp;quot;focus&amp;quot;) == myFocusID then ClearFocus() end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Arcane Shot MM</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10</Actions><Lua>-- AS
if IsFacing
and GCDCheck(3044)
and not GCDCheck(53209)
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
and LineOfSight(&amp;quot;target&amp;quot;)
and not HaveBuff(&amp;quot;target&amp;quot;,iDMG(),0)
and PQR_SpellAvailable(3044)
and HaveBuff(&amp;quot;player&amp;quot;,53220,0)
and (goRage == 1)
 then
CastSpellByName(GetSpellInfo(3044),&amp;quot;target&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></HUNTER>