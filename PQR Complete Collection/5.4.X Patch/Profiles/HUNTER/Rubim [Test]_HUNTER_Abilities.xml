<?xml version="1.0" encoding="utf-8" ?><HUNTER><Ability><Name>[ MISC ] Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Code by Crystal_tech
if lShift
or lCtrl 
or IsMounted()
or not PlayerCombat
 then
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Raise Ally</Name><Default>false</Default><SpellID>61999</SpellID><Actions></Actions><Lua>local members = GetNumGroupMembers() - 1
local group = &amp;quot;&amp;quot;
if IsInRaid then 
	group = &amp;quot;raid&amp;quot; 
else
	group = &amp;quot;party&amp;quot;
end

if RRA == &amp;quot;enabled&amp;quot;
and IsSpellKnown(61999) then
	for i=1, members, 1 do
		local member = group..tostring(i)
		if UnitIsCorpse(member)
		 and not PQR_IsOutOfSight(member)
		 and IsSpellInRange(GetSpellInfo(61999), member) == 1
		 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		 and ( UnitGroupRolesAssigned(member) == &amp;quot;TANK&amp;quot;
		  or UnitGroupRolesAssigned(member) == &amp;quot;HEALER&amp;quot; ) then
			PQR_CustomTarget = member
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Use: Mouseover Skill</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil
  and UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil
  and IsMouseButtonDown()
 then RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName()) end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Special Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Fading Light
if select(7,UnitDebuffID(&amp;quot;player&amp;quot;, 105925)) and select(7,UnitDebuffID(&amp;quot;player&amp;quot;, 105925)) - GetTime() &amp;lt; 2 then
		RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
end
-- Hour of Twilight
local HoT,_,_,_,_,timer = UnitCastingInfo(&amp;quot;boss1&amp;quot;)

if HoT and IsLeftShiftKeyDown() and not GetCurrentKeyBoardFocus() then
	SpellStopCasting()
	CastSpellByID(48707,&amp;quot;player&amp;quot;)
	CastSpellByID(48792,&amp;quot;player&amp;quot;)
	return true
elseif HoT == GetSpellInfo(103327)
 and not UnitBuffID(&amp;quot;player&amp;quot;,48792) 
 and timer/1000 - GetTime() &amp;lt; 2 then
		RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
		return true	
end

-- Try to aim on Darkmoon Faerie Cannon
local canontime = select(7,UnitBuffID(&amp;quot;player&amp;quot;,102116))
if canontime and canontime - GetTime() &amp;lt; 1.07 then CancelUnitBuff(&amp;quot;player&amp;quot;,&amp;quot;Magic Wings&amp;quot;) end

-- Code provided by Kickmydog
-- Avoid Fragmentation on Madness
local tentacledeath = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,106791))
if tentacledeath and tentacledeath - GetTime() &amp;lt; 0.7 then 
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end









-- Fading Light
if select(7,UnitDebuffID(&amp;quot;player&amp;quot;, 105925)) and select(7,UnitDebuffID(&amp;quot;player&amp;quot;, 105925)) - GetTime() &amp;lt; 2 then
		RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
end

-- Hour of Twilight
local HoT,_,_,_,_,timer = UnitCastingInfo(&amp;quot;boss1&amp;quot;)
	
if HoT == GetSpellInfo(103327)
 and not UnitBuffID(&amp;quot;player&amp;quot;,48792) 
 and timer/1000 - GetTime() &amp;lt; 2 then
		RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
end	

-- Try to aim on Darkmoon Faerie Cannon
local canontime = select(7,UnitBuffID(&amp;quot;player&amp;quot;,102116))
if canontime and canontime - GetTime() &amp;lt; 1.07 then CancelUnitBuff(&amp;quot;player&amp;quot;,&amp;quot;Magic Wings&amp;quot;) end

-- Code provided by Kickmydog
-- Avoid Fragmentation on Madness
local tentacledeath = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,106791))
if tentacledeath and tentacledeath - GetTime() &amp;lt; 0.7 then 
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frost Strike (RP Capped)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49143
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and PlayerRunic &amp;gt;= 76 then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Orc: Blood Fury</Name><Default>false</Default><SpellID>20572</SpellID><Actions></Actions><Lua>local SPELL = 20572
local TargetValidationRub = TargetValidationRub
local SpecialUnit = SpecialUnit

if PlayerCombat
	and IsSpellKnown(SPELL)
	and PQR_SpellAvailable(SPELL)
	then
	
	if RCD == &amp;quot;bossonly&amp;quot;
	and SpecialUnit()
	then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	elseif RCD == &amp;quot;always&amp;quot;
	then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Debuff Handler</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local FF,_,_,_,_,_,FFtimer = UnitDebuffID(PQR_CustomTarget,55095,&amp;quot;player&amp;quot;)
local BP,_,_,_,_,_,BPtimer = UnitDebuffID(PQR_CustomTarget,55078,&amp;quot;player&amp;quot;)

if PQ_Pestilence == nil then PQ_Pestilence = false end
if IsSpellKnown(77575)
	and PQ_ValidUnit
	and IsSpellInRange(GetSpellInfo(77575),PQR_CustomTarget) == 1
	and PQR_UnitFacing(&amp;quot;player&amp;quot;, PQR_CustomTarget)
then
	-- If Outbreak is on Cooldown we&amp;apos;ll check if the diseases are up.
	if GetSpellCooldown(77575) ~= 0 then
		if FF then
			-- If less than 3 seconds left on Frost Fever, reapply is Outbreak is down.
			if FFtimer - GetTime() &amp;lt; 3 then
				PQ_Pestilence = true
				CastSpellByID(49184,PQR_CustomTarget)
			end
		-- If Frost Fever isn&amp;apos;t on Target, apply with Icey Touch if Outbreak is down.
		else
			PQ_Pestilence = true
			CastSpellByID(49184,PQR_CustomTarget)
			end
		
		if BP then
			-- If less than 3 seconds left on Blood Plague, reapply is Outbreak is down.
			if BPtimer - GetTime() &amp;lt; 3 then
				PQ_Pestilence = true
				CastSpellByID(45462,PQR_CustomTarget)
			end
		-- If Blood Plague isn&amp;apos;t on Target, apply with Icey Touch if Outbreak is down.
		else
			PQ_Pestilence = true
			CastSpellByID(45462,PQR_CustomTarget)
		end
	else
		-- If Outbreak is off Cooldown, and either FF or BP isn&amp;apos;t on target, cast Outbreak
		if not FF or not BP then
			PQ_Pestilence = true
			CastSpellByID(77575,PQR_CustomTarget)
		else
			-- If both Diseases are on, but either one has less than 3 seconds remaining, Cast Outbreak.
			if (FF and FFtimer - GetTime() &amp;lt; 3) or (BP and BPtimer - GetTime() &amp;lt; 3)
			then
				PQ_Pestilence = true
				CastSpellByID(77575,PQR_CustomTarget)
			end
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Horn of Winter</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 57330

--HORN
if PQR_SpellAvailable(SPELL)
	and PlayerCombat
	and PlayerRunic &amp;lt; 20 then
	CastSpellByName(GetSpellInfo(SPELL),nil)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blood Tap</Name><Default>false</Default><SpellID>45529</SpellID><Actions></Actions><Lua>local SPELL = 45529
local BC,_,_,BCcharge,_,_,_,_,_,_,_ = UnitAura(&amp;quot;player&amp;quot;,&amp;quot;Blood Charge&amp;quot;)
local RuneCheck = RuneCheck

if PQR_SpellAvailable(SPELL)
and PlayerCombat then
   if BC ~= nil then
      if BCcharge &amp;gt;= 5 then 
         if select(3,RuneCheck()) &amp;lt; 1 or select(2,RuneCheck()) &amp;lt; 1 or select(4,RuneCheck()) &amp;lt; 1 then
            CastSpellByName(GetSpellInfo(SPELL),nil)
            return true
         end
      end
   end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Soul Reaper</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 130735
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and EnemyHP &amp;lt;= 35 then
	CastSpellByName(GetSpellInfo(SPELL))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Explosive Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 53301
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Plague Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 45462
local TargetValidationRub = TargetValidationRub
local BP,_,_,_,_,_,BPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,55078,&amp;quot;player&amp;quot;)

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	if BP then
		if BPtimer - GetTime() &amp;lt; 3 then
		CastSpellByName(GetSpellInfo(SPELL))
		return true
		end
	else
		CastSpellByName(GetSpellInfo(SPELL))
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Functions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Load LUA data files.
if PQR_RotationStarted then
	PQR_RotationStarted = false

	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data_Rubim.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_Nova_Data_Rubim.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
end

-- Variables

	--Player Info
	PlayerRunic		= select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;))
	PlayerHP			= Nova_UnitInfo(&amp;quot;player&amp;quot;)
	PlayerCombat		= UnitAffectingCombat(&amp;quot;player&amp;quot;)
	
	if UnitExists(&amp;quot;pet&amp;quot;) then
		PlayerPetHP			= select(1, Nova_UnitInfo(&amp;quot;pet&amp;quot;)) --percent
	end
	
	--PQR Functions
	isMoving			= PQR_IsMoving()

	--Key Mods
	lShift				= Nova_Pause(1)
	lCtrl				= Nova_Pause(2)
	lAlt				= Nova_Pause(3)
	rShift				= Nova_Pause(4)
	rCtrl				= Nova_Pause(5)
	rAlt				= Nova_Pause(6)

	--Target Info
	EnemyHP				= select(1, Nova_UnitInfo(&amp;quot;target&amp;quot;))
	EnemyLevel			= UnitLevel(&amp;quot;target&amp;quot;)
		
-- Don&amp;apos;t automatically start if we&amp;apos;re mounted.
if IsMounted() then return true end
--
-- AoE Toggle Code
if not GetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;) then RegisterCVar(&amp;quot;2HFrostAoEToggle&amp;quot;, 0) end
if not GetCVar(&amp;quot;InGameToggle&amp;quot;) then RegisterCVar(&amp;quot;InGameToggle&amp;quot;, 0) end

if tonumber(GetCVar(&amp;quot;InGameToggle&amp;quot;)) == 0 then 
	InGameSwitcher = false
elseif tonumber(GetCVar(&amp;quot;InGameToggle&amp;quot;)) == 1 then
	InGameSwitcher = true
end
if not SwitchTimer then SwitchTimer = GetTime() - 1 end

if IsRightShiftKeyDown() 
 and not GetCurrentKeyBoardFocus()
 and not InGameSwitcher
 and GetTime() - SwitchTimer &amp;gt;= 1 then
 	SwitchTimer = GetTime()
	if tonumber(GetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;)) == 0 then 
		SetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;, 2) 
	elseif tonumber(GetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;)) == 5 then
		SetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;, 1)
	end
end

if tonumber(GetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;)) == 1 then SetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;, 0) PQR_SwapRotation(&amp;quot;Frost PVE (Rubim [2H Frost])&amp;quot;) 
elseif tonumber(GetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;)) == 2 then SetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;, 5) PQR_SwapRotation(&amp;quot;Frost AoE PVE (Rubim [2H Frost])&amp;quot;) end

if tonumber(GetCVar(&amp;quot;2HFrostAoEToggle&amp;quot;)) == 5 then AoEToggle = true else AoEToggle = false end

-- HUNTER
---Trap Launcher
function F_tLaunch()
	if ( Nova_Pause(4) or Nova_Pause(5) )
		and not UnitBuffID(&amp;quot;player&amp;quot;, 77769) then 
			CastSpellByID(77769, &amp;quot;player&amp;quot;) 
	end
end


-- At this point, everything should have loaded perfectly!
if not PQ_DKFrost2H then
	PQ_DKFrost2H = true
	setVar()
	initMessage()
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Non-Combat Buffs</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 13165
local SPELL2 = 1130
local SPELL3 = 5118
local SPELL4 = 883
local SPELL41 = 83242
local TargetValidationRub = TargetValidationRub

--ASPEC
if PlayerCombat
and PQR_SpellAvailable(SPELL)
and not UnitBuffID(&amp;quot;player&amp;quot;,SPELL)
	then CastSpellByName(GetSpellInfo(SPELL),nil)
	return true
end

--MARK
if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL2)
	and PQR_SpellAvailable(SPELL2)
	and not PlayerCombat
	and not IsMounted()
	and not UnitDebuffID(&amp;quot;target&amp;quot;,1130)
	then
	CastSpellByName(tostring(GetSpellInfo(SPELL2)))
	return true
end

--ASPEC
if not PlayerCombat
and PQR_SpellAvailable(SPELL3)
and not IsMounted()
and PQR_IsMoving(1)
and not UnitBuffID(&amp;quot;player&amp;quot;,SPELL3)
	then CastSpellByName(GetSpellInfo(SPELL3),nil)
	return true
end

--PET
--ASPEC
if PQR_SpellAvailable(SPELL41)
and not IsMounted()
and not UnitExists(&amp;quot;pet&amp;quot;)
	then CastSpellByName(GetSpellInfo(SPELL41),nil)
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frost Strike (Killing Machine)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49143
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and UnitBuffID(&amp;quot;player&amp;quot;,51128) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Howling Blast</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49184
local TargetValidationRub = TargetValidationRub
local FF,_,_,_,_,_,FFtimer = UnitDebuffID(&amp;quot;target&amp;quot;,55095,&amp;quot;player&amp;quot;)

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	if FF then
		if FFtimer - GetTime() &amp;lt; 3 then
		CastSpellByName(GetSpellInfo(SPELL))
		return true
		end
	else
		CastSpellByName(GetSpellInfo(SPELL))
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frost Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49143
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Howling Blast (Rime)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49184
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and UnitBuffID(&amp;quot;player&amp;quot;,59052) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Obliterate (Killing Machine)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49020
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and UnitBuffID(&amp;quot;player&amp;quot;,51128) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Howling Blast (Runes)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49184
local TargetValidationRub = TargetValidationRub
local RuneHalfCD = RuneHalfCD
local RuneCheck = RuneCheck

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	then
	if select(1,RuneHalfCD()) == 2 or select(4,RuneHalfCD()) == 2
	then
		CastSpellByName(tostring(GetSpellInfo(SPELL)))
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Serpent Sting</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 1978
local TargetValidationRub = TargetValidationRub
local ST,_,_,_,_,_,STtimer = UnitDebuffID(&amp;quot;target&amp;quot;,1978,&amp;quot;player&amp;quot;)

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	if ST then
		if STtimer - GetTime() &amp;lt; 3 then
		CastSpellByName(GetSpellInfo(SPELL))
		return true
		end
	else
		CastSpellByName(GetSpellInfo(SPELL))
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Howling Blast (Filler)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49184
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Plague Leech</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 123693
local FF,_,_,_,_,_,FFtimer = UnitDebuffID(&amp;quot;target&amp;quot;,55095,&amp;quot;player&amp;quot;)
local BP,_,_,_,_,_,BPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,55078,&amp;quot;player&amp;quot;)
local RuneCheck = RuneCheck
local Ostart, Oduration, Oenabled = GetSpellCooldown(77575)
local Ocooldown = (Ostart + Oduration - GetTime())
local RunesOnCD = 0

--	KGstart, KGduration, KGenabled = GetSpellCooldown(121253)
--  KGcooldown = (KGstart + KGduration - GetTime())

if PQR_SpellAvailable(SPELL)
	and PlayerCombat then
	if FF and BP then
		for i=1 ,6 do
			if not select(3, GetRuneCooldown(i)) then
				RunesOnCD = RunesOnCD + 1
			end
		end
	end
end

if RunesOnCD &amp;gt;= 3 then
 	if Ocooldown &amp;lt;= 1 then
		CastSpellByName(tostring(GetSpellInfo(SPELL)))
		return true
	elseif ((UnitBuffID(&amp;quot;player&amp;quot;,59052))
		and (select(2,RuneCheck()) &amp;gt;= 1
		or select(4,RuneCheck()) &amp;gt;= 1)) then
		CastSpellByName(tostring(GetSpellInfo(SPELL)))
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Empower Rune Weapon</Name><Default>false</Default><SpellID>47568</SpellID><Actions></Actions><Lua>local SPELL = 47568
local SpecialUnit = SpecialUnit
local RunesOnCD = 0

if PQR_SpellAvailable(SPELL)
and UnitPower(&amp;quot;player&amp;quot;) &amp;lt; 30 then
	local GetRuneCooldown = GetRuneCooldown
	for i=1, 6 do
		if not select(3, GetRuneCooldown(i)) then RunesOnCD = RunesOnCD + 1 end
	end
end

if RunesOnCD == 6 then
	if RCD == &amp;quot;bossonly&amp;quot;
	and SpecialUnit() then
		CastSpellByName(GetSpellInfo(SPELL),nil)
	elseif RCD == &amp;quot;alltime&amp;quot; then
		CastSpellByName(GetSpellInfo(SPELL),nil)
	end	
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Raise Dead</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 46584
local SpecialUnit = SpecialUnit

if PQR_SpellAvailable(SPELL)
and PlayerCombat
and PQR_UnitDistance(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) ~= nil
and PQR_UnitDistance(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;lt;= 6
then
	if RCD == &amp;quot;bossonly&amp;quot;
		and SpecialUnit() then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	elseif RCD == &amp;quot;alltime&amp;quot; then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Pillar of Frost</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 51271

if PQR_SpellAvailable(SPELL)
	and PlayerCombat
	and PQR_UnitDistance(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) ~= nil
	and PQR_UnitDistance(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;lt;= 6
	then
	CastSpellByName(GetSpellInfo(SPELL),nil)
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frost Strike (Runes)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49143
local TargetValidationRub = TargetValidationRub
local RuneCheck = RuneCheck
local RuneCD = 0

if  TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and not UnitBuffID(&amp;quot;player&amp;quot;,51128) then
	if select(3,RuneCheck()) == 0 then
		if select(2,RuneCheck()) &amp;gt; 0 or select(4,RuneCheck()) &amp;gt; 0 then
			CastSpellByName(GetSpellInfo(SPELL))
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Obliterate (Filler)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 49020
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Death Strike (Proc)</Name><Default>false</Default><SpellID>49998</SpellID><Actions></Actions><Lua>local SPELL = 49998
local TargetValidationRub = TargetValidationRub

if RDS == &amp;quot;enabled&amp;quot;
	and TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and UnitBuffID(&amp;quot;player&amp;quot;,101568)
	and PlayerHP &amp;lt;= 95 then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Advanced</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--------------------
-- Slash Commands
--------------------
function getVar(var,var2)
	if var2 == &amp;quot;on&amp;quot; then
		print(var .. &amp;quot; = |cFF00FF00ON&amp;quot;)
	end
	
	if var2 == &amp;quot;off&amp;quot; then
		print(var .. &amp;quot; = |cFFFF0000OFF&amp;quot;)
	end
	
	if var2 == &amp;quot;boss&amp;quot; then
		print(var .. &amp;quot; = |CFFFFFF01Boss Only&amp;quot;)
	end	
	
end

function setVar()
	--VARIABLES
	vhb = &amp;quot;on&amp;quot;
	vds = &amp;quot;on&amp;quot;
	vcd = &amp;quot;boss&amp;quot;
	vdnd = &amp;quot;on&amp;quot;
	vtrinket00 = &amp;quot;off&amp;quot;
	vtrinket01 = &amp;quot;off&amp;quot;
	vgloves = &amp;quot;off&amp;quot;
	vra = &amp;quot;off&amp;quot;
	vtier4 = &amp;quot;off&amp;quot;
	vtier4Percent = 40
	--
	--IDS
	idtier4 = nil
	-- NAMES	
	ntier4 = &amp;quot;None&amp;quot;
	ntier5 = &amp;quot;None&amp;quot;
	nhb = tostring(GetSpellInfo(49184))
	nra = tostring(GetSpellInfo(61999))
	nds = tostring(GetSpellInfo(49998))
	ndnd = tostring(GetSpellInfo(43265))
	ntrinket00 = &amp;quot;None&amp;quot;
	ntrinket01 = &amp;quot;None&amp;quot;
	ngloves = &amp;quot;None&amp;quot;
	--
	RDRW = &amp;quot;off&amp;quot;
end

function checkTrinket()
	if GetInventoryItemID(&amp;quot;player&amp;quot;, 13) ~= nil
	then
		ntrinket00 = tostring(GetItemInfo(GetInventoryItemID(&amp;quot;player&amp;quot;, 13))) .. &amp;quot;|cff106246 (00)|R&amp;quot;
	end
	if GetInventoryItemID(&amp;quot;player&amp;quot;, 14) ~= nil
	then
		ntrinket01 = tostring(GetItemInfo(GetInventoryItemID(&amp;quot;player&amp;quot;, 14))) .. &amp;quot;|cff106246 (01)|R&amp;quot;
	end
	if GetInventoryItemID(&amp;quot;player&amp;quot;, 10) ~= nil
	then
		ngloves = tostring(GetItemInfo(GetInventoryItemID(&amp;quot;player&amp;quot;, 10)))
	end
end

function checkTier4()
	if IsSpellKnown(48743) then
		ntier4 = tostring(GetSpellInfo(48743))
		idtier4 = 48743	
	elseif IsSpellKnown(108196) then
		ntier4 = tostring(GetSpellInfo(108196))
		idtier4 = 108196
	elseif IsSpellKnown(119975) then
		ntier4 = tostring(GetSpellInfo(119975))
		idtier4 = 119975
	end
end

function checkTier5()
	if IsSpellKnown(45529) then
		idtier5 = &amp;quot;BloodTap&amp;quot;	
	elseif IsSpellKnown(81229) then
		idtier5 = &amp;quot;RunicEwmpower&amp;quot;
	elseif IsSpellKnown(51462) then
		idtier5 = &amp;quot;RunicCorruption&amp;quot;
	end
end


function initMessage()
	PQR_WriteToChat(&amp;quot;|cff91e782Rubim&amp;apos;s DK Frost 2H |cff82cee7Loaded!|cffffffff&amp;quot;)
	PQR_WriteToChat(&amp;quot;Type: |cffff0303/rhelp|R to see the commands available&amp;quot;)
	PQR_WriteToChat(&amp;quot;|cffff0303WARNING&amp;quot;)
	PQR_WriteToChat(&amp;quot;Trinkets and Gloves are disabled by default.&amp;quot;)
	PQR_WriteToChat(&amp;quot;If you reset your talents, reload the profile.&amp;quot;)
	checkTrinket()
	checkTier4()
	checkTier5()
end

--- HELP ---
SLASH_RHELP1 = &amp;quot;/rhelp&amp;quot;
function SlashCmdList.RHELP(msg, editbox)
	PQR_rhelp()
end

function PQR_rhelp()
		print(&amp;quot;|cFF00FFFF-- HELP / COMMANDS --&amp;quot;)
		print(&amp;quot;|cFFFF00FFExample|R: /rcd on&amp;quot;)
		print(&amp;quot;|cfffe8a0e/rhelp|R - Show this dialog.&amp;quot;)
		print(&amp;quot;|cfffe8a0e/rstatus|R - Show your configs.&amp;quot;)
		print(&amp;quot;|cfffe8a0e/rcd |cFF00FF00on|R - |cfffe8a0e/rcd |cFFFF0000off|R - |cfffe8a0e/rds |CFFFFFF01boss|R - Cooldowns.&amp;quot;)
		print(&amp;quot;|cfffe8a0e/rtrinket |CFFFFFF0100|R - |cfffe8a0e/rtrinket |CFFFFFF0101|R - |cfffe8a0e/rtrinket |cFFFF0000off|R - Trinkets.&amp;quot;)
		print(&amp;quot;|cfffe8a0e/rgloves |cFF00FF00on|R - |cfffe8a0e/rgloves |cFFFF0000off|R - Gloves&amp;quot;)
		print(&amp;quot;|cfffe8a0e/rra |cFF00FF00on|R - |cfffe8a0e/rra |cFFFF0000off|R - &amp;quot; .. nra)
		print(&amp;quot;|cfffe8a0e/rds |cFF00FF00on|R - |cfffe8a0e/rds |cFFFF0000off|R - &amp;quot; .. nds)
		print(&amp;quot;|cfffe8a0e/rdnd |cFF00FF00on|R - |cfffe8a0e/rdnd |cFFFF0000off|R - &amp;quot; .. ndnd)
		print(&amp;quot;|cfffe8a0e/rtier4 |cFF00FF00on|R - |cfffe8a0e/rtier |cFFFF0000off|R - &amp;quot; .. ntier4)
end

--- STATUS ---
SLASH_RSTATUS1 = &amp;quot;/rstatus&amp;quot;
function SlashCmdList.RSTATUS(msg, editbox)
	PQR_rstatus()
end

function PQR_rstatus()
		checkTrinket()
		print(&amp;quot;|cFF00FFFF-- STATUS --&amp;quot;)
		getVar(&amp;quot;Cooldowns&amp;quot;,vcd)
		getVar(ntrinket00,vtrinket00)
		getVar(ntrinket01,vtrinket01)
		getVar(ngloves,vgloves)
		getVar(nhb,vhb)
		getVar(nra,vra)
		getVar(nds,vds)
		getVar(ndnd,vdnd)
		getVar(ntier4,vtier4)
end


--- COOLDOWNS ---
SLASH_rcd1 = &amp;quot;/rcd&amp;quot;
local function rcd(rcd, editbox)
	if rcd == &amp;quot;on&amp;quot; then
		vcd = &amp;quot;on&amp;quot;
	elseif rcd == &amp;quot;off&amp;quot; then
		vcd = &amp;quot;off&amp;quot;
	elseif rcd == &amp;quot;boss&amp;quot; then
		vcd = &amp;quot;boss&amp;quot;
	else print(&amp;quot;|CFFFF0303Missing argument|R. Showing status:&amp;quot;)
	end
	getVar(&amp;quot;Cooldowns&amp;quot;,vcd)		
end
SlashCmdList[&amp;quot;rcd&amp;quot;] = rcd

--- TRINKETS ---
SLASH_rtrinket1 = &amp;quot;/rtrinket&amp;quot;
local function rtrinket(rtrinket, editbox)
	checkTrinket()
	if rtrinket == &amp;quot;00&amp;quot; then
		vtrinket00 = &amp;quot;on&amp;quot;
	elseif rtrinket == &amp;quot;01&amp;quot; then
		vtrinket01 = &amp;quot;on&amp;quot;
	elseif rtrinket == &amp;quot;off&amp;quot; then
		vtrinket00 = &amp;quot;off&amp;quot;
		vtrinket01 = &amp;quot;off&amp;quot;
	else print(&amp;quot;|CFFFF0303Missing argument|R. Showing status:&amp;quot;)
	end
	getVar(ntrinket00,vtrinket00)		
	getVar(ntrinket01,vtrinket01)		
end
SlashCmdList[&amp;quot;rtrinket&amp;quot;] = rtrinket

---- GLOVES ---
SLASH_rgloves1 = &amp;quot;/rgloves&amp;quot;
local function rgloves(rgloves, editbox)
	if rgloves == &amp;quot;on&amp;quot; then
		vgloves = &amp;quot;on&amp;quot;
	elseif rgloves == &amp;quot;off&amp;quot; then
		vgloves = &amp;quot;off&amp;quot;
	else print(&amp;quot;|CFFFF0303Missing argument|R. Showing status:&amp;quot;)
	end
	getVar(ngloves,vgloves)
end
SlashCmdList[&amp;quot;rgloves&amp;quot;] = rgloves

--
--  HOWLING BLAST ---
SLASH_rhb1 = &amp;quot;/rhb&amp;quot;
local function rhb(rhb, editbox)
	if rhb == &amp;quot;on&amp;quot; then
		vra = &amp;quot;on&amp;quot;
	elseif rhb == &amp;quot;off&amp;quot; then
		vhb = &amp;quot;off&amp;quot;
	else print(&amp;quot;|CFFFF0303Missing argument|R. Showing status:&amp;quot;)
	end
	getVar(nhb,vhb)
end
SlashCmdList[&amp;quot;rhb&amp;quot;] = rhb


---  RAISE ALLY ---
SLASH_rra1 = &amp;quot;/rra&amp;quot;
local function rra(rra, editbox)
	if rra == &amp;quot;on&amp;quot; then
		vra = &amp;quot;on&amp;quot;
	elseif rra == &amp;quot;off&amp;quot; then
		vra = &amp;quot;off&amp;quot;
	else print(&amp;quot;|CFFFF0303Missing argument|R. Showing status:&amp;quot;)
	end
	getVar(nra,vra)
end
SlashCmdList[&amp;quot;rra&amp;quot;] = rra


--- DEATH STRIKE ---
SLASH_rds1 = &amp;quot;/rds&amp;quot;
local function rds(rds, editbox)
	if rds == &amp;quot;on&amp;quot; then
		vds = &amp;quot;on&amp;quot;
	elseif rds == &amp;quot;off&amp;quot; then
		vds = &amp;quot;off&amp;quot;
	else print(&amp;quot;|CFFFF0303Missing argument|R. Showing status:&amp;quot;)
	end
	getVar(nds,vds)
end
SlashCmdList[&amp;quot;rds&amp;quot;] = rds

--- DEATH N DECAY ---
SLASH_rdnd1 = &amp;quot;/rdnd&amp;quot;
local function rdnd(rdnd, editbox)
	if rdnd == &amp;quot;on&amp;quot; then
		vdnd = &amp;quot;on&amp;quot;
	elseif rdnd == &amp;quot;off&amp;quot; then
		vdnd = &amp;quot;off&amp;quot;
	else print(&amp;quot;|CFFFF0303Missing argument|R. Showing status:&amp;quot;)
	end
	getVar(ndnd,vdnd)
end
SlashCmdList[&amp;quot;rdnd&amp;quot;] = rdnd

--- TIER 4 ---
SLASH_rtierF1 = &amp;quot;/rtier4&amp;quot;
local function rtierF(rtierF,rtierFPer, editbox)
	if rtierF == &amp;quot;on&amp;quot; then
		vtier4 = &amp;quot;on&amp;quot;
	elseif rtierF == &amp;quot;off&amp;quot; then
		vtier4 = &amp;quot;off&amp;quot;
	else print(&amp;quot;|CFFFF0303Missing argument|R. Showing status:&amp;quot;)
	end
	getVar(ntier4,vtier4)
end
SlashCmdList[&amp;quot;rtierF&amp;quot;] = rtierF</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Death n Decay</Name><Default>false</Default><SpellID>43265</SpellID><Actions></Actions><Lua>if RDND == &amp;quot;enabled&amp;quot;
and PQR_SpellAvailable(43265)
and AoEToggle
	then 
	CastSpellByName(GetSpellInfo(43265))
	if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
	return true 
elseif RDND == &amp;quot;disabled&amp;quot;
and PQR_SpellAvailable(43265) and rCtrl
	then
	CastSpellByName(GetSpellInfo(43265))
	if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
	return true 
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Trinkets</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SpecialUnit = SpecialUnit

if PlayerCombat
and PQR_UnitDistance(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) ~= nil
and PQR_UnitDistance(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;lt;= 6
then
	if RT0 == &amp;quot;enabled&amp;quot;
	and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,13) == 0
	then
		if RTR == &amp;quot;bossonly&amp;quot;
		and SpecialUnit()
		then		
			UseInventoryItem(13)
			return true
		elseif RTR == &amp;quot;always&amp;quot;
		then
			UseInventoryItem(13)
			return true
		end
	end
	if RT1 == &amp;quot;enabled&amp;quot;
	and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0
	then
		if RTR == &amp;quot;bossonly&amp;quot;
		and SpecialUnit()
		then		
			UseInventoryItem(14)
			return true
		elseif RTR == &amp;quot;always&amp;quot;
		then
			UseInventoryItem(14)
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hunter&amp;apos;s Mark</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 1130
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and not UnitDebuffID(&amp;quot;target&amp;quot;,1130)
	then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Arcane Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 3044
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Steady Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 56641
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Kill Command</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 34026
local TargetValidationRub = TargetValidationRub

if UnitExists(&amp;quot;pet&amp;quot;)
and TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
and PQR_SpellAvailable(SPELL)
and PQR_UnitDistance(&amp;quot;pet&amp;quot;, &amp;quot;target&amp;quot;) &amp;lt;= 6 then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Ment Pet</Name><Default>false</Default><SpellID>136</SpellID><Actions></Actions><Lua>local SPELL = 136
local BC,_,_,BCcharge,_,_,_,_,_,_,_ = UnitAura(&amp;quot;player&amp;quot;,&amp;quot;Blood Charge&amp;quot;)
local RuneCheck = RuneCheck

if PQR_SpellAvailable(SPELL)
and PlayerCombat
and PlayerPetHP &amp;lt;= 50
and not UnitIsDead(&amp;quot;pet&amp;quot;)
and not UnitBuffID(&amp;quot;pet&amp;quot;,136) then
	CastSpellByName(GetSpellInfo(SPELL),nil)
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Pet</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Focus Fire</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local _, _, _, FCount = UnitBuffID(&amp;quot;pet&amp;quot;, 19615)
local SPELL = 82692

if PQR_SpellAvailable(SPELL)
	and PlayerCombat
	and FCount == 5
	then
	CastSpellByName(GetSpellInfo(SPELL),nil)
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Concusion Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 5116
local TargetValidationRub = TargetValidationRub
local CS,_,_,_,_,_,CStimer = UnitDebuffID(&amp;quot;target&amp;quot;,5116,&amp;quot;player&amp;quot;)
local inRange = 0

if (CheckInteractDistance(&amp;quot;target&amp;quot;,2))
then
inRange = 1
end

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and PQR_UnitDistance(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;lt;= 15
	then
	if CS then
		if CStimer - GetTime() &amp;lt; 3 then
		CastSpellByName(GetSpellInfo(SPELL))
		return true
		end
	else
		CastSpellByName(GetSpellInfo(SPELL))
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Troll: Berserk</Name><Default>false</Default><SpellID>20572</SpellID><Actions></Actions><Lua>local SPELL = 26297
local TargetValidationRub = TargetValidationRub
local SpecialUnit = SpecialUnit

if PlayerCombat
	and IsSpellKnown(SPELL)
	and PQR_SpellAvailable(SPELL)
	then
	
	if RCD == &amp;quot;bossonly&amp;quot;
	and SpecialUnit()
	then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	elseif RCD == &amp;quot;always&amp;quot;
	then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Kill Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 53351
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL)
	and EnemyHP &amp;lt;= 20 then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Bestial Wrath</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 19574
local SpecialUnit = SpecialUnit

if PQR_SpellAvailable(SPELL)
and PlayerCombat
then
	if vcd == &amp;quot;boss&amp;quot;
		and SpecialUnit() then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	elseif vcd == &amp;quot;on&amp;quot; then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Trap - Explosive</Name><Default>false</Default><SpellID>13813</SpellID><Actions></Actions><Lua>--Code by KickmyDog
 F_tLaunch()

if rCtrl then 
	CastSpellByName(tostring(GetSpellInfo(13813)))
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop()
	end
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Rapid Fire</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 3045
local SpecialUnit = SpecialUnit

if PQR_SpellAvailable(SPELL)
and PlayerCombat
and PQ_HasHero() == false
then
	if vcd == &amp;quot;boss&amp;quot;
		and SpecialUnit() then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	elseif vcd == &amp;quot;on&amp;quot; then
		CastSpellByName(GetSpellInfo(SPELL),nil)
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Aimed Shot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SPELL = 19434
local TargetValidationRub = TargetValidationRub

if TargetValidationRub(&amp;quot;target&amp;quot;,SPELL)
	and PQR_SpellAvailable(SPELL) then
	CastSpellByName(tostring(GetSpellInfo(SPELL)))
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></HUNTER>