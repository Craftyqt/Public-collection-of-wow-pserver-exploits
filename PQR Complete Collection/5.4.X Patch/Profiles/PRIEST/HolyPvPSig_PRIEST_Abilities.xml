<?xml version="1.0" encoding="utf-8" ?><PRIEST><Ability><Name>-- Init --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- PQInterface is an absolute requirement from now on.
--if not IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;) then
--	PQR_WriteToChat(&amp;quot;|cffDC143CPQInterface is required to run this profile!|cffffffff&amp;quot;, &amp;quot;Warning&amp;quot;)
--	PQR_WriteToChat(&amp;quot;|cffDC143CThe profile has been stopped.|cffffffff&amp;quot;, &amp;quot;Warning&amp;quot;)
--	PQR_StopRotation()
--end

-- Load LUA data files.
if PQR_RotationStarted then
 PQR_RotationStarted = false
	 -- Load required data files
	 if PQR_LoadLua ~= nil then
		  if PQR_LoadLua(&amp;quot;PQR_HolyPriestPvP_Datas.lua&amp;quot;) == false then
		   PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_HolyPriestPvP_Datas.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
		   PQR_StopRotation()
		   return true
		  end 
		  if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == false then
		   PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_PQI.lua - It&amp;apos;s required to run the profile! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
		   PQR_StopRotation()
		   return true
		  end
	 end
end

if Chasticetime == nil then Chasticetime = 0 end

if not macros then
macros = true 
if not GetMacroInfo(&amp;quot;Chastise&amp;quot;) then
CreateMacro(&amp;quot;Chastise&amp;quot;, &amp;quot;INV_MISC_QUESTIONMARK&amp;quot;, &amp;quot;#showtooltip Holy Word: Chastise\\n/Chastise&amp;quot;, 1)
end
if not GetMacroInfo(&amp;quot;Lightwell&amp;quot;) then
CreateMacro(&amp;quot;Lightwell&amp;quot;, &amp;quot;INV_MISC_QUESTIONMARK&amp;quot;, &amp;quot;#showtooltip Lightwell\\n/Lightwell&amp;quot;, 1)
end
if not GetMacroInfo(&amp;quot;Fear&amp;quot;) then
CreateMacro(&amp;quot;Fear&amp;quot;, &amp;quot;INV_MISC_QUESTIONMARK&amp;quot;, &amp;quot;#showtooltip Psychic Scream\\n/Feeaar&amp;quot;, 1)
end
if not GetMacroInfo(&amp;quot;Void Tendrils&amp;quot;) then
CreateMacro(&amp;quot;Void Tendrils&amp;quot;, &amp;quot;INV_MISC_QUESTIONMARK&amp;quot;, &amp;quot;#showtooltip Void Tendrils\\n/Tendrils&amp;quot;, 1)
end
if not GetMacroInfo(&amp;quot;Divine Hymn&amp;quot;) then
CreateMacro(&amp;quot;Divine Hymn&amp;quot;, &amp;quot;INV_MISC_QUESTIONMARK&amp;quot;, &amp;quot;#showtooltip Divine Hymn\\n/Divine&amp;quot;, 1)
end
if not GetMacroInfo(&amp;quot;Hymn of Hope&amp;quot;) then
CreateMacro(&amp;quot;Hymn of Hope&amp;quot;, &amp;quot;INV_MISC_QUESTIONMARK&amp;quot;, &amp;quot;#showtooltip Hymn of Hope\\n/Ofhope&amp;quot;, 1)
end
if not GetMacroInfo(&amp;quot;Cobo Cola&amp;quot;) then
CreateMacro(&amp;quot;Cobo Cola&amp;quot;, &amp;quot;INV_MISC_QUESTIONMARK&amp;quot;, &amp;quot;#showtooltip Cobo Cola\\n/Drinks&amp;quot;, 1)
end
end
	
if IsSpellKnown(108920)
and Tier1 ~= 108920
then
Tier1 = 108920
end
if IsSpellKnown(108921)
and Tier1 ~= 108921
then
Tier1 = 108921
end
if IsSpellKnown(605)
and Tier1 ~= 605
then
Tier1 = 605
end
--------------------
	-- Register CVars --  Ofhope YOLORING Nova_MaxDps
	--------------------  
	Nova_ValueCheck = {
		{	Var1 = 0,	Text = &amp;quot;Chastise&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;Lightwell&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;MaxDps&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;Tendrils&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;Drinks&amp;quot;,				Var2 = nil	},
		{	Var1 = 0,	Text = &amp;quot;YOLORING&amp;quot;,				Var2 = nil	},
		{	Var1 = 0,	Text = &amp;quot;Divine&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;Ofhope&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;Feeaar&amp;quot;,			Var2 = nil		}		
	}		

	-----------------------------------------------
	-- Registering the CVars for the CustomFrame --
	-----------------------------------------------
	for i=1, #Nova_ValueCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text) == nil then 
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1) 
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text..&amp;apos;_Enabled&amp;apos;) == nil then 
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;)..&amp;apos;_Enabled&amp;apos;, Nova_ValueCheck[i].Var2) 
		end
	end

	

----------------------------
-- To Integer from String --
----------------------------
for i=1, #Nova_ValueCheck do
	if Nova_ValueCheck[i].Var1 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)] = tonumber(GetCVar(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)))
	end
	if Nova_ValueCheck[i].Var2 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;Check&amp;apos;] = GetCVarBool(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;_Enabled&amp;apos;)
	end
end

--------------------
-- Slash Commands --
--------------------
if not slash then
slash = true

-- revive pet
	SLASH_HEXER1 = &amp;quot;/Chastise&amp;quot;
	function SlashCmdList.HEXER(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Chastise&amp;quot;) 
		then
			xrn:message(&amp;quot;\124cFF0000FFPet Chastise Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Chastise&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFChastise Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Chastise&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
	
	-- revive pet
	SLASH_PETT1 = &amp;quot;/Lightwell&amp;quot;
	function SlashCmdList.PETT(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Lightwell&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FFPet Lightwell Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Lightwell&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFLightwell Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Lightwell&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
		-- revive pet
	SLASH_ROOOT1 = &amp;quot;/Feeaar&amp;quot;
	function SlashCmdList.ROOOT(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Feeaar&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FF Fear Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Feeaar&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FF Fear Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Feeaar&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
	
	SLASH_ROOOTS1 = &amp;quot;/Tendrils&amp;quot;
	function SlashCmdList.ROOOTS(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Tendrils&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FF Tendrils Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Tendrils&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FF Tendrils Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Tendrils&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
	SLASH_DIVINE1 = &amp;quot;/Divine&amp;quot;
	function SlashCmdList.DIVINE(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Divine&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FF Divine hymn Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Divine&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FF Divine hymn Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Divine&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
	SLASH_OFHOPE1 = &amp;quot;/Ofhope&amp;quot;
	function SlashCmdList.OFHOPE(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Ofhope&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FF hymn of hope Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Ofhope&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FF hymn of hope Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Ofhope&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
	SLASH_DRINK1 = &amp;quot;/Drinks&amp;quot;
	function SlashCmdList.DRINK(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Drinks&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FFDrink Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Drinks&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFDrink Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Drinks&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
		SLASH_YOLORING1 = &amp;quot;/YOLORING&amp;quot;
	function SlashCmdList.YOLORING(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_YOLORING&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FFYOLORING Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_YOLORING&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFYOLORING Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_YOLORING&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
			SLASH_MAXDPS1 = &amp;quot;/MaxDps&amp;quot;
	function SlashCmdList.MAXDPS(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_MaxDps&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FFMaxDps Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_MaxDps&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFMaxDps Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_MaxDps&amp;quot;, 0)
		--	burstTarget = 0
		end
	end
	
	
end
-- Chastise
--if cdRemains(88625) &amp;gt; 2
--and Nova_Chastise == 1 then
--SetCVar(&amp;quot;Nova_Chastise&amp;quot;, 0)
--_castSpell(LastChakra)
--xrn:message(&amp;quot;\124cFFCC99FF Chastise Engaged!.&amp;quot;)
--end 
--YoloRing
if cdRemains(88685) &amp;gt; 2  
and Nova_YOLORING == 1 then
SetCVar(&amp;quot;Nova_YOLORING&amp;quot;, 0)
xrn:message(&amp;quot;\124cFFCC99FF YOLORING Engaged!.&amp;quot;)
end 

--lightwell
if cdRemains(126135) &amp;gt; 2  
and Nova_Lightwell == 1 then
SetCVar(&amp;quot;Nova_Lightwell&amp;quot;, 0)
xrn:message(&amp;quot;\124cFFCC99FF Lightwell Engaged!.&amp;quot;)
end 
-- Fear
if cdRemains(8122) &amp;gt; 2  
and Nova_Feeaar == 1 then
SetCVar(&amp;quot;Nova_Feeaar&amp;quot;, 0)
xrn:message(&amp;quot;\124cFFCC99FF Fear Engaged!.&amp;quot;)
end 
-- Tendrils
if cdRemains(Tier1) &amp;gt; 2
or (UnitExists(&amp;quot;focus&amp;quot;) and HaveDebuff(&amp;quot;focus&amp;quot;,605,0))
and Nova_Tendrils == 1 then
SetCVar(&amp;quot;Nova_Tendrils&amp;quot;, 0)
xrn:message(&amp;quot;\124cFFCC99FF Tendrils Engaged!.&amp;quot;)
end 
-- Divine hymn
if cdRemains(64843) &amp;gt; 2  
and Nova_Divine == 1 then
SetCVar(&amp;quot;Nova_Divine&amp;quot;, 0)
xrn:message(&amp;quot;\124cFFCC99FF Divine hymn Engaged!.&amp;quot;)
end 
-- hymn of hope
if cdRemains(64901) &amp;gt; 2  
and Nova_Ofhope == 1 then
SetCVar(&amp;quot;Nova_Ofhope&amp;quot;, 0)
xrn:message(&amp;quot;\124cFFCC99FF Hymn of hope Engaged!.&amp;quot;)
end
if cdRemains(47788) == 0 
and GuuARDS123 == 1
then
GuuARDS123 = 0
end
if GuuARDS123 == nil
then 
GuuARDS123 = 0
end
if GuardTime == nil
then 
GuardTime = 0
end
 
cokx:message(&amp;quot;dps = &amp;quot;..onOff(Nova_MaxDps)..&amp;quot;| Chastise = &amp;quot;..onOff(Nova_Chastise)..&amp;quot;| Drink =&amp;quot;..onOff(Nova_Drinks)..&amp;quot; &amp;quot;)
DispellRootE            = PQI_ArneWerklandHolyPvPSIG_DispellRoot_enable                                              
AutoFearWard            = PQI_ArneWerklandHolyPvPSIG_AutoFearWard_enable
MDKey					= PQI:IsHotkeys(PQI_ArneWerklandHolyPvPSIG_MassDispel_key) 
FeatherKey              = PQI:IsHotkeys(PQI_ArneWerklandHolyPvPSIG_Feather_key) 
DefenciveDispells		= PQI_ArneWerklandHolyPvPSIG_UseDefenciveDispels_enable
SWDInstants				= PQI_ArneWerklandHolyPvPSIG_SWDInstants_enable
AutoVoidShift			= PQI_ArneWerklandHolyPvPSIG_VoidShift_enable
UseBattleMaster			= PQI_ArneWerklandHolyPvPSIG_Battlemasters_enable
BattlemasterHP			= PQI_ArneWerklandHolyPvPSIG_Battlemasters_value
HealthstoneHP			= PQI_ArneWerklandHolyPvPSIG_Healthstone_value
HealthstoneHPE			= PQI_ArneWerklandHolyPvPSIG_Healthstone_enable
VoidShiftHP				= PQI_ArneWerklandHolyPvPSIG_VoidShift_value
ShadowfiendMana			= PQI_ArneWerklandHolyPvPSIG_ShadowfiendMana_value
ShadowfiendManaE			= PQI_ArneWerklandHolyPvPSIG_ShadowfiendMana_enable
GuardHPE                = PQI_ArneWerklandHolyPvPSIG_Guardian_enable
GuardHP                 = PQI_ArneWerklandHolyPvPSIG_Guardian_value
SafeToShift				= 70
RenewHigh               = PQI_ArneWerklandHolyPvPSIG_RenewHigh_value
RenewHighE               = PQI_ArneWerklandHolyPvPSIG_RenewHigh_enable
RenewLow                = PQI_ArneWerklandHolyPvPSIG_RenewLow_value
PoM                     = PQI_ArneWerklandHolyPvPSIG_PoM_value
PoME                     = PQI_ArneWerklandHolyPvPSIG_PoM_enable
PwS                     = PQI_ArneWerklandHolyPvPSIG_PwS_value
PwSE                     = PQI_ArneWerklandHolyPvPSIG_PwS_enable
DivineStar               = PQI_ArneWerklandHolyPvPSIG_DivineStar_value
DivineStarE              = PQI_ArneWerklandHolyPvPSIG_DivineStar_enable
FlashHeal               = PQI_ArneWerklandHolyPvPSIG_FlashHeal_value
FlashHealE               = PQI_ArneWerklandHolyPvPSIG_FlashHeal_enable
CoHHigh                 = PQI_ArneWerklandHolyPvPSIG_CoHHigh_value
CoHHighE                 = PQI_ArneWerklandHolyPvPSIG_CoHHigh_enable      
CoHLow                  = PQI_ArneWerklandHolyPvPSIG_CoHLow_value
PowerInfusion           = PQI_ArneWerklandHolyPvPSIG_PowerInfusion_value
PowerInfusionE           = PQI_ArneWerklandHolyPvPSIG_PowerInfusion_enable
DefenciveDispellsV		= PQI_ArneWerklandHolyPvPSIG_UseDefenciveDispels_value
AntiStealthE           = PQI_ArneWerklandHolyPvPSIG_AntiStealth_enable
AutoFlagE				= PQI_ArneWerklandHolyPvPSIG_AutoFlag_enable
GroupInfo()</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>JukeBox</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not SIN_InterruptFrame_created then
	SIN_InterruptFrame_created = true	
	local interruptID = {
	[102060] = true,	--Disrupting Shout
	[106839] = true,	--Skull Bash
	[80964] = true,		--Skull Bash
	[115781] = true,	--Optical Blast
	[116705] = true,	--Spear Hand Strike
	[1766] = true, 		--Kick
	[19647] = true, 	--Spell Lock
	[2139] = true, 		--Counterspell
	[47476] = true,		--Strangulate
	[47528] = true, 	--Mind Freeze
	[57994] = true, 	--Wind Shear
	[6552] = true, 		--Pummel
	[96231] = true, 	--Rebuke
	[31935] = true,		--Avenger&amp;apos;s Shield
	[34490] = true, 	--Silencing Shot
	[147362] = true 	--Counter shot coming in 5.4
	}
	local SIN_PlayerGUID = UnitGUID(&amp;quot;player&amp;quot;)
	local SIN_InterruptFrame = CreateFrame(&amp;quot;FRAME&amp;quot;, nil, UIParent)
	SIN_InterruptFrame:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
	SIN_InterruptFrame:SetScript(&amp;quot;OnEvent&amp;quot;, 
		function(self, event, _, type, _, sourceGUID, sourceName, _, _, destGUID, destName, _, _, spellID)
			if type == &amp;quot;SPELL_CAST_SUCCESS&amp;quot; and destGUID == SIN_PlayerGUID and interruptID[spellID] then
				local isProtected =  select(9, UnitCastingInfo&amp;apos;player&amp;apos;) or select(8, UnitChannelInfo&amp;apos;player&amp;apos;)
					if not isProtected and not UnitBuffID(&amp;apos;player&amp;apos;, 96267) then --96267 = priest&amp;apos;s cast immunity
						SpellStopCasting()
						--RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;Interrupt attempt by &amp;quot;..sourceName..&amp;quot;&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
						PQR_DelayRotation(1)
					end
			end		
		end)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>SWD Casts</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AutoFearWard then
local InterruptSpells2 = {	 
					5782,		-- Fear
					118699,		-- Fear
						}



if GCDCheck(6346) then
	for y=1, #custTars do 
		if UnitExists(custTars[y]) 
		and UnitCanAttack(&amp;quot;player&amp;quot;,custTars[y]) then
			local spellName, _, _, _, startCast, endCast, _, _, canInterrupt = UnitCastingInfo(custTars[y])
			for i=1, #InterruptSpells2 do
				if GetSpellInfo(InterruptSpells2[i]) == spellName then
					if ((endCast/1000) - GetTime()) &amp;lt; 0.4  then
						_castSpell(6346, &amp;quot;player&amp;quot;)
					end
				end
			end
		end
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PlayerHP = 100 * UnitHealth(&amp;quot;Player&amp;quot;) / UnitHealthMax(&amp;quot;Player&amp;quot;)
local HealstoneCD = select(2,GetItemCooldown(5512))
if HealthstoneHPE then
if PlayerHP &amp;lt; HealthstoneHP then
	if HealstoneCD == 0 and GetItemCount(5512) &amp;gt; 0  then
    	UseItemByName(select(1,GetItemInfo(5512)), &amp;quot;player&amp;quot;)
		return true
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dispell Important CC</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Delay = DefenciveDispellsV

--if CleanseTime == nil then 
   -- CleanseTime = 0 
--end 


if CleanseTime ~= nil then
if GetTime() &amp;gt; CleanseTime + DefenciveDispellsV
then 
CleanseTime = nil
end
end

if not DefenciveDispells then return false end

for i=1,#members do 
    if dispellableCC(members[i].Unit)
    and PQR_SpellAvailable(527)
    and cdRemains(527) == 0
    and IsSpellInRange(GetSpellInfo(527), members[i].Unit) == 1
    --or UnitBuffID(members[i].Unit, 21562) 
    and members[i].IsPlayer
    and GCDCheck(527)
    and not LineOfSight(members[i].Unit)
    and not UnitDebuffID(members[i].Unit, 30108) 
    and not UnitDebuffID(members[i].Unit, 34914)
    and not UnitDebuffID(members[i].Unit, 131736) then 
  		if CleanseTime == nil then
  		   CleanseTime = GetTime() + Delay 
  		   print(GetTime() + Delay)
  		elseif GetTime() &amp;gt;= CleanseTime then
  		_castSpell(527,members[i].Unit)
  		end
  	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mass Dispell</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if MDKey then
	if IsSpellKnown(32375) 
	and not PQR_IsMoving(.5) then
		CastSpellByName(GetSpellInfo(32375))
		if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Void Shift</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local myHp44 = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
local Guard = cdRemains(47788)

if AutoVoidShift 
and cdRemains(108968) == 0
then
	for i=1, #members do
		--Shift other people
		if UnitExists(members[i].Unit)
		and members[i].HP &amp;lt; VoidShiftHP
		and members[i].IsPlayer
		and GCDCheck(108968)
		and not PQR_SpellAvailable(47788)
		and GuuARDS123 == 1
		and GetTime() - GuardTime &amp;gt; 5
		--and Guard &amp;lt; 170 
		and CanHeal(members[i].Unit)
		and UnitName(members[i].Unit) ~= UnitName(&amp;quot;player&amp;quot;)
		and not LineOfSight(members[i].Unit)
		and not UnitBuffID(members[i].Unit, 45438) --Block
		and not UnitBuffID(members[i].Unit, 642) --Bubble
		and not UnitBuffID(members[i].Unit, 19263) --Deterrence
		and not UnitDebuffID(members[i].Unit, 33786) --Clone 
		and not UnitDebuffID(members[i].Unit, 47788) --guardian 
		and myHp44 &amp;gt; SafeToShift then
			SpellStopCasting()
			_castSpell(108968, members[i].Unit)
		end
		
		--Shift self.
		if myHp44 &amp;lt; VoidShiftHP
		and UnitName(members[i].Unit) ~= UnitName(&amp;quot;player&amp;quot;)
		and GuuARDS123 == 1
		and GetTime() - GuardTime &amp;gt; 5
		--and Guard &amp;lt; 170 
		and GCDCheck(108968)
		and members[i].IsPlayer
		and members[i].HP &amp;gt; SafeToShift
		and not LineOfSight(members[i].Unit) 
		and not UnitDebuffID(&amp;quot;player&amp;quot;, 47788) --guardian 
		then
			SpellStopCasting()
			_castSpell(108968, members[i].Unit)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Feind/Mind Bender</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PlayerMana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)

-- mind bender
if PQR_SpellAvailable(123040) 
and UnitExists(&amp;quot;Target&amp;quot;)
and DPSKey then
	_castSpell(123040)
end


--ShadowFeind
if PQR_SpellAvailable(34433) 
and UnitExists(&amp;quot;Target&amp;quot;)
and DPSKey then
	_castSpell(34433)
end
if ShadowfiendManaE then
if PlayerMana &amp;lt; ShadowfiendMana then
	for i=1, #cTar do
		if UnitExists(cTar[i]) then
			if PQR_SpellAvailable(34433) then
				_castSpell(34433, cTar[i])
			elseif PQR_SpellAvailable(123040) then
				_castSpell(123040, cTar[i])
			end
		end
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Anti Stealth</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--RedRussian&amp;apos;s &amp;quot;Stealthers&amp;apos; Bane&amp;quot;
if AntiStealthE then
local rescan_period=2 --how often stealthed list is repopulated

local function IsStealthed(unit) --check if unit is stealthed
stealth,prowl,shadowmeld=1784,5215,58984 --list of detectable stealth buffs may be incomplete!
	if ( UnitBuffID(unit,stealth) or UnitBuffID(unit,prowl) or UnitBuffID(unit,shadowmeld) ) then return true
	else return false
	end
end

local function Breaker() --instant stealth breaker, class dependent
_, playerClass = UnitClass(&amp;quot;player&amp;quot;)
	if playerClass == &amp;quot;WARRIOR&amp;quot; then
		return 57755 --Heroic Throw
	elseif playerClass == &amp;quot;PALADIN&amp;quot; then
		if PQR_SpellAvailable(879) then
			return 879 --Exorcism
		else	
			return 20271 --Judgment
		end	
	elseif playerClass == &amp;quot;HUNTER&amp;quot; then
		return 3044 --Arcane shot
	elseif playerClass == &amp;quot;ROGUE&amp;quot; then
		if IsStealthed(&amp;apos;player&amp;apos;) then
			return 6770 --Sap
		else
			return 121733 --Throw
		end
	elseif playerClass == &amp;quot;PRIEST&amp;quot; then
		return 589 --Shadow Word: Pain
	elseif playerClass == &amp;quot;DEATHKNIGHT&amp;quot; then
		return 45524 --Chains of Ice
	elseif playerClass == &amp;quot;SHAMAN&amp;quot; then
		return 8056 --Frost Shock
	elseif playerClass == &amp;quot;MAGE&amp;quot; then
		return 30455 --Ice Lance
	elseif playerClass == &amp;quot;WARLOCK&amp;quot; then
		return 77799 --Fel Flame
	elseif playerClass == &amp;quot;MONK&amp;quot; then
		return 115546 --Taunt
	elseif playerClass == &amp;quot;DRUID&amp;quot; then
		if IsStealthed(&amp;apos;player&amp;apos;) then
			return 0 --do nothing
		else
			return 8921 --moonfire
		end
	else
		return 0 
	end
end

local breakername=GetSpellInfo(Breaker()) --localized breaker name for use with IsSpellInRange


------------------------BG/RBG--------------------------------
--get stealthed list
if not last_scan or GetTime()-last_scan&amp;gt;=rescan_period then --repopulate list every T seconds
last_scan=GetTime()
stealthed={} --depopulate stealthed list
currtarget=UnitName(&amp;apos;target&amp;apos;) --get current target&amp;apos;s name

	for j=1,GetNumBattlefieldScores() do --get player faction to make profile work in rbgs and arenas
	name1=GetBattlefieldScore(j) 
		if name1==UnitName(&amp;apos;player&amp;apos;) then 
		pfaction=select(6,GetBattlefieldScore(j))
		break
		end 
	end

	for i=1, GetNumBattlefieldScores() do 
	name, killingBlows, honorableKills, deaths, honorGained, faction, rank, race, class = GetBattlefieldScore(i)
	matched_name=name:match(&amp;apos;[^-]+&amp;apos;) --filter out &amp;quot;-Realm&amp;quot; part
		if (class==&amp;quot;DRUID&amp;quot; or class==&amp;quot;ROGUE&amp;quot;) and faction~=pfaction and not UnitChannelInfo(&amp;apos;player&amp;apos;) then --target change is fatal to channgeling
		TargetUnit(name)
			if UnitName(&amp;apos;target&amp;apos;)~=matched_name or ( UnitName(&amp;apos;target&amp;apos;)==matched_name and IsStealthed(&amp;apos;target&amp;apos;) ) then --targeting attemp was unsuccessful or stealthed target was caught during list repopulation
			stealthed[name]=1
			end
		end
		if currtarget and UnitName(&amp;apos;target&amp;apos;)~=currtarget then --return to previous target after targeting stealther
		TargetLastTarget() 
		elseif not currtarget then 
		ClearTarget() 
		end	
	end
end

--look for stealthed
if PQR_SpellAvailable(Breaker()) then --CD/GCD check to prevent excessive spam. NOTE: spell with ID 0 is never avalaible
oldtarget=UnitName(&amp;apos;target&amp;apos;) --get current target&amp;apos;s name
stealther_spotted=false
	for k,v in pairs(stealthed) do
		if not ( UnitCastingInfo(&amp;apos;player&amp;apos;) or UnitChannelInfo(&amp;apos;player&amp;apos;) ) and v==1 then --not on GCD &amp; not casting &amp; not channeling
		TargetUnit(k)
			if UnitName(&amp;apos;target&amp;apos;)==k:match(&amp;apos;[^-]+&amp;apos;) then --k is matched to be the same format with UnitName(&amp;apos;target&amp;apos;)
				if IsStealthed(&amp;apos;target&amp;apos;) and IsSpellInRange(breakername,&amp;apos;target&amp;apos;)==1 then --range check to prevent spam caused by stealth glitch
				CastSpellByID(Breaker(),&amp;apos;target&amp;apos;)
				stealther_spotted=true --flag fixing your target on spotted stealther
				else
				stealthed[k]=0	--exclude non-stealthed or too distant stealther from the list
				end
			end
		end
		if not stealther_spotted then	--return to previous target if no stealther was spotted, do nothing otherwise
			if oldtarget and UnitName(&amp;apos;target&amp;apos;)~=oldtarget then 
			TargetLastTarget() 
			elseif not oldtarget then 
			ClearTarget() 
			end
		end	
	end	
end
------------------------ARENA--------------------------------
for a=1,5 do
local arenatarget=&amp;apos;arena&amp;apos;..a
	if IsStealthed(arenatarget) then
	CastSpellByID(Breaker(),arenatarget)
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Flag Pickup</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AutoFlagE then
if GetBattlefieldStatus(1)==&amp;apos;active&amp;apos; or GetBattlefieldStatus(2)==&amp;apos;active&amp;apos; then
InteractUnit(&amp;apos;Horde flag&amp;apos;)
InteractUnit(&amp;apos;Alliance flag&amp;apos;)
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AutoFearWard</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AutoFearWard then

if not Arenatargetss
then
	Arenatargetss = {&amp;quot;Arena1&amp;quot;,&amp;quot;Arena2&amp;quot;,&amp;quot;Arena3&amp;quot;}
end



for i=1, #Arenatargetss do
if UnitExists(Arenatargetss[i])
and (select(2, UnitClass(Arenatargetss[i])) == &amp;quot;PRIEST&amp;quot; or select(2, UnitClass(Arenatargetss[i])) == &amp;quot;WARRIOR&amp;quot; )
and UnitCanAttack(&amp;quot;player&amp;quot;,Arenatargetss[i])
and PQR_UnitDistance(&amp;quot;player&amp;quot;,Arenatargetss[i]) &amp;lt; 11
and GCDCheck(6346) 
then 
_castSpell(6346, &amp;quot;player&amp;quot;)
end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Battlemasters</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local myhp12 = UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) * 100

if UseBattleMaster
and myhp12 &amp;lt; BattlemasterHP then 
	if GetInventoryItemCooldown(&amp;quot;player&amp;quot;,13) == 0 then 
		UseInventoryItem(13)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Guard</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GuardHPE 
and cdRemains(47788) == 0
then
for i=1, #members do
		if UnitExists(members[i].Unit)
		and members[i].HP &amp;lt; GuardHP
		and members[i].IsPlayer
		and CanHeal(members[i].Unit)
		and not LineOfSight(members[i].Unit)
		and not UnitBuffID(members[i].Unit, 45438) --Block
		and not UnitBuffID(members[i].Unit, 642) --Bubble
		and not UnitDebuffID(members[i].Unit, 33786) --Clone
	        then
			SpellStopCasting()
			_castSpell(47788, members[i].Unit)
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Feather</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if FeatherKey
and IsSpellKnown(121536) 
and GCDCheck(121536)
and not SpellIsTargeting() 
--and not SpellIsTargeting() 
then
    SpellStopCasting()  
	CastSpellByName(tostring(GetSpellInfo(121536)))
end

if SpellIsTargeting()
and IsSpellKnown(121536)  
and FeatherKey then 
		CameraOrSelectOrMoveStart()
		CameraOrSelectOrMoveStop()
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Chastise</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not DPSKEY
and Nova_Chastise == 0
and Nova_MaxDps == 0
and Nova_YOLORING == 0
and GCDCheck(81208)
and not UnitBuffID(&amp;quot;player&amp;quot;, 81208)
then 
_castSpell(81208) 
end

if Nova_Chastise == 1
and GetTime() - Chasticetime &amp;gt;= 30
and UnitExists(&amp;quot;focus&amp;quot;)
and not LineOfSight(&amp;quot;focus&amp;quot;)
and not HaveDebuff(&amp;quot;focus&amp;quot;,cccheck(),0)
and PQR_UnitFacing(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;)
then
CancelUnitBuff(&amp;quot;player&amp;quot;, GetSpellInfo(81208))
_castSpell(88625, &amp;quot;focus&amp;quot;)

end

if Nova_Chastise == 1
and GetTime() - Chasticetime &amp;gt;= 30
and not UnitExists(&amp;quot;focus&amp;quot;)
and PQR_UnitFacing(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
and not LineOfSight(&amp;quot;target&amp;quot;)
and not HaveDebuff(&amp;quot;target&amp;quot;,cccheck(),0)
then
CancelUnitBuff(&amp;quot;player&amp;quot;, GetSpellInfo(81208))
_castSpell(88625, &amp;quot;target&amp;quot;)

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dps</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if DPSKEY or Nova_MaxDps == 1 
then

cTarHP =  100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
	
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) ~= nil
and not LineOfSight(&amp;quot;target&amp;quot;)
and cTarHP &amp;lt;= 20 then
_castSpell(32379, &amp;quot;target&amp;quot;)
end

if not UnitBuffID(&amp;quot;player&amp;quot;, 81209)
and GCDCheck(81209) 
then 
_castSpell(81209) 
end

if GCDCheck(589) 
and UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) ~= nil
and not LineOfSight(&amp;quot;target&amp;quot;)  
and not UnitDebuffID(&amp;quot;target&amp;quot;, 589, &amp;quot;player&amp;quot;) then
	_castSpell(589, &amp;quot;target&amp;quot;) 
end

if GCDCheck(14914)
and UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) ~= nil
and not LineOfSight(&amp;quot;target&amp;quot;)
 then
	_castSpell(14914, &amp;quot;target&amp;quot;) 
end

if GCDCheck(585) 
and UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) ~= nil
and not LineOfSight(&amp;quot;target&amp;quot;) then
	_castSpell(585, &amp;quot;target&amp;quot;) 
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal:Serenity</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if FlashHealE then
--for i=1, #members do
	if UnitExists(members[1].Unit)
	and members[1].HP &amp;lt; 90
	--and GCDCheck(88684)
	and CanHeal(members[1].Unit)
	and UnitBuffID(&amp;quot;player&amp;quot;, 81208)
	and not PQR_SpellAvailable(33076)
	and not LineOfSight(members[1].Unit) then
	CastSpellByName(GetSpellInfo(88684), members[1].Unit)
	end
end
--end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal:PoM</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PoME then 
--for i=1, #members do
	if UnitExists(members[1].Unit)
	and members[1].HP &amp;lt; PoM
	and GCDCheck(33076)
	and CanHeal(members[1].Unit)
	--and PQR_SpellAvailable(33076)
	and not LineOfSight(members[1].Unit) then
		 _castSpell(33076, members[1].Unit)
	end
end
--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal:PwS</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PwSE then
--for i=1, #members do
	if UnitExists(members[1].Unit)
	and members[1].HP &amp;lt; PwS
	and GCDCheck(17)
	and CanHeal(members[1].Unit)
	--and PQR_SpellAvailable(17)
	and not HaveDebuff(members[1].Unit,6788)
	and not UnitBuffID(members[1].Unit,17)
	and not LineOfSight(members[1].Unit) then
	_castSpell(17, members[1].Unit) 
	end
end
--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal:FH</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--local MS, _, _, Stack = UnitBuffID( &amp;quot;player&amp;quot;, 63735 )

local PHSIG = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

if FlashHealE then
	--for i=1, #members do 
		if UnitExists(members[1].Unit)
		and members[1].HP &amp;lt; FlashHeal
		and GCDCheck(2061) 
		and CanHeal(members[1].Unit)
		and not LineOfSight(members[1].Unit)
		and not PQR_IsMoving(.5)
		then
		targetswitch(members[1].Unit)
	  	_castSpell(2061, members[1].Unit)
		end
	end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal:GH</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>stacker = select(4, UnitBuffID(&amp;quot;player&amp;quot;, 63735))




if FlashHealE 
and stacker ~= nil then
--for i=1, #members do 
	if UnitExists(members[1].Unit)
	and members[1].HP &amp;lt; FlashHeal 
	and stacker == 2
	and CanHeal(members[1].Unit)
	and GCDCheck(2060)
	and not LineOfSight(members[1].Unit)
	and not PQR_IsMoving(.5) then
	--print(members[1].Unit)
	--print(&amp;quot;Sig_Heal_Engine_Debug_2&amp;quot;)
	     targetswitch(members[1].Unit)
  		_castSpell(2060, members[1].Unit)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal: Renew</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if RenewHighE then
for i=1, #members do
	if members[i].HP &amp;lt; RenewHigh
	and members[i].HP &amp;gt; RenewLow 
	and GCDCheck(139)
	and CanHeal(members[i].Unit)
	and not UnitBuffID(members[i].Unit, 139)
	and not LineOfSight(members[i].Unit) then
		 _castSpell(139, members[i].Unit)
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal:Lightwell</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Lightwell == 1 
and GCDCheck(126135)
and UnitCastingInfo(&amp;quot;player&amp;quot;) == nil
and not PQR_IsMoving(.5)
and not SpellIsTargeting() then
    _castSpell(126135) 
	--CastSpellByName(tostring(GetSpellInfo(121536)))
end

if SpellIsTargeting() 
and Nova_Lightwell == 1 then 
		CameraOrSelectOrMoveStart()
		CameraOrSelectOrMoveStop()
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>DPSKEY = IsMouseButtonDown(3)

--Pause
if IsMounted()
or (Nova_Lightwell == 1 and not PQR_IsMoving(.5))
--or Nova_Chastise == 1 
or IsLeftAltKeyDown()
or Nova_Feeaar == 1
or (Nova_Tendrils == 1 and Tier1 ~= 605)
or (Nova_Divine == 1 and not PQR_IsMoving(.5))
or (Nova_Ofhope == 1 and not PQR_IsMoving(.5))
or Nova_Drinks == 1
or FeatherKey 
or DPSKEY
--or UnitCastingInfo(&amp;quot;player&amp;quot;) ~= nil
or UnitBuffID(&amp;quot;player&amp;quot;, 119032) --Spectral Guise
or UnitBuffID(&amp;quot;player&amp;quot;, 118358) --Drinking
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Key:Fear</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Feeaar == 1 then
	SpellStopCasting()
	_castSpell(8122)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Key: VT</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Tendrils == 1 then	
if IsSpellKnown(108920) then
		CastSpellByName(GetSpellInfo(108920))
	end	
end

if Nova_Tendrils == 1 then
if IsSpellKnown(108921)
and GCDCheck(108921)
--and not PQR_IsMoving(.5)
and not SpellIsTargeting() then
    _castSpell(108921) 
	--CastSpellByName(tostring(GetSpellInfo(121536)))
end
end

if SpellIsTargeting() 
and Nova_Tendrils == 1 then 
		CameraOrSelectOrMoveStart()
		CameraOrSelectOrMoveStop()
end

if Nova_Tendrils == 1 then
if IsSpellKnown(605)
and GCDCheck(605)
and cdRemains(605) == 0
and UnitExists(&amp;quot;focus&amp;quot;)
--and PQR_UnitFacing(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;)
and not LineOfSight(&amp;quot;focus&amp;quot;)
--and not HaveDebuff(&amp;quot;focus&amp;quot;,cccheck(),0)
then
_castSpell(605, &amp;quot;focus&amp;quot;)
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Key:Divine Hymn</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Divine == 1
and not PQR_IsMoving(.5) then
_castSpell(64843)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Key:Hymn of Hope</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Ofhope == 1
and not PQR_IsMoving(.5) then
_castSpell(64901)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal Power infusion</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PlayerMana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)

if PowerInfusionE  then
--for i=1, #members do 
	if UnitExists(members[1].Unit)
	and members[1].HP &amp;lt; 35	
	or PlayerMana &amp;lt; 35
	--and PQR_SpellAvailable(10060)
	and GCDCheck(10060)
	and CanHeal(members[1].Unit)
	and IsSpellInRange(GetSpellInfo(2061),members[1].Unit) == 1  
	then
	  _castSpell(10060)
	end
end
--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Buffs</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitBuffID( &amp;quot;player&amp;quot;, 588 ) 
then
_castSpell(588)
end

if not HaveBuff(&amp;quot;player&amp;quot;,21562) 
and not UnitAffectingCombat(&amp;quot;player&amp;quot;)
then
_castSpell(21562, &amp;quot;player&amp;quot;)
end





--if not HaveBuff(&amp;quot;player&amp;quot;,588),0)
--if not UnitBuffID( &amp;quot;player&amp;quot;, 588 ) 
--and GCDCheck(588)
--and GetTime() - JointimeF &amp;gt; 5 then
--_castSpell(588)
--end
--if not HaveBuff(&amp;quot;player&amp;quot;,81208),0)
--if not UnitBuffID( &amp;quot;player&amp;quot;, 81208 ) 
--and GCDCheck(81208)
--and GetTime() - JointimeF &amp;gt; 5 then
--_castSpell(81208)
--end

--end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal: CoH</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CoHHighE then
--for i=1, #members do
	if UnitExists(members[1].Unit)
	and members[1].HP &amp;lt; CoHHigh
	--and members[1].HP &amp;gt; CoHLow
	--and PQR_SpellAvailable(34861)
	and GCDCheck(34861)
	--and PQR_IsMoving(1) 
	and CanHeal(members[1].Unit)
	and not LineOfSight(members[1].Unit) then
		 _castSpell(34861, members[1].Unit)
	end
end
--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal:Divine Star</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if FlashHealE then 
	if UnitExists(members[1].Unit)
	and members[1].HP &amp;lt; FlashHeal
	and GCDCheck(121135) 
	and CanHeal(members[1].Unit)
	and not LineOfSight(members[1].Unit)

	then
	_castSpell(121135, members[1].Unit)
	end
	end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Defencive:DP</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsSpellKnown(19236) 
then
Tier4 = 19236
else
Tier4 = 112833
end


local myHp34 = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)	
if myHp34 &amp;lt; 30
and IsSpellKnown(Tier4)
and GCDCheck(Tier4)
--and PQR_SpellAvailable(19236)
then
_castSpell(Tier4)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Drink</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Drinks == 1
and not UnitAffectingCombat(&amp;quot;player&amp;quot;)
and not PQR_IsMoving(.5) 
then
UseItemByName(&amp;quot;Cobo Cola&amp;quot;, &amp;quot;player&amp;quot;)
SetCVar(&amp;quot;Nova_Drinks&amp;quot;, 0)
xrn:message(&amp;quot;\124cFF0000FFNoMNOmNoM Ditta Va Godt!!.&amp;quot;)
end

if Nova_Drinks == 1
or UnitBuffID(&amp;quot;player&amp;quot;, 118358)
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal instant Flash</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if FlashHealE then
--for i=1, #members do 
	if UnitExists(members[1].Unit)
	and members[1].HP &amp;lt; 90
	and GCDCheck(2061)
	and UnitBuffID(&amp;quot;player&amp;quot;, 114255)
	and CanHeal(members[1].Unit)
	and not LineOfSight(members[1].Unit)
	then
	  	_castSpell(2061, members[1].Unit)
	end
end
--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal:Heal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if FlashHealE then
--for i=1, #members do
		if UnitExists(members[1].Unit) 
		and members[1].HP &amp;lt; 56
		and GCDCheck(2050)
		and CanHeal(members[1].Unit)
		and not LineOfSight(members[1].Unit)
		and not PQR_IsMoving(.5)
		then
		--print(members[1].Unit)
		--print(&amp;quot;Sig_Heal_Engine_Debug_1&amp;quot;)
		targetswitch(members[1].Unit)
	  		_castSpell(2050, members[1].Unit)
		end
	end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Auto Focus</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>for j=1 , #cTar do
if not UnitExists(&amp;quot;focus&amp;quot;) 
and UnitExists(cTar[j])
and not UnitIsDeadOrGhost(cTar[j])
and not UnitIsUnit(cTar[j],&amp;quot;target&amp;quot;) 
and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[j]) 
and UnitIsPlayer(cTar[j])
and IsHealer(cTar[j])
then
FocusUnit(cTar[j])
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DispellBrain</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>function xelperFrame_OnEvent(self,event,...)

    --Combat log events
    if event == &amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot; then    
        local SubEvent = select(2, ...)
        local SourceName = select(5, ...)
        local DestName = select(9, ...)
        local SpellID = select(12, ...)
        local SpellName = select(13, ...)
        local ExtraSpellID = select(15, ...)
        local ExtraSpellName = select(16, ...)
        
        if SubEvent == &amp;quot;SPELL_CAST_SUCCESS&amp;quot; then
            if SourceName == UnitName(&amp;quot;player&amp;quot;) then
            
                --Cleanse528
                if SpellID == 527 then
                    CleanseTime = nil
                end
            	if SpellID == 528 then
                    CleanseTime2 = nil
                end
            	if SpellID == 1706 then
                    CleanseTime3 = 0
                end
                	if SpellID == 47788 then
                    GuuARDS123 = 1
                    GuardTime = GetTime()
                end
                	if SpellID == 88685 then
                    yoloringTime = GetTime()
                end
                if SpellID == 88625 then
                SetCVar(&amp;quot;Nova_Chastise&amp;quot;, 0) 
                    RunMacroText(&amp;quot;/stopwatch 30 play&amp;quot;)
                    RunMacroText(&amp;quot;/sw play&amp;quot;)
                    Chasticetime = GetTime()  
                    
                end
            end 
        end
    end
end

if PQR_LoadEventFrame == nil then
    PQR_LoadEventFrame = true

    xelperFrame = CreateFrame(&amp;quot;Frame&amp;quot;)
    xelperFrame:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
    xelperFrame:SetScript(&amp;quot;OnEvent&amp;quot;, xelperFrame_OnEvent)
    xelperFrame:Show()
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dispell Of</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local purgeThis1 = {

1022,   -- Hand of Protection
6346,    -- Fear Ward
--61573,

}
local PlayerMana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)
Delay2 = DefenciveDispellsV

--if CleanseTime2 == nil then 
   -- CleanseTime2 = 0 
--end 

if CleanseTime2 ~= nil then
if GetTime() &amp;gt; CleanseTime2 + DefenciveDispellsV
then 
print  (&amp;quot;Delay var reset2&amp;quot;)
CleanseTime2 = nil
end
end


if PQR_SpellAvailable(528) 
and PlayerMana &amp;gt; 20
and cdRemains(528) == 0
and members[1].HP &amp;gt; 50 then
	for i = 1, #cTar do
		if UnitExists(cTar[i]) then
			for j = 1, #purgeThis1 do
				if UnitBuffID(cTar[i], purgeThis1[j]) ~= nil
				and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) ~= nil
				and GCDCheck(528)
				and IsSpellInRange(GetSpellInfo(528), cTar[i]) == 1
				and not LineOfSight(cTar[i]) then
					if CleanseTime2 == nil then
  		   			CleanseTime2 = GetTime() + Delay2 
  					elseif GetTime() &amp;gt;= CleanseTime2 
  					and IsSpellInRange(GetSpellInfo(528), cTar[i]) == 1 then
  					xrn:message(&amp;quot;\124cFFF00000\&amp;lt;Attempting to Dispell &amp;quot;..GetSpellInfo(purgeThis1[j])..&amp;quot; &amp;quot;)
  					_castSpell(528, cTar[i])
				end
			end
		end
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Key:YoloRing</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if yoloringTime == nil then yoloringTime = 0 end

if Nova_YOLORING == 1
and GetTime() - yoloringTime &amp;gt; 40
and not UnitBuffID(&amp;quot;player&amp;quot;, 81206)
then
_castSpell(81206)
end



if Nova_YOLORING == 1
and GetTime() - yoloringTime &amp;gt; 40
and UnitBuffID(&amp;quot;player&amp;quot;, 81206)
and not PQR_IsMoving(.5)
and not SpellIsTargeting() then
CastSpellByName(tostring(GetSpellInfo(88685)))
--_castSpell(88685) 
end


if SpellIsTargeting() 
and Nova_YOLORING == 1 then 
		CameraOrSelectOrMoveStart()
		CameraOrSelectOrMoveStop()
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ForceHealSelf</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsLeftAltKeyDown() then

if getHp(&amp;quot;player&amp;quot;) &amp;lt; GuardHP
and GCDCheck(47788)
then 
_castSpell(47788, &amp;quot;player&amp;quot;)
end

if getHp(&amp;quot;player&amp;quot;) &amp;lt; RenewHigh
and GCDCheck(139)
and not UnitBuffID(&amp;quot;player&amp;quot;, 139)
then 
 _castSpell(139, &amp;quot;player&amp;quot;)
end

if getHp(&amp;quot;player&amp;quot;) &amp;lt; PoM
and GCDCheck(33076)
then 
 _castSpell(33076, &amp;quot;player&amp;quot;)
end

if getHp(&amp;quot;player&amp;quot;) &amp;lt; FlashHeal
and GCDCheck(2061)
then 
 _castSpell(2061, &amp;quot;player&amp;quot;)
end

if getHp(&amp;quot;player&amp;quot;) &amp;lt; PwS
and GCDCheck(17)
and not HaveDebuff(&amp;quot;player&amp;quot;,6788)
and not UnitBuffID(&amp;quot;player&amp;quot;,17)
then 
 _castSpell(17, &amp;quot;player&amp;quot;)
end

if getHp(&amp;quot;player&amp;quot;) &amp;lt; DivineStar
and GCDCheck(110744)
then 
 _castSpell(110744)
end




end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DispellRoot</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if DispellRootE then




local Delay = DefenciveDispellsV


if CleanseTime ~= nil then
if GetTime() &amp;gt; CleanseTime + DefenciveDispellsV
then 
CleanseTime = nil
end
end


for i=1,#members do 
    if HaveDebuff(members[i].Unit,dRoot(),2)
    and IsMelee(members[i].Unit)
    and PQR_SpellAvailable(527)
    and cdRemains(527) == 0
    and IsSpellInRange(GetSpellInfo(527), members[i].Unit) == 1
    and members[i].IsPlayer
    and GCDCheck(527)
    and not LineOfSight(members[i].Unit)
    and not UnitDebuffID(members[i].Unit, 30108) 
    and not UnitDebuffID(members[i].Unit, 34914)
    and not UnitDebuffID(members[i].Unit, 131736) then 
  		if CleanseTime == nil then
  		   CleanseTime = GetTime() + Delay 
  		   print(GetTime() + Delay)
  		elseif GetTime() &amp;gt;= CleanseTime then
  		_castSpell(527,members[i].Unit)
  		print(&amp;quot;DispRoot&amp;quot;)
  		end
  	end
end





end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PRIEST>