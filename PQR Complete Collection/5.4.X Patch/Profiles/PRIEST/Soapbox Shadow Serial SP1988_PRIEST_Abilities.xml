<?xml version="1.0" encoding="utf-8" ?><PRIEST><Ability><Name>-Shadow- Frag Belt</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxOffensiveSettings_FragBelt_enable then return false end

-- If we don&amp;apos;t know Engineering. Don&amp;apos;t activate.
for i=1,9 do
	if select(7,GetProfessionInfo(i)) == 202 then hasEngi = true end
end

-- Don&amp;apos;t have Engineering.
if not hasEngi then return false end

local Belt = GetInventoryItemID(&amp;quot;player&amp;quot;, 6)

-- Not equipped?
if not IsEquippedItem(Belt) then return false end

-- Don&amp;apos;t use it in Caster form
if GetShapeshiftForm(&amp;quot;player&amp;quot;) == 0 then return false end

-- Don&amp;apos;t use it if it&amp;apos;s on cooldown as well!
if GetItemCooldown(Belt) &amp;gt; 0 then return false end

if GetCurrentKeyBoardFocus() == nil and UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;mouseover&amp;quot;) then
	UseItemByName(Belt)
	if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Potions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Don&amp;apos;t use Potion during Heroism if user tagged off automatic use
if not PQI_SoapboxOffensiveSettings_AutoPotion_enable then return false end

-- Disable if we have no potions left
if GetItemCount(76093) &amp;lt; 1 then return false end

-- Disable if Potion is on cooldown
if GetItemCooldown(76093) ~= 0 then return false end

-- Disable if we&amp;apos;re not targeting a boss
if not SpecialUnit() then return false end

-- Disable if we don&amp;apos;t have Heroism or T2D is greater than 20 seconds
if not Bloodlust() or T2D(&amp;quot;target&amp;quot;) &amp;gt; 20 then return false end

-- At this point, we should just use the potion if all of the above is true
UseItemByName(76093)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Initialize---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted then


	PQR_RotationStarted = false

		 ---Chat Overlay---
	local function onUpdate(self,elapsed) 
	  if self.time &amp;lt; GetTime() - 2.8 then
	    if self:GetAlpha() == 0 then self:Hide() else self:SetAlpha(self:GetAlpha() - .05) end
	  end
	end
	xrn = CreateFrame(&amp;quot;Frame&amp;quot;,nil,ChatFrame1) 
	xrn:SetSize(ChatFrame1:GetWidth(),30)
	xrn:Hide()
	xrn:SetScript(&amp;quot;OnUpdate&amp;quot;,onUpdate)
	xrn:SetPoint(&amp;quot;TOP&amp;quot;,0,0)
	xrn.text = xrn:CreateFontString(nil,&amp;quot;OVERLAY&amp;quot;,&amp;quot;MovieSubtitleFont&amp;quot;)
	xrn.text:SetAllPoints()
	xrn.texture = xrn:CreateTexture()
	xrn.texture:SetAllPoints()
	xrn.texture:SetTexture(0,0,0,.50) 
	xrn.time = 0
	function xrn:message(message) 
	  self.text:SetText(message)
	  self:SetAlpha(1)
	  self.time = GetTime() 
	  self:Show() 
	end
	
	Nova_CustomT = { }
	
	
	Nova_NotifyFrame = nil
	function Nova_NotifyFrame_OnUpdate()
		if (Nova_NotifyFrameTime &amp;lt; GetTime() - 0.2) then
			local alpha = Nova_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then Nova_NotifyFrame:SetAlpha(alpha - .5) end
			if (aplha == 0) then Nova_NotifyFrame:Hide() end
		end
	end
	function Nova_Notify(message)
		Nova_NotifyFrame.text:SetText(message)
		Nova_NotifyFrame:SetAlpha(1)
		Nova_NotifyFrame:Show()
		Nova_NotifyFrameTime = GetTime()
	end
	Nova_NotifyFrame = CreateFrame(&amp;apos;Frame&amp;apos;)
	Nova_NotifyFrame:ClearAllPoints()
	Nova_NotifyFrame:SetHeight(300)
	Nova_NotifyFrame:SetWidth(300)
	Nova_NotifyFrame:SetScript(&amp;apos;OnUpdate&amp;apos;, Nova_NotifyFrame_OnUpdate)
	Nova_NotifyFrame:Hide()
	Nova_NotifyFrame.text = Nova_NotifyFrame:CreateFontString(nil, &amp;apos;BACKGROUND&amp;apos;, &amp;apos;PVPInfoTextFont&amp;apos;)
	Nova_NotifyFrame.text:SetAllPoints()
	Nova_NotifyFrame:SetPoint(&amp;apos;LEFT&amp;apos;, 40, - 75)
	Nova_NotifyFrameTime = 0
	
	function CastClick()
		if IsMouseButtonDown(1) 
	  	  and MainMenuBar:IsShown() then
	  		local mousefocus = GetMouseFocus()
			if mousefocus 
			  and mousefocus.feedback_action then 
		  		SpellCancelQueuedSpell() 
		  		PQR_DelayRotation(1) 
		  	end
		end 	
	end
	

  if Nova_Cooldowns == 1 then
  PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Active&amp;quot;) 
  else
  
  end
  
  if (Nova_AOE == nil or Nova_AOE == 0) and (Nova_Cleave == nil or Nova_Cleave == 0) then
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;) end
  if Nova_AOE == 1 then			
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;AoE&amp;quot;,nil,&amp;quot;0698FF&amp;quot;) end
  if Nova_Cleave == 1 then	
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Cleave&amp;quot;,nil,&amp;quot;0fffff&amp;quot;) end

if not PlayerRegenEnabledFrame_OnEvent then
function PlayerRegenEnabledFrame_OnEvent()
cTime = nil
end
end

if not PlayerRegenDisabledFrame_OnEvent then
function PlayerRegenDisabledFrame_OnEvent()
cTime = GetTime()
end
end
	
if not PlayerRegenEnabled then
local PlayerRegenEnabled = CreateFrame(&amp;quot;Frame&amp;quot;)
PlayerRegenEnabled:RegisterEvent(&amp;quot;PLAYER_REGEN_ENABLED&amp;quot;)
PlayerRegenEnabled:SetScript(&amp;quot;OnEvent&amp;quot;, PlayerRegenEnabledFrame_OnEvent)
	
PlayerRegenEnabled = true

end
	
if not PlayerRegenDisabled then
local PlayerRegenDisabled = CreateFrame(&amp;quot;Frame&amp;quot;)
PlayerRegenDisabled:RegisterEvent(&amp;quot;PLAYER_REGEN_DISABLED&amp;quot;)
PlayerRegenDisabled:SetScript(&amp;quot;OnEvent&amp;quot;, PlayerRegenDisabledFrame_OnEvent)
	
PlayerRegenDisabled = true

end

	if not SoapboxShadowFirstStart then
		local Aptheosis = CreateFrame(&amp;quot;Frame&amp;quot;)
		Aptheosis:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
		Aptheosis:SetScript(&amp;quot;OnEvent&amp;quot;, AptheosisFrame_OnEvent)
		Aptheosis:Show()
		
		Trinket = 0
		flayTicks = 0
		maxFlayTicks = 3
		insanityTicks = 0
		maxInsanityTicks = 3
		
		if not DoTs then DoTs = {} end
		
		SoapboxShadowFirstStart = true
	end
end



PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

local itemCheck = itemCheck
local Vision = Vision
if itemCheck(Vision) == 1 then UVLS = true else UVLS = false end


if not UnitAffectingCombat(&amp;quot;player&amp;quot;) and #DoTs &amp;gt; 0 then
	DoTs = {}
end


if not UnitAffectingCombat(&amp;quot;player&amp;quot;) and Nova_Death == 1 then
	SetCVar(&amp;quot;Nova_Death&amp;quot;, 0)
end

if IsMounted() then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Power Infusion</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Don&amp;apos;t auto-cast if we have it disabled
if not IsPlayerSpell(10060) then return false end
if not PQR_SpellAvailable(10060) then return false end
if not PQI_SoapboxOffensiveSettings_AutomaticPowerInfusion_enable then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end
	
if Nova_Cooldowns ~= 1 then return false end

	if PQI_SoapboxOffensiveSettings_BossCooldowns_enable then
	if not SpecialUnit() then
	return false end
	end

if TargetValidation(&amp;quot;target&amp;quot;, 8092) then
if UnitExists(&amp;quot;boss&amp;quot;..1) then
local BossID = tonumber(UnitGUID(&amp;quot;boss&amp;quot;..1):sub(6,10), 16)

if BossID == 69465	
or BossID == 69712 then
    if BossID == 69465 then -- Jin&amp;apos;Rokh
	local Fluidity = UnitDebuffID(&amp;quot;player&amp;quot;, 138002)	
		if Fluidity then
		CastSpellByName(GetSpellInfo(10060),&amp;quot;target&amp;quot;) return true
		end					
    elseif BossID == 69712 then -- Ji-Kun
  	local TargetID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
  	local Feed = UnitBuffID(&amp;quot;player&amp;quot;, 140741)
   		if TargetID == BossID then
			if Feed then
			CastSpellByName(GetSpellInfo(10060),&amp;quot;target&amp;quot;) return true
			end
		end
	end
else
CastSpellByName(GetSpellInfo(10060),&amp;quot;target&amp;quot;) return true
end -- boss fights without damage buff effects
else
CastSpellByName(GetSpellInfo(10060),&amp;quot;target&amp;quot;) return true
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Don&amp;apos;t use Racials if user tagged off automatic use
if not PQI_SoapboxOffensiveSettings_Racials_enable then return false end

-- Draenei: Gift of the Naaru
if IsPlayerSpell(59544) and PQR_SpellAvailable(59544) and Playerhealth &amp;lt; 60 then
	CastSpellByName(GetSpellInfo(59544),&amp;quot;player&amp;quot;)
	return true
end

-- Troll: Berserking
if IsPlayerSpell(26297) and Nova_Cooldowns == 1 then
	if PQR_SpellAvailable(26297) then
		if not PQI_SoapboxOffensiveSettings_BossCooldown_enable then
			if UnitExists(&amp;quot;target&amp;quot;) then
				SpellCancelQueuedSpell()
				CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
				return true
			end
		else
			if SpecialUnit() then
				SpellCancelQueuedSpell()
				CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
				return true
			end
		end
	end
end

-- Blood Elf: Arcane Torrent
if IsPlayerSpell(28730) and Nova_Cooldowns == 1 then
	if PQR_SpellAvailable(28730) and Playermana &amp;lt; 92
		and UnitExists(&amp;quot;target&amp;quot;) then
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(28730),&amp;quot;player&amp;quot;)
			return true
	end
end

-- Orc: Blood Fury
if IsPlayerSpell(33702) and Nova_Cooldowns then
	if PQR_SpellAvailable(33702) then
		if not PQI_SoapboxOffensiveSettings_BossCooldown_enable then
			if UnitExists(&amp;quot;target&amp;quot;) then
				SpellCancelQueuedSpell()
				CastSpellByName(GetSpellInfo(33702),&amp;quot;player&amp;quot;)
				return true
			end
		else
			if SpecialUnit() then
				SpellCancelQueuedSpell()
				CastSpellByName(GetSpellInfo(33702),&amp;quot;player&amp;quot;)
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Desperate Prayer</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local v=PQI_SoapboxDefensiveSettings_DesperatePrayer_value or 40

if not IsPlayerSpell(19236) then return false end
if not PQR_SpellAvailable(19236) then return false end
if not PQI_SoapboxDefensiveSettings_DesperatePrayer_enable then return false end

if Playerhealth &amp;lt; v then
	CastSpellByName(GetSpellInfo(19236),&amp;quot;player&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Shadowfiend</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>if not PQI_SoapboxOffensiveSettings_Shadowfiend_enable then return false end

if not smartCancel() then return false end
	
if TargetValidation(&amp;quot;target&amp;quot;, 34433) and Nova_Cooldowns == 1 then
	-- Cast on enemy units
	if UnitIsPlayer(&amp;quot;target&amp;quot;) and UnitIsEnemy(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) then
		CastSpellByName(GetSpellInfo(34433),&amp;quot;target&amp;quot;) return true
	end
	
	if PQI_SoapboxOffensiveSettings_BossCooldown_enable then
	---We will now use any ONUSE trinkets or gloves---
		if SpecialUnit() then CastSpellByName(GetSpellInfo(34433),&amp;quot;target&amp;quot;) return true end
	else CastSpellByName(GetSpellInfo(34433),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Lifeblood</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Herbalism&amp;apos;s Lifeblood
Lifeblood = {81708,74497,121279,55428,55480,55500,55501,55502,55503}

for i=1,#Lifeblood do
	if IsPlayerSpell(Lifeblood[i])
		and PQR_SpellAvailable(Lifeblood[i])
		and SpecialUnit()
		and Nova_Cooldowns == 1
	then
		if not PQI_SoapboxOffensiveSettings_BossCooldown_enable then
			CastSpellByName(GetSpellInfo(Lifeblood[i]),&amp;quot;player&amp;quot;)
			return true
		else
			if SpecialUnit() then
				CastSpellByName(GetSpellInfo(Lifeblood[i]),&amp;quot;player&amp;quot;)
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Tier 1 Talent</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_TierOne ~= 1 then return false end

-- Void Tendrils
if IsPlayerSpell(108920) and PQR_SpellAvailable(108920) then
	SpellStopCasting()
	CastSpellByName(GetSpellInfo(108920),&amp;quot;player&amp;quot;)
	return true
end

-- Psyfiend
if IsPlayerSpell(108921) and PQR_SpellAvailable(108921) then
	SpellStopCasting()
	CastSpellByID(108921)
	if SpellIsTargeting() then SpellCancelQueuedSpell() CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Vampiric Embrace</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Orbs = Orbs

local v=PQI_SoapboxDefensiveSettings_VampiricEmbrace_value or 40

-- Disabled in PQInterface
if not PQI_SoapboxDefensiveSettings_VampiricEmbrace_enable then return false end

if IsPlayerSpell(15286) and PQR_SpellAvailable(15286) then
	if Playerhealth &amp;lt;= v and Orbs &amp;gt; 2 then
		SpellCancelQueuedSpell()
		CastSpellByName(GetSpellInfo(15286),&amp;quot;player&amp;quot;)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Disable ability if we disabled it in PQI
if not PQI_SoapboxDefensiveSettings_Healthstone_enable then return false end

local v=PQI_SoapboxDefensiveSettings_Healthstone_value

if GetItemCount(5512) &amp;gt; 0
	and Playerhealth &amp;lt;= v
	and PQR_SpellAvailable(5512)
	and GetItemCooldown(5512) == 0
then UseItemByName(5512) return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Dispersion</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Dispersion ~= 1 then return false end


if IsPlayerSpell(47585) and PQR_SpellAvailable(47585) then
	SpellStopCasting()
	CastSpellByName(GetSpellInfo(47585),&amp;quot;player&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Symbiosis</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsFalling() or PQR_IsMoving(0.1) or IsFlying() then return false end
if Nova_Symbiosis ~= 1 then return false end
if PQR_SpellAvailable(113277) then
	CastSpellByName(GetSpellInfo(113277),nil) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Devouring Plague</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation

if Nova_Cooldowns ~= 1 then return false end

if not PQR_SpellAvailable(2944) then return false end

if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if Orbs &amp;lt; 3 then return false end

---Blow ONUSE here-
if TargetValidation(&amp;quot;target&amp;quot;, 2944) then CastSpellByName(GetSpellInfo(2944),&amp;quot;target&amp;quot;) return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Blast</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation


-- Mind Blast is on a CD
if not PQR_SpellAvailable(8092) then return false end



-- We can&amp;apos;t move and cast at the same time
if PQR_IsMoving(0.3) and not Flying() then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

if Playermana &amp;lt; 3 then return false end

-- If we have 3 Shadow Orbs, don&amp;apos;t cast Mind Blast if we&amp;apos;re not saving DP
if Orbs &amp;gt; 2 and PQR_SpellAvailable(2944) and Nova_Cooldowns == 1 then return false end

-- Cast Mind Blast
if TargetValidation(&amp;quot;target&amp;quot;,8092) then
CastSpellByName(GetSpellInfo(8092),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- SW:P (Boss)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local SWP2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(589) then return false end
if not PQI_SoapboxOffensiveSettings_BossDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

for i=1,4 do
	local bossUnit = &amp;quot;boss&amp;quot;..i
	local SWP = select(7,UnitDebuffID(bossUnit,589,&amp;quot;PLAYER&amp;quot;))
	
	-- Let&amp;apos;s try and detect immunities
	if UnitBuffID(bossUnit,116994) or UnitBuffID(bossUnit,122540) or UnitBuffID(bossUnit,123250) or UnitBuffID(bossUnit,106062) or UnitBuffID(bossUnit,110945)
		then return false end
	
	if TargetValidation(bossUnit,589) then
		local id = UnitGUID(bossUnit)
		
		if SWP then
			for i=1,#DoTs do
				if DoTs[i].guid == id and DoTs[i].spellID == 589 then
					if DoTs[i].crit == false then
						if SoapboxPower(589) &amp;gt; DoTs[i].swpPower then
							if SWP - GetTime() &amp;lt;= SWP2 / 2 then
								CastSpellByName(GetSpellInfo(589),bossUnit) return true
							end
						end
						if SWP - GetTime() &amp;lt;= DoTs[i].swp_tick_every then
							CastSpellByName(GetSpellInfo(589),bossUnit) return true
						end
					end
					if DoTs[i].crit == true then
						if SWP - GetTime() &amp;lt;= DoTs[i].swp_tick_every then
							CastSpellByName(GetSpellInfo(589),bossUnit) return true
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(589),bossUnit) return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local Soapbox_CastCheck = Soapbox_CastCheck
local VT = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,34914,&amp;quot;PLAYER&amp;quot;))
local VT2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

if UnitBuffID(&amp;quot;player&amp;quot;,138963) then return false end
-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(34914) then return false end
-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end
-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;target&amp;quot;,34914) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if VT then
		for i=1,#DoTs do
			if DoTs[i].guid == id and DoTs[i].spellID == 34914 then
				if DoTs[i].crit == false then
					if SoapboxPower(34914) &amp;gt; DoTs[i].vtPower then
						if VT - GetTime() &amp;lt;= VT2 / 2 then
							return true
						end
					end
					if VT - GetTime() &amp;lt;= DoTs[i].vt_tick_every then
						return true
					end
				end
				if DoTs[i].crit == true then
					if VT - GetTime() &amp;lt;= DoTs[i].vt_tick_every then
						return true
					end
				end
			end
		end
	else return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- SW:P (Mouseover)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;mouseover&amp;quot;,589,&amp;quot;PLAYER&amp;quot;))
local SWP2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(589) then return false end
if not PQI_SoapboxOffensiveSettings_MouseoverDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;mouseover&amp;quot;,589) then
	local id = UnitGUID(&amp;quot;mouseover&amp;quot;)
	
	if SWP then
		for i=1,#DoTs do
			if DoTs[i].guid == id and DoTs[i].spellID == 589 then
				if DoTs[i].crit == false then
					if SoapboxPower(589) &amp;gt; DoTs[i].swpPower then
						if SWP - GetTime() &amp;lt;= SWP2 / 2 then
							CastSpellByName(GetSpellInfo(589),&amp;quot;mouseover&amp;quot;) return true
						end
					end
					if SWP - GetTime() &amp;lt;= DoTs[i].swp_tick_every then
						CastSpellByName(GetSpellInfo(589),&amp;quot;mouseover&amp;quot;) return true
					end
				end
				if DoTs[i].crit == true then
					if SWP - GetTime() &amp;lt;= DoTs[i].swp_tick_every then
						CastSpellByName(GetSpellInfo(589),&amp;quot;mouseover&amp;quot;) return true
					end
				end

			end
		end
	else CastSpellByName(GetSpellInfo(589),&amp;quot;mouseover&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- SW:P</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,589,&amp;quot;PLAYER&amp;quot;))
local SWP2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

if UnitBuffID(&amp;quot;player&amp;quot;,138963) then return false end
-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(589) then return false end
-- Properly clip Mind Flay / Insanity
if Nova_CLeave ~= 1 then
	if not smartCancel() then return false end
end


if TargetValidation(&amp;quot;target&amp;quot;,589) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if SWP then
		for i=1,#DoTs do
			if DoTs[i].guid == id and DoTs[i].spellID == 589 then
				if DoTs[i].crit == false then
					if SoapboxPower(589) &amp;gt; DoTs[i].swpPower then
						if SWP - GetTime() &amp;lt;= SWP2 / 2 then
							CastSpellByName(GetSpellInfo(589),&amp;quot;target&amp;quot;) return true
						end
					end
					if SWP - GetTime() &amp;lt;= DoTs[i].swp_tick_every then
						CastSpellByName(GetSpellInfo(589),&amp;quot;target&amp;quot;) return true
					end
				end
				if DoTs[i].crit == true then
					if SWP - GetTime() &amp;lt;= DoTs[i].swp_tick_every then
						CastSpellByName(GetSpellInfo(589),&amp;quot;target&amp;quot;) return true
					end
				end
			end
		end
	else CastSpellByName(GetSpellInfo(589),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Vampiric Touch (Boss)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local VT2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)
-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end
-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(34914) then return false end
if not PQI_SoapboxOffensiveSettings_AutoBossDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

for i=1,4 do
	local bossUnit = &amp;quot;boss&amp;quot;..i
	PQR_CustomTarget = bossUnit
	local VT = select(7,UnitDebuffID(bossUnit,34914,&amp;quot;PLAYER&amp;quot;))
	
	-- Let&amp;apos;s try and detect immunities
	if UnitBuffID(bossUnit,116994) or UnitBuffID(bossUnit,122540) or UnitBuffID(bossUnit,123250) or UnitBuffID(bossUnit,106062) or UnitBuffID(bossUnit,110945)
		then return false end
	
	if TargetValidation(bossUnit,34914) then
		local id = UnitGUID(bossUnit)
		
		if VT then
			for i=1,#DoTs do
				if DoTs[i].guid == id and DoTs[i].spellID == 34914 then
					if DoTs[i].crit == false then
						if SoapboxPower(34914) &amp;gt; DoTs[i].vtPower then
							if VT - GetTime() &amp;lt;= VT2 / 2 then
								CastSpellByName(GetSpellInfo(34914),bossUnit) return true
							end
						end
						if VT - GetTime() &amp;lt;= DoTs[i].vt_tick_every then
							CastSpellByName(GetSpellInfo(34914),bossUnit) return true
						end
					end
					if DoTs[i].crit == true then
						if VT - GetTime() &amp;lt;= DoTs[i].vt_tick_every then
							CastSpellByName(GetSpellInfo(34914),bossUnit) return true
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(34914),bossUnit) return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Vampiric Touch (Mouseover)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local VT = select(7,UnitDebuffID(&amp;quot;mouseover&amp;quot;,34914,&amp;quot;PLAYER&amp;quot;))
local VT2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)
-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end
-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(34914) then return false end
if not PQI_SoapboxOffensiveSettings_MouseoverDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;mouseover&amp;quot;,34914) then
	local id = UnitGUID(&amp;quot;mouseover&amp;quot;)
	
	if VT then
		for i=1,#DoTs do
			if DoTs[i].guid == id and DoTs[i].spellID == 34914 then
				if DoTs[i].crit == false then
					if SoapboxPower(34914) &amp;gt; DoTs[i].vtPower then
						if VT - GetTime() &amp;lt;= VT2 / 2 then
							CastSpellByName(GetSpellInfo(34914),&amp;quot;mouseover&amp;quot;) return true
						end
					end
					if VT - GetTime() &amp;lt;= DoTs[i].vt_tick_every then
						CastSpellByName(GetSpellInfo(34914),&amp;quot;mouseover&amp;quot;) return true
					end
				end
				if DoTs[i].crit == true then
					if VT - GetTime() &amp;lt;= DoTs[i].vt_tick_every then
						CastSpellByName(GetSpellInfo(34914),&amp;quot;mouseover&amp;quot;) return true
					end
				end
			end
		end
	else CastSpellByName(GetSpellInfo(34914),&amp;quot;mouseover&amp;quot;) return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Vampiric Touch (Focus)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local VT = select(7,UnitDebuffID(&amp;quot;focus&amp;quot;,34914,&amp;quot;PLAYER&amp;quot;))
local VT2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)
-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end
-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(34914) then return false end
if not PQI_SoapboxOffensiveSettings_FocusDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;focus&amp;quot;,34914) then
	local id = UnitGUID(&amp;quot;focus&amp;quot;)
	
	if VT then
		for i=1,#DoTs do
			if DoTs[i].guid == id and DoTs[i].spellID == 34914 then
				if DoTs[i].crit == false then
					if SoapboxPower(34914) &amp;gt; DoTs[i].vtPower then
						if VT - GetTime() &amp;lt;= VT2 / 2 then
							CastSpellByName(GetSpellInfo(34914),&amp;quot;focus&amp;quot;) return true
						end
					end
					if VT - GetTime() &amp;lt;= DoTs[i].vt_tick_every then
						CastSpellByName(GetSpellInfo(34914),&amp;quot;focus&amp;quot;) return true
					end
				end
				if DoTs[i].crit == true then
					if VT - GetTime() &amp;lt;= DoTs[i].vt_tick_every then
						CastSpellByName(GetSpellInfo(34914),&amp;quot;focus&amp;quot;) return true
					end
				end
			end
		end
	else CastSpellByName(GetSpellInfo(34914),&amp;quot;focus&amp;quot;) return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Focus</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Flay</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation

-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end

-- Mind Flay is on CD
if not PQR_SpellAvailable(15407) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Cast Mind Flay
if TargetValidation(&amp;quot;target&amp;quot;,15407) then
	CastSpellByName(GetSpellInfo(15407),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Devouring Plague -High-</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation
local MBCD = (GetSpellCooldown(8092) + select(2,GetSpellCooldown(8092)) - GetTime())
local SWDCD = (GetSpellCooldown(32379) + select(2,GetSpellCooldown(32379)) - GetTime())



if Nova_Cooldowns ~= 1 then return false end

if not PQR_SpellAvailable(2944) then return false end

if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if Orbs &amp;lt; 3 and not UnitBuffID(&amp;quot;player&amp;quot;,138963) then return false end

if Orbs &amp;lt; 2 then return false end




---Blow ONUSE here---
if MBCD &amp;lt; 1.5 or (Targethealth &amp;lt; 20 and SWDCD &amp;lt; 1.5) or UnitBuffID(&amp;quot;player&amp;quot;,138963) then
	if TargetValidation(&amp;quot;target&amp;quot;, 2944) then CastSpellByName(GetSpellInfo(2944),&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Tier 6 Talent</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 13|/use 14</Actions><Lua>local smartCancel = smartCancel

-- Don&amp;apos;t double tap if we have Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,2944,&amp;quot;PLAYER&amp;quot;) then return false end
end

if UnitBuffID(&amp;quot;player&amp;quot;,138963) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

if PQI_SoapboxOffensiveSettings_AutomaticTier6Talent_enable then
	-- Halo
	if IsPlayerSpell(120517) and PQR_SpellAvailable(120644) then
		CastSpellByName(GetSpellInfo(120644),&amp;quot;target&amp;quot;) return true
	end
	
	-- Divine Star
	if IsPlayerSpell(110744) and PQR_SpellAvailable(110744) then
		CastSpellByName(GetSpellInfo(110744),&amp;quot;target&amp;quot;) return true
	end
	
	-- Cascade
	if IsPlayerSpell(121135)
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(121135)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
 	then CastSpellByName(GetSpellInfo(121135),&amp;quot;target&amp;quot;) return true end
elseif not PQI_SoapboxOffensiveSettings_AutomaticTier6Talent_enable then 
	if Nova_TierSix == 1 then
		if IsPlayerSpell(120517)
			and PQR_SpellAvailable(120644)
			then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(120644),&amp;quot;target&amp;quot;) return true end
	
	-- Divine Star
		if IsPlayerSpell(110744)
			and PQR_SpellAvailable(110744)
			then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(110744),&amp;quot;target&amp;quot;) return true end
	
	-- Cascade
		if IsPlayerSpell(121135)
			and UnitExists(&amp;quot;target&amp;quot;)
			and PQR_SpellAvailable(121135)
			and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
		then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(121135),&amp;quot;target&amp;quot;) return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Flay (Insanity)</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 10|/use 13|/use 14</Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation

-- Disable if we don&amp;apos;t have Solace &amp; Insanity
if not IsPlayerSpell(139139) then return false end

-- If we don&amp;apos;t have DP up, don&amp;apos;t cast!
if not UnitDebuffID(&amp;quot;target&amp;quot;,2944,&amp;quot;PLAYER&amp;quot;) then return false end

-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end

-- Mind Flay is on a CD
if not PQR_SpellAvailable(15407) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Cast Mind Flay
if TargetValidation(&amp;quot;target&amp;quot;,15407) then
	CastSpellByName(GetSpellInfo(15407),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Sear</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_AOE ~= 1 then return false end

if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(48045) then
return false
end


if TargetValidation(&amp;quot;target&amp;quot;,48045) or UnitIsFriend(&amp;quot;target&amp;quot;,&amp;quot;player&amp;quot;) then
	CastSpellByName(GetSpellInfo(48045),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Fade</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQR_SpellAvailable(586) then return false end
if not PQI_SoapboxDefensiveSettings_Fade_enable then return false end

if UnitThreatSituation(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) == 3 then
	CastSpellByName(GetSpellInfo(586),&amp;quot;player&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Spike -Interrupted-</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation
local ShadowCD = GetSpellCooldown(589) + select(2,GetSpellCooldown(589)) - GetTime()

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end
-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end

-- For some reason, we&amp;apos;re shadow locked!
if not PQR_SpellAvailable(589) and ShadowCD &amp;gt; 1 then
	if TargetValidation(&amp;quot;target&amp;quot;,73510) then
		CastSpellByName(GetSpellInfo(73510),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Spike -High-</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation
local SOD = select(4,UnitBuffID(&amp;quot;player&amp;quot;,87160))

-- Disable if we don&amp;apos;t have FDCL
if not IsPlayerSpell(109186) then return false end

-- Mind Spike is on a CD
if not PQR_SpellAvailable(73510) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Don&amp;apos;t cast under 2 stacks
if SOD and SOD &amp;gt; 1 then
	if TargetValidation(&amp;quot;target&amp;quot;,73510) then
		CastSpellByName(GetSpellInfo(73510),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Spike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation

-- Disable if we don&amp;apos;t have FDCL
if not IsPlayerSpell(109186) then return false end

-- Mind Spike is on a CD
if not PQR_SpellAvailable(87160) then return false end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

-- Cast Mind Spike
if UnitBuffID(&amp;quot;player&amp;quot;,87160) then
	if TargetValidation(&amp;quot;target&amp;quot;,73510) then
		CastSpellByName(GetSpellInfo(73510),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mass Dispel (Mouseover)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Mass ~= 1 then return false end

if not PQR_SpellAvailable(32375) then return false end
if IsFalling() or PQR_IsMoving(0.1) or Flying() then return false end

if PQR_SpellAvailable(32375) then
		SpellCancelQueuedSpell()
		CastSpellByName(GetSpellInfo(32375),nil)
		if SpellIsTargeting() then SpellCancelQueuedSpell() CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- SW:P (Focus)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;focus&amp;quot;,589,&amp;quot;PLAYER&amp;quot;))
local SWP2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(589) then return false end
if not PQI_SoapboxOffensiveSettings_FocusDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_CLeave ~= 1 then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;focus&amp;quot;,589) then
	local id = UnitGUID(&amp;quot;focus&amp;quot;)
	
	if SWP then
		for i=1,#DoTs do
			if DoTs[i].guid == id and DoTs[i].spellID == 589 then
				if DoTs[i].crit == false then
					if SoapboxPower(589) &amp;gt; DoTs[i].swpPower then
						if SWP - GetTime() &amp;lt;= SWP2 / 2 then
							CastSpellByName(GetSpellInfo(589),&amp;quot;focus&amp;quot;) return true
						end
					end
					if SWP - GetTime() &amp;lt;= DoTs[i].swp_tick_every then
						CastSpellByName(GetSpellInfo(589),&amp;quot;focus&amp;quot;) return true
					end
				end
				if DoTs[i].crit == true then
					if SWP - GetTime() &amp;lt;= DoTs[i].swp_tick_every then
						CastSpellByName(GetSpellInfo(589),&amp;quot;focus&amp;quot;) return true
					end
				end
			end
		end
	else CastSpellByName(GetSpellInfo(589),&amp;quot;focus&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Shadow Word: Death</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo

if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,2944,&amp;quot;PLAYER&amp;quot;) then return false end
end

if not PQR_SpellAvailable(32379) then return false end

-- We can&amp;apos;t activate above 20% HP anyway..
if Targethealth &amp;gt; 20 then return false end

if PQI_SoapboxOffensiveSettings_DoubleShadowWordDeath_enable then
	if TargetValidation(&amp;quot;target&amp;quot;,32379) then
	CastSpellByName(GetSpellInfo(32379),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Buffs</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsMounted()
or UnitBuffID(&amp;quot;player&amp;quot;,104934)
or UnitBuffID(&amp;quot;player&amp;quot;,104269) then
return false
end

if UnitCastingInfo(&amp;quot;player&amp;quot;) or UnitChannelInfo(&amp;quot;player&amp;quot;) then return false end

-- Shadow Form
if IsPlayerSpell(15473) and not UnitBuffID(&amp;quot;player&amp;quot;,15473) then
	CastSpellByName(GetSpellInfo(15473),&amp;quot;player&amp;quot;) return true
end

-- Inner Fire
if IsPlayerSpell(588) and not UnitBuffID(&amp;quot;player&amp;quot;,588) then
	CastSpellByName(GetSpellInfo(588),&amp;quot;player&amp;quot;) return true
end

if UnitAffectingCombat(&amp;quot;player&amp;quot;) then return false end

-- Power Word Fortitude
if IsPlayerSpell(21562) and not AuraInfo(2,&amp;quot;player&amp;quot;) then
	CastSpellByName(GetSpellInfo(21562),&amp;quot;player&amp;quot;) return true
end

-- Dark Intent: Raid Buffing
if PQI_SoapboxDefensiveSettings_RaidBuffing_enable then
	if IsInRaid() then group = &amp;quot;raid&amp;quot;
		elseif IsInGroup() then group = &amp;quot;party&amp;quot;
	else return false end
	
	for i=1,GetNumGroupMembers() do
		local member = group..i
		if not AuraInfo(2,member) and IsSpellInRange(GetSpellInfo(21562),member) == 1 then
			if UnitIsDeadOrGhost(member) then return false end
			if not IsLineOfSight(member, 5) then return false end
			
			CastSpellByName(GetSpellInfo(21562),member) return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Combat Pause---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxOffensiveSettings_CombatPause_enable then return false end

if (not UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;))
	or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---2. Globals---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>Orbs = UnitPower(&amp;quot;player&amp;quot;,13)


---Invoke Xuen Cooldown---
local MBStart, MBDuration = GetSpellCooldown(8092)
MBCD = MBStart + MBDuration - GetTime()

---Invoke Xuen Cooldown---
local SWDStart, SWDDuration = GetSpellCooldown(32379)
SWDCD = SWDStart + SWDDuration - GetTime()


Playermana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)
Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
Pethealth = 100 * UnitHealth(&amp;quot;pet&amp;quot;) / UnitHealthMax(&amp;quot;pet&amp;quot;)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Body and Soul</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not IsPlayerSpell(64129) then return false end
if IsFalling() or IsFlying() then return false end
if not IsPlayerSpell(17) then return false end
if not PQR_SpellAvailable(17) then return false end
if not PQI_SoapboxDefensiveSettings_BodyandSoul_enable then return false end

if not UnitDebuffID(&amp;quot;player&amp;quot;,6788) and PQR_IsMoving(0.3) then
	CastSpellByName(GetSpellInfo(17),&amp;quot;player&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Immune Bosses</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Let&amp;apos;s try and detect immunities
if UnitBuffID(&amp;quot;target&amp;quot;,116994) or UnitBuffID(&amp;quot;target&amp;quot;,122540) or UnitBuffID(&amp;quot;target&amp;quot;,123250) or UnitBuffID(&amp;quot;target&amp;quot;,106062) or UnitBuffID(&amp;quot;target&amp;quot;,110945)
	then return false end
	
-- Cancel spell casts or channels on Silences
if UnitExists(&amp;quot;boss1&amp;quot;) or UnitExists(&amp;quot;target&amp;quot;) then
	if UnitCastingInfo(&amp;quot;boss1&amp;quot;) == GetSpellInfo(138763) or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137457) then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) or UnitChannelInfo(&amp;quot;player&amp;quot;) then RunMacroText(&amp;quot;/stopcasting&amp;quot;) return false end
		return true
	end
end
	
-- Twin Consorts (Immune while channeling Nuclear Inferno and Tidal Force)
if UnitChannelInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137531) or UnitChannelInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137491) or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(138763)
	then return false end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---1. Functions---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>----------------------------------------------------------------------------------------------------------------------------------------------
----------------Credits to Mentally for below Trackers, coding used to track DoTs and UVLS----------------------------------------------------
--http://www.ownedcore.com/forums/world-of-warcraft/world-of-warcraft-bots-programs/wow-bot-maps-profiles/405521-pqr-mentallys-hysteria.html--
----------------------------------------------------------------------------------------------------------------------------------------------

	
---Credits to Bu_ba for the line of code!---
if not IsLineOfSight then
 LoSTable = { }
 function IsLineOfSight(targetCheck, time)
  local time=time or 5
  targetGUID = UnitGUID(targetCheck) or 0 

   for i=1, #LoSTable do
    if time &amp;lt; (GetTime() - LoSTable[i].time) then
     table.remove(LoSTable, i)
     break
    end
  end

   function LoSCheck(self, event, ...)
    local targetGUID = targetGUID
    local Log = {...}
    local AlreadyTabled = false
    if Log[2] and Log[2] == &amp;quot;SPELL_CAST_FAILED&amp;quot; and targetGUID then
     if Log[4] and Log[4]==UnitGUID(&amp;quot;player&amp;quot;) then
      if Log[15] and Log[15]==SPELL_FAILED_LINE_OF_SIGHT then
       for j=1, #LoSTable do
        if targetGUID == LoSTable[j].unit then
         AlreadyTabled = true
         break
        end
       end
       if not AlreadyTabled then
        table.insert(LoSTable, { unit=targetGUID, time=GetTime() } )
        targetGUID = nil
        _G.NovaLineOfSight:UnregisterAllEvents()
       end
      end
     end
    end
    
   end

  if not NovaLineOfSight then
    frameLOS = CreateFrame(&amp;quot;frame&amp;quot;, &amp;quot;NovaLineOfSight&amp;quot;)
    frameLOS:SetScript(&amp;quot;OnEvent&amp;quot;, LoSCheck)
  end
  
   for k=1, #LoSTable do
     if targetGUID and targetGUID == LoSTable[k].unit then
     return false
    end
  end
  
  
  _G.NovaLineOfSight:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
  return true

 end
end


Bloodlust = nil
function Bloodlust()
	local lust = {2825, 32182, 80353, 90355}
	
	for i=1,#lust do
		if UnitBuffID(&amp;quot;player&amp;quot;,lust[i]) then return true, lust[i] end
	end
	return false
end

Hasted = nil
function Hasted()
	local haste = {2825, 32182, 80353, 90355}
	
	for i=1,#haste do
		if UnitBuffID(&amp;quot;player&amp;quot;,haste[i]) then return true, haste[i] end
	end
	return false
end



Flying = nil
function Flying()
	local flight = {98734, 98619, 133755}
	
	for i=1,#flight do
		if UnitBuffID(&amp;quot;player&amp;quot;,flight[i]) then return true, flight[i] end
	end
	return false
end


function dummy()
	dummies = {
		31146, --Raider&amp;apos;s Training Dummy - Lvl ??
		67127, --Training Dummy - Lvl 90
		46647, --Training Dummy - Lvl 85
		32546, --Ebon Knight&amp;apos;s Training Dummy - Lvl 80
		31144, --Training Dummy - Lvl 80
		32667, --Training Dummy - Lvl 70
		32542, --Disciple&amp;apos;s Training Dummy - Lvl 65
		32666, --Training Dummy - Lvl 60
		32545, --Initiate&amp;apos;s Training Dummy - Lvl 55 
		32541, --Initiate&amp;apos;s Training Dummy - Lvl 55 (Scarlet Enclave) 
	}
	for i=1, #dummies do
		if UnitExists(&amp;quot;target&amp;quot;) then
			dummyID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(-13, -9), 16)
		else
			dummyID = 0
		end
		if dummyID == dummies[i] then
			return true
		end	
	end
end


-- Aura Info function.
buffs = {
	stat 		=	{ 90363, 20217,	115921, 1126 },
	stamina		= 	{ 469, 90364, 109773, 21562},
	atkpwr		= 	{ 19506, 57330,	6673 },
	atkspeed	=	{ 55610, 113742, 30809, 128432, 128433 },
	spllpwr		=	{ 77747, 109773, 126309, 61316, 1459 },
	spllhaste	= 	{ 24907, 15473, 51470, 49868 },
	crit		=	{ 17007, 1459, 61316, 116781, 97229, 24604, 90309, 126373, 126309 },
	mastery		=	{ 116956, 19740, 93435, 128997 },
}

-- Trinket Proc list
buffList = {104423, 104509, 104510, 128985, 33702, 126577, 126659, 126478, 125487, 136082, 126605, 126734, 126476, 136089, 138898, 139133, 138786, 138703, 137590, 26297, 32182, 90355, 80353, 2825, 104993, 105702}
critProcs = {104509, 126605, 126476}
hasteProcs = {104423, 126659, 136089, 138703, 137590, 26297, 32182, 90355, 80353, 2825}
masteryProcs = {104510}
intellectProcs = {128985, 126577, 126478, 136082, 138898, 139133, 138786, 104993, 105702, 33702, 126734, 125487}



-- Calculate accumulated power of procs
SoapboxPower = nil
function SoapboxPower(spellID)
	-- Fetch our current stats.
	local mastery, haste, crit, spd, sorbs = GetMastery(), UnitSpellHaste(&amp;quot;player&amp;quot;), GetSpellCritChance(6), GetSpellBonusDamage(6), UnitPower(&amp;quot;player&amp;quot;,13)
	
	-- Calculate potential damage buffs.
	dmg_buff = 1
	local fluidity, tricks, fearless, nutriment, shadowform, pi, tof = UnitBuffID(&amp;quot;player&amp;quot;,138002), UnitBuffID(&amp;quot;player&amp;quot;,57934), UnitBuffID(&amp;quot;player&amp;quot;,118977), select(4,UnitBuffID(&amp;quot;player&amp;quot;,138002)), UnitBuffID(&amp;quot;player&amp;quot;,15473), UnitBuffID(&amp;quot;player&amp;quot;,10060), UnitBuffID(&amp;quot;player&amp;quot;,123254)
	if fluidity		then dmg_buff = dmg_buff * 1.4		end
	if fearless		then dmg_buff = dmg_buff * 1.6		end
	if tricks		then dmg_buff = dmg_buff * 1.15		end
	if nutriment	then dmg_buff = 2+(nutriment-1)*0.1	end
	if shadowform	then dmg_buff = dmg_buff * 1.25		end
	if pi			then dmg_buff = dmg_buff * 1.05		end
	if tof			then dmg_buff = dmg_buff * 1.15		end
	
	-- Skull Banner
	if crit &amp;gt;= 100	then
		if skullbanner then dmg_buff = dmg_buff * 1.20	end
	end
	
	-- If Unerring proceed, take it into account.
	if crit &amp;gt; 100 then crit = 100 end
	
	-- Class/spec detection
	if select(2,UnitClass(&amp;quot;player&amp;quot;)) == &amp;quot;PRIEST&amp;quot; then
		if GetSpecialization() == 3 then
			damage_bonus 		= (1+crit/100)*(1+(mastery*1.8)/100)
			tick_every 			= 3/(1+(haste/100))
			
			-- Shadow Word: Pain
			if spellID == 589 then
				ticks		= PowerRound(18/tick_every)
				duration	= ticks * tick_every
				damage		= ticks * (623+spd*0.293) * damage_bonus
				dps			= PowerRound(damage/duration)
				dot_power	= PowerRound(dps/100)/10
				return dot_power
			end
			
			-- Vampiric Touch
			if spellID == 34914 then
				ticks		= PowerRound(15/tick_every)
				duration	= ticks * tick_every
				damage		= ticks*(62+spd*0.346)*damage_bonus
				dps			= PowerRound(damage/duration)
				dot_power	= PowerRound(dps/100)/10
				return dot_power
			end		
			
			-- Devouring Plague
			if spellID == 2944 then
				tick_every	= 1/(1+(haste/100))
				ticks		= PowerRound(5/tick_every)
				duration	= ticks * tick_every
				damage		= ticks*(9+spd*0.131)*sorbs*damage_bonus
				dps			= PowerRound(damage/duration)
				dot_power	= PowerRound(dps/100)/10
				return dot_power
			end
			
			-- Fail-safe
			return 0
		else return 0 end
	elseif select(2,UnitClass(&amp;quot;player&amp;quot;)) == &amp;quot;WARLOCK&amp;quot; then
		if GetSpecialization() == 2 then
			-- Doom
			if spellID == 603 then
				bonus		= (1+crit/100)*(1+(mastery*3)/100)
				tick_every	= 15/(1+(haste/100))
				ticks		= PowerRound(60/tick_every)
				duration	= ticks * tick_every
				damage		= (5340/ticks+spd*1.25)*bonus*ticks*dmg_buff
				dps			= PowerRound(damage/duration)
				dot_power	= PowerRound(dps/100)/10
				return dot_power
			end
			
			-- Fail-safe
			return 0
		else return 0 end
	else return 0 end
end

-- Unerring Vision of Lei-Shen
Vision = {
	95814,	-- LFR
	94524,	-- Normal
	96186,	-- Thunderforged
	96558,	-- Heroic
	96930	-- Heroic Thunderforged
}

-- Complete boss unit table (Dungeons/Heroics/Raids)
BossUnits = {
	-- Cataclysm Dungeons --
	-- Abyssal Maw: Throne of the Tides
	40586,		-- Lady Naz&amp;apos;jar
	40765,		-- Commander Ulthok
	40825,		-- Erunak Stonespeaker
	40788,		-- Mindbender Ghur&amp;apos;sha
	42172,		-- Ozumat
	-- Blackrock Caverns
	39665,		-- Rom&amp;apos;ogg Bonecrusher
	39679,		-- Corla, Herald of Twilight
	39698,		-- Karsh Steelbender
	39700,		-- Beauty
	39705,		-- Ascendant Lord Obsidius
	-- The Stonecore
	43438,		-- Corborus
	43214,		-- Slabhide
	42188,		-- Ozruk
	42333,		-- High Priestess Azil
	-- The Vortex Pinnacle
	43878,		-- Grand Vizier Ertan
	43873,		-- Altairus
	43875,		-- Asaad
	-- Grim Batol
	39625,		-- General Umbriss
	40177,		-- Forgemaster Throngus
	40319,		-- Drahga Shadowburner
	40484,		-- Erudax
	-- Halls of Origination
	39425,		-- Temple Guardian Anhuur
	39428,		-- Earthrager Ptah
	39788,		-- Anraphet
	39587,		-- Isiset
	39731,		-- Ammunae
	39732,		-- Setesh
	39378,		-- Rajh
	-- Lost City of the Tol&amp;apos;vir
	44577,		-- General Husam
	43612,		-- High Prophet Barim
	43614,		-- Lockmaw
	49045,		-- Augh
	44819,		-- Siamat
	-- Zul&amp;apos;Aman
	23574,		-- Akil&amp;apos;zon
	23576,		-- Nalorakk
	23578,		-- Jan&amp;apos;alai
	23577,		-- Halazzi
	24239,		-- Hex Lord Malacrass
	23863,		-- Daakara
	-- Zul&amp;apos;Gurub
	52155,		-- High Priest Venoxis
	52151,		-- Bloodlord Mandokir
	52271,		-- Edge of Madness
	52059,		-- High Priestess Kilnara
	52053,		-- Zanzil
	52148,		-- Jin&amp;apos;do the Godbreaker
	-- End Time
	54431,		-- Echo of Baine
	54445,		-- Echo of Jaina
	54123,		-- Echo of Sylvanas
	54544,		-- Echo of Tyrande
	54432,		-- Murozond
	-- Hour of Twilight
	54590,		-- Arcurion
	54968,		-- Asira Dawnslayer
	54938,		-- Archbishop Benedictus
	-- Well of Eternity
	55085,		-- Peroth&amp;apos;arn
	54853,		-- Queen Azshara
	54969,		-- Mannoroth
	55419,		-- Captain Varo&amp;apos;then
	
	-- Mists of Pandaria Dungeons --
	-- Scarlet Halls
	59303,		-- Houndmaster Braun
	58632,		-- Armsmaster Harlan
	59150,		-- Flameweaver Koegler
	-- Scarlet Monastery
	59789,		-- Thalnos the Soulrender
	59223,		-- Brother Korloff
	3977,		-- High Inquisitor Whitemane
	60040,		-- Commander Durand
	-- Scholomance
	58633,		-- Instructor Chillheart
	59184,		-- Jandice Barov
	59153,		-- Rattlegore
	58722,		-- Lilian Voss
	58791,		-- Lilian&amp;apos;s Soul
	59080,		-- Darkmaster Gandling
	-- Stormstout Brewery
	56637,		-- Ook-Ook
	56717,		-- Hoptallus
	59479,		-- Yan-Zhu the Uncasked
	-- Tempe of the Jade Serpent
	56448,		-- Wise Mari
	56843,		-- Lorewalker Stonestep
	59051,		-- Strife
	59726,		-- Peril
	58826,		-- Zao Sunseeker
	56732,		-- Liu Flameheart
	56762,		-- Yu&amp;apos;lon
	56439,		-- Sha of Doubt
	-- Mogu&amp;apos;shan Palace
	61444,		-- Ming the Cunning
	61442,		-- Kuai the Brute
	61445,		-- Haiyan the Unstoppable
	61243,		-- Gekkan
	61398,		-- Xin the Weaponmaster
	-- Shado-Pan Monastery
	56747,		-- Gu Cloudstrike
	56541,		-- Master Snowdrift
	56719,		-- Sha of Violence
	56884,		-- Taran Zhu
	-- Gate of the Setting Sun
	56906,		-- Saboteur Kip&amp;apos;tilak
	56589,		-- Striker Ga&amp;apos;dok
	56636,		-- Commander Ri&amp;apos;mok
	56877,		-- Raigonn
	-- Siege of Niuzao Temple
	61567,		-- Vizier Jin&amp;apos;bak
	61634,		-- Commander Vo&amp;apos;jak
	61485,		-- General Pa&amp;apos;valak
	62205,		-- Wing Leader Ner&amp;apos;onok
	
	-- Mists of Pandaria Heroic Scenarios --
	-- A Brewing Storm
	58739,		-- Borokhula the Destroyer
	-- Battle on the High Seas
	71303,		-- Whale Shark &amp;lt;Son of Whale Shark&amp;gt;
	71327,		-- Admiral Hodgson
	67426,		-- Admiral Hagman
	70893,		-- Lieutenant Blasthammer
	71329,		-- Lieutenant Boltblaster
	-- Blood in the Snow
	70468,		-- Bonechiller Barafu
	70474,		-- Farastu &amp;lt;The Living Ice&amp;gt;
	70544,		-- Hekima the Wise &amp;lt;Herald of Rastakhan&amp;gt;
	-- Crypt of the Forgotten Kings
	61707,		-- Abomination of Anger
	71492,		-- Maragor &amp;lt;Guardian of the Golden Doors&amp;gt;
	67081,		-- Forgotten King
	-- Dark Heart of Pandaria
	71123,		-- Echo of Y&amp;apos;Shaarj
	-- The Secrets of Ragefire
	70683,		-- Dark Shaman Xorenth
	71030,		-- Overseer Elaglo
	70665,		-- Kor&amp;apos;kron Dire Soldier

	-- Training Dummies --
	46647,		-- Level 85 Training Dummy
	67127,		-- Level 90 Training Dummy
	
	-- Pandaria Raid Adds --
	63346,		-- Tsulong: The Dark of Night
	62969,		-- Tsulong: Embodied Terror
	62977,		-- Tsulong: Frightspawn
	62919,		-- Tsulong: Unstable Sha
	61034,		-- Sha of Fear: Terror Spawn
	61003		-- Sha of Fear: Dread Spawn
}

-- Combat log event reader
function AptheosisFrame_OnEvent(self,event,...)
	-- We started a channel, update counters
	if event == &amp;quot;UNIT_SPELLCAST_CHANNEL_START&amp;quot; then
		-- Mind Flay counter
		if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(15407) then
			flayTicks = 0
			maxFlayTicks = 3
		end
		-- Mind Flay (Insanity) counter
		if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(129197) then
			insanityTicks = 0
			maxInsanityTicks = 3
		end
	end
	
	-- We stopped a channel, reset counters.
	if event == &amp;quot;UNIT_SPELLCAST_CHANNEL_STOP&amp;quot; then
		flayTicks = 0
		insanityTicks = 0
		maxFlayTicks = 3
		maxInsanityTicks = 3
	end
	
	-- Clear the DOT tracker whenever we leave or enter combat!
	if event == &amp;quot;PLAYER_REGEN_ENABLED&amp;quot; or event == &amp;quot;PLAYER_REGEN_DISABLED&amp;quot; then
		if #DoTs &amp;gt; 0 then DoTs = {} end
	end
	
	if event == &amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot; then
		local subEvent		= select(2, ...)
		local source		= select(5, ...)
		local destGUID		= select(8, ...)
		local destination	= select(9, ...)
		local spellID		= select(12, ...)
		local spell			= select(13, ...)
		local damage		= select(15, ...)
		local critical		= select(21, ...)
		local doom_tick_every = Round(15/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)),2)
		local swp_tick_every = Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)),2)
		local vt_tick_every = Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)),2)
		
		-- Unit Death events
		if subEvent == &amp;quot;UNIT_DIED&amp;quot; then
			-- A unit has died, is it in our tracker?
			if #DoTs &amp;gt; 0 then
				for i=1,#DoTs do
					if DoTs[i].guid == destGUID then tremove(DoTs, i) return true end
				end
			end
		end
		
		-- Successfull Spell Casts
		if subEvent == &amp;quot;SPELL_CAST_START&amp;quot; then end
		
		-- Periodic Damage Events
		if subEvent == &amp;quot;SPELL_PERIODIC_DAMAGE&amp;quot; then			
			-- Mind Flay
			if UnitName(&amp;quot;player&amp;quot;) == source and spellID == 15407 then flayTicks = flayTicks + 1 end
			-- Mind Flay (Insanity)
			if UnitName(&amp;quot;player&amp;quot;) == source and spellID == 129197 then insanityTicks = insanityTicks + 1 end
		end
		
		-- Refreshed Aura Events
		if subEvent == &amp;quot;SPELL_AURA_REFRESH&amp;quot; then			
			-- Shadow Word: Pain was refreshed on an enemy, update our table.
			if UnitName(&amp;quot;player&amp;quot;) == source and spellID == 589 then
				if #DoTs &amp;gt; 0 then
					for i=1,#DoTs do
						if DoTs[i].guid == destGUID and DoTs[i].spellID == spellID then
							DoTs[i].swpPower = SoapboxPower(589)
							DoTs[i].swp_tick_every = swp_tick_every
							DoTs[i].spellID = spellID
							if UnitBuffID(&amp;quot;player&amp;quot;,138963) then DoTs[i].crit = true else DoTs[i].crit = false end
						end
					end
				end
			end
			
			-- Vampiric Touch was refreshed on an enemy, update our table.
			if UnitName(&amp;quot;player&amp;quot;) == source and spellID == 34914 then
				if #DoTs &amp;gt; 0 then
					for i=1,#DoTs do
						if DoTs[i].guid == destGUID and DoTs[i].spellID == spellID then
							DoTs[i].vtPower = SoapboxPower(34914)
							DoTs[i].vt_tick_every = vt_tick_every
							DoTs[i].spellID = spellID
							if UnitBuffID(&amp;quot;player&amp;quot;,138963) then DoTs[i].crit = true else DoTs[i].crit = false end
						end
					end
				end
			end
			
			-- Mind Flay
			if UnitName(&amp;quot;player&amp;quot;) == source and spellID == 15407 then
				flayTicks = 0
				maxFlayTicks = 4
			end
			
			-- Mind Flay (Insanity)
			if UnitName(&amp;quot;player&amp;quot;) == source and spellID == 129197 then
				insanityTicks = 0
				maxInsanityTicks = 4
			end
		end
		
		-- Removed Aura Events
		if subEvent == &amp;quot;SPELL_AURA_REMOVED&amp;quot; then
			if UnitName(&amp;quot;player&amp;quot;) == source then				
				-- Shadow Word: Pain fell of a unit, remove unit from tracker.
				if spellID == 589 then
					if #DoTs &amp;gt; 0 then
						for i=1,#DoTs do
							if DoTs[i].guid == destGUID and DoTs[i].spellID == spellID then tremove(DoTs, i) return true end
						end
					end
				end
				
				-- Vampiric Touch fell of a unit, remove unit from tracker.
				if spellID == 34914 then
					if #DoTs &amp;gt; 0 then
						for i=1,#DoTs do
							if DoTs[i].guid == destGUID and DoTs[i].spellID == spellID then tremove(DoTs, i) return true end
						end
					end
				end
				
				-- Ignite fell off a unit
				if spellID == 12654 then IgniteDamage = 0 end
				
				-- Mind Flay
				if spellID == 15407 then flayTicks = 0 maxFlayTicks = 3 end
				
				-- Mind Flay (Insanity)
				if spellID == 129197 then insanityTicks = 0 maxInsanityTicks = 3 end
				
			end
		end
		
		-- Applied Aura Events
		if subEvent == &amp;quot;SPELL_AURA_APPLIED&amp;quot; then
			if UnitName(&amp;quot;player&amp;quot;) == source then
				
				-- Shadow Word: Pain applied to a unit, add unit to tracker
				if spellID == 589 then
					for i=1,#DoTs do if DoTs[i].guid == destGUID and DoTs[i].spellID == spellID then return false end end
					
					if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
						table.insert(DoTs, {guid = destGUID, swpPower = SoapboxPower(589), swp_tick_every = swp_tick_every, spellID = spellID, crit = true})
					else
						table.insert(DoTs, {guid = destGUID, swpPower = SoapboxPower(589), swp_tick_every = swp_tick_every, spellID = spellID, crit = false})
					end
				end
				
				-- Vampiric Touch applied to a unit, add unit to tracker
				if spellID == 34914 then
					for i=1,#DoTs do if DoTs[i].guid == destGUID and DoTs[i].spellID == spellID then return false end end
					
					if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
						table.insert(DoTs, {guid = destGUID, vtPower = SoapboxPower(34914), vt_tick_every = vt_tick_every, spellID = spellID, crit = true})
					else
						table.insert(DoTs, {guid = destGUID, vtPower = SoapboxPower(34914), vt_tick_every = vt_tick_every, spellID = spellID, crit = false})
					end
				end
			end
		end
	end
end

-- Function to check if buff.duration &amp;gt; spell.cast_time
Soapbox_CastCheck = nil
function Soapbox_CastCheck(spell, buff)
	-- Someone forgot to input something, return false by default.
	if buff == nil then return false end
	if spell == nil then return false end
	
	-- Variables and functions we need to make this work.
	local Round = Round
	local buffName,_,_,_,_,_,buffTime = UnitBuffID(&amp;quot;player&amp;quot;,buff)
	
	if buffName then
		-- It&amp;apos;s an instant spell, return true no matter what.
		if select(7,GetSpellInfo(spell)) == 0 then return true end
		
		-- Check the cast time
		if buffTime - GetTime() &amp;gt; Round(select(7,GetSpellInfo(spell))/1000,2) + 0.8 then return true
			else return false end
	end
	return false
end


-- Returns the number of items currently equipped from the given table.
itemCheck = nil
function itemCheck(tbl)
	local itemCount = 0
	for i=1,#tbl do
		if IsEquippedItem(tbl[i]) then itemCount = itemCount + 1 end
	end
	return itemCount
end

-- Aura Information Function
AuraInfo = nil
function AuraInfo(i,unit)
	if i == 1 then
		for x = 1, #buffs.stat do
			local name, _, texture = UnitBuff(unit, (GetSpellInfo(buffs.stat[x])))
			if texture then
				return name, _, texture
			end
		end
	elseif i == 2 then
		for x = 1, #buffs.stamina do
			local name, _, texture = UnitBuff(unit, (GetSpellInfo(buffs.stamina[x])))
			if texture then
				return name, _, texture
			end
		end
	elseif i == 3 then
		for x = 1, #buffs.atkpwr do
			local name, _, texture = UnitBuff(unit, (GetSpellInfo(buffs.atkpwr[x])))
			if texture then
				return name, _, texture
			end
		end
	elseif i == 4 then
		for x = 1, #buffs.atkspeed do
			local name, _, texture = UnitBuff(unit, (GetSpellInfo(buffs.atkspeed[x])))
			if texture then
				return name, _, texture
			end
		end
	elseif i == 5 then
		for x = 1, #buffs.spllpwr do
			local name, _, texture = UnitBuff(unit, (GetSpellInfo(buffs.spllpwr[x])))
			if texture then
				return name, _, texture
			end
		end
	elseif i == 6 then
		for x = 1, #buffs.spllhaste do
			local name, _, texture = UnitBuff(unit, (GetSpellInfo(buffs.spllhaste[x])))
			if texture then
				return name, _, texture
			end
		end
	elseif i == 7 then
		for x = 1, #buffs.crit do
			local name, _, texture = UnitBuff(unit, (GetSpellInfo(buffs.crit[x])))
			if texture then
				return name, _, texture
			end
		end
	elseif i == 8 then
		for x = 1, #buffs.mastery do
			local name, _, texture = UnitBuff(unit, (GetSpellInfo(buffs.mastery[x])))
			if texture then
				return name, _, texture
			end
		end
	else 
		return nil, nil, nil
	end
end

-- Rounding Function
Round = nil
function Round(number, decimal)
	local multiplier = 10^(decimal or 0)
	return math.floor(number * multiplier + 0.5) / multiplier
end
PowerRound = nil
function PowerRound(num) return math.floor(num+.5) end

-- Smart channel cancel Function
smartCancel = nil
function smartCancel()
	-- Don&amp;apos;t cancel Mind Sear
	if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(48045) then return false end
	
	-- Not smart cancelling Mind Flay, default.
	if not PQI_SoapboxOffensiveSettings_MindFlay_enable then
		if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(15407) then return false end
	end
	
	-- Not smart cancelling Mind Flay (Insanity), default.
	if not PQI_SoapboxOffensiveSettings_MindFlayInsanity_enable then
		if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(129197) then return false end
	end
	
	-- Mind Flay failsafe.
	if PQI_SoapboxOffensiveSettings_MindFlay_enable then
		if PQI_SoapboxOffensiveSettings_MindFlay_value &amp;gt; 2 then
			if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(15407) and flayTicks &amp;lt; maxFlayTicks - 1 then return false end
		else
			if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(15407) and flayTicks &amp;lt; PQI_SoapboxOffensiveSettings_MindFlay_value then return false end
		end
	end
	
	-- Mind Flay Insanity failsafe.
	if PQI_SoapboxOffensiveSettings_MindFlayInsanity_enable then
		if PQI_SoapboxOffensiveSettings_MindFlayInsanity_value &amp;gt; 2 then
			if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(129197) and insanityTicks &amp;lt; maxInsanityTicks - 1 then return false end
		else
			if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(129197) and insanityTicks &amp;lt; PQI_SoapboxOffensiveSettings_MindFlayInsanity_value then return false end
		end
	end
	
	return true
end

-- Boss Unit Function
SpecialUnit = nil
function SpecialUnit()
	local BossUnits = BossUnits
	
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		
		-- Dungeons &amp; Raids
		if UnitLevel(&amp;quot;target&amp;quot;) == -1 then return true else
			for i=1,#BossUnits do
				if BossUnits[i] == npcID then return true end
			end
			return false
		end
	else return false end
end

----------------------------------------------------------------------------------------------------------------------------------------------
----------------Credits to Mentally for Amazinlgly accurate T2D Function----------------------------------------------------------------------
--http://www.ownedcore.com/forums/world-of-warcraft/world-of-warcraft-bots-programs/wow-bot-maps-profiles/405521-pqr-mentallys-hysteria.html--
----------------------------------------------------------------------------------------------------------------------------------------------


-- Time 2 Die
T2D = nil
function T2D(unit)
	-- If no target is given, return false.
	if unit == nil then return false end
	
	if UnitExists(unit) then
		-- Target present; Set initial values.
		if (guid ~= UnitGUID(unit)) or (guid == UnitGUID(unit) and UnitHealth(unit) == _firstLifeMax) then
			guid = UnitGUID(unit)
			_firstLife = UnitHealth(unit)
			_firstLifeMax = UnitHealthMax(unit)
			_firstTime = GetTime()
		end
		
		-- Fetch current values.
		_currentLife = UnitHealth(unit)
		_currentTime = GetTime()
		timeDiff = _currentTime - _firstTime
		hpDiff = _firstLife - _currentLife
		
		-- Calculate time to die.
		if hpDiff &amp;gt; 0 then
			fullTime = timeDiff*_firstLifeMax/hpDiff
			pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
			calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
			if calcTime &amp;lt; 1 then calcTime = 1 end
			timeToDie = calcTime
		end
		
		-- New target; reset settings.
		if hpDiff &amp;lt;= 0 then
			guid = UnitGUID(unit)
			_firstLife = UnitHealth(unit)
			_firstLifeMax = UnitHealth(unit)
			_firstTime = GetTime()
		end
	            
		-- Training Dummy&amp;apos;s are bad
		if UnitHealthMax(unit) == 1 then timeToDie = 99 end
		
		-- Initialize
		if not timeToDie then timeToDie = 100 end
		
		return timeToDie
	end
end

-- Target Validation Function
TargetValidation = nil
function TargetValidation(unit, spell)
	if UnitExists(unit)
		and IsPlayerSpell(spell)
		and UnitCanAttack(&amp;quot;player&amp;quot;, unit) == 1
		and not UnitIsDeadOrGhost(unit)
		and IsLineOfSight(unit, 3) then
			if IsSpellKnown(spell) then
				if PQR_SpellAvailable(spell) then
					if IsSpellInRange(GetSpellInfo(spell), unit) == 1 then return true else return false end
				else
					if spell == 8092 or spell == 32379 then
						local spellCD = select(2,GetSpellCooldown(spell)) + GetSpellCooldown(spell) - GetTime()
						if spellCD &amp;lt;= 0 then spellCD = 0 end
						if spellCD &amp;lt;= 0.5 then return true end
					end
					return false
				end
			else
				if select(2, GetSpellCooldown(spell)) == 0 then return true end
			end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---3. Table---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if SOAPBOX_SHADOW_DEF then return false end
if SOAPBOX_SHADOW_OFF then return false end

local Defensive = {
		name	= &amp;quot;Defensive Settings&amp;quot;,
		author	= &amp;quot;Soapbox&amp;quot;,
		abilities = {
			{ 	name	= &amp;quot;Healthstone&amp;quot;,
				enable	= true,
				widget	= {	type = &amp;quot;numBox&amp;quot;,
					tooltip = &amp;quot;Set the health % value you want Healthstone to be used at.&amp;quot;,
					value	= 50,
					step	= 5,
				},
			},
			{ 	name	= &amp;quot;Desperate Prayer&amp;quot;,
				enable	= true,
				widget	= {	type = &amp;quot;numBox&amp;quot;,
					tooltip = &amp;quot;Set the health % value you want Desperate Prayer to be used at.&amp;quot;,
					value	= 45,
					step	= 5,
				},
			},
			{ 	name	= &amp;quot;Vampiric Embrace&amp;quot;,
				enable	= true,
				widget	= {	type = &amp;quot;numBox&amp;quot;,
					tooltip = &amp;quot;Set the health % value you want Vampiric Embrace to be used at.&amp;quot;,
					value	= 40,
					step	= 5,
				},
			},
			{ 	name	= &amp;quot;Raid Buffing&amp;quot;,
				tooltip = &amp;quot;When enabled; Will automatically try to buff your raid or party.&amp;quot;,
				enable	= true,
				newSection  = true,
			},
			{ 	name	= &amp;quot;Body and Soul&amp;quot;,
				tooltip = &amp;quot;When enabled; Will automatically shield you while running when Body and Soul is selected as a talent.&amp;quot;,
				enable	= true,
			},
			{ 	name	= &amp;quot;Fade&amp;quot;,
				tooltip = &amp;quot;When enabled; Will automatically use Fade whenever you gain aggro or damage when Glyphed.&amp;quot;,
				enable	= true,
			},
		},
	}
	
	local Offensive = {
		name	= &amp;quot;Offensive Settings&amp;quot;,
		author	= &amp;quot;Soapbox&amp;quot;,
		abilities = {
			{ 	name	= &amp;quot;Combat Pause&amp;quot;,
			    tooltip = &amp;quot;Toggle the profile to pause automatically when not engaged in combat.&amp;quot;,
				enable	= true,
			},
							{ 	name	= &amp;quot;Spell Queue Type&amp;quot;,
			    tooltip = &amp;quot;Allows you to enable and select how you want Spell Queue overriding to work. It will either queue up the spell on the next GCD when you mouseover or click the ability.&amp;quot;,
				enable	= true,
				newSection  = true,
				widget	= { type = &amp;quot;select&amp;quot;,
					tooltip = &amp;quot;Select how you want to queue the next spell.&amp;quot;,
					values	= {
						&amp;quot;Click&amp;quot;,
						&amp;quot;Mouseover&amp;quot;,
					},
					width	= 80,
				},
				},
							{ 	name	= &amp;quot;Auto Target Next Enemy&amp;quot;,
					enable	= true,
				},
			{ 	name	= &amp;quot;Potion&amp;quot;,
			    tooltip = &amp;quot;Toggle the use of Potion of the Jade Serpent under Raid haste effects.&amp;quot;,
				enable	= true,
				newSection  = true,
			},
			{ 	name	= &amp;quot;Racials&amp;quot;,
				enable	= true,
			},
			{ 	name	= &amp;quot;Frag Belt&amp;quot;,
				enable	= true,
			},
			{ 	name	= &amp;quot;Shadowfiend&amp;quot;,
			    tooltip = &amp;quot;Toggle the automatic usage of Shadowfiend.&amp;quot;,
				enable	= true,
			},
			{ 	name	= &amp;quot;Automatic Power Infusion&amp;quot;,
			    tooltip = &amp;quot;Toggle the automatic usage of Power Infusion.&amp;quot;,
				enable	= true,
			},
			{ 	name	= &amp;quot;Automatic Tier 6 Talent&amp;quot;,
			    tooltip = &amp;quot;Toggle the automatic usage of your selected Level 90 talent.&amp;quot;,
				enable	= true,
			},
			{ 	name	= &amp;quot;Boss Cooldown&amp;quot;,
			    tooltip = &amp;quot;Toggle the use of cooldowns on boss targets only.&amp;quot;,
				enable	= true,
				newSection  = true,
			},
			{ 	name	= &amp;quot;Focus Dotting&amp;quot;,
			    tooltip = &amp;quot;Toggle Automatic dotting of the focus target.&amp;quot;,
				enable	= true,
				newSection  = true,
			},
			{ 	name	= &amp;quot;Boss Dotting&amp;quot;,
			    tooltip = &amp;quot;Toggle the Automatic dotting of all boss targets you&amp;apos;re currently engaged with.&amp;quot;,
				enable	= true,
			},
			{ 	name	= &amp;quot;Mouseover Dotting&amp;quot;,
			    tooltip = &amp;quot;Toggle Automatic dotting of the mouseover target.&amp;quot;,
				enable	= true,
			},
			{ 	name	= &amp;quot;Mind Flay&amp;quot;,
				enable	= true,
				newSection  = true,
				widget	= { type = &amp;quot;numBox&amp;quot;,
					value	= 3,
					step	= 1,
					max		= 3,
					tooltip	= &amp;quot;How many ticks before a spell can interrupt mind flay.&amp;quot;,
				},
			},
			{ 	name	= &amp;quot;Mind Flay Insanity&amp;quot;,
				enable	= true,
				widget	= { type = &amp;quot;numBox&amp;quot;,
					value	= 3,
					step	= 1,
					max		= 3,
					tooltip	= &amp;quot;How many ticks before a spell can interrupt Mind Flay (Insanity.&amp;quot;,
				},
			},
			{ 	name	= &amp;quot;Double Shadow Word Death&amp;quot;,
			    tooltip = &amp;quot;Deterimes wether SW:D is used twice or if one charge is saved for movement.&amp;quot;,
				enable	= true,
			},
		},
	}
	SOAPBOX_SHADOW_DEF = PQI:AddRotation(Defensive)
	SOAPBOX_SHADOW_OFF = PQI:AddRotation(Offensive)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---3a. Macro Table---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-------------------------------------------------------------------
--------------------------Macros Table-----------------------------
-------------------------------------------------------------------

  PQR_InterruptDelay =  0

	--------------------
	-- Register CVars --
	--------------------
	Nova_ValueCheck = {
		{	Var1 = nil,	Text = &amp;quot;Toggles&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;Cooldowns&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Cleave&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;AOE&amp;quot;,					Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Dispersion&amp;quot;,			Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;TierSix&amp;quot;, 				Var2 = 1		},	
		{	Var1 = 0,	Text = &amp;quot;Mass&amp;quot;,					Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Symbiosis&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;TierOne&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Dispel&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Hymn&amp;quot;,					Var2 = 1		}
	}		

	-----------------------------------------------
	-- Registering the CVars for the CustomFrame --
	-----------------------------------------------
	for i=1, #Nova_ValueCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text) == nil then 
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1) 
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text..&amp;apos;_Enabled&amp;apos;) == nil then 
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;)..&amp;apos;_Enabled&amp;apos;, Nova_ValueCheck[i].Var2) 
		end
	end


-- Latency Adjuster
local minValue = 0.05
local maxValue = 0.3
local curPing = tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000) + .025

if curPing &amp;lt; minValue then
	curPing = minValue
elseif curPing &amp;gt; maxValue then
	curPing = maxValue
end

PQR_SpellAvailableTime = curPing

----------------------------
-- To Integer from String --
----------------------------
for i=1, #Nova_ValueCheck do
	if Nova_ValueCheck[i].Var1 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)] = tonumber(GetCVar(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)))
	end
	if Nova_ValueCheck[i].Var2 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;Check&amp;apos;] = GetCVarBool(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;_Enabled&amp;apos;)
	end
end

--------------------
-- Slash Commands --
--------------------

---------------------------------------------------------------------------------------------------
----------------------------- Big Thanks to Ninjaderp for Color Coding ----------------------------
---------------------------------------------------------------------------------------------------

if SlashMacros == nil then
	SlashMacros = true
	
	SLASH_COOLDOWNS1 = &amp;quot;/cooldowns&amp;quot;
	SLASH_COOLDOWNS2 = &amp;quot;/cooldown&amp;quot;
	function SlashCmdList.COOLDOWNS(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Cooldowns&amp;quot;) then
			xrn:message(&amp;quot;|cff9F82A2Cooldowns - Active.&amp;quot;)
			SetCVar(&amp;quot;Nova_Cooldowns&amp;quot;, 1)
		else			
			xrn:message(&amp;quot;|cff9920D0Cooldowns - Inactive.&amp;quot;)
			SetCVar(&amp;quot;Nova_Cooldowns&amp;quot;, 0)
		end
	end
	SLASH_CLEAVE1 = &amp;quot;/cleave&amp;quot;
	function SlashCmdList.CLEAVE(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Cleave&amp;quot;) then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Cleave&amp;quot;,nil,&amp;quot;0fffff&amp;quot;)
			xrn:message(&amp;quot;\124cA69D1CFFCleave Rotation&amp;quot;)
			SetCVar(&amp;quot;Nova_Cleave&amp;quot;, 1)
			SetCVar(&amp;quot;Nova_AOE&amp;quot;, 0)
		else
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;)
		xrn:message(&amp;quot;\124cFFD4D4D4Single target Rotation&amp;quot;)
		SetCVar(&amp;quot;Nova_Cleave&amp;quot;, 0)
		end
	end		
	
	SLASH_AOE1 = &amp;quot;/aoe&amp;quot;
	function SlashCmdList.AOE(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_AOE&amp;quot;) then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;AOE&amp;quot;,nil,&amp;quot;0698FF&amp;quot;)
			xrn:message(&amp;quot;\124cFF3BB0FFArea of Effect Rotation&amp;quot;)
			SetCVar(&amp;quot;Nova_AOE&amp;quot;, 1)
			SetCVar(&amp;quot;Nova_Cleave&amp;quot;, 0)
		else
			PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;)
			xrn:message(&amp;quot;\124cFFD4D4D4Single target Rotation&amp;quot;) 
			SetCVar(&amp;quot;Nova_AOE&amp;quot;, 0)
		end
	end
	SLASH_DISP1 = &amp;quot;/dispersion&amp;quot;
	function SlashCmdList.DISP(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Dispersion&amp;quot;) then
			xrn:message(&amp;quot;\124cE96E22FFDispersion - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Dispersion&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124c853402D4Dispersion - Canceled.&amp;quot;) 
			SetCVar(&amp;quot;Nova_Dispersion&amp;quot;, 0)
		end
	end
	SLASH_TIERSIX1 = &amp;quot;/tiersix&amp;quot;
	function SlashCmdList.TIERSIX(msg, editbox)
	if not PQI_SoapboxOffensiveSettings_AutomaticTier6Talent_enable then
		if not GetCVarBool(&amp;quot;Nova_TierSix&amp;quot;) then
			xrn:message(&amp;quot;\124c1E7DEAFFTier 6 Talent - Enabled.&amp;quot;)
			SetCVar(&amp;quot;Nova_TierSix&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124c093F7D0FTier 6 Talent - Disabled.&amp;quot;)
			SetCVar(&amp;quot;Nova_TierSix&amp;quot;, 0)
		end
	end
	end
		SLASH_MASS1 = &amp;quot;/mass&amp;quot;
	function SlashCmdList.MASS(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Mass&amp;quot;) then
			xrn:message(&amp;quot;\124c1E7DEAFFMass Dispel (mouseover) - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Mass&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124c093F7D0FMass Dispel (mouseover) - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Mass&amp;quot;, 0)
		end
	end
			SLASH_SYM1 = &amp;quot;/symbiosis&amp;quot;
	function SlashCmdList.SYM(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Symbiosis&amp;quot;) then
			xrn:message(&amp;quot;\124c1E7DEAFFTranqiliy - Queued DONT MOVE!.&amp;quot;)
			SetCVar(&amp;quot;Nova_Symbiosis&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124c093F7D0FTranquility - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Symbiosis&amp;quot;, 0)
		end
	end
			SLASH_TIERONE1 = &amp;quot;/tierone&amp;quot;
	function SlashCmdList.TIERONE(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_TierOne&amp;quot;) then
			xrn:message(&amp;quot;\124c1E7DEAFFTier One Talent - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_TierOne&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124c093F7D0FTier One Talent - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_TierOne&amp;quot;, 0)
		end
	end
	SLASH_DISPEL1 = &amp;quot;/dispel&amp;quot;
	function SlashCmdList.DISPEL(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Dispel&amp;quot;) then
			xrn:message(&amp;quot;\124c1E7DEAFFDispel (Mouseover) - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Dispel&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124c093F7D0FDispel (Mouseover) - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Dispel&amp;quot;, 0)
		end
	end
	SLASH_HYMN1 = &amp;quot;/hymn&amp;quot;
	function SlashCmdList.HYMN(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Hymn&amp;quot;) then
			xrn:message(&amp;quot;\124c1E7DEAFFHymn of Hope - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Hymn&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124c093F7D0FHymn of Hope - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Hymn&amp;quot;, 0)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---4. Success---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CombatLog == nil then
    BuBa_CombatLog = CreateFrame(&amp;apos;Frame&amp;apos;)
    BuBa_CombatLog:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)

 function OnSuccessfulCast(self, event, ...)
  local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
  if (event==&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;) then
            if (type==&amp;quot;SPELL_CAST_SUCCESS&amp;quot;) 
             or (type==&amp;quot;SPELL_CAST_START&amp;quot;) then
                if sourceGUID == UnitGUID(&amp;quot;player&amp;quot;) then
		if select(12, ...) == 47585 then
		SetCVar(&amp;quot;Nova_Dispersion&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Dispersion: \124cFFE61515Casted&amp;quot;) 
		elseif select(12, ...) == 113277 and Nova_Symbiosis == 1 then
		SetCVar(&amp;quot;Nova_Symbiosis&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Tranquility: \124cFFE61515Casted&amp;quot;)
		elseif (select(12, ...) == 108920 or select(12, ...) == 605 or select(12, ...) == 108921) and Nova_TierOne == 1 then
		SetCVar(&amp;quot;Nova_TierOne&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Tier 1 Talent: \124cFFE61515Casted&amp;quot;)
		elseif select(12, ...) == 32375 and Nova_Mass == 1 then
		SetCVar(&amp;quot;Nova_Mass&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Mass Dispel: \124cFFE61515Casted&amp;quot;)
		elseif select(12, ...) == 64901 and Nova_Hymn == 1 then
		SetCVar(&amp;quot;Nova_Hymn&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Hymn of Hopel: \124cFFE61515Casted&amp;quot;)
		elseif select(12, ...) == 528 and Nova_Dispel == 1 then
		SetCVar(&amp;quot;Nova_Dispel&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Dispel Magic: \124cFFE61515Casted&amp;quot;)
      end
     end
    end
   end
  end

 BuBa_CombatLog:SetScript(&amp;apos;OnEvent&amp;apos;, OnSuccessfulCast)

    CombatLog = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Shadow Word: Death -High-</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo

if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if not PQR_SpellAvailable(32379) then return false end

if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,2944,&amp;quot;PLAYER&amp;quot;) then return false end
end

if Orbs &amp;gt; 2 and PQR_SpellAvailable(2944) and Nova_Cooldowns == 1 then return false end

-- We can&amp;apos;t activate above 20% HP anyway..
if Targethealth &amp;gt; 20 then return false end


if TargetValidation(&amp;quot;target&amp;quot;,32379) then return true end</Lua><RecastDelay>8000</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Channeling---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(113277) 
or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(740) 
or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(64901) 
or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(139869) 
or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(139867) 
or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(138763) 
then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Blast (Moving)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Mind Blast is on a CD
if not PQR_SpellAvailable(8092) then return false end

-- If we have 3 Shadow Orbs, don&amp;apos;t cast Mind Blast if we&amp;apos;re not saving DP
if Orbs &amp;gt; 2 and PQR_SpellAvailable(2944) and Nova_Cooldowns == 1 then return false end

if Playermana &amp;lt; 3 then return false end

if PQR_IsMoving(0.3) and not Flying() then 
	if UnitBuffID(&amp;quot;player&amp;quot;,124430) then
		if TargetValidation(&amp;quot;target&amp;quot;, 8092) then
		CastSpellByName(GetSpellInfo(8092),&amp;quot;target&amp;quot;) return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Mind Blast *WAIT*</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end

if Nova_Cleave == 1 then return false end

if MBCD &amp;lt; 0.5 then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- SWD *WAIT*</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end

if Nova_Cleave == 1 or Nova_AOE == 1 then return false end

if SWDCD &amp;lt; 0.5 and Targethealth &amp;lt; 20 then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Shadow Word: Death (Moving)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local TargetValidation = TargetValidation


if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if not PQR_SpellAvailable(32379) then return false end

-- We can&amp;apos;t activate above 20% HP anyway..
if Targethealth &amp;gt; 20 then return false end

if PQR_IsMoving(0.3) and not Flying() then
	if TargetValidation(&amp;quot;target&amp;quot;,32379) then
	CastSpellByName(GetSpellInfo(32379),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Dispel (Mouseover)</Name><Default>false</Default><SpellID>528</SpellID><Actions></Actions><Lua>if Nova_Dispel ~= 1 then return false end
if not UnitExists(&amp;quot;mouseover&amp;quot;) then return false end
if not UnitIsFriend(&amp;quot;mouseover&amp;quot;,&amp;quot;player&amp;quot;) then return false end

if PQR_SpellAvailable(528) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Hymn of Hope</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsFalling() or PQR_IsMoving(0.1) or IsFlying() then return false end
if Nova_Hymn ~= 1 then return false end
if PQR_SpellAvailable(64901) then
	CastSpellByName(GetSpellInfo(64901),nil) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Tier 6 Talent (AOE)</Name><Default>false</Default><SpellID>0</SpellID><Actions>/use 13|/use 14</Actions><Lua>local smartCancel = smartCancel
if Nova_AOE ~= 1 then return false end


-- Don&amp;apos;t double tap if we have Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,2944,&amp;quot;PLAYER&amp;quot;) then return false end
end

-- Properly clip Mind Flay / Insanity
if not smartCancel() then return false end

if PQI_SoapboxOffensiveSettings_AutomaticTier6Talent_enable then
	-- Halo
	if IsPlayerSpell(120517) and PQR_SpellAvailable(120644) then
		CastSpellByName(GetSpellInfo(120644),&amp;quot;target&amp;quot;) return true
	end
	
	-- Divine Star
	if IsPlayerSpell(110744) and PQR_SpellAvailable(110744) then
		CastSpellByName(GetSpellInfo(110744),&amp;quot;target&amp;quot;) return true
	end
	
	-- Cascade
	if IsPlayerSpell(121135)
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(121135)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
 	then CastSpellByName(GetSpellInfo(121135),&amp;quot;target&amp;quot;) return true end
elseif not PQI_SoapboxOffensiveSettings_AutomaticTier6Talent_enable then 
	if Nova_TierSix == 1 then
		if IsPlayerSpell(120517)
			and PQR_SpellAvailable(120644)
			then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(120644),&amp;quot;target&amp;quot;) return true end
	
	-- Divine Star
		if IsPlayerSpell(110744)
			and PQR_SpellAvailable(110744)
			then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(110744),&amp;quot;target&amp;quot;) return true end
	
	-- Cascade
		if IsPlayerSpell(121135)
			and UnitExists(&amp;quot;target&amp;quot;)
			and PQR_SpellAvailable(121135)
			and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
		then SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(121135),&amp;quot;target&amp;quot;) return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- UVLS VT</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local Soapbox_CastCheck = Soapbox_CastCheck
local VT = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,34914,&amp;quot;PLAYER&amp;quot;))
local VT2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(34914) then return false end
-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) then return false end


if TargetValidation(&amp;quot;target&amp;quot;,34914) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
		if VT then
			for i=1,#DoTs do
				if DoTs[i].guid == id and DoTs[i].spellID == 34914 then
					if Nova_Cleave == 1 then return false end
					if Soapbox_CastCheck(34914, 138963) then return false end
					if DoTs[i].crit == false then
						if (VT - GetTime() &amp;lt;= VT2 / 2) 
						or (VT - GetTime() &amp;lt; 13 and Hasted()) then
						CastSpellByName(GetSpellInfo(34914),&amp;quot;target&amp;quot;) return true end
					end
					if DoTs[i].crit == true then
						if (VT - GetTime() &amp;lt;= VT2 / 2) 
						or (VT - GetTime() &amp;lt; 13 and Hasted()) then
							CastSpellByName(GetSpellInfo(34914),&amp;quot;target&amp;quot;) return true
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(34914),&amp;quot;target&amp;quot;) return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- UVLS VT (Boss)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local VT2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)
-- Can&amp;apos;t cast while moving yet!
if PQR_IsMoving(0.3) and not Flying() then return false end
-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(34914) then return false end
if not PQI_SoapboxOffensiveSettings_AutoBossDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

for i=1,4 do
	local bossUnit = &amp;quot;boss&amp;quot;..i
	PQR_CustomTarget = bossUnit
	local VT = select(7,UnitDebuffID(bossUnit,34914,&amp;quot;PLAYER&amp;quot;))
	
	-- Let&amp;apos;s try and detect immunities
	if UnitBuffID(bossUnit,116994) or UnitBuffID(bossUnit,122540) or UnitBuffID(bossUnit,123250) or UnitBuffID(bossUnit,106062) or UnitBuffID(bossUnit,110945)
		then return false end
	
	if TargetValidation(bossUnit,34914) then
		local id = UnitGUID(bossUnit)
		if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
			if VT then
				for i=1,#DoTs do
					if DoTs[i].guid == id and DoTs[i].spellID == 34914 then
						if Nova_Cleave == 1 then return false end
						if DoTs[i].crit == false then
						if (VT - GetTime() &amp;lt;= VT2 / 2) 
						or (VT - GetTime() &amp;lt; 13 and Hasted()) then
							CastSpellByName(GetSpellInfo(34914),bossUnit) return true end
						end
						if DoTs[i].crit == true then
							if (VT - GetTime() &amp;lt;= VT2 / 2) 
							or (VT - GetTime() &amp;lt; 13 and Hasted()) then
								CastSpellByName(GetSpellInfo(34914),bossUnit) return true
							end
						end
					end
				end
			else CastSpellByName(GetSpellInfo(34914),bossUnit) return true end
		end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- UVLS SW:P</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,589,&amp;quot;PLAYER&amp;quot;))
local SWP2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(589) then return false end


if TargetValidation(&amp;quot;target&amp;quot;,589) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	if UnitBuffID(&amp;quot;player&amp;quot;,138963) then	
		if SWP then
		
			for i=1,#DoTs do
				if DoTs[i].guid == id and DoTs[i].spellID == 589 then
					if Nova_Cleave == 1 then CastSpellByName(GetSpellInfo(589),&amp;quot;target&amp;quot;) return true end
					if DoTs[i].crit == false then CastSpellByName(GetSpellInfo(589),&amp;quot;target&amp;quot;) return true end
					if DoTs[i].crit == true then
						if (SWP - GetTime() &amp;lt;= SWP2 / 2) 
						or (SWP - GetTime() &amp;lt;= 16 and Hasted()) then
							CastSpellByName(GetSpellInfo(589),&amp;quot;target&amp;quot;) return true
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(589),&amp;quot;target&amp;quot;) return true end
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- UVLS SW:P (Boss)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local SWP2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(589) then return false end
if not PQI_SoapboxOffensiveSettings_BossDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

for i=1,4 do
	local bossUnit = &amp;quot;boss&amp;quot;..i
	local SWP = select(7,UnitDebuffID(bossUnit,589,&amp;quot;PLAYER&amp;quot;))
	
	-- Let&amp;apos;s try and detect immunities
	if UnitBuffID(bossUnit,116994) or UnitBuffID(bossUnit,122540) or UnitBuffID(bossUnit,123250) or UnitBuffID(bossUnit,106062) or UnitBuffID(bossUnit,110945)
		then return false end
	
	if TargetValidation(bossUnit,589) then
		local id = UnitGUID(bossUnit)
		if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
			if SWP then
				for i=1,#DoTs do
					if DoTs[i].guid == id and DoTs[i].spellID == 589 then
						if Nova_Cleave == 1 then CastSpellByName(GetSpellInfo(589),bossUnit) return true end
						
						if DoTs[i].crit == false then CastSpellByName(GetSpellInfo(589),bossUnit) return true end
						if DoTs[i].crit == true then
							if (SWP - GetTime() &amp;lt;= SWP2 / 2) 
							or (SWP - GetTime() &amp;lt;= 16 and Hasted()) then
								CastSpellByName(GetSpellInfo(589),bossUnit) return true
							end
						end
					end
				end
			else CastSpellByName(GetSpellInfo(589),bossUnit) return true end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- UVLS SW:P (Focus)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;focus&amp;quot;,589,&amp;quot;PLAYER&amp;quot;))
local SWP2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(589) then return false end
if not PQI_SoapboxOffensiveSettings_FocusDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;focus&amp;quot;,589) then
	local id = UnitGUID(&amp;quot;focus&amp;quot;)
	
	if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
		if SWP then
			for i=1,#DoTs do
				if DoTs[i].guid == id and DoTs[i].spellID == 589 then
					if DoTs[i].crit == false then CastSpellByName(GetSpellInfo(589),&amp;quot;focus&amp;quot;) return true end
					if DoTs[i].crit == true then
						if (SWP - GetTime() &amp;lt;= SWP2 / 2) 
						or (SWP - GetTime() &amp;lt;= 16 and Hasted()) then
							CastSpellByName(GetSpellInfo(589),&amp;quot;focus&amp;quot;) return true
						end
					end
				end
			end		
		else CastSpellByName(GetSpellInfo(589),&amp;quot;focus&amp;quot;) return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- UVLS SW:P (Mouseover)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local smartCancel = smartCancel
local SoapboxPower = SoapboxPower
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;mouseover&amp;quot;,589,&amp;quot;PLAYER&amp;quot;))
local SWP2 = Round(PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Shadow Word: Pain is not available
if not PQR_SpellAvailable(589) then return false end
if not PQI_SoapboxOffensiveSettings_MouseoverDotting_enable then return false end

-- Properly clip Mind Flay / Insanity
if Nova_Cleave ~= 1 then
	if not smartCancel() then return false end
end

if TargetValidation(&amp;quot;mouseover&amp;quot;,589) then
	local id = UnitGUID(&amp;quot;mouseover&amp;quot;)
	
	if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
		if SWP then
			for i=1,#DoTs do
				if DoTs[i].guid == id and DoTs[i].spellID == 589 then	
					if DoTs[i].crit == false then CastSpellByName(GetSpellInfo(589),&amp;quot;mouseover&amp;quot;) return true end
					if DoTs[i].crit == true then
						if (SWP - GetTime() &amp;lt;= SWP2 / 2) 
						or (SWP - GetTime() &amp;lt;= 16 and Hasted()) then
							CastSpellByName(GetSpellInfo(589),&amp;quot;mouseover&amp;quot;) return true
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(589),&amp;quot;mouseover&amp;quot;) return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Shadow- Queue</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxOffensiveSettings_SpellQueueType_enable then return false end
local v=PQI_SoapboxOffensiveSettings_SpellQueueType_value or 1

if v == 1 then
	if IsMouseButtonDown() and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if GetMouseFocus():GetName() ~= nil then
			SpellCancelQueuedSpell()
			RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
		end
	end
elseif v == 2 then
	if GetMouseFocus():GetName() ~= nil and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		SpellCancelQueuedSpell()
		RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Auto Target</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxOffensiveSettings_AutoTargetNextEnemy_enable then return false end

if (UnitExists(&amp;quot;Target&amp;quot;) == nil 
or (UnitExists(&amp;quot;Target&amp;quot;) and UnitIsDead(&amp;quot;Target&amp;quot;)))
and UnitAffectingCombat(&amp;quot;Player&amp;quot;)
then TargetNearestEnemy() end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-All- Immune Bosses</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Let&amp;apos;s try and detect immunities
if UnitBuffID(&amp;quot;target&amp;quot;,116994) or UnitBuffID(&amp;quot;target&amp;quot;,122540) or UnitBuffID(&amp;quot;target&amp;quot;,123250) or UnitBuffID(&amp;quot;target&amp;quot;,106062) or UnitBuffID(&amp;quot;target&amp;quot;,110945)
	then return false end
	
-- Cancel spell casts or channels on Silences
if UnitExists(&amp;quot;boss1&amp;quot;) or UnitExists(&amp;quot;target&amp;quot;) then
	if UnitCastingInfo(&amp;quot;boss1&amp;quot;) == GetSpellInfo(138763) or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137457) then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) or UnitChannelInfo(&amp;quot;player&amp;quot;) then RunMacroText(&amp;quot;/stopcasting&amp;quot;) return false end
		return true
	end
end
	
-- Twin Consorts (Immune while channeling Nuclear Inferno and Tidal Force)
if UnitChannelInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137531) or UnitChannelInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137491) or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(138763)
	then return false end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PRIEST>