<?xml version="1.0" encoding="utf-8" ?><PRIEST><Ability><Name>-- Init --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Queue System
SLASH_VQUEUE1 = &amp;quot;/vqueue&amp;quot;
function SlashCmdList.VQUEUE(msg, editbox)		
	local spellid, unit = msg:match(&amp;quot;^(%S*)%s*(.-)$&amp;quot;);
	if tonumber(spellid) ~= nil and unit ~= &amp;quot;&amp;quot; then 			
		if not UnitExists(tostring(unit)) and unit ~= &amp;quot;tank&amp;quot; and unit ~= &amp;quot;low&amp;quot; and unit ~= &amp;quot;aoe5&amp;quot; and unit ~= &amp;quot;aoe10&amp;quot; and unit ~= &amp;quot;aoe15&amp;quot; and unit ~= &amp;quot;aoe20&amp;quot; and unit ~= &amp;quot;aoe25&amp;quot; and unit ~= &amp;quot;aoe30&amp;quot; then			
			PQR_WriteToChat(&amp;quot;unit not exist&amp;quot;);
		elseif not IsSpellKnown(tonumber(spellid)) then
			PQR_WriteToChat(&amp;quot;spell unknown&amp;quot;);
		else
			if not Queue_Spell then
				Queue_Spell = { }	
			end				
			table.insert(Queue_Spell, { Unit = unit, SpellID = spellid, Time = GetTime() } )
		end
	else
		PQR_WriteToChat(&amp;quot;Syntax: /vqueue spellid unit&amp;quot;);
	end
end	

if PQR_RotationStarted == true then
	-- Should be reloaded every time you reload Profile (No more needing to /rl)
 	-- Only takes full effects when we&amp;apos;re 90
 	if UnitLevel(&amp;quot;player&amp;quot;) ~= 90 then
 		PQR_WriteToChat(&amp;quot;\124cFFFF55FFWarning: only takes full effect when we&amp;apos;re 90!&amp;quot;)		
 	end	
	PQR_RotationStarted = false

	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Holy Priest Profile Verion - 2.2.11&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
	PQR_SwapCheckTimer = 0

	--Begin PQI
--	if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
		PQInterfaceLoaded = true
--		PQInterfaceVersion = (2.22)
--		if PQInterfaceVersion &amp;gt;= 2.22 then
			PQInterfaceUpdated = true
--		else 
--			PQInterfaceUpdated = nil 
--			PQR_WriteToChat(&amp;quot;Your PQI is not up to date. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
--			PQR_StopRotation()
--			return true					
--		end
--	else 
--		PQInterfaceLoaded = nil 
--		PQR_WriteToChat(&amp;quot;Please download the latest version of PQI. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
--		PQR_StopRotation()
--		return true				
--	end
		-- Load Data File
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Vachiusa_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_Vachiusa_Data.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == true then
			PQInterfaceDataLoaded = true
		else 
			PQInterfaceDataLoaded = false 
			PQR_WriteToChat(&amp;quot;You are missing PQR_PQI.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true		
		end		
	end	
	
	if not PQI_General_Holy_Priest_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 	
		local config = {
			name	= &amp;apos;General Holy Priest&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {
				-- General --
				{	name = &amp;quot;Auto Open PQI Options&amp;quot;,
					tooltip = &amp;quot;Auto Opens PQI Options for you, will only happen once per login.&amp;quot;,
					enable = true,
				},
				{	name = &amp;quot;54 Events&amp;quot;,
					tooltip = &amp;quot;Enables the use of 5.4 boss specific mechanics&amp;quot;,
					enable = true,
				},				
				{	name = &amp;quot;53 Events&amp;quot;,
					tooltip = &amp;quot;Enables the use of 5.3 boss specific mechanics&amp;quot;,
					enable = false,
				},
				{ 	name = &amp;quot;4x Events&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of 4.x boss specific mechanics&amp;quot;,
				},
				{ 	name = &amp;quot;Special Events&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of special events mechanics (Providing Ground...)&amp;quot;,
				},	
				{ 	name = &amp;quot;Auto Event Dispel&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of dispel on special events mechanics&amp;quot;,
				},								
				{ 	name = &amp;quot;Queue Sys&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of auto dispel for Queue System&amp;quot;,
				},					
				{ 	name = &amp;quot;Auto Target&amp;quot;,
					enable = true,
					tooltip = &amp;quot;If you dont have a target it will target your focus target&amp;quot;,
				},
				{ 	name = &amp;quot;Mind bender&amp;quot;,	
					enable = true,
					tooltip = &amp;quot;Enables the use of Mind bender&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 80,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of Mana to use Mind bender at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Solace Insanity&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Solace Insanity&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 100,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of Mana to use Solace Insanity at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;DPS&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables DPS&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 90,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of minimum raid members HP to DPS at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Purify&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Purify&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 50,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Purify at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Fade&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Will use Fade when you get aggro&amp;quot;,
				},
				{ 	name = &amp;quot;Inner&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Auto switch Inner Will and Inner Fire&amp;quot;,
				},	
				{ 	name = &amp;quot;Chakra Sanctuary AOE&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Auto switch Chakra: Sanctuary state when use AOE healing spell&amp;quot;,
				},							
				{ 	name = &amp;quot;Racials&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Racials&amp;quot;,
				},								
				{ 	name = &amp;quot;Target Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Target Heal priority&amp;quot;,
				},											
				{ 	name = &amp;quot;Mouseover Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Mouseover Heal priority&amp;quot;,
				},	
				{ 	name = &amp;quot;NPC Mouseover Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of NPC Mouseover Heal priority&amp;quot;,
				},				
				{ 	name = &amp;quot;Pet Heal&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Pet Heal&amp;quot;,
				},			
				{ 	name = &amp;quot;Stop Casting&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Stop Casting&amp;quot;,
				},									
				{ 	name = &amp;quot;V debug&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Vachiusa debug&amp;quot;,
				},							
			},
			hotkeys = {
			},
		}
		PQI_General_Holy_Priest_GUI_Loaded = PQI:AddRotation(config)
	end
	
	if not PQI_CD_Holy_Priest_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 
		local config = {
			name	= &amp;apos;CD Holy Priest&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {									
				-- CD&amp;apos;s --
				{ 	name = &amp;quot;Prayer Of Healing&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Prayer Of Healing&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Prayer Of Healing at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Prayer Of Healing Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 2,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Prayer Of Healing at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Divine Hymn&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Divine Hymn&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 60,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to auto use Divine Hymn at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Divine Hymn Limit&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 5,
						step = 1,
						max = 40,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members to use Divine Hymn at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Cascade&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Cascade&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Cascade at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Cascade Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Cascade at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Halo&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Halo&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Halo at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Halo Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Halo at&amp;quot;,
					},
				},		
				{ 	name = &amp;quot;Divine Star&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Divine Star&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Divine Star at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Divine Star Limit&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Divine Star at&amp;quot;,
					},
				},							
				{ 	name = &amp;quot;Circle Of Healing&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Circle Of Healing&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Circle Of Healing at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Circle Of Healing Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 2,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Circle Of Healing at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Desperate Prayer&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Desperate Prayer&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Desperate Prayer at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Hymn Of Hope&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Hymn Of Hope&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of Mana to use Hymn Of Hope at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Guardian Spirit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Guardian Spirit&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 30,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Pain Suppression at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Void Shift&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Void Shift&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 25,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of target HP to use Void Shift at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Self Void Shift&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 90,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of healer HP to use Void Shift at&amp;quot;,
					},
				},					
			},
			hotkeys = {
			},
		}
		PQI_CD_Holy_Priest_GUI_Loaded = PQI:AddRotation(config)
	end
	
	if not PQI_Healing_Holy_Priest_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 
		local config = {
			name	= &amp;apos;Healing Holy Priest&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {												
				-- Healing --
				{ 	name = &amp;quot;Renew&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Renew&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Renew at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Renew Tank&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Renew on Tanks&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 99,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Renew on Tanks at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Flash Heal&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Flash Heal&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Flash Heal at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Greater Healing&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Greater Healing&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 60,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Greater Healing at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Heal&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Heal&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 80,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Heal at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;HolyWord Serenity&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of HolyWord:Serenity&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 75,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use HolyWord:Serenity at&amp;quot;,
					},
				},					
				{ 	name = &amp;quot;Binding Heal&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Binding Heal&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 40,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of target HP to use Binding Heal at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Self Binding Heal&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 70,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of healer HP to use Binding Heal at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Prayer Of Mending&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Prayer Of Mending&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 100,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Prayer Of Mending at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;PowerWord Shield&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of PowerWord:Shield&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 40,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use PowerWord:Shield at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Tank Flask Heal&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Flask Heal on Tanks&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 30,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Flask Heal on Tanks at&amp;quot;,
					},
				},				
			},
			hotkeys = {
				{	name = &amp;quot;Pause Rotation&amp;quot;,		enable = true,	hotkeys = {&amp;apos;ls&amp;apos;},	},
				{	name = &amp;quot;Divine Hymn&amp;quot;,			enable = true,	hotkeys = {&amp;apos;rs&amp;apos;},	
					tooltip = &amp;quot;Pop Divine Hymn&amp;quot;, },
				{	name = &amp;quot;HolyWord Sanctuary&amp;quot;,		enable = true,	hotkeys = {&amp;apos;lc&amp;apos;},
					tooltip = &amp;quot;Use HolyWord:Sanctuary at mouseover&amp;quot;, },
				{	name = &amp;quot;DPS Only&amp;quot;,			enable = false,	hotkeys = {&amp;apos;la&amp;apos;},	
					tooltip = &amp;quot;Use DPS Only mod switch&amp;quot;, },
				{	name = &amp;quot;Drop At Mouseover&amp;quot;,			enable = false,	hotkeys = {&amp;apos;la&amp;apos;},	
					tooltip = &amp;quot;Auto use Lightwell or Holy Word: Sanctuary at mouseover - mod switch&amp;quot;, },					
				{	name = &amp;quot;Mass Dispel&amp;quot;,			enable = true,	hotkeys = {&amp;apos;ra&amp;apos;},	
					tooltip = &amp;quot;Use MassDispel at mouseover&amp;quot;, },
				{	name = &amp;quot;Lightwell&amp;quot;,		enable = true,	hotkeys = {&amp;apos;rc&amp;apos;},	
					tooltip = &amp;quot;Use Lightwell at mouseover&amp;quot;, },	
				{	name = &amp;quot;Hymn Of Hope&amp;quot;,		enable = true,	hotkeys = {&amp;apos;ls&amp;apos;, &amp;apos;ra&amp;apos;},	
					tooltip = &amp;quot;Pop Hymn of Hope&amp;quot;, },					
				{	name	= &amp;quot;Adding Players CT&amp;quot;,		enable	= true,	hotkeys	= {&amp;apos;ls&amp;apos;, &amp;apos;la&amp;apos;},
					tooltip = &amp;quot;Adding Players to Custom Table&amp;quot;, },	
				{	name	= &amp;quot;Removing Players CT&amp;quot;,		enable	= true,	hotkeys	= {&amp;apos;ls&amp;apos;, &amp;apos;lc&amp;apos;},
					tooltip = &amp;quot;Removing Players from Custom Table&amp;quot;, },						
			},
		}
		PQI_Healing_Holy_Priest_GUI_Loaded = PQI:AddRotation(config)
	end
	--End PQI
		
	--------------------
	-- Slash Commands
	--------------------
	if GetCVar(&amp;quot;PQ_WipeCustomTable&amp;quot;) == nil then RegisterCVar(&amp;quot;PQ_WipeCustomTable&amp;quot;, 0) end
	if GetCVar(&amp;quot;PQ_UseCustomT&amp;quot;) == nil then RegisterCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0) end
	if GetCVar(&amp;quot;Nova_Recording&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_Recording&amp;quot;, 0) end
	
	SLASH_WIPETABLE1 = &amp;quot;/wipetable&amp;quot;
	SLASH_WIPETABLE2 = &amp;quot;/wipecustomtable&amp;quot;
	SLASH_WIPETABLE3 = &amp;quot;/wt&amp;quot;
	function SlashCmdList.WIPETABLE(msg, editbox)
		Nova_CustomT = { }
		if GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) then 
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0)
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Wiped Custom Table clean, and reverting to Normal Table.&amp;quot;)
			end
		else
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Wiped Custom Table clean.&amp;quot;)
			end
		end
	end
	
	SLASH_USECUSTOMT1 = &amp;quot;/usecustomt&amp;quot;
	SLASH_USECUSTOMT2 = &amp;quot;/uct&amp;quot;
	SLASH_USECUSTOMT3 = &amp;quot;/usecustomtable&amp;quot;
	function SlashCmdList.USECUSTOMT(msg, editbox)
		if not GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) and #Nova_CustomT &amp;gt; 0 then
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Enabling Custom Table&amp;quot;)
			end
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 1)
		else
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Enabling Normal Table&amp;quot;)
			end
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0)
		end
	end	

	-- Variables
	PQR_ResetMovementTime = 0.3
	PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)
	
	PQR_Spec = GetSpecialization()
	if PQR_Spec ~= 2 then
		PQR_WriteToChat(&amp;quot;You must be in Holy Spec. Please switch then try again.&amp;quot;, &amp;quot;Warning&amp;quot;)
		PQR_StopRotation()
		return true
	end
end

if PQR_IsMoving() then
	Nova_Moving = true
else
	Nova_Moving = false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Healing Engine --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Healing Engine --
if Nova_54EventsCheck then
	if not UnitDebuffID(&amp;quot;player&amp;quot;,144850) --Test of Reliance
	and not UnitDebuffID(&amp;quot;player&amp;quot;,142861) then --Ancient Miasma
		SheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_SpecialEvents, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true
	end
else
	SheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_SpecialEvents, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true	
end

if GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) then
	members = Nova_CustomT
	lowhpmembers = 0
	for i=1, #Nova_CustomT do
		if Nova_CustomT[i].HP &amp;lt; 80 then
			lowhpmembers = lowhpmembers + 1
		end
	end
	
	table.sort(members, function(x,y) return x.HP &amp;lt; y.HP end)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Stop Casting</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Stop Casting
if PQI_VachiusaGeneralHolyPriest_StopCasting_enable then
	if Nova_DPSOnlyCheck and DPSBurstMode then
		return false
	end
	if UnitExists(&amp;quot;boss1&amp;quot;) then
		local npcid = tonumber(UnitGUID(&amp;quot;boss1&amp;quot; ):sub(6,10), 16)
	else
		local npcid = 0
	end
	
	if SpellIsTargeting() then
		SpellStopCasting()
	elseif ((UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(2050)) --Heal
	or (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(585))) --Smite
	and (CalStop(members[1].Unit) &amp;lt; 40 or (lowhpmembers &amp;gt; 3 and CalStop(members[1].Unit) &amp;lt; 70)) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) 
	and IsUsableSpell(2061) --prevent stop loop
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 20 then
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting Heal/Smite2 - HP: &amp;quot; ..members[1].HP) 		
		return true 	
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(2050)) --Heal
	and IsSpellInRange(GetSpellInfo(2050),members[1].Unit) == 1
	and CalStop(members[1].Unit) &amp;gt; Nova_DPS and CalStop(members[1].Unit) &amp;gt; 95 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		SpellStopCasting() 	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Cast Heal - Name: &amp;quot; ..UnitName(members[1].Unit)..&amp;quot; - Current HP: &amp;quot;..CalStop(members[1].Unit)..&amp;quot; - overheal: &amp;quot;..select(2, CalStop(members[1].Unit)))	
		return true 
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(2060)) --GreaterHeal
	and IsSpellInRange(GetSpellInfo(2060),members[1].Unit) == 1
	and npcid ~= 62442 --Tsulong 
	and npcid ~= nil
	and CalStop(members[1].Unit) &amp;gt; Nova_GreaterHealing and CalStop(members[1].Unit) &amp;gt; Nova_DPS 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting GreaterHeal - HP: &amp;quot; ..members[1].HP) 		
		return true 
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(2061)) --FlashHeal
	and IsSpellInRange(GetSpellInfo(2061),members[1].Unit) == 1
	and npcid ~= 62442 --Tsulong 
	and npcid ~= nil
	and CalStop(members[1].Unit) &amp;gt; Nova_FlashHeal and CalStop(members[1].Unit) &amp;gt; Nova_DPS 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting FlashHeal - HP: &amp;quot; ..members[1].HP) 		
		return true 	
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(596)) --PrayerOfHealing
	and not UnitBuffID(&amp;quot;player&amp;quot;, 109964)
	and (CalStop(members[1].Unit) &amp;gt; 95 or (lowhpmembers &amp;lt; 3 and CalStop(members[1].Unit) &amp;gt; 90)) 
	and not UnitDebuffID(&amp;quot;player&amp;quot;,116260)
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting PrayerOfHealing - HP: &amp;quot; ..members[1].HP) 		
		return true 	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AutoTarget</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--AutoTarget
if Nova_AutoTargetCheck then
	if (not UnitExists(&amp;quot;focus&amp;quot;)
		or UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
		or not UnitInRange(&amp;quot;focus&amp;quot;) 
		or not UnitIsConnected(&amp;quot;focus&amp;quot;)
		or not UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;))
	and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
		or not UnitExists(&amp;quot;target&amp;quot;))	
	and #Nova_Tanks &amp;gt; 0 then
		for i=1, #Nova_Tanks do
			if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			
			and UnitAffectingCombat(&amp;quot;player&amp;quot;)		 
			then			
	   			TargetUnit(Nova_Tanks[i].Unit)             		
	    		RunMacroText(&amp;quot;/focus&amp;quot;)			
	            RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)			
			end
		end
	end
	
	if UnitExists(&amp;quot;focus&amp;quot;)
	and not Nova_Moving	
	and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) or not UnitExists(&amp;quot;target&amp;quot;))
	and not UnitIsDeadOrGhost(&amp;quot;focustarget&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
	and UnitExists(&amp;quot;focustarget&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;focustarget&amp;quot;)
	and IsSpellInRange(GetSpellInfo(14914),&amp;quot;focustarget&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;focustarget&amp;quot;)
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		TargetUnit(&amp;quot;focustarget&amp;quot;)
		return false 	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Trinket spirit 2</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;lt; 80
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 
	UseInventoryItem(14)
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>BindingHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_BindingHealCheck then
	if PQR_SpellAvailable(32546)
	and members[1].HP &amp;lt; Nova_BindingHeal
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt; Nova_SelfBindingHeal
	and not Nova_Moving 
	and IsSpellInRange(GetSpellInfo(32546),members[1].Unit) == 1
	and IsUsableSpell(32546)
	and not UnitIsUnit(members[1].Unit,&amp;quot;player&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and not stopcasting then
		CastSpellByName(tostring(GetSpellInfo(32546)),members[1].Unit)	 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting BindingHeal - HP: &amp;quot; ..members[1].HP) 
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fade</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_FadeCheck then	
	if UnitThreatSituation(&amp;quot;player&amp;quot;) == 3
	and PQR_SpellAvailable(586) 
	and not stopfade then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end	
		CastSpellByName(tostring(GetSpellInfo(586),nil))	 
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>FlashHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_FlashHealCheck then
	if PQR_SpellAvailable(2061) 
	 and IsSpellInRange(GetSpellInfo(2061),members[1].Unit) == 1
	 and IsUsableSpell(2061)
	 and not Nova_Moving 
	 and not stopcasting then
		if members[1].HP &amp;lt; Nova_FlashHeal and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 10 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then				
		 	CastSpellByName(tostring(GetSpellInfo(2061)),members[1].Unit)
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting FlashHeal - HP: &amp;quot; ..members[1].HP) 
		 	return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>GreaterHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_GreaterHealingCheck then
	if PQR_SpellAvailable(2060) 
	 and IsSpellInRange(GetSpellInfo(2060),members[1].Unit) == 1
	 and IsUsableSpell(2060) 
	 and not Nova_Moving 
	 and not stopcasting then
		if UnitBuffID(&amp;quot;player&amp;quot;, 63735) then --Serendipity buff
			if (select(7, UnitBuffID(&amp;quot;player&amp;quot;, 63735)) - GetTime()) &amp;lt;= 3 
			and select(4, UnitBuffID(&amp;quot;player&amp;quot;, 63735)) &amp;gt;= 2 then 
				local Nova_GreaterHealing = Nova_GreaterHealing + 10
			end
		end
		 	 	 
		if members[1].HP &amp;lt; Nova_GreaterHealing 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then				
		 	CastSpellByName(tostring(GetSpellInfo(2060)),members[1].Unit)
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting GreaterHeal - HP: &amp;quot; ..members[1].HP) 
		 	return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HymnOfHope</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--HymnOfHope (TC)
if Nova_MVHymnOfHopeCheck then	
	if (VachiusaHolyPriest_HymnOfHope_key and not GetCurrentKeyBoardFocus()) then		
		if PQR_SpellAvailable(64901) 
		and GetSpellCooldown(64901) == 0		
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and not Nova_Moving 
		and not UnitChannelInfo(&amp;quot;player&amp;quot;)
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
		and not stopcasting then
			CastSpellByName(tostring(GetSpellInfo(64901),nil))	
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFKey Down - HymnOfHope!&amp;quot;)	
			return true 
		end
	end
end

if Nova_HymnOfHopeCheck then
	if select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; Nova_HymnOfHope
	and GetSpellCooldown(64901) == 0
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(64901)
	and not Nova_Moving 
	and not UnitChannelInfo(&amp;quot;player&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and not stopcasting then
		CastSpellByName(tostring(GetSpellInfo(64901),nil))	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFAuto - HymnOfHope!&amp;quot;)	
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>InnerFire</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitBuffID(&amp;quot;player&amp;quot;,588) 
and PQR_SpellAvailable(588)
and Nova_InnerCheck
and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 80
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	CastSpellByName(tostring(GetSpellInfo(588),nil))	 
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>InnerWill</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitBuffID(&amp;quot;player&amp;quot;,73413) 
and PQR_SpellAvailable(73413)
and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 70
and Nova_InnerCheck
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	CastSpellByName(tostring(GetSpellInfo(73413),nil))	
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>MassDispel</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_MassDispelCheck then	
	if (VachiusaHolyPriest_MassDispel_key and not GetCurrentKeyBoardFocus()) 
	and not UnitChannelInfo(&amp;quot;player&amp;quot;) 
	and PQR_SpellAvailable(32375)
	and select(2,GetSpellCooldown(32375)) &amp;lt; 2 
	and IsUsableSpell(32375)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	  CastSpellByName(tostring(GetSpellInfo(32375),nil))
	  if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Alt Key Down - Mass Dispel!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>MindBender</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_MindbenderCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not stopdps
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; Nova_Mindbender
	and PQR_SpellAvailable(34433) 
	and UnitExists(&amp;quot;target&amp;quot;)
	and not Nova_Moving
	and IsSpellInRange(GetSpellInfo(34433),&amp;quot;target&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMindBender&amp;quot;)
		CastSpellByName(tostring(GetSpellInfo(34433),&amp;quot;target&amp;quot;))
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>PowerWordFortitude</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitBuffID(&amp;quot;player&amp;quot;,21562) --Power Word: Fortitude
and not UnitBuffID(&amp;quot;player&amp;quot;,469) --Commanding Shout
and not UnitBuffID(&amp;quot;player&amp;quot;,90364) --Qiraji Fortitude
and not UnitBuffID(&amp;quot;player&amp;quot;,109773) --Dark Intent
and PQR_SpellAvailable(21562)
and IsUsableSpell(21562) 
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	CastSpellByName(tostring(GetSpellInfo(21562),nil))
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>PowerWordShield</Name><Default>false</Default><SpellID>17</SpellID><Actions></Actions><Lua>if Nova_PowerWordShieldCheck then
	if PQR_SpellAvailable(17) 
	and members[1].HP &amp;lt; Nova_PowerWordShield
	and not UnitDebuffID(members[1].Unit, 6788)
	and not UnitBuffID(members[1].Unit, 17)
	and IsSpellInRange(GetSpellInfo(17),members[1].Unit) == 1
	and IsUsableSpell(17) 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	  PQR_CustomTarget = members[1].Unit
	  return true
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>PrayerOfMending</Name><Default>false</Default><SpellID>33076</SpellID><Actions></Actions><Lua>if Nova_PrayerOfMendingCheck then
	if PQR_SpellAvailable(33076)
	and members[1].HP &amp;lt; Nova_PrayerOfMending 
	and lowhpmembers &amp;gt; 1
	and IsUsableSpell(33076)	
	and IsSpellInRange(GetSpellInfo(33076),members[1].Unit) == 1
	then	
		local PoM = false
		
		for i=1, #members do	
			if UnitBuffID(members[i].Unit, 41635) or UnitBuffID(members[i].Unit, 33076) then
				PoM = true
				break
			end
		end	
		if PoM == false 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	    	PQR_CustomTarget = members[1].Unit	    	
	    	return true
	    end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>RenewTank</Name><Default>false</Default><SpellID>139</SpellID><Actions></Actions><Lua>if Nova_RenewTankCheck then
	if PQR_SpellAvailable(139) 
	and IsUsableSpell(139)
	then
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit)
				 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 15
				 and Nova_Tanks[i].HP &amp;lt; Nova_RenewTank
				 and IsSpellInRange(GetSpellInfo(139),Nova_Tanks[i].Unit) == 1 
				 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
					if UnitBuffID(Nova_Tanks[i].Unit, 139) then
						if (select(7, UnitBuffID(Nova_Tanks[i].Unit, 139)) - GetTime() &amp;lt;= 2) 
						then
							PQR_CustomTarget = Nova_Tanks[i].Unit
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRenew soon expired on tank!&amp;quot;)	
							return true
						end
					else
						PQR_CustomTarget = Nova_Tanks[i].Unit
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRenew tank!&amp;quot;)	
						return true
					end				
				end
			end
		end
		
		if UnitThreatSituation(members[1].Unit)	== 3
		 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 20
		 and not UnitBuffID(members[1].Unit, 139)
		 and members[1].HP &amp;lt; Nova_Renew 
		 and IsSpellInRange(GetSpellInfo(139),members[1].Unit) == 1 
		 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRenew high threat member!&amp;quot;)	
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Renew</Name><Default>false</Default><SpellID>139</SpellID><Actions></Actions><Lua>if Nova_RenewCheck then
	if PQR_SpellAvailable(139) 
	 and not UnitBuffID(members[1].Unit, 139)
	 and IsSpellInRange(GetSpellInfo(139),members[1].Unit) == 1
	 and IsUsableSpell(139)
	 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 50 
	 and Nova_Moving then
		if members[1].HP &amp;lt; Nova_Renew 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		 	PQR_CustomTarget = members[1].Unit
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>VoidShift</Name><Default>false</Default><SpellID>108968</SpellID><Actions></Actions><Lua>if Nova_VoidShiftCheck then
	if PQR_SpellAvailable(108968) 
	 and Nova_UnitInfo(&amp;quot;focus&amp;quot;) &amp;lt; Nova_VoidShift
	 and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;gt; Nova_SelfVoidShift
	 and UnitExists(&amp;quot;focus&amp;quot;) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;) 
	 and CanHeal(&amp;quot;focus&amp;quot;) 
	 and IsSpellInRange(GetSpellInfo(108968),&amp;quot;focus&amp;quot;) == 1 then 	
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end
	 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFVoid Shift - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;focus&amp;quot;)) 		
	 	return true	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Focus</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyFire</Name><Default>false</Default><SpellID>14914</SpellID><Actions></Actions><Lua>if Nova_DPSCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not stopdps
	and PQR_SpellAvailable(14914) 
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(14914),&amp;quot;target&amp;quot;) == 1
	and members[1].HP &amp;gt;= Nova_DPS
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 80 
	and select(2,GetSpellCooldown(14914)) &amp;lt; 2
	and IsUsableSpell(14914)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) 
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- SelfSurvival</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= Nova_DesperatePrayer 
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then	
	if Nova_DesperatePrayerCheck
	and PQR_SpellAvailable(19236) --Desperate Prayer
	and GetSpellCooldown(19236) == 0
	and select(2,GetTalentRowSelectionInfo(4)) == 10 --check talent
	then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end		
		CastSpellByName(tostring(GetSpellInfo(19236),nil))	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDesperate Prayer - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
		return true
	elseif GetItemCount(5512,false,true) &amp;gt; 0	
	and PQR_SpellAvailable(5512) --Healthstone	
	and GetItemCooldown(5512) == 0 then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end		
		UseItemByName(5512)
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHealthstone - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
		return true
	--elseif GetInventoryItemCooldown(6)==0 --Grounded Plasma Shield 	
	--then 
		--UseInventoryItem(6) 
		--return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Custom Table --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--------------------------------------
-- Adding Players to Custom Table
--------------------------------------
if Nova_AddingPlayersCTCheck then
	if VachiusaHolyPriest_AddingPlayersCT_key
	and not GetCurrentKeyBoardFocus()
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and ( CanHeal(&amp;quot;mouseover&amp;quot;) 
	or UnitIsUnit(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) ) then  
		for i=1, #Nova_CustomT do
			if Nova_CustomT[i].GUID and Nova_CustomT[i].GUID == UnitGUID(&amp;quot;mouseover&amp;quot;) then
				return false
			end
		end
		
		table.insert(Nova_CustomT, { GUID = UnitGUID(&amp;quot;mouseover&amp;quot;) } )
		
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;We just added &amp;quot;..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; to the Custom Healing Table.&amp;quot;, &amp;quot;Alert&amp;quot;)
		end
		return true
	
	end
end

--------------------------------------
-- Removing Players from Custom Table
--------------------------------------
if Nova_RemovingPlayersCTCheck then
	if VachiusaHolyPriest_RemovingPlayersCT_key
	and not GetCurrentKeyBoardFocus() 
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and ( CanHeal(&amp;quot;mouseover&amp;quot;) 
	or UnitIsUnit(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) )then
		for i=1, #Nova_CustomT do
			if Nova_CustomT[i].GUID and Nova_CustomT[i].GUID == UnitGUID(&amp;quot;mouseover&amp;quot;) then
				if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
					PQR_WriteToChat(&amp;quot;We just removed &amp;quot;..UnitName(Nova_CustomT[i].Unit)..&amp;quot; from the Custom Healing Table.&amp;quot;, &amp;quot;Alert&amp;quot;)
				end
				table.remove(Nova_CustomT, i)
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Smite</Name><Default>false</Default><SpellID>585</SpellID><Actions></Actions><Lua>if Nova_DPSCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not stopdps
	and members[1].HP &amp;gt;= Nova_DPS
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 80 
	and PQR_SpellAvailable(585) 
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsUsableSpell(585)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not Nova_Moving
	and IsSpellInRange(GetSpellInfo(585),&amp;quot;target&amp;quot;) == 1
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) 
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and not stopcasting then
		return true 
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ShadowWordPain</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>if Nova_DPSCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not stopdps
	and PQR_SpellAvailable(589) 
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(589),&amp;quot;target&amp;quot;) == 1
	and IsUsableSpell(589)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and Nova_UnitInfo(&amp;quot;target&amp;quot;) &amp;gt; 20
	and members[1].HP &amp;gt;= Nova_DPS
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 80 
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
		local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,589,&amp;quot;PLAYER&amp;quot;)
		if SWP == nil 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			return true 
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ShadowWordDeath</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>if Nova_DPSCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not stopdps
	and PQR_SpellAvailable(32379) 
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(32379),&amp;quot;target&amp;quot;) == 1
	and IsUsableSpell(32379)
	and select(2,GetSpellCooldown(32379)) &amp;lt; 2
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and Nova_UnitInfo(&amp;quot;target&amp;quot;) &amp;lt;= 20
	and members[1].HP &amp;gt;= Nova_DPS
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 80 
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) 
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_HealCheck then
	if PQR_SpellAvailable(2050) 
	 and members[1].HP &amp;lt; Nova_Heal 	 
	 and IsUsableSpell(2050) 
	 and not Nova_Moving 
	 and IsSpellInRange(GetSpellInfo(2050),members[1].Unit) == 1 
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	 and not stopcasting then		
		CastSpellByName(tostring(GetSpellInfo(2050)),members[1].Unit)
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting Heal - Name: &amp;quot;..UnitName(members[1].Unit)..&amp;quot; HP: &amp;quot; ..members[1].HP) 
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>TsulongHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--TsulongHeal 
if Nova_53EventsCheck then	
	local bossCheck = &amp;quot;boss1&amp;quot; 
	local tsulongboss = false
	if UnitExists(bossCheck) then 
		local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16) 	        
		if npcID == 62442 
		and UnitAffectingCombat(&amp;quot;player&amp;quot;) then --Tsulong	
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDebug NPCID: &amp;quot; ..npcID) 
			tsulongboss = true
		end
	end	
	
	if tsulongboss
	and PQR_SpellAvailable(2060)  	
	and IsUsableSpell(2060) 
	and IsSpellInRange(GetSpellInfo(2060),&amp;quot;boss1&amp;quot;) == 1
	and not Nova_Moving then
		if Nova_UnitInfo(&amp;quot;boss1&amp;quot;) &amp;lt; 99 then
			if not UnitBuffID(&amp;quot;player&amp;quot;, 81208) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then --Chakra: Serenity
				CastSpellByName(tostring(GetSpellInfo(81208),nil))	 
			end	 		
			
			if GetInventoryItemCooldown(10)==0 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				UseInventoryItem(10)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGloves Engineer buff!&amp;quot;)			
			end	 
				
			if PQR_SpellAvailable(10060)
			and select(2,GetSpellCooldown(10060)) &amp;lt; 2 
			and select(2,GetTalentRowSelectionInfo(5)) == 14 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		 		CastSpellByName(tostring(GetSpellInfo(10060),nil))	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFPower Infusion!&amp;quot;)
			end	 						

		 	if PQR_SpellAvailable(139) 
		 	and IsUsableSpell(139) 	 		 	
		 	and not UnitBuffID(&amp;quot;boss1&amp;quot;, 139, &amp;quot;PLAYER&amp;quot;) 
		 	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	 		
		 		CastSpellByName(tostring(GetSpellInfo(139)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Renew Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 					 			 	
		 	end
			
			local prepairBIL = false
			local BathedInLight = GetSpellInfo(122858) --Sun Breath 122855
 			if (bossCasting == BathedInLight) then
 				prepairBIL = true
 			end
 				
			if PQR_SpellAvailable(47788) 	 
			 and select(2,GetSpellCooldown(47788)) &amp;lt; 2	 
			 and ((UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;ÐžÐ¼Ð¾Ð²ÐµÐ½Ð¸Ðµ ÑÐ²ÐµÑ‚Ð¾Ð¼&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;In Licht gebadet&amp;quot;)) --Bathed in Light buff					 	 
			 	or prepairBIL)
			 and not UnitBuffID(&amp;quot;boss1&amp;quot;,116849) --LifeCocoon
			 and not UnitBuffID(&amp;quot;boss1&amp;quot;,47788)	--Guardian Spirit			 	
			 and IsUsableSpell(47788) 
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	 
				 CastSpellByName(tostring(GetSpellInfo(47788)),&amp;quot;boss1&amp;quot;)	
				 --PQR_WriteToChat(&amp;quot;\124cFFFF55FFGuardianSpirit - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 						 
			end

			if PQR_SpellAvailable(88684) 		
			and select(2,GetSpellCooldown(88684)) &amp;lt; 2
			and IsUsableSpell(88684) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then				
				CastSpellByName(tostring(GetSpellInfo(88684)),&amp;quot;boss1&amp;quot;)	
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting HolyWordSerenity - HP: &amp;quot; ..members[1].HP) 
			end
	 	
		 	if PQR_SpellAvailable(2061) 		 
			 and IsUsableSpell(2061) 			 
			 and (select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 70 or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;ÐžÐ¼Ð¾Ð²ÐµÐ½Ð¸Ðµ ÑÐ²ÐµÑ‚Ð¾Ð¼&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;In Licht gebadet&amp;quot;)) --Bathed in Light buff					 	 
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(2061)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast FlashHeal Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 
		 		return true
			end	
			
			if members[1].HP &amp;gt; 30 --Prevent raid wipe
			and lowhpmembers &amp;lt; 10 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 					
				CastSpellByName(tostring(GetSpellInfo(2060)),&amp;quot;boss1&amp;quot;)	 			
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast GreaterHeal Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;))	 		
		 		return true
			end		
	
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (VachiusaHolyPriest_PauseRotation_key and not GetCurrentKeyBoardFocus())
 or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) 
 or IsMounted() 
 or (UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(64843)) --Divine Hymn 
 or (UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(64901)) --Hymn of Hope
 or UnitBuffID(&amp;quot;player&amp;quot;, 104269) then --drink 
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CircleOfHealingSmart</Name><Default>false</Default><SpellID>34861</SpellID><Actions></Actions><Lua>if Nova_CircleOfHealingCheck then
	if PQR_SpellAvailable(34861) 
	 and IsUsableSpell(34861)
	 and select(2,GetSpellCooldown(34861)) &amp;lt; 2
	 and AverageHealth(Nova_CircleOfHealingLimit) &amp;lt;= Nova_CircleOfHealing 
	 and not LLdebuff then
	
		PRGetDistanceTable((Nova_CircleOfHealing+5), 30, 3)	
		PRGetDistanceTablebyHP(Nova_CircleOfHealing,3)
							
		if IsSpellInRange(GetSpellInfo(34861),prdistancebyhp[1].Unit) 
		and prdistancebyhp[1].PD &amp;gt;= Nova_CircleOfHealingLimit
		and prdistancebyhp[1].HP &amp;lt;= Nova_CircleOfHealing 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
			if not UnitBuffID(&amp;quot;player&amp;quot;, 81206) 
			and Nova_ChakraSanctuaryAOECheck
			and select(2,GetSpellCooldown(tonumber(81206))) &amp;lt; 2
			then --Chakra: Sanctuary
				CastSpellByName(tostring(GetSpellInfo(81206),nil))	 
			end						
			
			if GetInventoryItemCooldown(10)==0 
			and (prdistancebyhp[1].HP &amp;lt;= (Nova_CircleOfHealing-10)) 
			then	 		
				UseInventoryItem(10)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGloves Engineer buff!&amp;quot;)			
			end	 
				
			if PQR_SpellAvailable(10060)
			and select(2,GetSpellCooldown(10060)) &amp;lt; 2 
			and select(2,GetTalentRowSelectionInfo(5)) == 14
			and (prdistancebyhp[1].HP &amp;lt;= (Nova_CircleOfHealing-10)) 
			then	 		
		 		CastSpellByName(tostring(GetSpellInfo(10060),nil))	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFPower Infusion!&amp;quot;)
			end	 		
			
			PQR_CustomTarget = prdistancebyhp[1].Unit
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast PoH - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 			
			return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CascadeComboSmart</Name><Default>false</Default><SpellID>121135</SpellID><Actions></Actions><Lua>if Nova_CascadeCheck then
	if PQR_SpellAvailable(121135)
 	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 15
	 and select(2,GetSpellCooldown(121135)) &amp;lt; 2
	 and IsUsableSpell(121135) 
	 and select(2,GetTalentRowSelectionInfo(6)) == 16 --check talent
	 and AverageHealth(Nova_CascadeLimit) &amp;lt;= Nova_Cascade --total of 15 players/enemies can be hit	 
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		if not UnitBuffID(&amp;quot;player&amp;quot;, 81206) 
		and Nova_ChakraSanctuaryAOECheck
		and select(2,GetSpellCooldown(tonumber(81206))) &amp;lt; 2
		then --Chakra: Sanctuary
			CastSpellByName(tostring(GetSpellInfo(81206),nil))	 
		end
			 
		if GetInventoryItemCooldown(10)==0 
		then
			UseInventoryItem(10)
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGloves Engineer buff!&amp;quot;)			
		end	 
			
		if PQR_SpellAvailable(10060)
		and select(2,GetSpellCooldown(10060)) &amp;lt; 2 
		and select(2,GetTalentRowSelectionInfo(5)) == 14 
		then
	 		CastSpellByName(tostring(GetSpellInfo(10060),nil))	 
	 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFPower Infusion!&amp;quot;)
		end	 		
		 			 	
		PQR_CustomTarget = members[1].Unit
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCascade Combo Auto!&amp;quot;)	
		return true		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>PrayerOfHealingSmart</Name><Default>false</Default><SpellID>596</SpellID><Actions></Actions><Lua>if Nova_PrayerOfHealingCheck then
	if PQR_SpellAvailable(596) 
	 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 15 
	 and IsUsableSpell(596)
	 and not Nova_Moving 
	 and not stopcasting 
	 and not LLdebuff then
	 	 if UnitBuffID(&amp;quot;player&amp;quot;, 63735) and select(4, &amp;quot;player&amp;quot;, 63735) then --Serendipity buff
		 	 if (select(7, &amp;quot;player&amp;quot;, 63735) - GetTime()) &amp;lt;= 3 
			 and select(4, &amp;quot;player&amp;quot;, 63735) &amp;gt;= 2 then 
		 	 	local Nova_PrayerOfHealingLimit = Nova_PrayerOfHealingLimit - 1
		 	 	local Nova_PrayerOfHealing = Nova_PrayerOfHealing - 5
		 	 end
	 	 end
	 	 		 
		 if AverageHealth(Nova_PrayerOfHealingLimit) &amp;lt;= Nova_PrayerOfHealing then
		 	PRGetDistanceTable((Nova_PrayerOfHealing+5), 30, 3)	
			PRGetDistanceTablebyHP(Nova_PrayerOfHealing,3)
								
			if IsSpellInRange(GetSpellInfo(596),prdistancebyhp[1].Unit) 
			and prdistancebyhp[1].PD &amp;gt;= 3
			and prdistancebyhp[1].HP &amp;lt;= Nova_PrayerOfHealing 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
				if not UnitBuffID(&amp;quot;player&amp;quot;, 81206) 
				and Nova_ChakraSanctuaryAOECheck
				and select(2,GetSpellCooldown(tonumber(81206))) &amp;lt; 2
				then --Chakra: Sanctuary
					CastSpellByName(tostring(GetSpellInfo(81206),nil))	 
				end								
				
				if GetInventoryItemCooldown(10)==0 
				and (prdistancebyhp[1].HP &amp;lt;= (Nova_PrayerOfHealing-10)) 
				then	 		
					UseInventoryItem(10)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGloves Engineer buff!&amp;quot;)			
				end	 
					
				if PQR_SpellAvailable(10060)
				and select(2,GetSpellCooldown(10060)) &amp;lt; 2 
				and select(2,GetTalentRowSelectionInfo(5)) == 14
				and (prdistancebyhp[1].HP &amp;lt;= (Nova_PrayerOfHealing-10)) 
				then	 		
			 		CastSpellByName(tostring(GetSpellInfo(10060),nil))	 
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFPower Infusion!&amp;quot;)
				end	 					
			 	
				PQR_CustomTarget = prdistancebyhp[1].Unit
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast PoH - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 					
				return true
			end
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>GuardianSpirit</Name><Default>false</Default><SpellID>47788</SpellID><Actions></Actions><Lua>if Nova_GuardianSpiritCheck then
	if PQR_SpellAvailable(47788) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(2,GetSpellCooldown(47788)) &amp;lt; 2
	 and UnitThreatSituation(members[1].Unit) == 3
	 and IsUsableSpell(47788)
	 and IsSpellInRange(GetSpellInfo(47788),members[1].Unit) == 1 then	 
		if members[1].HP &amp;lt; Nova_GuardianSpirit 
		and UnitIsPlayer(members[1].Unit) then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end					
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGuardianSpirit - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DivineHymn</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DivineHymn (TC)
if Nova_MDivineHymnCheck then	
	if (VachiusaHolyPriest_DivineHymn_key and not GetCurrentKeyBoardFocus()) then
		if PQR_SpellAvailable(64843)	
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)	
		and IsUsableSpell(64843)		
		and select(2,GetSpellCooldown(64843)) &amp;lt; 2 then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end
					
			if not UnitBuffID(&amp;quot;player&amp;quot;, 81206) 
			and Nova_ChakraSanctuaryAOECheck
			and select(2,GetSpellCooldown(tonumber(81206))) &amp;lt; 2
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then --Chakra: Sanctuary
				CastSpellByName(tostring(GetSpellInfo(81206),nil))	 
			end			
			
			CastSpellByName(tostring(GetSpellInfo(64843),nil))		   
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRightShiftKeyDown - DivineHymn!&amp;quot;)
			return true
		end
	end		
end
--DivineHymn 
if Nova_DivineHymnCheck then
	if PQR_SpellAvailable(64843)
	and select(2,GetSpellCooldown(64843)) &amp;lt; 2	
	and IsUsableSpell(64843) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) 
	and not stopcasting 
	and not LLdebuff then
		if AverageHealth(Nova_DivineHymnLimit) &amp;lt;= Nova_DivineHymn then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end
					
			if not UnitBuffID(&amp;quot;player&amp;quot;, 81206) 
			and Nova_ChakraSanctuaryAOECheck
			and select(2,GetSpellCooldown(tonumber(81206))) &amp;lt; 2
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then --Chakra: Sanctuary
				CastSpellByName(tostring(GetSpellInfo(81206),nil))	 
			end				
			
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDivineHymn - Raid HP: &amp;quot;..AverageHealth(Nova_DivineHymnLimit))		
			CastSpellByName(tostring(GetSpellInfo(64843)),&amp;quot;player&amp;quot;)	
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Lightwell</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_LightwellCheck then	
	if ((VachiusaHolyPriest_Lightwell_key and not GetCurrentKeyBoardFocus()) 
	or (Nova_DropAtMouseoverCheck and DAMMode and UnitAffectingCombat(&amp;quot;player&amp;quot;)))
	and PQR_SpellAvailable(724)
	and select(2,GetSpellCooldown(724)) &amp;lt; 2 
	and IsUsableSpell(724) 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		CastSpellByName(tostring(GetSpellInfo(724),nil))
		if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
	  	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRightControlKeyDown - Lightwell!&amp;quot;)
	  	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyWordSanctuary</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_HolyWordSanctuaryCheck then	
	if ((VachiusaHolyPriest_HolyWordSanctuary_key and not GetCurrentKeyBoardFocus())
	or (Nova_DropAtMouseoverCheck and DAMMode and UnitAffectingCombat(&amp;quot;player&amp;quot;))) then
		if not UnitBuffID(&amp;quot;player&amp;quot;, 81206) 
		and select(2,GetSpellCooldown(tonumber(81206))) &amp;lt; 2
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then --Chakra: Sanctuary
			CastSpellByName(tostring(GetSpellInfo(81206),nil))	 
		end	
		
		if PQR_SpellAvailable(88685)
		and UnitBuffID(&amp;quot;player&amp;quot;, 81206)
		and select(2,GetSpellCooldown(88685)) == 0 
		and IsUsableSpell(88685) 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
			CastSpellByName(tostring(GetSpellInfo(88685),nil))
			if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
		  	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLeftControlKeyDown - HolyWordSanctuary!&amp;quot;)
		  	return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ShadowWordPain Mouseover</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>if Nova_DPSCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not stopdps
	and PQR_SpellAvailable(589) 
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and IsSpellInRange(GetSpellInfo(589),&amp;quot;mouseover&amp;quot;) == 1
	and IsUsableSpell(589)
	and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;)
	and Nova_UnitInfo(&amp;quot;mouseover&amp;quot;) &amp;gt; 20
	and members[1].HP &amp;gt;= Nova_DPS
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 80 
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) then
		local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,589,&amp;quot;PLAYER&amp;quot;)
		if SWP == nil 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			return true 
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyWordSerenity</Name><Default>false</Default><SpellID>88684</SpellID><Actions></Actions><Lua>if Nova_HolyWordSerenityCheck then
	if PQR_SpellAvailable(88684) 
	and UnitBuffID(&amp;quot;player&amp;quot;, 81208) --Chakra: Serenity
	and members[1].HP &amp;lt; Nova_HolyWordSerenity 	 
	and select(2,GetSpellCooldown(88684)) &amp;lt; 2
	and lowhpmembers &amp;lt; 3
	and IsUsableSpell(88684) 		
	and IsSpellInRange(GetSpellInfo(88684),members[1].Unit) == 1 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then		
		PQR_CustomTarget = members[1].Unit					
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting HolyWordSerenity - HP: &amp;quot; ..members[1].HP) 
		return true
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyWordChastise</Name><Default>false</Default><SpellID>88625</SpellID><Actions></Actions><Lua>--HolyWordChastise
if Nova_DPSCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)	
	and not stopdps
	and UnitExists(&amp;quot;target&amp;quot;)
	and members[1].HP &amp;gt;= Nova_DPS
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 80 	
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
		if UnitBuffID(&amp;quot;player&amp;quot;, 81209) then --Chakra: Chastise
			if PQR_SpellAvailable(88625) 
			and IsSpellInRange(GetSpellInfo(88625),&amp;quot;target&amp;quot;) == 1
			and select(2,GetSpellCooldown(88625)) &amp;lt; 2
			and IsUsableSpell(88625) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
				return true 
			end
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ResAndMRes</Name><Default>false</Default><SpellID>527</SpellID><Actions></Actions><Lua>if not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
and UnitIsConnected(&amp;quot;mouseover&amp;quot;)
and UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) 			
and UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
and not UnitHasIncomingResurrection(&amp;quot;mouseover&amp;quot;) 
then		
	if PQR_SpellAvailable(83968) 		
	and not UnitDebuff(&amp;quot;mouseover&amp;quot;, GetSpellInfo(95223)) ----Mass Resurrection debuff 
	and Nova_CheckLastCast(83968, 2.0)		
	then
		if IsInRaid() then
				group = &amp;quot;raid&amp;quot;
		elseif IsInGroup() then
				group = &amp;quot;party&amp;quot;
		end
		local deadnum = 0
		if group then
			for i = 1, GetNumGroupMembers() do 
				local member = group..i
				if UnitIsDeadOrGhost(member) then
					if not UnitDebuff(member, GetSpellInfo(95223)) then ----Mass Resurrection debuff 
						deadnum = deadnum + 1
					end
				end
			end
		end		
		if deadnum &amp;gt;= 2 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(83968),nil)) --Mass Resurrection	 
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto MasRes!&amp;quot;)
			return true		
		end
	end
	
	if PQR_SpellAvailable(2006)
	and IsUsableSpell(2006) 		
	and Nova_CheckLastCast(2006, 2.0)	
	and (IsSpellInRange(GetSpellInfo(2006),&amp;quot;mouseover&amp;quot;) == 1) 		
	and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;) 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 
		CastSpellByName(tostring(GetSpellInfo(2006)),&amp;quot;mouseover&amp;quot;) --Resurrection	 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto Res!&amp;quot;)
		return true			
	end			
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>SolaceInsanity</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--SolaceInsanity - not finish yet
if select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= Nova_SolaceInsanity
and select(2,GetTalentRowSelectionInfo(3)) == 9 then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)	
	and not stopdps
	and PQR_SpellAvailable(129250) 	
	and UnitExists(&amp;quot;target&amp;quot;)	
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not Nova_Moving
	and IsSpellInRange(GetSpellInfo(14914),&amp;quot;target&amp;quot;) == 1
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) 
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then		
		CastSpellByName(tostring(GetSpellInfo(14914),&amp;quot;target&amp;quot;)) --129250 or 139139
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Drink</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;lt;= 50
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
and not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
and PQR_SpellAvailable(80618) --Mage cookies	
and not UnitBuffID(&amp;quot;player&amp;quot;, 104269)
and not Nova_Moving 
and GetItemCooldown(80618) == 0 then
	UseItemByName(80618)
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMage cookies - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 53Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_53EventsCheck then
	local boss,bossid = bossid()
	local dispelid = 527
	local dispelmagicid = 528		
	local buff = { }
	stopcasting = false
	stopfade = false
	stopdps = false
	LLdebuff = false
	LLdebuffunit = false	
	if UnitExists(boss) then
		local _, _, rdifficulty = GetInstanceInfo()
		--TFT raid		
		if bossid == 69465 and (rdifficulty == 5 or rdifficulty ==6) then --Jin&amp;apos;rokh the Breaker
			local buff = { 138732 } --Ionization 
			local fluiditydebuff  = 138002 --Fluidity
			RaidJBDispel(dispelid,buff,fluiditydebuff,5)
		elseif bossid == 68905 or bossid == 68904 then --Lu&amp;apos;lin 68905, Suen 68904 - Twin Consorts
			local buff  = { 137360 } --Corrupted Healing
			LLdebuff,LLdebuffunit = RaidLLDispel(buff) 
		elseif bossid == 69134 or bossid == 69131 or bossid == 69078 or bossid == 69132 then --Council of Elders
			local buff  = { 136878, 136857 } 	
			RaidDispel(dispelid,buff) 	
		elseif bossid == 68476 then --Horridon
			local buff  = { 136708, 136719, 136710 } 
			RaidDispel(dispelid,buff) 
		elseif bossid == 68065 or bossid == 70212 or bossid == 70235 or bossid == 70247 then --Flaming Head 
			local buff  = { 139822 } 	
			--RaidDispel(dispelid,buff) 	
			RaidRangeDispel(dispelid,buff,10) 				
		elseif bossid == 69427 then --Dark Animus
			local buff  = { 138609 } 	
			RaidDispelDelay(dispelid,buff,5)
			local InterruptingJolt = GetSpellInfo(138763) --139867 
			local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(boss) 
			if (bossCasting == InterruptingJolt) then
				stopcasting = true
			end			
			stopfade = true		
		--DS raid
		elseif bossid == 53879 then --Blood Corruption: Death
			local buff  = { 106199 } 
			RaidDispel(dispelid,buff)	
		--TeS raid
		elseif bossid == 60585 or bossid == 60583 or bossid == 60586 then 
			local buff  = { 117436 } 
			RaidDispel(dispelid,buff) --Protectors of the Endless, Lightning Prison
			SBossDispel(117283,dispelmagicid) --Protectors of the Endless, Cleansing Waters 	
		elseif bossid == 62442 then --Terrorize
			local buff  = { 123011 } 
			SBossDispel(123011,dispelid)
			--RaidDispel(dispelid,buff)			
		--MSV raid
		elseif bossid == 60051 or bossid == 60047 or bossid == 60043 or bossid == 59915 then --Cobalt Mine Blast
			local buff  = { 116281 } 
			RaidDispel(dispelid,buff)	
		elseif bossid == 60708 then --Meng the Demented
			for i=1, #members do	
				if UnitDebuffID(members[i].Unit, 117708) then --Maddening Shout
					stopdps = true
					break
				end
			end			
		elseif bossid == 60410 then --Closed Circuit
			local buff  = { 117949 } 
			RaidDispel(dispelid,buff)	
		--HoF raid
		elseif bossid == 62837 then --Visions of Demise
			local buff  = { 124863 } 
			RaidDispel(dispelid,buff)		
		end		
		
		--HoF raid
		if bossid == 62397 then
			SBossDispel(122149,dispelmagicid)
		--MSV raid
		elseif bossid == 60701 or bossid == 60708 or bossid == 60709 or bossid == 60710 then
			SBossDispel(117697,dispelmagicid)
		--TeS raid
		elseif bossid == 62442 then		
			BossDispel(123011,dispelid,boss) --Tsulong, Terrorize 
		end
		
		--MSV raid
		if bossid == 60143 then --not test
			-- Gara&amp;apos;jal the Spiritbinder
			if UnitDebuffID(&amp;quot;player&amp;quot;,116161) then
				local timer = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
				if timer and timer - GetTime() &amp;lt; 1.5 then
					SpellStopCasting()
					RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end		
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 4xEvents</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_4xEventsCheck then --Old raid
	local boss,bossid = bossid()
	if UnitExists(boss) then					
		if bossid == 55294 then
			local PQ_SN = PQ_Shrapnel
			local PQ_FL = PQ_FadingLight
			local PQ_HOT = PQ_HourOfTwilight				
		
			-- Fading Light Debuff
			for i=1,#PQ_FL do
				if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i]))
					and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i])) - GetTime() &amp;lt; 0.7 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end
			
			-- Hour of Twilight
			if false then
				if PQR_SpellAvailable(115176)
				and select(2,GetSpellCooldown(115176)) &amp;lt; 2
				then SpellStopCasting() CastSpellByName(tostring(GetSpellInfo(115176)),&amp;quot;player&amp;quot;) return true end
			else
				local HourOfTwilight,_,_,_,_,endTime = UnitCastingInfo(boss) 
				for i=1,#PQ_HOT do
					if HourOfTwilight == GetSpellInfo(PQ_HOT[i]) and endTime/1000 - GetTime() &amp;lt; 0.7 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
					end
				end
			end
		end
		
		if bossid == 56173 then
			-- Target for Shrapnel
			for i=1,#PQ_SN do
				if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i]))
					and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i])) - GetTime() &amp;lt; 2 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_RacialsCheck
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then

	local PQ_Class = select(2, UnitClass(&amp;quot;player&amp;quot;)) 
	
	--Draenei 
	local GiftOfTheNaaru = 59542	
	--Blood Elf
	local ArcaneTorrent = 28730 --mana regen
	
	if PQ_Class == &amp;quot;PALADIN&amp;quot; then
		GiftOfTheNaaru = 59542	
	elseif PQ_Class == &amp;quot;MONK&amp;quot; then 
		GiftOfTheNaaru = 121093
		ArcaneTorrent = 129597 --chi regen
	elseif PQ_Class == &amp;quot;PRIEST&amp;quot; then  
		GiftOfTheNaaru = 59544
	elseif PQ_Class == &amp;quot;SHAMAN&amp;quot; then 
		GiftOfTheNaaru = 59547
	end

	--Troll 
	local Berserking = 26297 
	--Undead
	local WillOfTheForsaken = 7744  
	--Dwarven 
	local Stoneform = 20594 
	--Human 
	local EveryManForHimself = 59752
	--Undead 
	--local Cannibalize = 20577 --not much helpful
	--Orc 
	local BloodFury = 33702
	--Gloves Engineer
	local _, GECooldown, GEReady = GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 10)
			
	--HP
	if IsSpellKnown(GiftOfTheNaaru) 
	and GetSpellCooldown(GiftOfTheNaaru) == 0 
	and PQR_SpellAvailable(GiftOfTheNaaru)
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 30	
	then		
		CastSpellByName(tostring(GetSpellInfo(GiftOfTheNaaru),nil))	 
		return true 
	end
	
	--Mana
	if IsSpellKnown(ArcaneTorrent) 
	and PQ_Class ~= &amp;quot;MONK&amp;quot;
	and GetSpellCooldown(ArcaneTorrent) == 0 
	and PQR_SpellAvailable(ArcaneTorrent)
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 80	
	then		
		CastSpellByName(tostring(GetSpellInfo(ArcaneTorrent),nil))	 
		return true 
	end	
  	
  	--CDs
  	if not racialcds then
	  	function racialcds()
			if IsSpellKnown(BloodFury) 
			and GetSpellCooldown(BloodFury) == 0 
			and PQR_SpellAvailable(BloodFury)	
			then		
				CastSpellByName(tostring(GetSpellInfo(BloodFury),nil))	 
				return true 
			elseif IsSpellKnown(Berserking) 
			and GetSpellCooldown(Berserking) == 0 
			and PQR_SpellAvailable(Berserking)	
			then		
				CastSpellByName(tostring(GetSpellInfo(Berserking),nil))	 
				return true 
			elseif GECooldown == 0 
			and GEReady == 1 then
				UseInventoryItem(10)
			end
		end
	end
  	
  	if lowhpmembers &amp;gt;=5 then
  		racialcds()
  	end
  	
  	--Removes any Charm, Fear and Sleep effect
	if not GotFear then
		function GotFear(t) 
			local debuff = { 10326, 8122, 2094, 5782, 5484, 6358, 5246 }
			for i=1, #debuff do if UnitDebuffID(t,debuff[i]) then return true end end
		end
	end
	if IsSpellKnown(WillOfTheForsaken) 
	and GetSpellCooldown(WillOfTheForsaken) == 0 
	and PQR_SpellAvailable(WillOfTheForsaken)	
	and GotFear(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(WillOfTheForsaken),nil))	 
		return true 
	end  
	
	--Removes all poison, disease and bleed effects and reduces all damage taken by 10% for 8 sec
	if not GotPoison then
		function GotPoison(t)
			local i, debuff = 1, select(5,UnitDebuff(t, 1)) 
			while debuff do
				if debuff == &amp;quot;Poison&amp;quot; or debuff == &amp;quot;Disease&amp;quot; then return true end
				i = i + 1 debuff = select(5,UnitDebuff(t, i)) 
			end
		end
	end	
	if IsSpellKnown(Stoneform) 
	and GetSpellCooldown(Stoneform) == 0 
	and PQR_SpellAvailable(Stoneform)	
	and GotPoison(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(Stoneform),nil))	 
		return true 
	end    	
	
	--Removes all movement impairing effects and all effects which cause loss of control of your character
	if not LostControl then
		function LostControl(t) 
			local debuff = { 122, 10326, 8122, 2094, 5782, 5484, 6358, 5246, 408 }
			for i=1, #debuff do if UnitDebuffID(t,debuff[i]) then return true end end
		end
	end  
	if IsSpellKnown(EveryManForHimself) 
	and GetSpellCooldown(EveryManForHimself) == 0 
	and PQR_SpellAvailable(EveryManForHimself)	
	and LostControl(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(EveryManForHimself),nil))	 
		return true 
	end		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>TankFlashHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_TankFlaskHealCheck then
	if PQR_SpellAvailable(2061) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)	 
	 and IsUsableSpell(2061)
	 and not Nova_Moving 
	 and not UnitChannelInfo(&amp;quot;player&amp;quot;)
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;)	 
	 and not stopcasting then	 
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit) 	
				 and Nova_Tanks[i].HP &amp;lt;= Nova_TankFlaskHeal 
				 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 10 		 
				 and IsSpellInRange(GetSpellInfo(2061),Nova_Tanks[i].Unit) == 1 then
					if PQR_SpellAvailable(89485)
					and not UnitBuffID(&amp;quot;player&amp;quot;, 89485)
					and GetSpellCooldown(89485) == 0 then				
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFInner Focus!&amp;quot;)
						CastSpellByName(tostring(GetSpellInfo(89485),nil))	 				
					end					 
		 			CastSpellByName(tostring(GetSpellInfo(2061)),Nova_Tanks[i].Unit)
		 			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting TankFlashHeal - HP: &amp;quot; ..Nova_Tanks[i].HP) 
		 			return true										
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PQI Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Variables
if PQInterfaceLoaded and PQInterfaceUpdated and PQInterfaceDataLoaded then
	--They have PQI and its up-to-date use PQI
	
	PQI_Variables_Loaded = PQI_VachiusaGeneralHolyPriest_AutoOpenPQIOptions_enable
	VachiusaHolyPriest_AutoOpenPQIOptions_enable = PQI_VachiusaGeneralHolyPriest_AutoOpenPQIOptions_enable

	Nova_RenewCheck = PQI_VachiusaHealingHolyPriest_Renew_enable
	Nova_Renew = PQI_VachiusaHealingHolyPriest_Renew_value
	Nova_RenewTankCheck = PQI_VachiusaHealingHolyPriest_RenewTank_enable
	Nova_RenewTank = PQI_VachiusaHealingHolyPriest_RenewTank_value
	Nova_FlashHealCheck = PQI_VachiusaHealingHolyPriest_FlashHeal_enable
	Nova_FlashHeal = PQI_VachiusaHealingHolyPriest_FlashHeal_value
	Nova_GreaterHealingCheck = PQI_VachiusaHealingHolyPriest_GreaterHealing_enable
	Nova_GreaterHealing = PQI_VachiusaHealingHolyPriest_GreaterHealing_value
	Nova_HealCheck = PQI_VachiusaHealingHolyPriest_Heal_enable
	Nova_Heal = PQI_VachiusaHealingHolyPriest_Heal_value
	Nova_HolyWordSerenityCheck = PQI_VachiusaHealingHolyPriest_HolyWordSerenity_enable
	Nova_HolyWordSerenity = PQI_VachiusaHealingHolyPriest_HolyWordSerenity_value
	Nova_BindingHealCheck = PQI_VachiusaHealingHolyPriest_BindingHeal_enable
	Nova_BindingHeal = PQI_VachiusaHealingHolyPriest_BindingHeal_value
	Nova_SelfBindingHealCheck = PQI_VachiusaHealingHolyPriest_SelfBindingHeal_enable
	Nova_SelfBindingHeal = PQI_VachiusaHealingHolyPriest_SelfBindingHeal_value
	Nova_PrayerOfMendingCheck = PQI_VachiusaHealingHolyPriest_PrayerOfMending_enable
	Nova_PrayerOfMending = PQI_VachiusaHealingHolyPriest_PrayerOfMending_value
	Nova_PowerWordShieldCheck = PQI_VachiusaHealingHolyPriest_PowerWordShield_enable
	Nova_PowerWordShield = PQI_VachiusaHealingHolyPriest_PowerWordShield_value	
	Nova_TankFlaskHealCheck = PQI_VachiusaHealingHolyPriest_TankFlaskHeal_enable
	Nova_TankFlaskHeal = PQI_VachiusaHealingHolyPriest_TankFlaskHeal_value

	Nova_DivineHymnCheck = PQI_VachiusaCDHolyPriest_DivineHymn_enable
	Nova_DivineHymn = PQI_VachiusaCDHolyPriest_DivineHymn_value
	Nova_DivineHymnLimitCheck = PQI_VachiusaCDHolyPriest_DivineHymnLimit_enable
	Nova_DivineHymnLimit = PQI_VachiusaCDHolyPriest_DivineHymnLimit_value	
	Nova_PrayerOfHealingCheck = PQI_VachiusaCDHolyPriest_PrayerOfHealing_enable
	Nova_PrayerOfHealing = PQI_VachiusaCDHolyPriest_PrayerOfHealing_value
	Nova_PrayerOfHealingLimitCheck = PQI_VachiusaCDHolyPriest_PrayerOfHealingLimit_enable
	Nova_PrayerOfHealingLimit = PQI_VachiusaCDHolyPriest_PrayerOfHealingLimit_value
	Nova_CascadeCheck = PQI_VachiusaCDHolyPriest_Cascade_enable
	Nova_Cascade = PQI_VachiusaCDHolyPriest_Cascade_value
	Nova_CascadeLimitCheck = PQI_VachiusaCDHolyPriest_CascadeLimit_enable
	Nova_CascadeLimit = PQI_VachiusaCDHolyPriest_CascadeLimit_value
	Nova_HaloCheck = PQI_VachiusaCDHolyPriest_Halo_enable
	Nova_Halo = PQI_VachiusaCDHolyPriest_Halo_value
	Nova_HaloLimitCheck = PQI_VachiusaCDHolyPriest_HaloLimit_enable
	Nova_HaloLimit = PQI_VachiusaCDHolyPriest_HaloLimit_value	
	Nova_DivineStarCheck = PQI_VachiusaCDHolyPriest_DivineStar_enable
	Nova_DivineStar = PQI_VachiusaCDHolyPriest_DivineStar_value
	Nova_DivineStarLimitCheck = PQI_VachiusaCDHolyPriest_DivineStarLimit_enable
	Nova_DivineStarLimit = PQI_VachiusaCDHolyPriest_DivineStarLimit_value
	Nova_CircleOfHealingCheck = PQI_VachiusaCDHolyPriest_CircleOfHealing_enable
	Nova_CircleOfHealing = PQI_VachiusaCDHolyPriest_CircleOfHealing_value
	Nova_CircleOfHealingLimitCheck = PQI_VachiusaCDHolyPriest_CircleOfHealingLimit_enable
	Nova_CircleOfHealingLimit = PQI_VachiusaCDHolyPriest_CircleOfHealingLimit_value	
	Nova_DesperatePrayerCheck = PQI_VachiusaCDHolyPriest_DesperatePrayer_enable
	Nova_DesperatePrayer = PQI_VachiusaCDHolyPriest_DesperatePrayer_value
	Nova_HymnOfHopeCheck = PQI_VachiusaCDHolyPriest_HymnOfHope_enable
	Nova_HymnOfHope = PQI_VachiusaCDHolyPriest_HymnOfHope_value
	Nova_GuardianSpiritCheck = PQI_VachiusaCDHolyPriest_GuardianSpirit_enable
	Nova_GuardianSpirit = PQI_VachiusaCDHolyPriest_GuardianSpirit_value
	Nova_VoidShiftCheck = PQI_VachiusaCDHolyPriest_VoidShift_enable
	Nova_VoidShift = PQI_VachiusaCDHolyPriest_VoidShift_value
	Nova_SelfVoidShiftCheck = PQI_VachiusaCDHolyPriest_SelfVoidShift_enable
	Nova_SelfVoidShift = PQI_VachiusaCDHolyPriest_SelfVoidShift_value
		
	Nova_AutoTargetCheck = PQI_VachiusaGeneralHolyPriest_AutoTarget_enable
	Nova_AutoTarget = PQI_VachiusaGeneralHolyPriest_AutoTarget_value
	Nova_MindbenderCheck = PQI_VachiusaGeneralHolyPriest_Mindbender_enable
	Nova_Mindbender = PQI_VachiusaGeneralHolyPriest_Mindbender_value
	Nova_SolaceInsanityCheck = PQI_VachiusaGeneralHolyPriest_SolaceInsanity_enable
	Nova_SolaceInsanity = PQI_VachiusaGeneralHolyPriest_SolaceInsanity_value
	Nova_DPSCheck = PQI_VachiusaGeneralHolyPriest_DPS_enable
	Nova_DPS = PQI_VachiusaGeneralHolyPriest_DPS_value
	Nova_PurifyCheck = PQI_VachiusaGeneralHolyPriest_Purify_enable
	Nova_Purify = PQI_VachiusaGeneralHolyPriest_Purify_value
	Nova_FadeCheck = PQI_VachiusaGeneralHolyPriest_Fade_enable
	Nova_Fade = PQI_VachiusaGeneralHolyPriest_Fade_value
	Nova_InnerCheck = PQI_VachiusaGeneralHolyPriest_Inner_enable
	Nova_Inner = PQI_VachiusaGeneralHolyPriest_Inner_value		
	Nova_ChakraSanctuaryAOE = PQI_VachiusaGeneralHolyPriest_ChakraSanctuaryAOE_value
	Nova_ChakraSanctuaryAOECheck = PQI_VachiusaGeneralHolyPriest_ChakraSanctuaryAOE_enable			
	Nova_RacialsCheck = PQI_VachiusaGeneralHolyPriest_Racials_enable
	Nova_Racials = PQI_VachiusaGeneralHolyPriest_Racials_value
	Nova_4xEventsCheck = PQI_VachiusaGeneralHolyPriest_4xEvents_enable
	Nova_4xEvents = PQI_VachiusaGeneralHolyPriest_4xEvents_value
	Nova_53EventsCheck = PQI_VachiusaGeneralHolyPriest_53Events_enable
	Nova_53Events = PQI_VachiusaGeneralHolyPriest_53Events_value
	Nova_54EventsCheck = PQI_VachiusaGeneralHolyPriest_54Events_enable
	Nova_54Events = PQI_VachiusaGeneralHolyPriest_54Events_value	
	Nova_SpecialEvents = PQI_VachiusaGeneralHolyPriest_SpecialEvents_enable	
	Nova_AutoEventDispel = PQI_VachiusaGeneralHolyPriest_AutoEventDispel_enable
	Nova_QueueSysCheck = PQI_VachiusaGeneralHolyPriest_QueueSys_enable
	Nova_QueueSys = PQI_VachiusaGeneralHolyPriest_QueueSys_value	
	Nova_Mouseover = PQI_VachiusaGeneralHolyPriest_MouseoverHeal_enable
	Nova_TargetHeal = PQI_VachiusaGeneralHolyPriest_TargetHeal_enable
	Nova_NPCMouseoverHeal = PQI_VachiusaGeneralHolyPriest_NPCMouseoverHeal_enable
	Nova_PetHeal = PQI_VachiusaGeneralHolyPriest_PetHeal_enable
	Vdebug = PQI_VachiusaGeneralHolyPriest_Vdebug_enable	

	
	if Nova_LowHP == nil then Nova_LowHP = 80 end
	if Nova_ActualHP == nil or Nova_ActualHP then Nova_ActualHP = false end
	
	-- Hotkeys
	if not PQI_Hotkeys_Functions_Set then
		function PQI_PauseRotation()
			if PQI_VachiusaHealingHolyPriest_PauseRotation_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_PauseRotation_key) then
			return true else return false 
		end	end
		function PQI_DivineHymn()
			if PQI_VachiusaHealingHolyPriest_DivineHymn_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_DivineHymn_key) then
			return true else return false
		end	end		
		function PQI_HolyWordSanctuary()
			if PQI_VachiusaHealingHolyPriest_HolyWordSanctuary_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_HolyWordSanctuary_key) then
			return true else return false
		end	end			
		function PQI_DPSOnly()
			if PQI_VachiusaHealingHolyPriest_DPSOnly_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_DPSOnly_key) then
			return true else return false
		end	end	
		function PQI_DropAtMouseover()
			if PQI_VachiusaHealingHolyPriest_DropAtMouseover_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_DropAtMouseover_key) then
			return true else return false
		end	end			
		function PQI_MassDispel()
			if PQI_VachiusaHealingHolyPriest_MassDispel_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_MassDispel_key) then
			return true else return false
		end	end	
		function PQI_Lightwell()
			if PQI_VachiusaHealingHolyPriest_Lightwell_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_Lightwell_key) then
			return true else return false
		end	end		
		function PQI_HymnOfHope()
			if PQI_VachiusaHealingHolyPriest_HymnOfHope_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_HymnOfHope_key) then
			return true else return false
		end	end			
		function PQI_AddingPlayersCT()
			if PQI_VachiusaHealingHolyPriest_AddingPlayersCT_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_AddingPlayersCT_key) then
			return true else return false
		end	end	
		function PQI_RemovingPlayersCT()
			if PQI_VachiusaHealingHolyPriest_RemovingPlayersCT_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPriest_RemovingPlayersCT_key) then
			return true else return false
		end	end			
	end	
	
	Nova_PauseRotationCheck = PQI_VachiusaHealingHolyPriest_PauseRotation_enable
	Nova_MDivineHymnCheck = PQI_VachiusaHealingHolyPriest_DivineHymn_enable
	Nova_HolyWordSanctuaryCheck = PQI_VachiusaHealingHolyPriest_HolyWordSanctuary_enable
	Nova_DPSOnlyCheck = PQI_VachiusaHealingHolyPriest_DPSOnly_enable
	Nova_DropAtMouseoverCheck = PQI_VachiusaHealingHolyPriest_DropAtMouseover_enable
	Nova_MassDispelCheck = PQI_VachiusaHealingHolyPriest_MassDispel_enable
	Nova_LightwellCheck = PQI_VachiusaHealingHolyPriest_Lightwell_enable
	Nova_MVHymnOfHopeCheck = PQI_VachiusaHealingHolyPriest_HymnOfHope_enable
	Nova_AddingPlayersCTCheck = PQI_VachiusaHealingHolyPriest_AddingPlayersCT_enable
	Nova_RemovingPlayersCTCheck = PQI_VachiusaHealingHolyPriest_RemovingPlayersCT_enable
	
	VachiusaHolyPriest_PauseRotation_key = PQI_PauseRotation()
	VachiusaHolyPriest_DivineHymn_key = PQI_DivineHymn()
	VachiusaHolyPriest_HolyWordSanctuary_key = PQI_HolyWordSanctuary()
	VachiusaHolyPriest_DPSOnly_key = PQI_DPSOnly()
	VachiusaHolyPriest_DropAtMouseover_key = PQI_DropAtMouseover()
	VachiusaHolyPriest_MassDispel_key = PQI_MassDispel()
	VachiusaHolyPriest_Lightwell_key = PQI_Lightwell()
	VachiusaHolyPriest_HymnOfHope_key = PQI_HymnOfHope()
	VachiusaHolyPriest_AddingPlayersCT_key = PQI_AddingPlayersCT()
	VachiusaHolyPriest_RemovingPlayersCT_key = PQI_RemovingPlayersCT()	

	--Set PQI
	if not PQI_VachiusaHolyPriest_Set and VachiusaHolyPriest_AutoOpenPQIOptions_enable ~= nil then
		RunMacroText(&amp;quot;/PQI show&amp;quot;)
		RunMacroText(&amp;quot;/PQI config show&amp;quot;)
		RunMacroText(&amp;quot;/PQI config width 220&amp;quot;)
		if not VachiusaHolyPriest_AutoOpenPQIOptions_enable then
		RunMacroText(&amp;quot;/PQI config hide&amp;quot;) end
		PQI_VachiusaHolyPriest_Set = true
	end
end

--PQI is not loading variables instantly any more ?_? need to delay till they are loaded to avoid errors!
if PQI_Variables_Loaded == nil then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 54Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_54EventsCheck 
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	local boss,bossid = bossid()
	local dispelid = 527		
	local dispelmagicid = 528
	local rangecheckid = 2050
	local buff = { }	
	stopcasting = false
	stopfade = false
	stopdps = false
	LLdebuff = false
	LLdebuffunit = false
	if UnitExists(boss) then
		--local _, _, rdifficulty = GetInstanceInfo()
		if bossid == 71515 then --General Nazgrim
			if UnitBuffID(&amp;quot;boss1&amp;quot;, 143593) then --Defensive Stance
				stopdps = true				
			else
				stopdps = false
			end
		elseif bossid == 71995 or bossid == 71996 or bossid == 72000 then --Amalgam of Corruption - Norushen
			if UnitDebuffID(&amp;quot;player&amp;quot;,144850) --Test of Reliance
			then 
				BossSheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, 3, true, rangecheckid)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true
				local buff  = { 144514 } --Lingering Corruption
				RaidDispel(dispelid,buff) 	
			end
		elseif bossid == 71475 or bossid == 71479 or bossid == 71480 then --The Fallen Protectors
			local buff  = { 143434 } --Shadow Word: Bane
			RaidDispel(dispelid,buff) 	
		elseif bossid == 71734 then --Sha of Pride
			if UnitDebuffID(&amp;quot;player&amp;quot;,144359) then
				local buff  = { 144351 } --Mark of Arrogance
				RaidDispel(dispelid,buff) 			
			end
		elseif bossid == 71454 then --Malkorok	
			local buff  = { 142913 } 	
			RaidRangeDispel(dispelid,buff,8) 	
			if UnitDebuffID(&amp;quot;player&amp;quot;,142861) then --Ancient Miasma			
				ShieldSheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true					
			end
		elseif bossid == 71161 then --Kil&amp;apos;ruk the Wind-Reaver - Paragons of the Klaxxi
			if UnitDebuffID(&amp;quot;player&amp;quot;,141858) then --Ingenious			
				if not tIngenious or (#tIngenious &amp;gt; 0 and (GetTime() &amp;gt; tIngenious[1].Time + 30)) then
					tIngenious = { }						
					local qTime = GetTime() 
					local lastmax = 0
					local maxunit = &amp;quot;player&amp;quot;		
					local lasttype = &amp;quot;notype&amp;quot;						
					local ClassList = { {&amp;apos;WARRIOR&amp;apos;, 0 }, {&amp;apos;PALADIN&amp;apos;, 0 }, {&amp;apos;HUNTER&amp;apos;, 0 }, {&amp;apos;ROGUE&amp;apos;, 0 }, {&amp;apos;PRIEST&amp;apos;, 0 }, {&amp;apos;DEATHKNIGHT&amp;apos;, 0 }, {&amp;apos;SHAMAN&amp;apos;, 0 }, {&amp;apos;MAGE&amp;apos;, 0 }, {&amp;apos;WARLOCK&amp;apos;, 0 }, {&amp;apos;MONK&amp;apos;, 0 }, {&amp;apos;DRUID&amp;apos;, 0 } }				
					local RaceList = { {&amp;apos;Draenei&amp;apos;, 0 }, {&amp;apos;Gnome&amp;apos;, 0 }, {&amp;apos;Human&amp;apos;, 0 }, {&amp;apos;NightElf&amp;apos;, 0 }, {&amp;apos;Worgen&amp;apos;, 0 }, {&amp;apos;Pandaren&amp;apos;, 0 }, {&amp;apos;BloodElf&amp;apos;, 0 }, {&amp;apos;Goblin&amp;apos;, 0 }, {&amp;apos;Orc&amp;apos;, 0 }, {&amp;apos;Tauren&amp;apos;, 0 }, {&amp;apos;Troll&amp;apos;, 0 }, {&amp;apos;Scourge&amp;apos;, 0 } }
					for i=1,25 do
						local unitCheck = &amp;quot;raid&amp;quot;..i
					    if UnitExists(unitCheck) and UnitIsPlayer(unitCheck) then
					    	local _, unitClass = UnitClass(unitCheck)				    	
					    	local _, unitRace = UnitRace(unitCheck)				    	
					        if unitClass and UnitRace then	
								--Class
								for j=1, #ClassList do
									if unitClass == ClassList[j][1] then
										--PQR_WriteToChat(&amp;quot;Debug1 - Num: &amp;quot; ..ClassList[j][2]..&amp;quot; - Class: &amp;quot; ..ClassList[j][1])
										ClassList[j][2] = ClassList[j][2] + 1
										if ClassList[j][2] &amp;gt; lastmax then
											lastmax = ClassList[j][2]
											maxunit = unitCheck
											lasttype = ClassList[j][1]
										end												
									end		
								end
								--Race
								for j=1, #RaceList do
									if unitRace == RaceList[j][1] then
										--PQR_WriteToChat(&amp;quot;Debug1 - Num: &amp;quot; ..RaceList[j][2]..&amp;quot; - Race: &amp;quot; ..RaceList[j][1])
										RaceList[j][2] = RaceList[j][2] + 1
										if RaceList[j][2] &amp;gt; lastmax then
											lastmax = RaceList[j][2]
											maxunit = unitCheck
											lasttype = RaceList[j][1]
										end												
									end		
								end
					        end			               	
					    end
					end				
					--PQR_WriteToChat(&amp;quot;Debug1 - Unit: &amp;quot; ..maxunit..&amp;quot; - Type: &amp;quot; ..lasttype..&amp;quot; - Total: &amp;quot; ..lastmax..&amp;quot; - Time: &amp;quot; ..qTime)		
					table.insert(tIngenious, { Unit = maxunit, Type = lasttype, Total = lastmax, Time = qTime } )			
					return true								
				else
					if #tIngenious &amp;gt; 0 then			
						if UnitExists(tIngenious[1].Unit) 
						and IsSpellInRange(GetSpellInfo(rangecheckid),tIngenious[1].Unit) == 1
						and CanHeal(tIngenious[1].Unit) then	
			    			TargetUnit(tIngenious[1].Unit) 
			                --Press the ExtraActionButton 
			                RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)                     
			                RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
			                --PQR_WriteToChat(&amp;quot;Ingenious Name: &amp;quot;..UnitName(tIngenious[1].Unit)..&amp;quot; - Type: &amp;quot;..tIngenious[1].Type..&amp;quot; - Total: &amp;quot;..tIngenious[1].Total..&amp;quot; - Time: &amp;quot;..tIngenious[1].Time)						        					        	   	
						end
					end				
				end   				
			else
				tIngenious = false
			end
		elseif bossid == 71529 then --Thok the Bloodthirsty
			local buff  = { 143791 } --Corrosive Blood
			RaidDispel(dispelid,buff) 
			local DeafeningScreech = GetSpellInfo(143343) --Deafening Screech
			local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(boss) 
			if (bossCasting == DeafeningScreech) then
				stopcasting = true
			end							
		end	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- NPCMouseoverHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--NPCMouseoverHeal
if Nova_NPCMouseoverHeal
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
then
	local dispelid = 527		
	local dispelmagicid = 528
	local rangecheckid = 2050	
	if UnitExists(&amp;quot;mouseover&amp;quot;)				
	and not UnitIsPlayer(&amp;quot;mouseover&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;mouseover&amp;quot;):sub(6,10), 16) 				
		if npcID == 71604 --Contaminated Puddle - Immerseus - SoO
		or npcID == 71995 or npcID == 71996 or npcID == 72000 --Norushen
		or npcID == 71357 --Wrathion 
		then				
			if IsSpellInRange(GetSpellInfo(rangecheckid),&amp;quot;mouseover&amp;quot;) --FlashHeal
			and Nova_UnitInfo(&amp;quot;mouseover&amp;quot;) &amp;lt; 100 then																								
			 	if PQR_SpellAvailable(2061) 		 
				 and IsUsableSpell(2061) 
				 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 70
				 and not UnitChannelInfo(&amp;quot;player&amp;quot;)
				 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
					CastSpellByName(tostring(GetSpellInfo(2061)),&amp;quot;mouseover&amp;quot;)	 			 		
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast FlashHeal - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 	
			 		return true
				end
				
				if PQR_SpellAvailable(2060)  
				and IsUsableSpell(2060)
				and not UnitChannelInfo(&amp;quot;player&amp;quot;)
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 					
					CastSpellByName(tostring(GetSpellInfo(2060)),&amp;quot;mouseover&amp;quot;)	 						 		
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast GreaterHeal - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 	
			 		return true
			 	end									
			end
		end		
	elseif UnitExists(&amp;quot;focus&amp;quot;)				
	and not UnitIsPlayer(&amp;quot;focus&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;focus&amp;quot;):sub(6,10), 16) 				
		if npcID == 71604 --Contaminated Puddle - Immerseus - SoO
		or npcID == 71995 or npcID == 71996 or npcID == 72000 --Norushen
		or npcID == 71357 --Wrathion 
		then
			if IsSpellInRange(GetSpellInfo(rangecheckid),&amp;quot;focus&amp;quot;) --FlashHeal
			then		
				local focushp = CalculateHP(&amp;quot;focus&amp;quot;)
				if focushp ~= nil and select(2, CalculateHP(&amp;quot;focus&amp;quot;)) ~= nil then
					table.insert(members, { Unit = &amp;quot;focus&amp;quot;, HP = focushp, AHP = select(2, CalculateHP(&amp;quot;focus&amp;quot;)), IsNPC = true } )
				end
				if #members &amp;gt; 0 then
					table.sort(members, function(x,y) return x.HP &amp;lt; y.HP end)
				end				
			end
		end	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- QueueSys</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- QueueSys
if Nova_QueueSysCheck 
then
	local dispelid = 527		
	local dispelmagicid = 528
	local rangecheckid = 2050
	if #Queue_Sys &amp;gt; 0 then	
		if PQR_SpellAvailable(dispelid) 
		and select(2,GetSpellCooldown(dispelid)) &amp;lt; 2
		and UnitExists(Queue_Sys[1].Unit)
		and IsUsableSpell(dispelid)
		and IsSpellInRange(GetSpellInfo(dispelid),Queue_Sys[1].Unit) == 1
		and CanHeal(Queue_Sys[1].Unit)
		and not PQR_IsOutOfSight(Queue_Sys[1].Unit) then
			if not UnitChannelInfo(&amp;quot;player&amp;quot;)
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			then	
				CastSpellByName(tostring(GetSpellInfo(dispelid)),Queue_Sys[1].Unit)				
				return true	
			end
		end
	end
	
	if Queue_Spell then
		if #Queue_Spell &amp;gt; 0 then	
			if GetTime() - Queue_Spell[1].Time &amp;gt;= 10 then
				--PQR_WriteToChat(&amp;quot;Removed expired queue &amp;quot;..Queue_Spell[1].SpellID)
				Queue_Spell = { }				
				return true
			end			
			if #Queue_Spell &amp;gt; 1 then			
				if Queue_Spell[1].SpellID == Queue_Spell[2].SpellID and Queue_Spell[1].Unit == Queue_Spell[2].Unit then
					--PQR_WriteToChat(&amp;quot;Removed dup queue &amp;quot;..Queue_Spell[1].SpellID)
					table.remove(Queue_Spell,2)	
					return true	
				end
			end
			
			local qunit = &amp;quot;player&amp;quot;
			if Queue_Spell[1].Unit == &amp;quot;low&amp;quot; then
				qunit = members[1].Unit
			elseif Queue_Spell[1].Unit == &amp;quot;tank&amp;quot; then
				if #Nova_Tanks &amp;gt; 0 then
					for i=1, #Nova_Tanks do
						if UnitThreatSituation(Nova_Tanks[i].Unit) then
							qunit = Nova_Tanks[i].Unit
							break
						end
					end
				end
				if UnitThreatSituation(members[1].Unit)	== 3 then
				 	qunit = members[1].Unit
				end			
			else
				qunit = Queue_Spell[1].Unit
			end
			
			if PQR_SpellAvailable(tonumber(Queue_Spell[1].SpellID)) 
			and select(2,GetSpellCooldown(tonumber(Queue_Spell[1].SpellID))) &amp;lt; 2
			and UnitExists(qunit)
			then
				if not UnitChannelInfo(&amp;quot;player&amp;quot;)
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
				then					
					local qmembers = members
					table.sort(qmembers, function(x) return UnitIsUnit(qunit,x.Unit) end)
					if UnitIsUnit(qmembers[1].Unit,qunit) then
						qunit = qmembers[1].Unit	
					else
						if IsSpellInRange(GetSpellInfo(Queue_Spell[1].SpellID),Queue_Spell[1].Unit) then
							qunit = Queue_Spell[1].Unit	
						else
							qunit = &amp;quot;player&amp;quot;			
						end
					end
					SpellSUCCEEDED(Queue_Spell[1].SpellID,qunit)
					CastSpellByName(tostring(GetSpellInfo(Queue_Spell[1].SpellID)),qunit)									
					return true						
				end
			end						
		end
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Chakra</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Chakra
if not UnitBuffID(&amp;quot;player&amp;quot;, 81206) --Chakra: Sanctuary
and not UnitBuffID(&amp;quot;player&amp;quot;, 81209) --Chakra: Chastise 
and not UnitBuffID(&amp;quot;player&amp;quot;, 81208) --Chakra: Serenity
and select(2,GetSpellCooldown(tonumber(81206))) &amp;lt; 2
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 
	CastSpellByName(tostring(GetSpellInfo(81206),nil)) --Chakra: Sanctuary
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HaloComboSmart</Name><Default>false</Default><SpellID>120517</SpellID><Actions></Actions><Lua>if Nova_HaloCheck then
	if PQR_SpellAvailable(120517)
	 and not stopdps
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 15
	 and select(2,GetSpellCooldown(120517)) &amp;lt; 2
	 and IsUsableSpell(120517) 
	 and select(2,GetTalentRowSelectionInfo(6)) == 18 --check talent
	 and AverageHealth(Nova_HaloLimit) &amp;lt;= Nova_Halo --total of 15 players/enemies can be hit
	 and not UnitChannelInfo(&amp;quot;player&amp;quot;)	
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		if not UnitBuffID(&amp;quot;player&amp;quot;, 81206) 
		and Nova_ChakraSanctuaryAOECheck
		and select(2,GetSpellCooldown(tonumber(81206))) &amp;lt; 2
		then --Chakra: Sanctuary
			CastSpellByName(tostring(GetSpellInfo(81206),nil))	 
		end
			 
		if GetInventoryItemCooldown(10)==0 
		then
			UseInventoryItem(10)
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGloves Engineer buff!&amp;quot;)			
		end	 
			
		if PQR_SpellAvailable(10060)
		and select(2,GetSpellCooldown(10060)) &amp;lt; 2 
		and select(2,GetTalentRowSelectionInfo(5)) == 14 
		then
	 		CastSpellByName(tostring(GetSpellInfo(10060),nil))	 
	 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFPower Infusion!&amp;quot;)
		end	 
		 	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHalo Combo Auto!&amp;quot;)	
		return true		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- ModKey</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- DPS Burst toggle function
if Nova_DPSOnlyCheck then
	if not DPSBurstMode then DPSBurstMode = false end
	if not DPSBurstModetimer then DPSBurstModetimer = 0 end
	if (VachiusaHolyPriest_DPSOnly_key and not GetCurrentKeyBoardFocus()) and GetTime() - DPSBurstModetimer &amp;gt; 1 then
		DPSBurstModetimer = GetTime()	
		if DPSBurstMode then
			DPSBurstMode = false
			PQR_WriteToChat(&amp;quot;|cff347C2CDPS Burst Mode: |cffDC143COff|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)
		else
			DPSBurstMode = true
			PQR_WriteToChat(&amp;quot;|cff347C2CDPS Burst Mode: |cff79BAECOn|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)		
		end
	end
end

-- Drop At Mouseover function
if Nova_DropAtMouseoverCheck then
	if not DAMMode then DAMMode = false end
	if not DAMModetimer then DAMModetimer = 0 end
	if (VachiusaHolyPriest_DropAtMouseover_key and not GetCurrentKeyBoardFocus()) and GetTime() - DAMModetimer &amp;gt; 1 then
		DAMModetimer = GetTime()	
		if DAMMode then
			DAMMode = false
			PQR_WriteToChat(&amp;quot;|cff347C2CDrop At Mouseover Mode: |cffDC143COff|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)
		else
			DAMMode = true
			PQR_WriteToChat(&amp;quot;|cff347C2CDrop At Mouseover Mode: |cff79BAECOn|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)		
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DPSBurstMode</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_DPSOnlyCheck and DPSBurstMode then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not stopdps	 
	and UnitExists(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) 
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		--Chakra
		if not UnitBuffID(&amp;quot;player&amp;quot;, 81209) --Chakra: Chastise 
		and select(2,GetSpellCooldown(tonumber(81209))) &amp;lt; 2
		then 
			CastSpellByName(tostring(GetSpellInfo(81209),nil)) --Chakra: Sanctuary
		end	
		
		local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,589,&amp;quot;PLAYER&amp;quot;)			
		if PQR_SpellAvailable(14914) --Holy Fire or Solace and Insanity		
		and IsSpellInRange(GetSpellInfo(14914),&amp;quot;target&amp;quot;) == 1
		and ((GetSpellCooldown(129250) == 0	and select(2,GetTalentRowSelectionInfo(3)) == 9) or (GetSpellCooldown(14914) == 0 and select(2,GetTalentRowSelectionInfo(3)) ~= 9))
		and IsUsableSpell(14914)
		then	
			CastSpellByName(tostring(GetSpellInfo(14914),&amp;quot;target&amp;quot;))	 
			return true
		elseif PQR_SpellAvailable(32379) --SW:D		
		and IsSpellInRange(GetSpellInfo(32379),&amp;quot;target&amp;quot;) == 1
		and select(2,GetSpellCooldown(32379)) &amp;lt; 2
		and IsUsableSpell(32379)
		then	
			CastSpellByName(tostring(GetSpellInfo(32379),&amp;quot;target&amp;quot;))	 
			return true			
		elseif PQR_SpellAvailable(589) --SW:P		
		and SWP == nil 
		and IsSpellInRange(GetSpellInfo(589),&amp;quot;target&amp;quot;) == 1
		and select(2,GetSpellCooldown(589)) &amp;lt; 2
		and IsUsableSpell(589)
		then			
			CastSpellByName(tostring(GetSpellInfo(589),&amp;quot;target&amp;quot;))	 
			return true 
		elseif PQR_SpellAvailable(88625) --Holy Word: Chastise	
		and UnitBuffID(&amp;quot;player&amp;quot;, 81209)
		and IsSpellInRange(GetSpellInfo(88625),&amp;quot;target&amp;quot;) == 1
		and select(2,GetSpellCooldown(88625)) &amp;lt; 2
		and IsUsableSpell(88625)
		then	
			CastSpellByName(tostring(GetSpellInfo(88625),&amp;quot;target&amp;quot;))	 
			return true						 
		elseif PQR_SpellAvailable(585) --Smite
		and not Nova_Moving		
		and IsSpellInRange(GetSpellInfo(585),&amp;quot;target&amp;quot;) == 1
		and select(2,GetSpellCooldown(585)) &amp;lt; 2
		and IsUsableSpell(585)
		then	
			CastSpellByName(tostring(GetSpellInfo(585),&amp;quot;target&amp;quot;))	 
			return true 
		else
			return true 
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DivineStar</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DivineStar
if Nova_DivineStarCheck then
	if not DS_Queue then DS_Queue = {} end	
	if select(2,GetTalentRowSelectionInfo(6)) == 17 then
		if select(2,GetSpellCooldown(110744)) &amp;gt; 2 then	
			DS_Queue = {}
			if aDSturn then
				aDSturn = false
				TurnRightStop() TurnLeftStop() 	 
			end
		end
		if #DS_Queue &amp;gt; 0 then
			if (GetTime() - DS_Queue[1].Time) &amp;gt; 3 then	
				DS_Queue = {}
				aDSturn = false
				TurnRightStop() TurnLeftStop() 	 				
			end
		end		
		if Nova_Moving and aDSturn then
			DS_Queue = {}
			aDSturn = false
			TurnRightStop() TurnLeftStop() 	 		
		end	
	end
end

if Nova_DivineStarCheck
and PQR_SpellAvailable(110744) 
and select(2,GetTalentRowSelectionInfo(6)) == 17		
and select(2,GetSpellCooldown(110744)) &amp;lt; 2
and not stopdps		
and not UnitChannelInfo(&amp;quot;player&amp;quot;)	
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
and UnitAffectingCombat(&amp;quot;player&amp;quot;) 
then	
	if lowhpmembers &amp;gt;= Nova_DivineStarLimit then		
		if #DS_Queue &amp;lt; 1 then
			PRGetDistanceTable(Nova_DivineStar, 4, Nova_DivineStarLimit)	
			PRGetDistanceTablebyHP(Nova_DivineStar,Nova_DivineStarLimit)
												
			if IsSpellInRange(GetSpellInfo(2050),prdistancebyhp[1].Unit) == 1 --30 yards
			and not UnitIsUnit(prdistancebyhp[1].Unit, &amp;quot;player&amp;quot;)
			and (prdistancebyhp[1].PD &amp;gt;= Nova_DivineStarLimit)
			and prdistancebyhp[1].HP &amp;lt;= Nova_DivineStar then
				table.insert(DS_Queue, { Unit = prdistancebyhp[1].Unit, Time = GetTime() } )
			end	
		end
		
		if #DS_Queue &amp;gt; 0 then
			local DSUnit = DS_Queue[1].Unit 
			local px, tx, angle, dwt = VUnitFacing(DSUnit)			
			if px ~= 0 
			and tx ~= 0 
			and not IsMouselooking()
			and dwt &amp;lt;= 30 then	
				if angle &amp;gt; 0 
				and angle &amp;lt; 16 then 
					aDSturn = true
					TurnLeftStart() 			
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFTurn Left&amp;quot;)	
				end
				if angle &amp;gt; 15 
				and angle &amp;lt; 31 then 
					aDSturn = true
					TurnRightStart() 				
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFTurn Right&amp;quot;)	
				end
				if angle == 31 
				or angle == 0 then 			
					TurnRightStop() TurnLeftStop() 	      		
					CastSpellByName(tostring(GetSpellInfo(110744)),nil)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast &amp;quot;..GetSpellInfo(110744)..&amp;quot; - Name: &amp;quot; ..UnitName(DSUnit))					
				end						
			else
				DS_Queue = {}
			end			
			return true	
		end		
	end		
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PRIEST>