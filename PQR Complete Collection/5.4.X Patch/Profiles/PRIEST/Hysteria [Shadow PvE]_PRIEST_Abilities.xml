<?xml version="1.0" encoding="utf-8" ?><PRIEST><Ability><Name>[Misc] Profile Init</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>------------------------------------------------------------
-- Variables &amp; Sanity checks
------------------------
-- PQInterface
if not IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;) then
		PQR_WriteToChat(&amp;quot;|cff9482C9The AddOn PQInterface is not loaded or installed!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9Version 2.22+ is required to run the profile.|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9You can get the latest version at this location:|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9http://pqrotation.wikia.com/wiki/PQInterface|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_StopRotation()
		return true
else
	local PQIver = tonumber(GetAddOnMetadata(&amp;quot;PQInterface&amp;quot;,&amp;quot;Version&amp;quot;))
	if PQIver &amp;lt; 2.22 then
		PQR_WriteToChat(&amp;quot;|cff9482C9Your PQInterface version is outdated!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9Version 2.22+ is required to run the profile, you have version &amp;quot;..PQIver..&amp;quot;!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9You can get the latest version at this location:|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9http://pqrotation.wikia.com/wiki/PQInterface|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_StopRotation()
		return true
	end
end

-- Initialize Load-Once Settings
if PQR_RotationStarted then
	PQR_RotationStarted = false

	-- Load Data Files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Hysteria_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737PQR_Hysteria_Data.lua failed to load. Make sure it&amp;apos;s in your Data folder!|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737PQR_PQI.lua failed to load. Make sure it&amp;apos;s in your Data folder!|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
	
	if not mentallyPriestFirstStart then
		-- Initialize Event Tracker
		local Hysteria = CreateFrame(&amp;quot;Frame&amp;quot;)
		Hysteria:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
		Hysteria:SetScript(&amp;quot;OnEvent&amp;quot;, HysteriaFrame_OnEvent)
		Hysteria:Show()
		
		mentallyPriestFirstStart = true
		PQR_WriteToChat(&amp;quot;|cff69CCF0Hysteria Priest data is |cff82cee7Loaded!|cffffffff&amp;quot;)
	end
end

-- Slash Command Queue
SLASH_ecast1 = &amp;quot;/ecast&amp;quot;
function SlashCmdList.ecast(ecast, editbox)
	if tonumber(ecast) ~= nil then PQ_QueuedSpell = ecast
		else print(&amp;quot;You can only pass a spell ID to /ecast!&amp;quot;) end
end

-- Initialize Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = 0.5
isCleave = strmatch(PQR_RotationName, &amp;quot;Cleave&amp;quot;)


------------------------------------------------------------
-- Misc. Checks
------------------------
-- We want to pause the entire profile when we&amp;apos;re doing certain things..
--if pauseProfile() then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Combat Detection</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_MentallyShadowOffensive_CombatDetection_enable then return false end

if (not UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;))
	or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Blast</Name><Default>false</Default><SpellID>8092</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local PQ_MB = PQ_MB
local TargetValidation = TargetValidation

if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_MB) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_MB) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Flay</Name><Default>false</Default><SpellID>585</SpellID><Actions></Actions><Lua>local PQ_MF = PQ_MF
local PQ_Smite = 585
local TargetValidation = TargetValidation

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_MF) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_Smite) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local shadowWordPain = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))
local max_timer = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if not PQR_SpellAvailable(PQ_SWP) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWP) and isMindControledUnit(&amp;quot;target&amp;quot;) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if shadowWordPain then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if dotTracker[i].crit == true then if shadowWordPain - GetTime() &amp;lt; max_timer/2 then return true end end
					if dotTracker[i].crit == false then if shadowWordPain - GetTime() &amp;lt; max_timer-1 then return true end end
				else
					if mentallyPower(589) &amp;gt; dotTracker[i].swpPower then return true
					else
						if shadowWordPain - GetTime() &amp;lt; tick then return true end
					end
				end
			end
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local GCD = PQ_Round(1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1),2)
local vampiricTouch = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;))

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_VT) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_VT) and isMindControledUnit(&amp;quot;target&amp;quot;) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if vampiricTouch then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
				if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then
					--if vampiricTouch - GetTime() &amp;lt; 10 then return true end
					return true
				else
					if vampiricTouch - GetTime() &amp;lt; GCD + tick then return true end
				end
			end
		end
	else return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Devouring Plague</Name><Default>false</Default><SpellID>2944</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local SCD = SCD
local PQ_DP = PQ_DP
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo
local shadowOrbs = select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;))

-- Sanity Checks
if SCD then return false end
if shadowOrbs &amp;lt; 3 then return false end
if not PQR_SpellAvailable(PQ_DP) then return false end

if TargetValidation(&amp;quot;target&amp;quot;, PQ_DP) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Level 90 Talent</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_Star = PQ_Star
local PQ_Halo = PQ_Halo
local PQ_DStar = PQ_DStar
local PQ_Cascade = PQ_Cascade
local PQ_DCascade = PQ_DCascade
local PQ_DarkHalo = PQ_DarkHalo

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

-- Halo
if IsPlayerSpell(PQ_Halo) and PQR_SpellAvailable(PQ_DarkHalo) then
	if PQI_MentallyShadowOffensive_AutoLevel90Talent_enable then
		SpellCancelQueuedSpell()
		CastSpellByName(GetSpellInfo(PQ_DarkHalo),&amp;quot;target&amp;quot;)
		return true
	else
		if not PQI_MentallyShadowOffensive_Level90Talent_enable then return false end
		if PQI:IsHotkeys(PQI_MentallyShadowOffensive_Level90Talent_key) and not GetCurrentKeyBoardFocus() then
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(PQ_DarkHalo),&amp;quot;target&amp;quot;)
			return true
		end
	end
end

-- Divine Star
if IsPlayerSpell(PQ_Star) and PQR_SpellAvailable(PQ_DStar) then
	if PQI_MentallyShadowOffensive_AutoLevel90Talent_enable then
		SpellCancelQueuedSpell()
		CastSpellByName(GetSpellInfo(PQ_DStar),&amp;quot;target&amp;quot;)
		return true
	else
		if not PQI_MentallyShadowOffensive_Level90Talent_enable then return false end
		if PQI:IsHotkeys(PQI_MentallyShadowOffensive_Level90Talent_key) and not GetCurrentKeyBoardFocus() then
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(PQ_DStar),&amp;quot;target&amp;quot;)
			return true
		end
	end
end

-- Cascade
if IsPlayerSpell(PQ_Cascade) and UnitExists(&amp;quot;target&amp;quot;) and PQR_SpellAvailable(PQ_DCascade) and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) then
	if PQI_MentallyShadowOffensive_AutoLevel90Talent_enable then
		SpellCancelQueuedSpell()
		CastSpellByName(GetSpellInfo(PQ_DCascade),&amp;quot;target&amp;quot;)
		return true
	else
		if not PQI_MentallyShadowOffensive_Level90Talent_enable then return false end
		if PQI:IsHotkeys(PQI_MentallyShadowOffensive_Level90Talent_key) and not GetCurrentKeyBoardFocus() then
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(PQ_DCascade),&amp;quot;target&amp;quot;)
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Spike (1)</Name><Default>false</Default><SpellID>73510</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local PQ_SOD = PQ_SOD
local TargetValidation = TargetValidation
local surgeOfDarkness = select(4,UnitBuffID(&amp;quot;player&amp;quot;,PQ_SOD))

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

-- Sanity Checks
if not PQR_SpellAvailable(PQ_MS) then return false end
if not surgeOfDarkness then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_MS) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Spike (2)</Name><Default>false</Default><SpellID>73510</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local PQ_SOD = PQ_SOD
local TargetValidation = TargetValidation
local surgeOfDarkness = select(4,UnitBuffID(&amp;quot;player&amp;quot;,PQ_SOD))

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

-- Sanity Checks
if not PQR_SpellAvailable(PQ_MS) then return false end
if not surgeOfDarkness or surgeOfDarkness &amp;lt; 2 then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_MS) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Shadowfiend</Name><Default>false</Default><SpellID>34433</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local SCD = SCD
local PQ_SF = PQ_SF
local SpecialUnit = SpecialUnit
local TargetValidation = TargetValidation

-- Ability disabled in PQI
if not PQI_MentallyShadowOffensive_AutoShadowfiend_enable then return false end

-- Did we enable boss only CDs?
if PQI_MentallyShadowOffensive_BossCooldown_enable then
	if not SpecialUnit() then return false end
end
	
-- Cast Mindbender / Shadowfiend
if TargetValidation(&amp;quot;target&amp;quot;, PQ_SF) and not SCD then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (UVLS)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local shadowWordPain = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))

if not PQR_SpellAvailable(PQ_SWP) then return false end

if UnitBuffID(&amp;quot;player&amp;quot;,138963) and isMindControledUnit(&amp;quot;target&amp;quot;) then
	if #dotTracker &amp;gt; 0 then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
				if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWP) then return true end
			end
		end
	else
		if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWP) then return true end
	end
end</Lua><RecastDelay>5000</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (High)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_BM = PQ_MB
local PQ_SWP = PQ_SWP
local spellCooldown = spellCooldown
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo
local isMindControledUnit = isMindControledUnit
local shadowOrbs = select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;))
local shadowWordPain = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))

if shadowOrbs ~= 2 then return false end 
if PQR_IsMoving(0.1) then return false end
if spellCooldown(PQ_MB) &amp;lt; 1 then return false end
if not IsPlayerSpell(139139) then return false end
if not PQR_SpellAvailable(PQ_SWP) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWP) and isMindControledUnit(&amp;quot;target&amp;quot;) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if shadowWordPain then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
				if shadowWordPain - GetTime() &amp;lt; 8 then return true end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Focus)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local shadowWordPain = select(7,UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))
local max_timer = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if not PQR_SpellAvailable(PQ_SWP) then return false end

if TargetValidation(&amp;quot;focus&amp;quot;,PQ_SWP) and isMindControledUnit(&amp;quot;focus&amp;quot;) then
	local id = UnitGUID(&amp;quot;focus&amp;quot;)
	
	if shadowWordPain then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if dotTracker[i].crit == true then if shadowWordPain - GetTime() &amp;lt; max_timer/2 then return true end end
					if dotTracker[i].crit == false then if shadowWordPain - GetTime() &amp;lt; max_timer-1 then return true end end
				else
					if mentallyPower(589) &amp;gt; dotTracker[i].swpPower then return true
					else
						if shadowWordPain - GetTime() &amp;lt; tick then return true end
					end
				end
			end
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Focus</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Mouseover)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local shadowWordPain = select(7,UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))
local max_timer = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if not PQR_SpellAvailable(PQ_SWP) then return false end

if TargetValidation(&amp;quot;mouseover&amp;quot;,PQ_SWP) and isMindControledUnit(&amp;quot;mouseover&amp;quot;) then
	local id = UnitGUID(&amp;quot;mouseover&amp;quot;)
	
	if shadowWordPain then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
				if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
					if dotTracker[i].crit == true then if shadowWordPain - GetTime() &amp;lt; max_timer/2 then return true end end
					if dotTracker[i].crit == false then if shadowWordPain - GetTime() &amp;lt; max_timer-1 then return true end end
				else
					if mentallyPower(589) &amp;gt; dotTracker[i].swpPower then return true
					else
						if shadowWordPain - GetTime() &amp;lt; tick then return true end
					end
				end
			end
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Flay (Insanity)</Name><Default>false</Default><SpellID>585</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local PQ_MF = PQ_MF
local PQ_Smite = 585
local TargetValidation = TargetValidation
local devouringPlague = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;))

if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_MF) then return false end

if devouringPlague and devouringPlague &amp;gt; 0.2 then
	if TargetValidation(&amp;quot;target&amp;quot;,PQ_Smite) then return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Focus)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local GCD = PQ_Round(1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1),2)
local vampiricTouch = select(7,UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;))

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_VT) then return false end

if TargetValidation(&amp;quot;focus&amp;quot;,PQ_VT) and isMindControledUnit(&amp;quot;focus&amp;quot;) then
	local id = UnitGUID(&amp;quot;focus&amp;quot;)
	
	if vampiricTouch then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
				if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then
					--if vampiricTouch - GetTime() &amp;lt; 10 then return true end
					return true
				else
					if vampiricTouch - GetTime() &amp;lt; GCD + tick then return true end
				end
			end
		end
	else return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Focus</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Mouseover)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local GCD = PQ_Round(1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1),2)
local vampiricTouch = select(7,UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;))

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_VT) then return false end

if TargetValidation(&amp;quot;mouseover&amp;quot;,PQ_VT) and isMindControledUnit(&amp;quot;mouseover&amp;quot;) then
	local id = UnitGUID(&amp;quot;mouseover&amp;quot;)
	
	if vampiricTouch then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
				if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then
					--if vampiricTouch - GetTime() &amp;lt; 10 then return true end
					return true
				else
					if vampiricTouch - GetTime() &amp;lt; GCD + tick then return true end
				end
			end
		end
	else return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Rush)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local GCD = PQ_Round(1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1),2)
local vampiricTouch = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;))

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_VT) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_VT) and isMindControledUnit(&amp;quot;target&amp;quot;) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if vampiricTouch then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
				if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then return true
				else
					if vampiricTouch - GetTime() &amp;lt; GCD+0.5 then return true end
				end
			end
		end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (High)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local PQ_BM = PQ_MB
local spellCooldown = spellCooldown
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo
local isMindControledUnit = isMindControledUnit
local shadowOrbs = select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;))
local vampiricTouch = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;))

if shadowOrbs ~= 2 then return false end 
if PQR_IsMoving(0.1) then return false end
if not IsPlayerSpell(139139) then return false end
if spellCooldown(PQ_MB) &amp;lt; 1.5 then return false end
if not PQR_SpellAvailable(PQ_VT) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_VT) and isMindControledUnit(&amp;quot;target&amp;quot;) then
	local id = UnitGUID(&amp;quot;target&amp;quot;)
	
	if vampiricTouch then
		for i=1,#dotTracker do
			if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
				if vampiricTouch - GetTime() &amp;lt; 8 then return true end
			end
		end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Blast (Movement)</Name><Default>false</Default><SpellID>8092</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local PQ_MB = PQ_MB
local PQ_DI = PQ_DI
local TargetValidation = TargetValidation

-- Cast on the move when available
if PQR_IsMoving(0.1) and UnitBuffID(&amp;quot;player&amp;quot;,PQ_DI) then
	if TargetValidation(&amp;quot;target&amp;quot;,PQ_MB) then
		CastSpellByName(GetSpellInfo(PQ_MB),&amp;quot;target&amp;quot;) return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Death (1)</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_SWD = PQ_SWD
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo
local SO = select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;))

if SO &amp;gt; 2 then return false end
if not PQR_SpellAvailable(PQ_SWD) then return false end
if Hysteria_UnitInfo(&amp;quot;target&amp;quot;) &amp;gt; 20 then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWD) then return true end</Lua><RecastDelay>8000</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Death (2)</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_DP = PQ_DP
local PQ_MFI = PQ_MFI
local PQ_SWD = PQ_SWD
local TargetValidation = TargetValidation

if not PQR_SpellAvailable(PQ_SWD) then return false end
if Hysteria_UnitInfo(&amp;quot;target&amp;quot;) &amp;gt; 20 then return false end

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWD) then
	CastSpellByName(GetSpellInfo(PQ_SWD),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Death (Tap)</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_MB = PQ_MB
local PQ_SWD = PQ_SWD
local spellCooldown = spellCooldown
local TargetValidation = TargetValidation
local Hysteria_UnitInfo = Hysteria_UnitInfo
local SO = select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;))

if SO &amp;gt; 2 then return false end
if spellCooldown(PQ_MB) &amp;lt; 1 then return false end
if not PQR_SpellAvailable(PQ_SWD) then return false end
if Hysteria_UnitInfo(&amp;quot;target&amp;quot;) &amp;gt; 20 then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWD) then
	CastSpellByName(GetSpellInfo(PQ_SWD),&amp;quot;target&amp;quot;) return true
end</Lua><RecastDelay>8000</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SCD = SCD
local SpecialUnit = SpecialUnit
local Hysteria_UnitInfo = Hysteria_UnitInfo

-- Don&amp;apos;t use Racials if user tagged off automatic use
if not PQI_MentallyShadowOffensive_AutoRacials_enable then return false end

-- Draenei: Gift of the Naaru
if IsPlayerSpell(59544) and PQR_SpellAvailable(59544) and Hysteria_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt; 60 then
	CastSpellByName(GetSpellInfo(59544),&amp;quot;player&amp;quot;)
	return true
end

-- Did we enable boss only CDs?
if PQI_MentallyShadowOffensive_BossCooldown_enable then
	if not SpecialUnit() then return false end
end

-- Troll: Berserking
if IsPlayerSpell(26297) and not SCD then
	if PQR_SpellAvailable(26297) then
		if UnitExists(&amp;quot;target&amp;quot;) then
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
			return true
		end
	end
end

-- Blood Elf: Arcane Torrent
if IsPlayerSpell(28730) and not SCD then
	if PQR_SpellAvailable(28730) and select(3,Hysteria_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 92
		and UnitExists(&amp;quot;target&amp;quot;) then
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(28730),&amp;quot;player&amp;quot;)
			return true
	end
end

-- Orc: Blood Fury
if IsPlayerSpell(33702) and not SCD then
	if PQR_SpellAvailable(33702) then
		if UnitExists(&amp;quot;target&amp;quot;) then
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(33702),&amp;quot;player&amp;quot;)
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Power Infusion</Name><Default>false</Default><SpellID>10060</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local SCD = SCD
local PQ_PI = PQ_PI
local SpecialUnit = SpecialUnit

-- Ability disabled in PQI
if not PQI_MentallyShadowOffensive_AutoPowerInfusion_enable then return false end

-- Did we enable boss only CDs?
if PQI_MentallyShadowOffensive_BossCooldown_enable then
	if not SpecialUnit() then return false end
end

-- Ability on CD
if not PQR_SpellAvailable(PQ_PI) then return false end

-- Activate Power Infusion
if IsPlayerSpell(PQ_PI) and not SCD then return true end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Automatic Buffing</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_IF = PQ_IF
local PQ_PWF = PQ_PWF
local PQ_SForm = PQ_SForm
local PQ_Round = PQ_Round
local PQ_AuraInfo = PQ_AuraInfo
local GCD = PQ_Round(1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1),2) + 0.2
local permanentBuffs = {PQ_IF,PQ_SForm,PQ_PWF}

-- Global Cooldown.. Make me laugh.
if GCD &amp;lt;= 1 then GCD = 1 end

-- Buff cleanly, please!
if not buffTimer then buffTimer = 0 end
if GetTime() - buffTimer &amp;gt; GCD then
	for i=1,#permanentBuffs do
		if IsPlayerSpell(permanentBuffs[i]) then
			if permanentBuffs[i] == PQ_PWF then
				if not PQ_AuraInfo(2,&amp;quot;player&amp;quot;) then
					CastSpellByName(GetSpellInfo(permanentBuffs[i]),&amp;quot;player&amp;quot;)
					buffTimer = GetTime()
					return true
				end
			else
				if not UnitBuffID(&amp;quot;player&amp;quot;,permanentBuffs[i]) then
					CastSpellByName(GetSpellInfo(permanentBuffs[i]),&amp;quot;player&amp;quot;)
					buffTimer = GetTime()
					return true
				end
			end
		end
	end
end

-- Raid Buffing
if PQI_MentallyShadowDefensive_PauseRotation_enable then
	if IsInRaid() then group = &amp;quot;raid&amp;quot;
		elseif IsInGroup() then group = &amp;quot;party&amp;quot;
	else return false end
	
	for i=1,GetNumGroupMembers() do
		local member = group..i
		if not PQ_AuraInfo(2,member) and IsSpellInRange(GetSpellInfo(PQ_PWF),member) == 1 then
			if UnitIsDeadOrGhost(member) then return false end
			if PQR_IsOutOfSight(member,1) then return false end
			
			CastSpellByName(GetSpellInfo(PQ_PWF),member) return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Hold: Pause Rotation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_MentallyShadowDefensive_PauseRotation_enable then return false end

if PQI:IsHotkeys(PQI_MentallyShadowDefensive_PauseRotation_key)
	and not GetCurrentKeyBoardFocus() then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Huolon Farming</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local TargetValidation = TargetValidation
local SWP = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;))

-- Huolon Autotargetting
if not UnitExists(&amp;quot;target&amp;quot;) then TargetUnit(&amp;quot;Huolon&amp;quot;,1)
else
	local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16) or 0
	
	if npcID ~= 73167 then TargetUnit(&amp;quot;Huolon&amp;quot;,1) end
	if npcID == 73167 then
		if UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) then ClearTarget() end
		if not SWP then
			if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWP) then
				CastSpellByName(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Level 15 Talent</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_MentallyShadowOffensive_Level15Talent_enable then return false end

-- Void Tendrils
if PQI:IsHotkeys(PQI_MentallyShadowOffensive_Level15Talent_key)
	and not GetCurrentKeyBoardFocus()
	and IsPlayerSpell(108920)
	and PQR_SpellAvailable(108920) then
		SpellCancelQueuedSpell() CastSpellByName(GetSpellInfo(108920),&amp;quot;target&amp;quot;) return true
end

-- Psyfiend
if PQI:IsHotkeys(PQI_MentallyShadowOffensive_Level15Talent_key)
	and not GetCurrentKeyBoardFocus()
	and IsPlayerSpell(108921)
	and PQR_SpellAvailable(108921) then
		SpellCancelQueuedSpell()
		CastSpellByID(108921)
		if SpellIsTargeting() then SpellCancelQueuedSpell() CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Spell Queue System</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_MentallyShadowOffensive_SpellQueueType_enable then return false end
local v=PQI_MentallyShadowOffensive_SpellQueueType_value or 1

if v == 1 then
	if IsMouseButtonDown() and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if GetMouseFocus():GetName() ~= nil then
			SpellCancelQueuedSpell()
			RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
		end
	end
elseif v == 2 then
	if GetMouseFocus():GetName() ~= nil and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		SpellCancelQueuedSpell()
		RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
	end
else
	if PQ_QueuedSpell ~= nil then
		if PQR_SpellAvailable(PQ_QueuedSpell) and IsPlayerSpell(PQ_QueuedSpell) then
			if lastSpell and lastSpell == PQ_QueuedSpell then
				PQ_QueuedSpell = nil lastSpell = nil return true
			end
			
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(PQ_QueuedSpell),nil)
			lastSpell = PQ_QueuedSpell
			return true
		end
		PQ_QueuedSpell = nil
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Trigger: Hold Cooldowns</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>------------------------------------------------------------
-- Cooldown Hold Trigger
------------------------
if not SCDtimer then SCDtimer = 0 end
if not SCD then SCD = false end
if not PQI_MentallyShadowOffensive_ToggleHoldCooldown_enable then return false end

if SCD then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cooldown Hold: Enabled&amp;quot;, nil, &amp;quot;DC143C&amp;quot;)
else
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cooldown Hold: Disabled&amp;quot;, nil, &amp;quot;79BAEC&amp;quot;)
end

if PQI_MentallyShadowOffensive_ToggleHoldCooldown_enable
	and not GetCurrentKeyBoardFocus()
	and PQI:IsHotkeys(PQI_MentallyShadowOffensive_ToggleHoldCooldown_key)
	and GetTime() - SCDtimer &amp;gt; 1
then
	SCDtimer = GetTime()
	if SCD then
		SCD = false
		PQR_WriteToChat(&amp;quot;|cff347C2CCooldown Hold: |cff79BAECDisabled|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)
	else
		SCD = true
		PQR_WriteToChat(&amp;quot;|cff347C2CCooldown Hold: |cffDC143CEnabled|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Auto: Vampiric Embrace</Name><Default>false</Default><SpellID>15286</SpellID><Actions></Actions><Lua>if not PQI_MentallyShadowDefensive_AutoVampiricEmbrace_enable then return false end

local PQ_Embrace = PQ_Embrace
local Hysteria_UnitInfo = Hysteria_UnitInfo
local Orbs = select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;))
local v=PQI_MentallyShadowDefensive_AutoVampiricEmbrace_value 

if IsPlayerSpell(PQ_Embrace)
	and Orbs &amp;gt; 2
	and PQR_SpellAvailable(PQ_Embrace)
	and Hysteria_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= v
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Body and Soul</Name><Default>false</Default><SpellID>17</SpellID><Actions></Actions><Lua>local PQ_Shield = PQ_Shield

-- Ability disabled in PQI
if not PQI_MentallyShadowDefensive_BodyandSoul_enable then return false end

-- Do we have Body and Soul?
if IsPlayerSpell(64129) then
	-- Sanity checks
	if not PQR_IsMoving(0.2) then return false end
	if UnitDebuffID(&amp;quot;player&amp;quot;,6788) then return false end
	if not PQR_SpellAvailable(PQ_Shield) then return false end
	
	-- Run Forrest, run!
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Symbiosis</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_Symbiosis = PQ_Symbiosis
local Hysteria_UnitInfo = Hysteria_UnitInfo

-- Ability disabled in PQI
if not PQI_MentallyShadowDefensive_Symbiosis_enable then return false end

-- We don&amp;apos;t have Symbiosis
if not UnitBuffID(&amp;quot;player&amp;quot;,110485) then return false end

-- Tranquility is on a CD
if not PQR_SpellAvailable(PQ_Symbiosis) then return false end

-- Channel Tranquility
if PQI:IsHotkeys(PQI_MentallyShadowDefensive_Symbiosis_key)
	and not GetCurrentKeyBoardFocus() then
		CastSpellByName(GetSpellInfo(PQ_Symbiosis),&amp;quot;player&amp;quot;) return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Dispersion</Name><Default>false</Default><SpellID>47585</SpellID><Actions></Actions><Lua>local PQ_Disp = PQ_Disp

if not PQR_SpellAvailable(PQ_Disp) then return false end
if not PQI_MentallyShadowOffensive_Dispersion_enable then return false end

if PQI:IsHotkeys(PQI_MentallyShadowOffensive_Dispersion_key)
	and not GetCurrentKeyBoardFocus() then SpellStopCasting() return true end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Hysteria_UnitInfo = Hysteria_UnitInfo
local v=PQI_MentallyShadowDefensive_Healthstone_value

-- Disable ability if we disabled it in PQI
if not PQI_MentallyShadowDefensive_Healthstone_enable then return false end

if UnitDebuff(&amp;quot;player&amp;quot;,137633)
	or UnitDebuff(&amp;quot;player&amp;quot;,137552)
	or UnitDebuff(&amp;quot;player&amp;quot;,142863)
	or UnitDebuff(&amp;quot;player&amp;quot;,142864)
	or UnitDebuff(&amp;quot;player&amp;quot;,142865)
then return false end

if GetItemCount(5512) &amp;gt; 0
	and Hysteria_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= v
	and PQR_SpellAvailable(5512)
	and GetItemCooldown(5512) == 0
then UseItemByName(5512) return true end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Mass Dispel</Name><Default>false</Default><SpellID>32375</SpellID><Actions></Actions><Lua>if not PQI_MentallyShadowDefensive_MassDispel_enable then return false end

if PQR_SpellAvailable(32375)
	and IsPlayerSpell(32375)
	and PQI:IsHotkeys(PQI_MentallyShadowDefensive_MassDispel_key)
	and not GetCurrentKeyBoardFocus() then
		SpellCancelQueuedSpell()
		CastSpellByID(32375)
		if SpellIsTargeting() then SpellCancelQueuedSpell() CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Desperate Prayer</Name><Default>false</Default><SpellID>19236</SpellID><Actions></Actions><Lua>local PQ_DPrayer = PQ_DPrayer
local Hysteria_UnitInfo = Hysteria_UnitInfo
local v=PQI_MentallyShadowDefensive_DesperatePrayer_value 

-- Disable ability if we disabled it in PQI
if not PQI_MentallyShadowDefensive_DesperatePrayer_enable then return false end

if UnitDebuff(&amp;quot;player&amp;quot;,137633)
	or UnitDebuff(&amp;quot;player&amp;quot;,137552)
	or UnitDebuff(&amp;quot;player&amp;quot;,142863)
	or UnitDebuff(&amp;quot;player&amp;quot;,142864)
	or UnitDebuff(&amp;quot;player&amp;quot;,142865)
then return false end

if IsPlayerSpell(PQ_DPrayer) and Hysteria_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= v
	and PQR_SpellAvailable(PQ_DPrayer) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Boss)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local PQ_PowerRound = PQ_PowerRound
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local GCD = PQ_Round(1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1),2)
local max_timer = PQ_Round(PQ_PowerRound(15/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if not PQI_MentallyShadowOffensive_AutoBossDotting_enable then return false end
if not PQR_SpellAvailable(PQ_VT) then return false end
if PQR_IsMoving(0.1) then return false end

for i=1,4 do
	local bossUnit = &amp;quot;boss&amp;quot;..i
	local vampiricTouch = select(7,UnitDebuffID(bossUnit,PQ_VT,&amp;quot;PLAYER&amp;quot;))
	
	-- Let&amp;apos;s try and detect immunities
	if UnitBuffID(bossUnit,143593) or UnitBuffID(bossUnit,116994) or UnitBuffID(bossUnit,122540) or UnitBuffID(bossUnit,123250) or UnitBuffID(bossUnit,106062) or UnitBuffID(bossUnit,110945)
		then return false end
	
	if TargetValidation(bossUnit,PQ_VT) then
		local id = UnitGUID(bossUnit)
		
		if vampiricTouch then
			for i=1,#dotTracker do
				if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_VT then
					if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
						if dotTracker[i].crit == true then
							if vampiricTouch - GetTime() &amp;lt; 10 then CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true end
						end
						if dotTracker[i].crit == false then
							if vampiricTouch - GetTime() &amp;lt; max_timer-1 then CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true end
						end
					else
						if mentallyPower(34914) &amp;gt; dotTracker[i].vtPower then
							--if vampiricTouch - GetTime() &amp;lt; 10 then
								CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true
							--end
						else
							if vampiricTouch - GetTime() &amp;lt; GCD + tick then
								CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true
							end
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(PQ_VT),bossUnit) return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Boss)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit
local tick = PQ_Round(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100)))
local max_timer = PQ_Round(PQ_PowerRound(18/(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))))*(3/(1+(UnitSpellHaste(&amp;quot;player&amp;quot;)/100))),2)

-- Solace &amp; Insanity
if IsPlayerSpell(139139) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
		or UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(PQ_MFI) then return false
	end
end

if not PQI_MentallyShadowOffensive_AutoBossDotting_enable then return false end
if not PQR_SpellAvailable(PQ_SWP) then return false end

for i=1,4 do
	local bossUnit = &amp;quot;boss&amp;quot;..i
	local shadowWordPain = select(7,UnitDebuffID(bossUnit,PQ_SWP,&amp;quot;PLAYER&amp;quot;))
	
	-- Let&amp;apos;s try and detect immunities
	if UnitBuffID(bossUnit,143593) or UnitBuffID(bossUnit,116994) or UnitBuffID(bossUnit,122540) or UnitBuffID(bossUnit,123250) or UnitBuffID(bossUnit,106062) or UnitBuffID(bossUnit,110945)
		then return false end
		
	if TargetValidation(bossUnit,PQ_SWP) then
		local id = UnitGUID(bossUnit)
		
		if shadowWordPain then
			for i=1,#dotTracker do
				if dotTracker[i].guid == id and dotTracker[i].spellID == PQ_SWP then
					if UnitBuffID(&amp;quot;player&amp;quot;,138963) then
						if dotTracker[i].crit == true then
							if shadowWordPain - GetTime() &amp;lt; max_timer/2 then CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true end
						end
						if dotTracker[i].crit == false then
							if shadowWordPain - GetTime() &amp;lt; max_timer-1 then CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true end
						end
					else
						if mentallyPower(589) &amp;gt; dotTracker[i].swpPower then
							if shadowWordPain - GetTime() &amp;lt; max_timer/2 then
								CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true
							end
						else
							if shadowWordPain - GetTime() &amp;lt; tick then
								CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true
							end
						end
					end
				end
			end
		else CastSpellByName(GetSpellInfo(PQ_SWP),bossUnit) return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Movement)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local mentallyPower = mentallyPower
local TargetValidation = TargetValidation
local isMindControledUnit = isMindControledUnit

if not PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_SWP) then return false end

if TargetValidation(&amp;quot;target&amp;quot;,PQ_SWP) and isMindControledUnit(&amp;quot;target&amp;quot;) then
	return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Boss Immunities</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Let&amp;apos;s try and detect immunities
if UnitBuffID(&amp;quot;target&amp;quot;,143593) or UnitBuffID(&amp;quot;target&amp;quot;,116994) or UnitBuffID(&amp;quot;target&amp;quot;,122540) or UnitBuffID(&amp;quot;target&amp;quot;,123250) or UnitBuffID(&amp;quot;target&amp;quot;,106062) or UnitBuffID(&amp;quot;target&amp;quot;,110945)
	then return false end
	
-- Cancel spell casts or channels on Silences
if UnitExists(&amp;quot;boss1&amp;quot;) or UnitExists(&amp;quot;target&amp;quot;) then
	if UnitCastingInfo(&amp;quot;boss1&amp;quot;) == GetSpellInfo(138763) or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137457) then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) or UnitChannelInfo(&amp;quot;player&amp;quot;) then RunMacroText(&amp;quot;/stopcasting&amp;quot;) return false end
		return true
	end
end
	
-- Twin Consorts (Immune while channeling Nuclear Inferno and Tidal Force)
if UnitChannelInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137531) or UnitChannelInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(137491) or UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(138763)
	then return false end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Targeting</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitExists(&amp;quot;target&amp;quot;) then
	TargetUnit(&amp;quot;Large Illusionary Banana-Tosser&amp;quot;,1)
	TargetUnit(&amp;quot;Small Illusionary Banana-Tosser&amp;quot;,1)
end

-- Focus is Dead or doesn&amp;apos;t exist
if UnitExists(&amp;quot;focus&amp;quot;) then return false end
if UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;) then RunMacroText(&amp;quot;/clearfocus&amp;quot;) end

-- Set that damn healer as Focus for Silencing
if not UnitExists(&amp;quot;focus&amp;quot;) then
	if UnitExists(&amp;quot;target&amp;quot;) then
		if UnitName(&amp;quot;target&amp;quot;) ~= &amp;quot;Small Illusionary Mystic&amp;quot; and UnitName(&amp;quot;target&amp;quot;) ~= &amp;quot;Large Illusionary Mystic&amp;quot; then
			TargetUnit(&amp;quot;Small Illusionary Mystic&amp;quot;,1)
			TargetUnit(&amp;quot;Large Illusionary Mystic&amp;quot;,1)
		else
			RunMacroText(&amp;quot;/focus&amp;quot;)
			TargetLastTarget()
		end
	else
		TargetUnit(&amp;quot;Small Illusionary Mystic&amp;quot;,1)
		TargetUnit(&amp;quot;Large Illusionary Mystic&amp;quot;,1)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Mind Spike</Name><Default>false</Default><SpellID>73510</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;target&amp;quot;) then
	local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
	
	if npcID == 71075 then return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Mind Blast</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(8092) then return false end

if UnitExists(&amp;quot;target&amp;quot;) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT

if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_VT) then return false end

if UnitExists(&amp;quot;mouseover&amp;quot;) then PQR_CustomTarget = &amp;quot;Mouseover&amp;quot; else PQR_CustomTarget = &amp;quot;Target&amp;quot; end

if UnitExists(PQR_CustomTarget) then
	if 100 * UnitHealth(PQR_CustomTarget) / UnitHealthMax(PQR_CustomTarget) &amp;lt; 60 then return false end
	if not UnitDebuffID(PQR_CustomTarget,PQ_VT,&amp;quot;PLAYER&amp;quot;) then return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Shadow Word: Pain</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP

if UnitExists(&amp;quot;mouseover&amp;quot;) then PQR_CustomTarget = &amp;quot;Mouseover&amp;quot; else PQR_CustomTarget = &amp;quot;Target&amp;quot; end

if UnitExists(PQR_CustomTarget) then
	if PQR_IsMoving(0.1) then return true end
	if 100 * UnitHealth(PQR_CustomTarget) / UnitHealthMax(PQR_CustomTarget) &amp;lt; 60 then return false end
	if not UnitDebuffID(PQR_CustomTarget,PQ_SWP,&amp;quot;PLAYER&amp;quot;) then return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Shadow Word: Death</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_SWD = PQ_SWD

if not PQR_SpellAvailable(PQ_SWD) then return false end

if UnitExists(&amp;quot;target&amp;quot;) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Devouring Plague</Name><Default>false</Default><SpellID>2944</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local SCD = SCD
local PQ_DP = PQ_DP
local Hysteria_UnitInfo = Hysteria_UnitInfo
local shadowOrbs = select(5,Hysteria_UnitInfo(&amp;quot;player&amp;quot;))

-- Sanity Checks
if shadowOrbs &amp;lt; 3 then return false end
if not PQR_SpellAvailable(PQ_DP) then return false end

return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Mind Flay</Name><Default>false</Default><SpellID>585</SpellID><Actions></Actions><Lua>local PQ_MF = PQ_MF
if PQR_IsMoving(0.1) then return false end
if not PQR_SpellAvailable(PQ_MF) then return false end

if UnitExists(&amp;quot;target&amp;quot;) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Silence</Name><Default>false</Default><SpellID>15487</SpellID><Actions></Actions><Lua>if not PQR_SpellAvailable(15487) then return false end

if UnitExists(&amp;quot;focus&amp;quot;) then PQR_CustomTarget = &amp;quot;Focus&amp;quot; else PQR_CustomTarget = &amp;quot;Target&amp;quot; end
if UnitCastingInfo(PQR_CustomTarget) or UnitChannelInfo(PQR_CustomTarget) then return true end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Banana Tosser CC</Name><Default>false</Default><SpellID>108920</SpellID><Actions></Actions><Lua>-- We need to melee the Bannana tossers
if not CheckInteractDistance(&amp;quot;target&amp;quot;,3) then return false end

-- Some sanity checks
if not PQR_SpellAvailable(108920) then return false end
if UnitDebuffID(&amp;quot;target&amp;quot;,108920) then return false end

if UnitExists(&amp;quot;target&amp;quot;) then
	local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
	if npcID == 71415 or npcID == 71414 or npcID == 31146 then return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Power Infusion</Name><Default>false</Default><SpellID>10060</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local PQ_PI = PQ_PI

-- Sanity checks
if not IsPlayerSpell(PQ_PI) then return false end
if not PQR_SpellAvailable(PQ_PI) then return false end

if UnitExists(&amp;quot;target&amp;quot;) then
	local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
	if npcID == 71074 or npcID == 71072 then
		if UnitBuffID(&amp;quot;target&amp;quot;,142427) then return false end
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Troll: Berserking
if IsPlayerSpell(26297) and PQR_SpellAvailable(26297) then
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		if npcID == 71074 or npcID == 71072 then
			if UnitBuffID(&amp;quot;target&amp;quot;,142427) then return false end
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
			return true
		end
	end
end

-- Orc: Blood Fury
if IsPlayerSpell(33702) and PQR_SpellAvailable(33702) then
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		if npcID == 71074 or npcID == 71072 then
		if UnitBuffID(&amp;quot;target&amp;quot;,142427) then return false end
			SpellCancelQueuedSpell()
			CastSpellByName(GetSpellInfo(33702),&amp;quot;player&amp;quot;)
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Proving] Shadowfiend</Name><Default>false</Default><SpellID>34433</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>local PQ_SF = PQ_SF
	
-- Cast Mindbender / Shadowfiend
if UnitExists(&amp;quot;target&amp;quot;) then
	if UnitBuffID(&amp;quot;target&amp;quot;,142427) then return false end
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AOE] Mind Sear</Name><Default>false</Default><SpellID>48045</SpellID><Actions></Actions><Lua>local PQ_MSear = PQ_MSear

if not PQR_SpellAvailable(PQ_MSear) then return false end
if not PQI_MentallyShadowOffensive_MindSear_enable then return false end

if UnitExists(&amp;quot;target&amp;quot;)
	and not GetCurrentKeyBoardFocus()
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_MSear), &amp;quot;target&amp;quot;) == 1
	and PQI:IsHotkeys(PQI_MentallyShadowOffensive_MindSear_key)
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PRIEST>