<?xml version="1.0" encoding="utf-8" ?><ROGUE><Ability><Name>Stealth</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not IsStealthed()
	and select(2, GetSpellCooldown(1784)) == 0
	and UnitExists(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;)
	and not UnitIsDead(&amp;quot;target&amp;quot;)
	and not UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not IsMounted() then
	CastSpellByName(GetSpellInfo(115191), &amp;quot;player&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] CVars []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--CVar Registration
for i=1,#Nova_ValueCheck do
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1)
	end
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_ValueCheck[i].Var2)
	end
end

for i=1,#Nova_CooldownCheck do
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_CooldownCheck[i].Mod)
	end
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_CooldownCheck[i].Var1)
	end
end
	--CVar Translations
	--Enabled/Disabled
	hsenabled =		GetCVarBool(&amp;quot;Nova_Healthstone_Enabled&amp;quot;)
	recupenabled =	GetCVarBool(&amp;quot;Nova_Recuperate_Enabled&amp;quot;)
	DP =			GetCVarBool(&amp;quot;Nova_Deadly_Poison_Enabled&amp;quot;)
	WP =			GetCVarBool(&amp;quot;Nova_Wound_Poison_Enabled&amp;quot;)
	LP =			GetCVarBool(&amp;quot;Nova_Leeching_Poison_Enabled&amp;quot;)
	CP =			GetCVarBool(&amp;quot;Nova_Crippling_Poison_Enabled&amp;quot;)
	MNP =			GetCVarBool(&amp;quot;Nova_Mind_Numbing_Poison_Enabled&amp;quot;)
	PARP =			GetCVarBool(&amp;quot;Nova_Paralytic_Poison_Enabled&amp;quot;)
	CrT =			GetCVarBool(&amp;quot;Nova_Crimson_Tempest_Enabled&amp;quot;)
	FanOK =			GetCVarBool(&amp;quot;Nova_Fan_of_Knives_Enabled&amp;quot;)
	SB =			GetCVarBool(&amp;quot;Nova_Shadow_Blades_Enabled&amp;quot;)
	Van =			GetCVarBool(&amp;quot;Nova_Vanish_Enabled&amp;quot;)
	Prep =			GetCVarBool(&amp;quot;Nova_Preparation_Enabled&amp;quot;)
	AdR =			GetCVarBool(&amp;quot;Nova_Adrenaline_Rush_Enabled&amp;quot;)
	ks =			GetCVarBool(&amp;quot;Nova_Killing_Spree_Enabled&amp;quot;)
	tr1 =			GetCVarBool(&amp;quot;Nova_Trinket_1_Enabled&amp;quot;)
	tr2 =			GetCVarBool(&amp;quot;Nova_Trinket_2_Enabled&amp;quot;)
	glove =			GetCVarBool(&amp;quot;Nova_Tinkered_Gloves_Enabled&amp;quot;)
	cdBoss =		GetCVarBool(&amp;quot;Nova_CDs:_Boss_Only_Enabled&amp;quot;)
	t14b =			GetCVarBool(&amp;quot;Nova_Tier_4_PC_Bonus_Enabled&amp;quot;)
	tricks =		GetCVarBool(&amp;quot;Nova_Tricks_Focus_Enabled&amp;quot;)
	--Thresholds
	hsHealth =		tonumber(GetCVar(&amp;quot;Nova_Healthstone&amp;quot;))
	recuphealth =	tonumber(GetCVar(&amp;quot;Nova_Recuperate&amp;quot;))
	recuppoints =	tonumber(GetCVar(&amp;quot;Nova_Recup_at_CP&amp;quot;))
	--Cooldowns
	AoETog =		tonumber(GetCVar(&amp;quot;Nova_Area_of_Effect_Toggle&amp;quot;))
	CDTog =			tonumber(GetCVar(&amp;quot;Nova_Cooldown_Toggle&amp;quot;))
	pause =			tonumber(GetCVar(&amp;quot;Nova_Pause_Rotation&amp;quot;))
	BFTog =			tonumber(GetCVar(&amp;quot;Nova_Blade_Flurry&amp;quot;))
	--Cooldown Checks
	AoETogCheck =	GetCVarBool(&amp;quot;Nova_Area_of_Effect_Toggle_Enabled&amp;quot;)
	CDTogCheck =	GetCVarBool(&amp;quot;Nova_Cooldown_Toggle_Enabled&amp;quot;)
	pauseCheck =	GetCVarBool(&amp;quot;Nova_Pause_Rotation_Enabled&amp;quot;)
	BFTogCheck =	GetCVarBool(&amp;quot;Nova_Blade_Flurry_Enabled&amp;quot;)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Initialize []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	PQR_RotationStarted = false

PQR_WriteToChat(&amp;quot;|cffffff00Combat Rogue Profile Version - |cff33CC001.3&amp;quot;)
PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Combat Profile Verion - 1.3&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
PQR_SwapCheckTimer = 0

	--Tables
	Nova_ValueCheck = {
		[1] =	{ Var1 = nil,	Text = &amp;quot;Survivability&amp;quot;,			Var2 = nil },
		[2] =	{ Var1 = 30, 	Text = &amp;quot;Healthstone&amp;quot;,			Var2 = 0 },
		[3] =	{ Var1 = 50, 	Text = &amp;quot;Recuperate&amp;quot;, 			Var2 = 0 },
		[4] =	{ Var1 = 3,		Text = &amp;quot;Recup at CP&amp;quot;,			Var2 = nil },
		[5] =	{ Var1 = nil,	Text = &amp;quot;MH Poison&amp;quot;,				Var2 = nil },
		[6] =	{ Var1 = nil,	Text = &amp;quot;Deadly Poison&amp;quot;,			Var2 = 1 },
		[7] =	{ Var1 = nil,	Text = &amp;quot;Wound Poison&amp;quot;,			Var2 = 0 },
		[8] =	{ Var1 = nil, 	Text = &amp;quot;OH Poison&amp;quot;, 			Var2 = nil },
		[9] =	{ Var1 = nil, 	Text = &amp;quot;Leeching Poison&amp;quot;, 		Var2 = 0 },
		[10] =	{ Var1 = nil, 	Text = &amp;quot;Crippling Poison&amp;quot;,		Var2 = 1 },
		[11] =	{ Var1 = nil, 	Text = &amp;quot;Mind Numbing Poison&amp;quot;,	Var2 = 0 },
		[12] =	{ Var1 = nil,	Text = &amp;quot;Paralytic Poison&amp;quot;,		Var2 = 0 },
		[13] = 	{ Var1 = nil, 	Text = &amp;quot;AoE Toggles&amp;quot;, 			Var2 = nil },
		[14] = 	{ Var1 = nil, 	Text = &amp;quot;Crimson Tempest&amp;quot;,		Var2 = 1 },
		[15] =	{ Var1 = nil, 	Text = &amp;quot;Fan of Knives&amp;quot;, 		Var2 = 1 },
		[16] =	{ Var1 = nil, 	Text = &amp;quot;Cooldowns&amp;quot;, 			Var2 = nil },
		[17] =	{ Var1 = nil, 	Text = &amp;quot;Shadow Blades&amp;quot;, 		Var2 = 1 },
		[18] =	{ Var1 = nil, 	Text = &amp;quot;Vanish&amp;quot;, 				Var2 = 1 },
		[19] =	{ Var1 = nil, 	Text = &amp;quot;Preparation&amp;quot;,			Var2 = 1 },
		[20] =	{ Var1 = nil, 	Text = &amp;quot;Adrenaline Rush&amp;quot;,		Var2 = 1 },
		[21] =	{ Var1 = nil,	Text = &amp;quot;Killing Spree&amp;quot;,			Var2 = 1 },
		[22] =	{ Var1 = nil, 	Text = &amp;quot;Other&amp;quot;, 				Var2 = nil },
		[23] =	{ Var1 = nil, 	Text = &amp;quot;Trinket 1&amp;quot;, 			Var2 = 0 },
		[24] =	{ Var1 = nil, 	Text = &amp;quot;Trinket 2&amp;quot;,				Var2 = 0 },
		[25] =	{ Var1 = nil, 	Text = &amp;quot;Tinkered Gloves&amp;quot;,		Var2 = 0 },
		[26] =	{ Var1 = nil,	Text = &amp;quot;CDs: Boss Only&amp;quot;,		Var2 = 1 },
		[27] =	{ Var1 = nil,	Text = &amp;quot;Tier 4 PC Bonus&amp;quot;,		Var2 = 0 },
		[28] =	{ Var1 = nil,	Text = &amp;quot;Tricks Focus&amp;quot;,			Var2 = 1 }
		}
	Nova_CooldownCheck = {
		[1] =	{ Mod = 8,		Text = &amp;quot;Area of Effect Toggle&amp;quot;,	Var1 = 1},
		[2] =	{ Mod = (8 + 2),Text = &amp;quot;Cooldown Toggle&amp;quot;,		Var1 = 1},
		[3] =	{ Mod = 4,		Text = &amp;quot;Pause Rotation&amp;quot;,		Var1 = 1},
		[4] =	{ Mod = 1,		Text = &amp;quot;Blade Flurry&amp;quot;,			Var1 = 1}
		}
	-- Load LUA files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nova_Frame.lua&amp;quot;) == true then
			MiniMapCreation()
			-- Slash Commands
			SLASH_NOVAFRAME1 = &amp;quot;/novaframe&amp;quot;
			SLASH_NOVAFRAME2 = &amp;quot;/nova&amp;quot;
			function SlashCmdList.NOVAFRAME(msg, editbox)
				if Setup == nil then
					Setup = true
					FrameCreation(Nova_ValueCheck, Nova_CooldownCheck, &amp;quot;Assassination Options&amp;quot;, &amp;quot;CD Settings&amp;quot;)
				end
				if not Nova_Frame:IsShown() then
					Nova_Frame:Show() else Nova_Frame:Hide()
				end
			end
		end
	end

	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nerder.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You&amp;apos;re missing the PQR_Nerder.lua file. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
	
	if not rogue then
		AoE = false
		UseCD = true
		BladeFlurry = false
    	rogue = true
	end
	
	if GetSpecialization() ~= 2 then
		PQR_WriteToChat(&amp;quot;You must be in Combat Spec. Please switch and try again.&amp;quot;, &amp;quot;Warning&amp;quot;)
		PQR_StopRotation()
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Hot Keys []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local AoETog = AoETog
local CDTog = CDTog
local BFTog = BFTog

if modtime == nil then
	modtime = 0
end

if Nova_Mod() == AoETog and GetTime() - modtime &amp;gt; 0.3 then
	modtime = GetTime()
	if AoE then
		AoE = false
		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFFE61515Disabled&amp;quot;)
	else
		AoE = true
		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFF15E615Enabled&amp;quot;)
	end
end

if Nova_Mod() == CDTog and GetTime() - modtime &amp;gt; 0.3 then
	modtime = GetTime()
	if UseCD then
		UseCD = false
		PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;)
	else
		UseCD = true
		PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Enabled&amp;quot;)
	end
end

if Nova_Mod() == BFTog and GetTime() - modtime &amp;gt; 0.3 then
	modtime = GetTime()
	if BladeFlurry then
		BladeFlurry = false
		PQR_WriteToChat(&amp;quot;Blade Flurry: \124cFFE61515Disabled&amp;quot;)
	else
		BladeFlurry = true
		PQR_WriteToChat(&amp;quot;Blade Flurry: \124cFF15E615Enabled&amp;quot;)
	end
end

function PQR_status()
	PQR_WriteToChat(&amp;quot;Current Cooldowns/AoE Status&amp;quot;)
	if UseCD then
		PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Enabled&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Cooldowns: Enabled&amp;quot;,nil,&amp;quot;00FF00&amp;quot;)
	else
		PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Cooldowns: Disabled&amp;quot;,nil,&amp;quot;FF0000&amp;quot;)
	end
	if crimson then
		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFF15E615Enabled&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Area of Effect: Enabled&amp;quot;,nil,&amp;quot;00FF00&amp;quot;)
	else
		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFFE61515Disabled&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Area of Effect: Disabled&amp;quot;,nil,&amp;quot;FF0000&amp;quot;)
	end
end

--------------------
-- Slash Commands
--------------------
SLASH_STATUS1 = &amp;quot;/status&amp;quot;
SLASH_STATUS2 = &amp;quot;/pqrstatus&amp;quot;
function SlashCmdList.STATUS(msg, editbox)
	PQR_status()
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Nova Mods []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>Nova_Mod = nil
function Nova_Mod()
	total = 0
	if IsLeftShiftKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 1
	end
	if IsLeftControlKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 2
	end
	if IsLeftAltKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 4
	end
	if IsRightShiftKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 8
	end
	if IsRightControlKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 16
	end
	if IsRightAltKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 32
	end
	return total
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Pause []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local VANISH = VANISH
local pauseCheck = pauseCheck
local pause = pause

if pauseCheck == 1 then
	if Nova_Mod() == pause
	or IsMounted()
	or UnitBuffID(&amp;quot;player&amp;quot;, 104235)
	or UnitBuffID(&amp;quot;player&amp;quot;, 104262)
	or UnitIsDead(&amp;quot;target&amp;quot;)
	or UnitIsDead(&amp;quot;player&amp;quot;)
	or UnitCastingInfo(&amp;quot;player&amp;quot;)
	or not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		return true
	elseif ( OnCooldown(VANISH)
	 and CooldownRemains(VANISH) &amp;gt; 117.5 )
	 and HasBuff(VANISH) then
	 	return false
	end
elseif pauseCheck ~= 1 then
	return false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Poison []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local poison = UnitCastingInfo(&amp;quot;player&amp;quot;)
local WP = WP
local LP = LP
local CP = CP
local MNP = MNP
local PARP = PARP

if WP ~= 1 then
--	if poison == &amp;quot;Deadly Poison&amp;quot; then
	if poison == GetSpellInfo(2823) then	
		if UnitBuffID(&amp;quot;player&amp;quot;, 2823) then
			SpellStopCasting()
			return true
		end
	end
elseif WP == 1 then
--	if poison == &amp;quot;Wound Poison&amp;quot; then
	if poison == GetSpellInfo(8679) then
		if UnitBuffID(&amp;quot;player&amp;quot;, 8679) then
			SpellStopCasting()
			return true
		end
	end
end

if LP ~= 1 then
	if ( poison == GetSpellInfo(3408)--&amp;quot;Crippling Poison&amp;quot;
	 or poison == GetSpellInfo(5761)--&amp;quot;Mind-numbing Poison&amp;quot;
	 or poison == GetSpellInfo(108215) ) then--&amp;quot;Paralytic Poison&amp;quot;
	 	if ( ( CP == 1 and UnitBuffID(&amp;quot;player&amp;quot;, 3408) )
	 	or ( MNP == 1 and UnitBuffID(&amp;quot;player&amp;quot;, 5761) )
	 	or ( PARP == 1 and UnitBuffID(&amp;quot;player&amp;quot;, 108215) ) ) then
	 		SpellStopCasting()
	 		return true
		end
	end
elseif LP == 1 then
	if poison == GetSpellInfo(108211) then --&amp;quot;Leeching Poison&amp;quot; then
		if UnitBuffID(&amp;quot;player&amp;quot;, 108211) then
			SpellStopCasting()
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Poison Application []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local WP = WP
local LP = LP
local CP = CP
local MNP = MNP
local PARP = PARP

MHPOISON = nil
if ( DP ~= 1 and WP == 1 ) then
	MHPOISON = 8679
elseif ( DP == 1 and WP ~= 1 ) then
	MHPOISON = 2823
elseif ( DP == 1 and WP == 1 ) then
	return false
elseif ( DP ~= 1 and WP ~= 1 ) then
	return false
end

OHPOISON = nil
if ( LP == 1 and CP ~= 1 and MNP ~= 1 and PARP ~= 1 ) then
	OHPOISON = 108211
elseif ( LP ~= 1 and CP == 1 and MNP ~= 1 and PARP ~= 1 ) then
	OHPOISON = 3408
elseif ( LP ~= 1 and CP ~= 1 and MNP == 1 and PARP ~= 1 ) then
	OHPOISON = 5761
elseif ( LP ~= 1 and CP ~= 1 and MNP ~= 1 and PARP == 1 ) then
	OHPOISON = 108215
elseif ( ( LP == 1 and CP == 1 and MNP ~= 1 and PARP ~= 1 ) or
		 ( LP == 1 and CP ~= 1 and MNP == 1 and PARP ~= 1 ) or
		 ( LP == 1 and CP ~= 1 and MNP ~= 1 and PARP == 1 ) or
		 ( LP ~= 1 and CP == 1 and MNP == 1 and PARP ~= 1 ) or
		 ( LP ~= 1 and CP == 1 and MNP ~= 1 and PARP == 1 ) or
		 ( LP ~= 1 and CP ~= 1 and MNP == 1 and PARP == 1 ) or
		 ( LP ~= 1 and CP ~= 1 and MNP ~= 1 and PARP ~= 1 ) ) then
	return false
end

if not IsMounted() then
-- Check to Apply Main hand poison
if not UnitBuffID(&amp;quot;player&amp;quot;, MHPOISON) then
	CastSpellByName(GetSpellInfo(MHPOISON))
end
-- Check to Apply Leeching Poison
if not UnitBuffID(&amp;quot;player&amp;quot;, OHPOISON) then
	CastSpellByName(GetSpellInfo(OHPOISON))
end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CD: Preparation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Prep ~= 1 then
	return false
elseif Prep == 1 and UseCD and ( cdBoss ~= 1
 or ( cdBoss == 1 and SpecialUnit() ) ) then
        if not OnCooldown(PREPARATION)
         and not HasBuff(VANISH)
         and ( OnCooldown(VANISH)
         and CooldownRemains(VANISH) &amp;gt; 60 ) then
                CastCD(PREPARATION)
        end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Ambush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Van ~= 1 then
        return false
elseif UseCD and Van == 1
 and ( cdBoss ~= 1
 or ( cdBoss == 1 and SpecialUnit() ) ) then
	if ( HasBuff(VANISH)
	 or ( OnCooldown(VANISH)
	 and CooldownRemains(VANISH) &amp;gt;= 117.5 ) ) then
    	Cast(AMBUSH, &amp;quot;target&amp;quot;)
    end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CD: Vanish</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Van ~= 1 or ( AoE and FanOK == 1 ) then
        return false
elseif UseCD and Van == 1
 and ( cdBoss ~= 1 or ( cdBoss == 1 and SpecialUnit() ) ) then
        if ( GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;lt; 3
         or ( IsPlayerSpell(ANTICIPATION) == true
         and ( HasBuff(ANTICIPATIONCT) and BuffCount(ANTICIPATIONCT) &amp;lt; 3 ) )
         or ( HasBuff(SHADOWBLADES) == false
         and ( GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;lt; 4
         or ( IsPlayerSpell(ANTICIPATION) == true
         and ( HasBuff(ANTICIPATIONCT) and BuffCount(ANTICIPATIONCT) &amp;lt; 4 ) ) ) ) )
         and ( ( IsPlayerSpell(SHADOWFOCUS) == true
         and HasBuff(ADRENALINERUSH) == false
         and energy(&amp;quot;player&amp;quot;) &amp;lt; 20 )
         or ( IsPlayerSpell(SUBTERFUGE) == true
         and energy(&amp;quot;player&amp;quot;) &amp;gt;= 90 )
         or ( IsPlayerSpell(SHADOWFOCUS) == false
         and IsPlayerSpell(SUBTERFUGE) == false
         and energy(&amp;quot;player&amp;quot;) &amp;gt;= 60 ) ) then
                CastCD(VANISH)
        end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CD: Shadow Blades</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if SB ~= 1 or ( AoE and FanOK == 1 ) then
        return false
elseif ( UseCD and t14b ~= 1 and SB == 1 )
 and ( cdBoss ~= 1 or ( cdBoss == 1 and SpecialUnit() ) ) then
        CastCD(SHADOWBLADES)
elseif ( UseCD and t14b == 1 and SB == 1 )
 and ( cdBoss ~= 1 or ( cdBoss == 1 and SpecialUnit() ) ) then
        if ( ( (OnCooldown(KILLINGSPREE) and CooldownRemains(KILLINGSPREE) &amp;gt; 30.5)
         and (OnCooldown(ADRENALINERUSH) and CooldownRemains(ADRENALINERUSH) &amp;lt;= 9) )
         or ( energy(&amp;quot;player&amp;quot;) &amp;lt; 35
         and not ( OnCooldown(KILLINGSPREE)
         or OnCooldown(ADRENALINERUSH) ) ) ) then
                CastCD(SHADOWBLADES)
        end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CD: Killing Spree</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, 13750) ~= nil then
	return false
elseif ks ~= 1 then
	return false
elseif UseCD and t14b ~= 1 and ks == 1
 and ( cdBoss ~= 1 or ( cdBoss == 1 and SpecialUnit() ) )
 and not UnitBuffID(&amp;quot;player&amp;quot;, 13750) then
    if energy(&amp;quot;player&amp;quot;) &amp;lt; 35 then
    	CastCD(KILLINGSPREE)
    end
elseif UseCD and t14b == 1 and ks == 1
 and ( cdBoss ~= 1 or ( cdBoss == 1 and SpecialUnit() ) )
 and not UnitBuffID(&amp;quot;player&amp;quot;, 13750) then
    if ( ( HasBuff(SHADOWBLADES)
     and ( energy(&amp;quot;player&amp;quot;) &amp;lt; 35
     or ( HasBuff(SHADOWBLADES) and BuffTime(SHADOWBLADES)  &amp;lt;= 3.5 ) ) )
     or ( UnitBuffID(&amp;quot;player&amp;quot;, SHADOWBLADES) == nil and (OnCooldown(SHADOWBLADES) and CooldownRemains(SHADOWBLADES) &amp;gt; 30 ) ) ) then
    	CastCD(KILLINGSPREE)
    end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CD: Adrenaline Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, 51690) ~= nil then
	return false
elseif ( AdR ~= 1 or ( AoE and FanOK == 1 ) ) then
        return false
elseif UseCD and t14b ~= 1 and AdR == 1
 and ( cdBoss ~= 1 or ( cdBoss == 1 and SpecialUnit() ) )
 and not UnitBuffID(&amp;quot;player&amp;quot;, 51690) then
        if ( energy(&amp;quot;player&amp;quot;) &amp;lt; 35
         or HasBuff(SHADOWBLADES) )then
                CastCD(ADRENALINERUSH)
        end
elseif UseCD and t14b == 1 and AdR == 1
 and ( cdBoss ~= 1 or ( cdBoss == 1 and SpecialUnit() ) )
 and not UnitBuffID(&amp;quot;player&amp;quot;, 51690) then
        if HasBuff(SHADOWBLADES)
         and ( energy(&amp;quot;player&amp;quot;) &amp;lt; 35
         or BuffTime(SHADOWBLADES) &amp;lt;= 15 ) then
                CastCD(ADRENALINERUSH)
        end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Functions []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-----------------
-- Time to die --
-----------------
TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

-- dummy
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 999999
	end
end

--generator = nil
--if ( UnitDebuffID(&amp;quot;target&amp;quot;, REVEALINGSTRIKE, &amp;quot;player&amp;quot;) ~= nil
-- and DebuffTime(REVEALINGSTRIKE, &amp;quot;target&amp;quot;, &amp;quot;player&amp;quot;) &amp;gt;= 2 ) then
--        generator = SINISTERSTRIKE
--else
--        generator = REVEALINGSTRIKE
--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Generator 1</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ( AoE and FanOK == 1 ) then
	return false
end

if GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;lt; 5 then
	if ( UnitDebuffID(&amp;quot;target&amp;quot;, REVEALINGSTRIKE, &amp;quot;player&amp;quot;) ~= nil
	 and DebuffTime(REVEALINGSTRIKE, &amp;quot;target&amp;quot;, &amp;quot;player&amp;quot;) &amp;gt; 2 ) then
		Cast(SINISTERSTRIKE, &amp;quot;target&amp;quot;)
	else
		Cast(REVEALINGSTRIKE, &amp;quot;target&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Finisher</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ( AoE and FanOK == 1 ) then
	return false
elseif ( ( AoE and FanOK ~= 1 ) or not AoE ) then
if ( not UnitDebuffID(&amp;quot;target&amp;quot;, RUPTURE, &amp;quot;player&amp;quot;)
 or DebuffTime(RUPTURE, &amp;quot;target&amp;quot;, &amp;quot;player&amp;quot;) &amp;lt; 2 ) then
	Cast(RUPTURE, &amp;quot;target&amp;quot;)
end
end
if ( AoE and CrT == 1 ) then
	return false
elseif GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 5
 and UnitDebuffID(&amp;quot;target&amp;quot;, RUPTURE, &amp;quot;player&amp;quot;) ~= nil then
	Cast(EVISCERATE)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Generator 2</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ( AoE and FanOK == 1 ) then
	return false
elseif ( AoE and FanOK ~= 1 ) or not AoE then
if energy(&amp;quot;player&amp;quot;) &amp;gt; 60
 or not HasBuff(DEEPINSIGHT)
 or BuffTime(DEEPINSIGHT) &amp;gt; ( 5 - GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) ) then
	if ( UnitDebuffID(&amp;quot;target&amp;quot;, REVEALINGSTRIKE, &amp;quot;player&amp;quot;) ~= nil
	 and DebuffTime(REVEALINGSTRIKE, &amp;quot;target&amp;quot;, &amp;quot;player&amp;quot;) &amp;gt; 2 ) then
		Cast(SINISTERSTRIKE, &amp;quot;target&amp;quot;)
	else
		Cast(REVEALINGSTRIKE, &amp;quot;target&amp;quot;)
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blade Flurry</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local BFTogCheck = BFTogCheck
local BladeFlurry = BladeFlurry

if BFTogCheck ~= 1 then
	return false
elseif BladeFlurry and BFTogCheck == 1 then
	if not UnitBuffID(&amp;quot;player&amp;quot;, 13877) then
		CastSpellByName(GetSpellInfo(13877), &amp;quot;player&amp;quot;)
	end
elseif not BladeFlurry then
	if UnitBuffID(&amp;quot;player&amp;quot;, 13877) then
		CastSpellByName(GetSpellInfo(13877), &amp;quot;player&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Slice and Dice</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoE and FanOK == 1 then
	return false
end

if ( not HasBuff(SLICEANDDICE)
 or ( BuffTime(SLICEANDDICE) &amp;lt; 2
 or ( BuffTime(SLICEANDDICE) &amp;lt; 15
 and CheckForDeep == 3
 and GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;gt;= 4 ) ) ) then
        Cast(SLICEANDDICE)
end

--if CheckForDeep == 1 then
--	print(&amp;quot;1&amp;quot;)
--elseif CheckForDeep == 2 then
--	print(&amp;quot;2&amp;quot;)
--elseif CheckForDeep == 3 then
--	print(&amp;quot;3&amp;quot;)
--end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tinkered Gloves</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if glove ~= 1 or AoE then
	return false
elseif glove == 1 and UseCD and ( cdBoss ~= 1
or ( cdBoss == 1 and SpecialUnit() ) ) and not IsStealthed() then
	UseItem(10)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Trinket 1</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if tr1 ~= 1 or AoE then
	return false
elseif tr1 == 1 and UseCD and ( cdBoss ~= 1
or ( cdBoss == 1 and SpecialUnit() ) ) and not IsStealthed() then
	UseItem(13)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Trinket 2</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if tr1 ~= 1 or AoE then
	return false
elseif tr1 == 1 and UseCD and ( cdBoss ~= 1
or ( cdBoss == 1 and SpecialUnit() ) ) and not IsStealthed() then
	UseItem(14)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if hsenabled ~= 1 then
	return false
elseif hsenabled == 1 then
	if 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) &amp;lt; hsHealth
	 and select(3,GetItemCooldown(5512)) == 1 then
		UseItemByName(5512)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Recuperate</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if recupenabled ~= 1 then
	return false
elseif recupenabled == 1 then
if not HasBuff(RECUPERATE) then
	if 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) &amp;lt;= recuphealth
	 and GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) &amp;gt;= recuppoints then
		CastSpellByName(GetSpellInfo(73651), &amp;quot;target&amp;quot;)
	end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Redirect</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GetSpellCooldown(73981) == 0 then
	if UnitExists(&amp;quot;target&amp;quot;) and GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 0 then
		if UnitExists(&amp;quot;mouseover&amp;quot;) and GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) &amp;gt;= 1 then
			CastSpellByName(GetSpellInfo(73981), nil)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AoE: Crimson Tempest</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CrT ~= 1 then
	return false
elseif AoE and CrT == 1 and not IsStealthed() then
	if GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 5 then
		Cast(CRIMSONTEMPEST)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AoE: Fan of Knives</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if FanOK ~= 1 then
	return false
elseif AoE and FanOK == 1 and not IsStealthed() then
	if GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) ~= 5
	 and IsSpellInRange(GetSpellInfo(1752), &amp;quot;target&amp;quot;) == 1 then
		Cast(FANOFKNIVES)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Events []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Darkmoon Faerie Cannon
if select(7,UnitBuffID(&amp;quot;player&amp;quot;,102116)) and select(7,UnitBuffID(&amp;quot;player&amp;quot;,102116)) - GetTime() &amp;lt; 1.07 then 
	CancelUnitBuff(&amp;quot;player&amp;quot;,&amp;quot;Magic Wings&amp;quot;) 
end

-- Gara&amp;apos;jal the Spiritbinder
local timer = select(7,UnitDebuffID(&amp;quot;player&amp;quot;, 116161))
if timer and timer - GetTime() &amp;lt; 1.5 then
	SpellStopCasting()
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Combat Log []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CombatLog == nil then
   Nova_CombatLog = CreateFrame(&amp;apos;Frame&amp;apos;)

   Nova_CombatLog:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
   function CombatLog_OnEvent(self, event, ...)
   		local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
        if (event==&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;) then
	    	if (type==&amp;quot;SPELL_CAST_SUCCESS&amp;quot;) then
                if sourceGUID == Nova_GUID(&amp;quot;player&amp;quot;) then
   					PlayerSpell = select(13, ...)
    				CastTarget = destNAME
    				CheckForDeep = CheckForDeep + 1
				end
			end
		end
	end


    
    Nova_CombatLog:SetScript(&amp;quot;OnEvent&amp;quot;, CombatLog_OnEvent)
    
	CombatLog = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Casts Check []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--if UnitBuffID(&amp;quot;player&amp;quot;, MODERATEINSIGHT) ~= nil then
--	if PlayerSpell == GetSpellInfo(SINISTERSTRIKE) then
--		return CheckForDeep
--	elseif PlayerSpell == GetSpellInfo(REVEALINGSTRIKE) then
--		return CheckForDeep
--	end
--else CheckForDeep = 0 end
if UnitBuffID(&amp;quot;player&amp;quot;, MODERATEINSIGHT) == nil then
	CheckForDeep = 0
end

if CheckForDeep == 3 then
	print(&amp;quot;3&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Event Handler []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, MODERATEINSIGHT) == nil then
	CheckForDeep = 0
end

if CombatLog == nil then
   Nova_CombatLog = CreateFrame(&amp;apos;Frame&amp;apos;)

   Nova_CombatLog:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
   function CombatLog_OnEvent(self, event, ...)
   		local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
        if (event==&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;) then
			if sourceNAME ~= UnitName(&amp;quot;player&amp;quot;) then
            	return false
            end
            if type == &amp;quot;SPELL_DAMAGE&amp;quot; and ( select(12, ...) == 1752 or select(12, ...) == 84617 ) then
               	CheckForDeep = CheckForDeep + 1
			elseif type == &amp;quot;SPELL_AURA_REMOVED&amp;quot; and ( select(12, ...) == 84745 or select(12, ...) == 84746 or select(12, ...) == 84747 ) then
				CheckForDeep = 0
			end
		end
	end


    
    Nova_CombatLog:SetScript(&amp;quot;OnEvent&amp;quot;, CombatLog_OnEvent)
    
	CombatLog = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tricks</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if tricks ~= 1 then
	return false
elseif tricks == 1 then
	if UnitExists(&amp;quot;focus&amp;quot;)
	 and UnitInParty(&amp;quot;focus&amp;quot;)
	 and not OnCooldown(TOTT) then
		Cast(TOTT, &amp;quot;focus&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>constant attack</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitExists(&amp;quot;target&amp;quot;) then
	RunMacroText(&amp;quot;/tar Southsea&amp;quot;)
	RunMacroText(&amp;quot;/tar Syndicate&amp;quot;)
elseif UnitExists(&amp;quot;target&amp;quot;)
 and ( UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Southsea Pirate&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Southsea Swashbuckler&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Southsea Swabbie&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Southsea Taskmaster&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Southsea Musketeer&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Southsea Strongarm&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Syndicate Pathstalker&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Syndicate Mercenary&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Syndicate Highwayman&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Syndicate Thief&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Syndicate Conjuror&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Syndicate Magus&amp;quot;
  or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Syndicate Prowler&amp;quot; ) then
	if IsSpellInRange(GetSpellInfo(1752), &amp;quot;target&amp;quot;) == 1 then
		CastSpellByName(GetSpellInfo(1752))
	elseif IsSpellInRange(GetSpellInfo(1752), &amp;quot;target&amp;quot;) == 0 or UnitIsDead(&amp;quot;target&amp;quot;) then
		RunMacroText(&amp;quot;/cleartarget&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></ROGUE>