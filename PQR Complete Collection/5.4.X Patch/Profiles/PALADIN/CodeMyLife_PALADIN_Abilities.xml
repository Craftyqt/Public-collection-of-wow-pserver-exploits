<?xml version="1.0" encoding="utf-8" ?><PALADIN><Ability><Name>-- Initialisation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  Init --
--------------------------------------------------------------------
-- Credits goes to Team Nova for most of the Init and Frame setup --
--------------------------------------------------------------------
if PQR_RotationStarted == true then
	_AbilityList = false
	PQR_RotationStarted = false
	PQR_InterruptDelay =  0
	PQR_ResetMovementTime = 0.025
	LastTarget = GetTime() - 2	
	NovaEngineUpdate = GetTime()
	VerNum = 3.13
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_CodeMyLife_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_CodeMyLife_Data.lua. Get this file on my SVN and put it into PQR/Data folder. Until then my profiles will not work.&amp;quot;, &amp;quot;Error&amp;quot;)
		else 
			if not BoomedYet then
	 			BoomGoesTheDynamite()
	 			BoomedYet = true
			end
		end
	end

end

if macros == nil then
	-- Macros
	macros = { 
	    [&amp;quot;ActiveCooldowns&amp;quot;]   		= false,
	    [&amp;quot;ActiveDispel&amp;quot;]			= true, 
	   	[&amp;quot;ActiveDPS&amp;quot;]   			= false,
	    [&amp;quot;ActiveHealing&amp;quot;]   		= false, 
	    [&amp;quot;AoE&amp;quot;]    					= 1,  
	    [&amp;quot;AvengersQueue&amp;quot;]   		= false,
	    [&amp;quot;BlindingLightQueue&amp;quot;]		= false,
	    [&amp;quot;Consecration&amp;quot;]   			= true,
	    [&amp;quot;ExecutionQueue&amp;quot;]			= false,
		[&amp;quot;GiftoftheNaaru&amp;quot;]			= true,
	    [&amp;quot;HoFreeQueue&amp;quot;]				= false,
	    [&amp;quot;HoProtQueue&amp;quot;]				= false,
	    [&amp;quot;HoPurQueue&amp;quot;]				= false,
	    [&amp;quot;HoSacQueue&amp;quot;]				= false,
	    [&amp;quot;HoSalvQueue&amp;quot;]				= false,
	    [&amp;quot;JudgeFocusQueue&amp;quot;]   		= false,
	    [&amp;quot;JusticeQueue&amp;quot;]			= false,
	    [&amp;quot;Pause&amp;quot;]					= false,	    
	    [&amp;quot;SotRQueue&amp;quot;]				= false,
	    [&amp;quot;TakeControl&amp;quot;]				= false,
	    [&amp;quot;TurnEvil&amp;quot;]				= false,
	} 
	if not _AoE then _AoE = false end
end

_Chat = print
_Rage = UnitPower(&amp;quot;player&amp;quot;)
_HP = ( 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) )
_Mana = ( 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) )
_SA = PQR_SpellAvailable
_UB = UnitBuffID
_UDB = UnitDebuffID
_GI	= GetSpellInfo
_Spec = GetSpecialization()
_HolyPower = UnitPower(&amp;quot;player&amp;quot;, 9)
_ActiveHealing = macros[&amp;quot;ActiveHealing&amp;quot;]

if UnitExists(&amp;quot;target&amp;quot;) then LastTarget = GetTime() end

-- Latency Adjuster
local minValue = 0.05
local maxValue = 0.3
local curPing = tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000) + .025
if curPing &amp;lt; minValue then curPing = minValue elseif curPing &amp;gt; maxValue then curPing = maxValue end
PQR_SpellAvailableTime = curPing	

if _Spec == 1 then
	PQR_SwapRotation(&amp;quot;Holy (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 1
	PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;CodeMyLife Paladin &amp;quot;..VerNum,nil,&amp;quot;FCC2F6&amp;quot;)
	_AbilityList = false
end
if _Spec == 2 then
	PQR_SwapRotation(&amp;quot;Protection (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 2
	PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;CodeMyLife Paladin &amp;quot;..VerNum,nil,&amp;quot;FCC2F6&amp;quot;)
	_AbilityList = false
end
if _Spec == 3 then
	PQR_SwapRotation(&amp;quot;Retribution (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 3
	PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;CodeMyLife Paladin &amp;quot;..VerNum,nil,&amp;quot;FCC2F6&amp;quot;)	
	_AbilityList = false
end

--------------------
-- Slash Commands --
--------------------
if SlashMacros == nil then
	SlashMacros = true
	
	if _Spec == 1 then macros[&amp;quot;ActiveHealing&amp;quot;] = true end
	if _Spec == 1 then macros[&amp;quot;ActiveDispel&amp;quot;] = true end
	
	SLASH_ACTIVECOOLDOWNS1 = &amp;quot;/activecooldowns&amp;quot;
	SLASH_ACTIVECOOLDOWNS2 = &amp;quot;/activecooldown&amp;quot;
	function SlashCmdList.ACTIVECOOLDOWNS(msg, editbox)
		if not macros[&amp;quot;ActiveCooldowns&amp;quot;] then
			xrn:message(&amp;quot;|cff9933ffCooldowns - Active.&amp;quot;)
			macros[&amp;quot;ActiveCooldowns&amp;quot;] = true
		else			
			xrn:message(&amp;quot;|cff9933ffCooldowns - Inactive.&amp;quot;)
			macros[&amp;quot;ActiveCooldowns&amp;quot;] = false
		end
	end
	
	SLASH_ACTIVEDISPEL1 = &amp;quot;/activedispel&amp;quot;
	function SlashCmdList.ACTIVEDISPEL(msg, editbox)
		if not macros[&amp;quot;ActiveDispel&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFFFFFFDispel - Active.&amp;quot;) 
			macros[&amp;quot;ActiveDispel&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFFFFFFFDispel - Inactive.&amp;quot;) 
			macros[&amp;quot;ActiveDispel&amp;quot;] = false
		end
	end
	
	SLASH_ACTIVEDPS1 = &amp;quot;/activedps&amp;quot;
	function SlashCmdList.ACTIVEDPS(msg, editbox)
		if not macros[&amp;quot;ActiveDPS&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFFFFFFDPS - Active.&amp;quot;) 
			macros[&amp;quot;ActiveDPS&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFFFFFFFDPS - Inactive.&amp;quot;) 
			macros[&amp;quot;ActiveDPS&amp;quot;] = false
		end
	end
		
	SLASH_ACTIVEHEALING1 = &amp;quot;/activehealing&amp;quot;
	function SlashCmdList.ACTIVEHEALING(msg, editbox)
		if not macros[&amp;quot;ActiveHealing&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFF78A0Healing - Active.&amp;quot;) 
			macros[&amp;quot;ActiveHealing&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFFF78A0Healing - Inactive.&amp;quot;)
			macros[&amp;quot;ActiveHealing&amp;quot;] = false
		end
	end
	
	SLASH_AOE1 = &amp;quot;/aoe&amp;quot;
	function SlashCmdList.AOE(msg, editbox)
	    if macros[&amp;quot;AoE&amp;quot;] == 1 then 
	        macros[&amp;quot;AoE&amp;quot;] = 2 
	        xrn:message(&amp;quot;\124cFF3BB0FFArea of Effect&amp;quot;)
	    elseif macros[&amp;quot;AoE&amp;quot;] == 2 and _Spec == 3 then 
	        macros[&amp;quot;AoE&amp;quot;] = 3
	        xrn:message(&amp;quot;\124cFFFFFFFFMass AoE&amp;quot;)
	    else 
	    	macros[&amp;quot;AoE&amp;quot;] = 1 
	        xrn:message(&amp;quot;\124cFF3BB0FFSingle Target&amp;quot;)
	    end
	end 
	
	SLASH_BLINDINGLIGHT1 = &amp;quot;/blindinglight&amp;quot;
	function SlashCmdList.BLINDINGLIGHT(msg, editbox)
		if not macros[&amp;quot;BlindingLightQueue&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFF3300Blinding Light Queued.&amp;quot;)
			macros[&amp;quot;BlindingLightQueue&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFFF3300Blinding Light Canceled.&amp;quot;)
			macros[&amp;quot;BlindingLightQueue&amp;quot;] = false
		end
	end
	
	SLASH_CONSECRATION1 = &amp;quot;/consecration&amp;quot;
	function SlashCmdList.CONSECRATION(msg, editbox)
		if not macros[&amp;quot;Consecration&amp;quot;] then
			xrn:message(&amp;quot;|cffFF78A0Consecration - Active.&amp;quot;)
			macros[&amp;quot;Consecration&amp;quot;] = true
		else
			xrn:message(&amp;quot;|cffFF78A0Consecration - Inactive.&amp;quot;)
			macros[&amp;quot;Consecration&amp;quot;] = false
		end
	end
		
	SLASH_HOFREE1 = &amp;quot;/hofree&amp;quot;
	function SlashCmdList.HOFREE(msg, editbox)
		if not macros[&amp;quot;HoFreeQueue&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFFFFFFHand of Freedom Queued.&amp;quot;)
			macros[&amp;quot;HoFreeQueue&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFCC99FFHand of Freedom Canceled.&amp;quot;)
			macros[&amp;quot;HoFreeQueue&amp;quot;] = false
		end
	end
	
	SLASH_HOSAC1 = &amp;quot;/hosac&amp;quot;
	function SlashCmdList.HOSAC(msg, editbox)
		if not macros[&amp;quot;HoSacQueue&amp;quot;] and GetNumGroupMembers() &amp;gt; 0 then
			xrn:message(&amp;quot;\124cFFFFFFFFHand of Sacrifice Queued.&amp;quot;)
			macros[&amp;quot;HoSacQueue&amp;quot;] = true
		elseif GetNumGroupMembers() &amp;gt; 0 then
			xrn:message(&amp;quot;\124cFFCC99FFHand of Sacrifice Canceled.&amp;quot;)
			macros[&amp;quot;HoSacQueue&amp;quot;] = false
		end
	end
	
	SLASH_HOSALV1 = &amp;quot;/hosalv&amp;quot;
	function SlashCmdList.HOSALV(msg, editbox)
		if not macros[&amp;quot;HoSalvQueue&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFFFFFFHand of Salvation Queued.&amp;quot;)
			macros[&amp;quot;HoSalvQueue&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFCC99FFHand of Salvation Canceled.&amp;quot;)
			macros[&amp;quot;HoSalvQueue&amp;quot;] = false
		end
	end
	
	SLASH_HOPROT1 = &amp;quot;/hoprot&amp;quot;
	function SlashCmdList.HOPROT(msg, editbox)
		if not macros[&amp;quot;HoProtQueue&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFFFFFFHand of Protection Queued.&amp;quot;)
			macros[&amp;quot;HoProtQueue&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFCC99FFHand of Protection Canceled.&amp;quot;)
			macros[&amp;quot;HoProtQueue&amp;quot;] = false
		end
	end
	
	SLASH_HOPUR1 = &amp;quot;/hopur&amp;quot;
	function SlashCmdList.HOPUR(msg, editbox)
		if not macros[&amp;quot;HoPurQueue&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFFFFFFHand of Purity Queued.&amp;quot;)
			macros[&amp;quot;HoPurQueue&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFCC99FFHand of Purity Canceled.&amp;quot;)
			macros[&amp;quot;HoPurQueue&amp;quot;] = false
		end
	end
	
	SLASH_JUDGEFOCUS1 = &amp;quot;/judgefocus&amp;quot;
	function SlashCmdList.JUDGEFOCUS(msg, editbox)
		if not macros[&amp;quot;JudgeFocusQueue&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFF3300Judgment on Focus Target Queued.&amp;quot;)
			macros[&amp;quot;JudgeFocusQueue&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFFF3300Judgment on Focus Target Canceled.&amp;quot;)
			macros[&amp;quot;JudgeFocusQueue&amp;quot;] = false		
		end
	end
	
	SLASH_PAUSE1 = &amp;quot;/pause&amp;quot;
	function SlashCmdList.PAUSE(msg, editbox)
		if not macros[&amp;quot;Pause&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFF3300Profile Paused.&amp;quot;)
			macros[&amp;quot;Pause&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFF0033FFProfile Resumed.&amp;quot;)
			macros[&amp;quot;Pause&amp;quot;] = false		
		end
	end
	
	if SotRQueue == nil then SotRQueue = false end
	SLASH_SOTR1 = &amp;quot;/sotr&amp;quot;
	function SlashCmdList.SOTR(msg, editbox)
		if not macros[&amp;quot;SotRQueue&amp;quot;] then
			xrn:message(&amp;quot;\124cFF0000FFShield of the Righteous Queued.&amp;quot;)
			macros[&amp;quot;SotRQueue&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFCC99FFShield of the Righteous Canceled.&amp;quot;)
			macros[&amp;quot;SotRQueue&amp;quot;] = false
		end
	end
	
	SLASH_TAKECONTROL1 = &amp;quot;/takecontrol&amp;quot;
	function SlashCmdList.TAKECONTROL(msg, editbox)
		if not macros[&amp;quot;TakeControl&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFF33CCMouseover Control Activated.&amp;quot;)
			macros[&amp;quot;TakeControl&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFFCC99FFMouseover Control Canceled.&amp;quot;)
			macros[&amp;quot;TakeControl&amp;quot;] = false
		end
	end
	
	SLASH_SETTALENTS1 = &amp;quot;/settalents&amp;quot;
	SLASH_SETTALENTS2 = &amp;quot;/settalent&amp;quot;
	function SlashCmdList.SETTALENTS(msg, editbox)
		CML_ToggleSwapper()
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Extras</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Extras --
-- Vars
if OocAP == nil then OocAP = UnitAttackPower(&amp;quot;player&amp;quot;) end
if not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	OocAP, _, _ = UnitAttackPower(&amp;quot;player&amp;quot;)
end	
	
-- Set Mouseover Focus
if FocusKey 
  and FocusKeyCheck then
	FocusUnit(&amp;quot;mouseover&amp;quot;)
end
	
-- Divine Purpose
if UnitBuffID(&amp;quot;player&amp;quot;, 86172) ~= nil then divinePurpose = true else divinePurpose = false end

-- Feast Taker
if FeastTakerCheck then
	if not UnitBuffID(&amp;quot;player&amp;quot;, 104934)
	  and (not UnitBuffID(&amp;quot;player&amp;quot;, 104282) or not UnitBuffID(&amp;quot;player&amp;quot;, 104271))
	  and not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if  FeastTimer == nil then
			FeastTimer = GetTime()
		elseif GetTime() &amp;gt;= FeastTimer + 5 then
			RunMacroText(&amp;quot;/console Sound_EnableSFX 0&amp;quot;)
			InteractUnit(&amp;quot;Pandaren Banquet&amp;quot;)
			InteractUnit(&amp;quot;Great Pandaren Banquet&amp;quot;)
			RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
			RunMacroText(&amp;quot;/console Sound_EnableSFX 1&amp;quot;)
	 		FeastTimer = nil
		end		
	end
end

-- Soulwell Taker
if FeastTakerCheck 
  and GetItemCount(5512,false,true) &amp;lt; 3 then
	if not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if  SoulTimer == nil then
			SoulTimer = GetTime()
		elseif GetTime() &amp;gt; SoulTimer + 5 then
			RunMacroText(&amp;quot;/console Sound_EnableSFX 0&amp;quot;)
			InteractUnit(&amp;quot;Soulwell&amp;quot;)
			RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
			RunMacroText(&amp;quot;/console Sound_EnableSFX 1&amp;quot;)
	 		SoulTimer = nil
		end		
	end
end

if macros[&amp;quot;Pause&amp;quot;] then return true end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Events Handler</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not TalentSwapEvents then
	TalentSwapEvents = CreateFrame(&amp;quot;frame&amp;quot;, nil)
	TalentSwapEvents:RegisterEvent(&amp;quot;ACTIVE_TALENT_GROUP_CHANGED&amp;quot;)
	TalentSwapEvents:SetScript(&amp;quot;OnEvent&amp;quot;, function()	
		_AbilityList = false
		PQR_SwapRotation(&amp;quot;Master (CodeMyLife)&amp;quot;)
	end)
end

if CML_Debug then	
	if DebugSpell ~= 0 and CML_LastSpell ~= nil then
		PQR_WriteToChat(&amp;quot;Casted: |cffffcc00 &amp;quot; .. CML_LastSpell)
		DebugSpell = 0
	end
end

if not CombatEvents  then
	CombatEvents = true
	-- Init Values	
	EventsReader_CombatLog = CreateFrame(&amp;apos;Frame&amp;apos;)
	EventsReader_CombatLog:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
	function CombatLog_OnEvent(self, event, ...)
--		print(...)
		local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)	
		if (event==&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;) then

			-- Tester
			--if sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
			--	print(&amp;quot;I just cast &amp;quot;..select(12, ...)..&amp;quot; &amp;quot;..type)
			--end 
			
			-- Shield of the Righteous listener
			if type == &amp;quot;SPELL_DAMAGE&amp;quot; 
			  and select(12, ...) == 53600
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
				Shielded = GetTime()
				if SotRPowCheck then
					macros[&amp;quot;SotRQueue&amp;quot;] = false
					xrn:message(&amp;quot;\124cFF9900CCShield of the Righteous&amp;quot;)
				end
			end 
			
			-- Avenger&amp;apos;s Shield interrupt listener
			if type == &amp;quot;SPELL_INTERRUPT&amp;quot; 
			  and select(12, ...) == 31935
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
			  	AvengerUsed = ( GetTime() + 1 )
				xrn:message(&amp;quot;\124cFF00FF00Shield Interrupt on &amp;quot;..destNAME)
			end 
			
			-- Rebuke interrupt listener
			if type == &amp;quot;SPELL_INTERRUPT&amp;quot; 
			  and select(12, ...) == 96231
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
				xrn:message(&amp;quot;\124cFFFF0000Rebuke Interrupt on &amp;quot;..destNAME)
			end 
			
			-- Hand of Purity
			if type == &amp;quot;SPELL_AURA_APPLIED&amp;quot; 
			  and select(12, ...) == 114039
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
				macros[&amp;quot;HoPurQueue&amp;quot;] = false
				xrn:message(&amp;quot;\124cFFFFFFFFHand of Purity on &amp;quot;..destNAME)
			end 
			
			-- Hand of Sacrifice
			if type == &amp;quot;SPELL_AURA_APPLIED&amp;quot; 
			  and select(12, ...) == 6940
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
				macros[&amp;quot;HoSacQueue&amp;quot;] = false
				xrn:message(&amp;quot;\124cFFFFFFFFHand of Sacrifice on &amp;quot;..destNAME)
			end 				
			
			-- Hand of Salvation
			if type == &amp;quot;SPELL_AURA_APPLIED&amp;quot; 
			  and select(12, ...) == 1038
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
				macros[&amp;quot;HoSalvQueue&amp;quot;] = false
				xrn:message(&amp;quot;\124cFFFFFFFFHand of Salvation on &amp;quot;..destNAME)
			end	
			
			-- Hand of Freedom
			if type == &amp;quot;SPELL_AURA_APPLIED&amp;quot; 
			  and select(12, ...) == 1044
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
				macros[&amp;quot;HoFreeQueue&amp;quot;] = false
				xrn:message(&amp;quot;\124cFFFFFFFFHand of Freedom on &amp;quot;..destNAME)
			end	
			
			-- Hand of Protection
			if type == &amp;quot;SPELL_AURA_APPLIED&amp;quot; 
			  and select(12, ...) == 1022
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
				macros[&amp;quot;HoProtQueue&amp;quot;] = false
				xrn:message(&amp;quot;\124cFFFFFFFFHand of Protection on &amp;quot;..destNAME)
			end	
							
			-- Hand of Protection
			if type == &amp;quot;SPELL_DAMAGE&amp;quot; 
			  and select(12, ...) == 20271
			  and sourceNAME == UnitName(&amp;quot;player&amp;quot;) then
				JudgeTargetGUID = destGUID
			end				
		end 
	end
 	EventsReader_CombatLog:SetScript(&amp;quot;OnEvent&amp;quot;, CombatLog_OnEvent)
end

if Shielded == nil then Shielded = GetTime() end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Functions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Functions --
if not NoFacingCheckCheck then
	uid = PQR_UnitInfo()
end

if not Functions then
	Functions = true	
	
	APBonus = nil
	function APBonus()
		if OocAP == nil then OocAP = UnitAttackPower(&amp;quot;player&amp;quot;) end
		local ActiveAP, _, _ = UnitAttackPower(&amp;quot;player&amp;quot;)
		if ActiveAP &amp;gt; OocAP + 6000 then
			return true	
		else
			return false
		end
	end
	
	CML_ActiveCooldowns = nil
	function CML_ActiveCooldowns()
		if macros[&amp;quot;ActiveCooldowns&amp;quot;] then
			if CML_HaveBuff(&amp;quot;player&amp;quot;, _Inquisition, 7) == true then
				CML_Berserking() 
				CML_BloodFury()
				RunMacroText(&amp;quot;/use 10&amp;quot;)
				RunMacroText(&amp;quot;/use 13&amp;quot;)
				RunMacroText(&amp;quot;/use 14&amp;quot;)
				if Spells[_AvengingWrath].known  and _SA(_AvengingWrath) then
					_Cast(_AvengingWrath, &amp;quot;player&amp;quot;) 
				end  
				if Spells[_HolyAvenger].known  and _SA(_HolyAvenger) then
					_Cast(_HolyAvenger, &amp;quot;player&amp;quot;) 
				end 
				if Spells[_GuardianOfAncientKingsRet].known  and _SA(_GuardianOfAncientKingsRet) then
					_Cast(_GuardianOfAncientKingsRet, CML_RangeTarget()) 
				end 
				if Spells[_ExecutionSentence].known and _SA(_ExecutionSentence) 
				  and ( macros[&amp;quot;ExecutionQueue&amp;quot;] or CML_HaveBuff(&amp;quot;player&amp;quot;,_AvengingWrath,2) or CML_HaveBuff(&amp;quot;player&amp;quot;,_GuardianOfAncientKingsRet,2) ) and select(2,CML_RangeTarget()) == true then
					_Cast(_ExecutionSentence, CML_RangeTarget()) 
				end
			end
		end
	end	
	
	CML_AvengersShield = nil
	function CML_AvengersShield(Proc)
		if Spells[_AvengersShield].known and _SA(_AvengersShield) then
			if Proc == true and _UB(&amp;quot;player&amp;quot;, 98057) then
				 _Cast(_AvengersShield, &amp;quot;target&amp;quot;)
			end
			if Proc == nil then 
				_Cast(_AvengersShield, &amp;quot;target&amp;quot;) 
			end
		end
	end	
	
	CML_Blessings = nil
	function CML_Blessings()
		if _UB(&amp;quot;player&amp;quot;,144051) then return false end
		CML_BlessingCount = 0
		for i = 1, #nNova do
		    local _, CML_MemberClass = select(2,UnitClass(nNova[i].unit))
		    if UnitExists(nNova[i].unit) then 
			    if CML_MemberClass ~= nil then
					if CML_MemberClass == &amp;quot;DRUID&amp;quot; then CML_BlessingCount = CML_BlessingCount + 1 end				
					if CML_MemberClass == &amp;quot;MONK&amp;quot; then CML_BlessingCount = CML_BlessingCount + 1	end					
				    if CML_MemberClass == &amp;quot;PALADIN&amp;quot; then CML_BlessingCount = CML_BlessingCount + 50 end	
					if CML_MemberClass == &amp;quot;SHAMAN&amp;quot; then	CML_BlessingCount = CML_BlessingCount + 1000 end
				end		
			end	
		end	
		if CML_BlessingCount &amp;gt; 50 and CML_BlessingCount &amp;lt; 1000 then
			CML_MyBlessing = _BlessingOfMight
		else
			CML_MyBlessing = _BlessingOfKings
		end
		if ActiveBlessingsValue == 2 then
			CML_MyBlessing = _BlessingOfKings
		elseif ActiveBlessingsValue == 3 then
			CML_MyBlessing = _BlessingOfMight
		end	
		if CML_MyBlessing == _BlessingOfMight and not Spells[_BlessingOfMight].known then CML_MyBlessing = _BlessingOfKings end
		if CML_MyBlessing == _BlessingOfKings and not Spells[_BlessingOfKings].known then BuffTimer = GetTime() + 600 return false end	
		if BuffTimer == nil or BuffTimer &amp;lt; GetTime() then
			for i=1, #nNova do
				if not UnitBuffID(nNova[i].unit,CML_MyBlessing) and ( UnitInParty(nNova[i].unit) ~= nil or UnitInRaid(nNova[i].unit) ~= nil ) then
					if _SA(CML_MyBlessing) and CanHeal2(nNova[i].unit) then
						_Cast(GetSpellInfo(CML_MyBlessing),&amp;quot;player&amp;quot;) 
			 			BuffTimer = GetTime() + random(15,30)
			 			return true
				 	end
				end
			end	
		end
	end
	
	CML_BoGStacks = nil
	function CML_BoGStacks()
		Stacks = select(4,UnitBuffID(&amp;quot;player&amp;quot;, 114637))
		if Stacks == nil then return 0 end
		return Stacks
	end
	
	CML_ConsecrationGlyph = nil
	function CML_ConsecrationGlyph()
		for i = 1, 6 do
			_, _, _, glyphSpell, _ = GetGlyphSocketInfo(i, nil)
			if glyphSpell == 54928 then
				return true
			end
		end
	end
	
	CML_DefensiveCDS = nil
	function CML_DefensiveCDS()
		if ArdentDefenderCheck and Spells[_ArdentDefender].known and _SA(_ArdentDefender) then		
	 		if _HP &amp;lt;= ArdentDefender then
	 			_Cast(_ArdentDefender, &amp;quot;player&amp;quot;)
	 		end
	 	end
	 	if DivineProtectionCheck and Spells[_DivineProtection].known and _SA(_DivineProtection) then		
	 		if _HP &amp;lt;= DivineProtection then
	 			_Cast(_DivineProtection, &amp;quot;player&amp;quot;)
	 		end
	 	end
	 	if GuardianOfAncientKingsCheck and Spells[_GuardianOfAncientKings].known and _SA(_GuardianOfAncientKings) then		
	 		if _HP &amp;lt;= GuardianOfAncientKings then
	 			_Cast(_GuardianOfAncientKings, &amp;quot;player&amp;quot;)
	 		end
	 	end	 	
	end

	CML_DivineShield = nil
	function CML_DivineShield()
		if Spells[_DivineShield].known and _SA(_DivineShield) then
			_Cast(_DivineShield,&amp;quot;player&amp;quot;)
		end
	end	
	
	CML_DoubleJeopardy = nil
	function CML_DoubleJeopardy()
		if _UB(&amp;quot;player&amp;quot;, 121027) then
			if JudgeTargetGUID then
				if JudgeTargetGUID == UnitGUID(&amp;quot;target&amp;quot;) then
					for i = 1, #MyTargets do
						if UnitExists(MyTargets[i]) == 1 then
							if JudgeTargetGUID ~= UnitGUID(MyTargets[i]) 
							  and IsSpellInRange(_GI(_Judgement), MyTargets[i]) == 1 then 
								_Cast(_Judgement, MyTargets[i])
							end	
						end
					end
				end
			end
		end
	end
	
	CML_GetHolyGen = nil
	function CML_GetHolyGen()
		if _Spec == 2 then
			Delay = 0.2 + PQR_SpellAvailableTime
		elseif _Spec == 3 then
			Delay = 0.5 + PQR_SpellAvailableTime
		end
		if _HolyPower &amp;lt;= 4 and GetSpellCD(_CrusaderStrike) &amp;lt; Delay or GetSpellCD(_Judgement) &amp;lt; Delay or UnitBuffID(&amp;quot;player&amp;quot;, 85416)
		  or CML_GetHP(&amp;quot;target&amp;quot;) &amp;lt;= 20 or ( _Spec == 2 and ( CML_HaveBuff(_AvengingWrath) or GetSpellCD(_Exorcism) &amp;lt; Delay ) ) then 
			return true
		else
			return false
		end
	end
	
	CML_HammerOfJustice = nil
	function CML_HammerOfJustice()
		if macros[&amp;quot;JusticeQueue&amp;quot;] then
			if Spells[_FistOfJustice].known  and _SA(_FistOfJustice) then
				_Cast(_FistOfJustice, &amp;quot;target&amp;quot;) 
			end
			if Spells[_HammerOfJustice].known  and _SA(_HammerOfJustice) then
				_Cast(_HammerOfJustice, &amp;quot;target&amp;quot;) 
			end 
		end
	end
	
	CML_HandActive = nil
	function HandActive(target)
		if UnitBuffID(target, _HandOfFreedom)
		  or UnitBuffID(target, _HandOfProtection)
		  or UnitBuffID(target, _HandOfPurity)
		  or UnitBuffID(target, _HandOfSacrifice)
		  or UnitBuffID(target, _HandOfSalvation) then
		  	return true
		end
	end
	
	CML_HandOfFreedom = nil 
	function CML_HandOfFreedom()
		if macros[&amp;quot;HoFreeQueue&amp;quot;] then
			if Spells[_HandOfFreedom].known and _SA(_HandOfFreedom) and IsSpellInRange(GetSpellInfo(_HandOfFreedom), &amp;quot;mouseover&amp;quot;) ~= nil then
			 	_Cast(_HandOfFreedom, &amp;quot;mouseover&amp;quot;)
			end
		end
		local debuffList = { } 
		if HandOfFreedomCheck then
			for i=1,#debuffList do 
				if UnitDebuffID(&amp;quot;player&amp;quot;,debuffList[i]) 
			  	  and CanHeal2(&amp;quot;player&amp;quot;)
			  	  and UnitIsPlayer(&amp;quot;player&amp;quot;) == 1 
				  and not HandActive(&amp;quot;player&amp;quot;) then
				  	if Spells[_HandOfFreedom].known and _SA(_HandOfFreedom) then
						_Cast(_HandOfFreedom, &amp;quot;player&amp;quot;)
					end
				end
			end
		end
	end
	
	CML_HandOfProtection = nil 
	function CML_HandOfProtection()	
		if macros[&amp;quot;HoProtQueue&amp;quot;] then
			if Spells[_HandOfProtection].known and _SA(_HandOfProtection) and IsSpellInRange(GetSpellInfo(_HandOfProtection), &amp;quot;mouseover&amp;quot;) ~= nil then
			 	_Cast(_HandOfProtection, &amp;quot;mouseover&amp;quot;)
			end
		end
		if HandOfProtectionCheck and nNova[1].hp &amp;lt; HandOfProtection then
			if Spells[_HandOfProtection].known and _SA(_HandOfProtection)
			  and UnitThreatSituation(nNova[1].unit) == 3
			  and UnitGroupRolesAssigned(nNova[1].unit) ~= &amp;quot;TANK&amp;quot;
--			  and UnitGroupRolesAssigned(nNova[1].unit) ~= &amp;quot;NONE&amp;quot;
			  and UnitClass(nNova[1].unit) ~= &amp;quot;Deathknight&amp;quot;
			  and not ( UnitClass(nNova[1].unit) == &amp;quot;Druid&amp;quot; and UnitBuffID(nNova[1].unit, 768) )
			  and UnitClass(nNova[1].unit) ~= &amp;quot;Hunter&amp;quot;
			  and UnitClass(nNova[1].unit) ~= &amp;quot;Paladin&amp;quot;  
			  and UnitClass(nNova[1].unit) ~= &amp;quot;Rogue&amp;quot;  
			  and UnitClass(nNova[1].unit) ~= &amp;quot;Warrior&amp;quot; 
			  and not HandActive(nNova[1].unit)
			  and not UnitDebuffID(nNova[1].unit, 25771)
			  and CanHeal2(nNova[1].unit)
			  and not ( UnitIsUnit(&amp;quot;player&amp;quot;,nNova[1].unit) and GetSpecialization() == 2 )
			  and IsSpellInRange(GetSpellInfo(1022),nNova[1].unit) ~= nil then
				_Cast(_HandOfProtection, nNova[1].unit)
			end
		end		
	end
	
	CML_HandOfPurity = nil 
	function CML_HandOfPurity()	
		if macros[&amp;quot;HoPurQueue&amp;quot;] then
			if Spells[_HandOfPurity].known and _SA(_HandOfPurity) and ( UnitIsUnit(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) ~= nil or CanHeal2(&amp;quot;mouseover&amp;quot;) ) then
			 	_Cast(_HandOfPurity, &amp;quot;mouseover&amp;quot;)
			end
		end
	end
	
	CML_HandOfSacrifice = nil 
	function CML_HandOfSacrifice()	
		if Spells[_HandOfSacrifice].known and _SA(_HandOfSacrifice) then
			if macros[&amp;quot;HoSacQueue&amp;quot;] then
				if CanHeal2(&amp;quot;mouseover&amp;quot;) then
				 	_Cast(_HandOfSacrifice, &amp;quot;mouseover&amp;quot;)
				end
			end
			if HandOfSacrificeCheck and nNova[1].hp &amp;lt; HandOfSacrifice and ( _HP &amp;gt;= 65 or _Spec == 2 ) then
				if Spells[_HandOfSacrifice].known and _SA(_HandOfSacrifice)
				  and UnitThreatSituation(nNova[1].unit) == 3
				  and not HandActive(nNova[1].unit)
--				  and (UnitGroupRolesAssigned(nNova[1].unit) == &amp;quot;Tank&amp;quot; 
--					or UnitGroupRolesAssigned(nNova[1].unit) == &amp;quot;Healer&amp;quot; 
--				  or UnitGroupRolesAssigned(nNova[1].unit) == &amp;quot;None&amp;quot;)
				  and CanHeal2(nNova[1].unit) then
					 _Cast(_HandOfSacrifice, nNova[1].unit)
				end
			end
		end
	end
	
	CML_HandOfSalvation = nil 
	function CML_HandOfSalvation()	
		if macros[&amp;quot;HoSalvQueue&amp;quot;] then
			if Spells[_HandOfSalvation].known and _SA(_HandOfSalvation) and CanHeal2(&amp;quot;mouseover&amp;quot;) then
			 	_Cast(_HandOfSalvation, &amp;quot;mouseover&amp;quot;)
			end
		end
		if HandOfSalvationCheck and nNova[1].hp &amp;lt; HandOfSalvation  then
			if Spells[_HandOfSalvation].known and _SA(_HandOfSalvation)
			  and UnitThreatSituation(nNova[1].unit) == 3
			  and UnitGroupRolesAssigned(nNova[1].unit) ~= &amp;quot;TANK&amp;quot;
--			  and UnitGroupRolesAssigned(nNova[1].unit) ~= &amp;quot;NONE&amp;quot;
			  and not ( UnitIsUnit(&amp;quot;player&amp;quot;,nNova[1].unit) and GetSpecialization() == 2 )
			  and not HandActive(nNova[1].unit)
			  and CanHeal2(nNova[1].unit) then
				_Cast(_HandOfSalvation, nNova[1].unit)
			end
		end
	end
	
	CML_Inquisition = nil
	function CML_Inquisition(Remains)
		if _Spec == 3 then
			if Remains == nil then Remains = 3 end
			local divinePurpose = UnitBuffID(&amp;quot;player&amp;quot;, 86172)
			local inquisition, _, _, _, _, _, inquisitionEndTime = UnitBuffID(&amp;quot;player&amp;quot;, 84963)
			
			if inquisition ~= nil then
				inquisitionEndTime = inquisitionEndTime - GetTime()
			end
			
			if inquisition == nil or inquisitionEndTime &amp;lt;= Remains then
				if _HolyPower &amp;gt;= 3 or divinePurpose ~= nil then
					_Cast(_Inquisition, &amp;quot;player&amp;quot;)
				end
			end
		end
	end
	
	CML_InquisitionTime = nil
	function CML_InquisitionTime()
		if _Spec == 3 then
			local inquisitionEndTime = 0
			local divinePurpose = UnitBuffID(&amp;quot;player&amp;quot;, 86172)
			local inquisition, _, _, _, _, _, inquisitionEndTime = UnitBuffID(&amp;quot;player&amp;quot;, 84963)
			if inquisition ~= nil then
				inquisitionEndTime = math.floor(inquisitionEndTime - GetTime())
			else
				inquisitionEndTime = 0
			end
			return inquisitionEndTime
		end
	end
	
	CML_Interrupts = nil
	function CML_Interrupts()
		-- Credit goes to Xelper for his interupt code. Thank you very much Xelper!!
		if not RebukeCheck then 
			return false 
		end
		
		if RandomRebuke == nil then
			if Rebuke == 1 then RandomRebuke = math.random(0,50) end
			if Rebuke == 2 then RandomRebuke = 30 end
			if Rebuke == 3 then RandomRebuke = 0 end
		end
		
		function PQR_InterruptSpell()
			if IsPlayerSpell(31935) and PQR_SpellAvailable(31935) then -- Avenger&amp;apos;s Shield
				return 31935
			elseif IsPlayerSpell(96231) and PQR_SpellAvailable(96231) then -- Rebuke
				return 96231
			else
				return 0
			end    
		end   
		
		local PQR_InterruptPercent = Rebuke
		local interruptSpell = PQR_InterruptSpell()
		local interruptName = GetSpellInfo(interruptSpell)
		
		InterruptTargetsList = { &amp;quot;target&amp;quot;, &amp;quot;focus&amp;quot;, &amp;quot;mouseover&amp;quot; }
		-- Interrupt Casts and Channels on Target and Focus.
		if interruptSpell ~= 0 then
			for i = 1, #InterruptTargetsList do
				
				local customTarget = InterruptTargetsList[i]
				local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
				local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
					
				if channelName ~= nil then
					--target is channeling a spell that is interruptable
					--load the channel variables into the cast variables to make logic a little easier.
					castName = channelName
					castStartTime = channelStartTime
					castEndTime = channelEndTime
					castInterruptable = channelInterruptable
					PQR_InterruptPercent = 0
					local IsChannel = true
				end
				
				--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
				if castInterruptable == false then
					castInterruptable = true
				else
					castInterruptable = false
				end	
				
				if castInterruptable then
				  	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
					local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
					local castTime = castEndTime - castStartTime
					local currentPercent = timeSinceStart / castTime * 100000
				  	if IsSpellInRange(GetSpellInfo(35395), customTarget) ~= nil
				  	  and currentPercent &amp;gt; PQR_InterruptPercent
				  	  and UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) ~= nil then
					--target is casting something that is interruptable.
					--the following 2 variables are named logically... value is in seconds.
					  	if currentPercent &amp;lt; RandomRebuke and not IsChannel then return false end
						CastSpellByID(interruptSpell, customTarget)
					end
				end
			end
		end
	end
	
	CML_MassExoGlyph = nil
	function CML_MassExoGlyph()
		for i = 1, 6 do
			_, _, _, glyphSpell, _ = GetGlyphSocketInfo(i, nil)
			if glyphSpell == 122028 then
				return true		
			end
		end
		return false
	end

					
		
	
	CML_Seal = nil
	function CML_Seal()
		if not ActiveSealsCheck then return false end
		if ActiveSealsValue == 1 then 
			if _Spec == 1 then
				CML_SealValue = 3 
			end 
			if _Spec == 2 then 
				CML_SealValue = 3 
			end 
			if _Spec == 3 then 
				if macros[&amp;quot;AoE&amp;quot;] == 2 then 
					CML_SealValue = 1 
				elseif macros[&amp;quot;AoE&amp;quot;] == 1 then		 
					CML_SealValue = 1 
				elseif macros[&amp;quot;AoE&amp;quot;] == 3 then 
					CML_SealValue = 2
				end 
			end	
		end	
		if ActiveSealsValue == 2 then 
			CML_SealValue = 1 
		end		
		if ActiveSealsValue == 3 then 
			if _Spec == 2 then 
				CML_SealValue = 3 
			end 
			if _Spec == 3 then 
				CML_SealValue = 4 
			end	
		end	
		if ActiveSealsValue == 4 then 
			CML_SealValue = 2 
		end		
		if ActiveSealsValue == 5 then 
			if _Spec == 2 then 
				CML_SealValue = 3 
			end 
			if _Spec == 3 then 
				CML_SealValue = 3 
			end		
		end
		if GetShapeshiftForm() ~= CML_SealValue then 
			CastShapeshiftForm(CML_SealValue) 
		end	
	end
	
	CML_TakeControl = nil
 	function CML_TakeControl()
 		if macros[&amp;quot;TakeControl&amp;quot;] then
	 		if MyTargets[1] == &amp;quot;target&amp;quot; then
	 			MyTargets[1] = &amp;quot;mouseover&amp;quot;
	 			MyTargets[2] = &amp;quot;target&amp;quot;
	 		end
	 		for i = 1, #MyTargets do
			 	if UnitExists(MyTargets[i]) == 1 and UnitIsUnit(tostring(MyTargets[i]..&amp;quot;target&amp;quot;),&amp;quot;player&amp;quot;) ~= 1 and UnitExists(MyTargets[i]..&amp;quot;target&amp;quot;) then
			 		if UnitCastingInfo(MyTargets[i]) ~= nil then
			 			CML_AvengersShield()
			 		end
			 		_Cast(_Reckoning, MyTargets[i])
			 	end
			end	
	 	else
	 		if MyTargets[1] == &amp;quot;mouseover&amp;quot; then
	 			MyTargets[1] = &amp;quot;target&amp;quot;
	 			MyTargets[2] = &amp;quot;mouseover&amp;quot;
	 		end
	 	end	 
 	end
 	
 	ProtPalT16 = {
		99126, -- Chest
		99127, -- Gloves
		99128, -- Helm
		99129, -- Legs
		99130 -- Shoulders
	}
 	
 	CML_TierScanner = nil
	function CML_TierScanner(List,Bool)
		local k = 0
		for i=1, 19 do
		  	if GetInventoryItemID(&amp;quot;player&amp;quot;, i) ~= nil then
		    	for j=1, 5 do
		    		if GetItemInfo(GetInventoryItemID(&amp;quot;player&amp;quot;, i)) == GetItemInfo(List[j]) then
		    			k = k + 1
		    		end
		    	end
		  	end
		end
		if Bool then
			if k &amp;gt;= Bool then
				return true
			else
				return false
			end
		else
			return k
		end
	end
 	
 	CML_TurnEvil = nil
 	function CML_TurnEvil()
 		if macros[&amp;quot;TurnEvil&amp;quot;] and Spells[_TurnEvil].known and _SA(_TurnEvil) then
 			_Cast(_TurnEvil, &amp;quot;target&amp;quot;)
 		end
 	end
 	
 	CML_UnitFacing = nil
	function CML_UnitFacing(Target1,Target2)
		if NoFacingCheckCheck then return Facing end
		if Target1 == nil then Target1 = &amp;quot;player&amp;quot; end
		if Target2 == nil then Target2 = &amp;quot;target&amp;quot; end
		if UnitExists(Target1) and UnitExists(Target2) then
			local targetGUID = UnitGUID(Target2) 
	 		if PQR_UnitFacing(Target1,targetGUID) then
				return true
	   		end
	  	end
	  	return false
	 end
 	
 	SixHolyPoW = nil
	function SixHolyPoW()
		if ( GetSpellCD(35395) &amp;lt; 1 or GetSpellCD(20271) &amp;lt; 1 or UnitBuffID(&amp;quot;player&amp;quot;, 85416)) 
		  and ( UnitPower(&amp;quot;player&amp;quot;, 9) == 5 or ( UnitBuffID(&amp;quot;player&amp;quot;, 90174) and UnitPower(&amp;quot;player&amp;quot;, 9) &amp;gt; 2 )) then 
			return true
		else
			return false
		end
	end	
	ProtT16Equipped = CML_TierScanner(ProtPalT16,4)
	xrn:message(&amp;quot;\124cFFFF99FF...CodeMyLife Paladin...&amp;quot;)
end

ActualVengeance = CML_GetVengeance()

if SetTalentsTrue then 
	if _Spec == 1 then CML_TalentSwap(3,1,2,1,3,1) end
	if _Spec == 2 then CML_TalentSwap(1,1,2,2,1,3) end
	if _Spec == 3 then CML_TalentSwap(2,1,3,3,1,3) end
end

-- Convert Table to Var
if macros[&amp;quot;AoE&amp;quot;] == 2 or 3 then
	_AoE = true
end
if macros[&amp;quot;AoE&amp;quot;] == 1 then
	_AoE = false
end


ProtT16Equipped = CML_TierScanner(ProtPalT16,4)</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PQI Config</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- PQI Config --
if _PQIConfigValue == 1 then	
	if  ActivePQI ~= 1 then
		ActivePQI = 1
		local config = {
			name	= &amp;quot;Holy&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
			
			    ----  Options  ----	
			    { 	name	= &amp;quot;Combat Check&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUncheck for Aggressive Mode.&amp;quot;,
					enable	= true,
				},	
				{ 	name	= &amp;quot;No Facing Check&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Checking this |cffFFFFFFturns off Facing Checks and Multi-Target|cffFF0066. This is to be used only |cffFFFFFFif you experiment framerate issues|cffFF0066.&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Throttle&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle Rotation |cffFFFFFFThrottle|cffFF0066.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						min 	= 0,
						max 	= 500,
						value	= 60,
						step	= 20,
						width 	= 60,
						tooltip	= &amp;quot;|cffFFFFFFHow long in miliseconds to wait before refiring profile. |cffFF0066Highering this value will lighten the FPS drop. |cffFFFFFFRemember to keep PQR settings low (20ms/40ms) otherwise you might see unusual delays. Default 60ms&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Feast Taker&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle Automatic |cffFFFFFFFeast Taker.|cffFF0066Eperimental, might cause some loses on feasts. Includes |cffFFFFFFHealthStone Taker |cffFF0066and |cffFFFFFFSummoning Portal Cliker|cffFF0066.&amp;quot;,
					enable	= false,
				},	
				{ 	name	= &amp;quot;Player Status&amp;quot;, 
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFPlayer Bar.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Pink&amp;quot;,&amp;quot;|cff00CC00Colored&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFF0066Choose |cffFFFFFFHealth Bar Color|cffFF0066.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Spam Filter&amp;quot;, 
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFSpam Filter.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE00000Disable&amp;quot;,&amp;quot;|cff00E0DCSound&amp;quot;,&amp;quot;|cffFF9D00Alerts&amp;quot;,&amp;quot;|cff62FF00Both&amp;quot;},
						value = 4,
						width = 60,
						tooltip = &amp;quot;|cffFF0066Choose |cffFFFFFFSpam Filter Mode|cffFF0066.|cffE00000Disable will do nothing.|cff00E0DCSound will turn off sound for casting.|cffFF9D00Alerts will toggle off Red Alerts in middle of sreen.|cff62FF00Both will turn off Sound and Alerts.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Active Seals&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Seal|cffFF0066, should let that always checked and use |cffFFFFFF/activeseals |cffFF0066macro to toggle.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Auto&amp;quot;,&amp;quot;|cffFFFF33Truth&amp;quot;,&amp;quot;|cffFF9900Righteousness&amp;quot;,&amp;quot;|cff24E0FBInsight&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFFFFFFChoose Seal. Auto should take the most appropriate Seal for your class/aoe mode.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Active Blessings&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Blessings|cffFF0066.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Auto&amp;quot;,&amp;quot;|cff24E0FBKings&amp;quot;,&amp;quot;|cffFF9900Might&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFFFFFFChoose Blessing. Choose Auto for class scanning feature that select appropriate buff to use.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Beacon Of Light&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Beacon of Light |cffFF0066when protection.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Auto&amp;quot;,&amp;quot;|cffFF8000Tanks&amp;quot;,&amp;quot;|cff6BD600Focus&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFFFFFFChoose Beacon Mode.|cffFF0066Auto will take the most appropriate target for beacon.|cffFF8000Tanks will put it on the active tanks or your focus if you set one.|cff6BD600Focus will put it on focus.&amp;quot;,	
					},
				},		
				----  Healing  ----
				{ 	name	= &amp;quot;Holy Radiance&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Holy Radiance.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 80,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Holy Radiance on 3 players.&amp;quot;,
					},
					newSection = true,
				},
				
				{ 	name	= &amp;quot;Light Of Dawn&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Light Of Dawn.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 80,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Light Of Dawn on 3 players.&amp;quot;,
					},
				},	
							
				{ 	name	= &amp;quot;Holy Shock&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Holy Shock.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 90,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Holy Shock.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Word Of Glory&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Word of Glory.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Word of Glory.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Eternal Flame&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Eternal Flame.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Eternal Flame.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Holy Light&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Holy Light.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 65,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Holy Light.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Divine Light&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Divine Light.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 45,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Divine Light.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Flash Of Light&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Flash of Light.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 20,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Flash of Light.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Holy Prism&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHoly Prism |cffFF0066on any Raid or Group member(will prefer casting on its target).&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Stay Of Execution&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;|cffFF0066Activate |cffFFFFFFStayOfExecution&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						min		= 0,
						max 	= 100,
						value	= 25,
						step	= 5,
						tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Stay Of Execution|cffFF0066. Set |cffFFFFFFHealth |cffFF0066treshold.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Lay on Hands&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Lay on Hands.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 12,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Lay on Hands.&amp;quot;,
					},
				},
	
				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 25,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to use |cffFFFFFFHealthstone|cffFF0066.&amp;quot;,
					},
				},			
				{ 	name	= &amp;quot;Selfless Healer&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Selfless Healer.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Selfless Healer.&amp;quot;,
					},
				},				
				----  Utility  ----
					
				{ 	name	= &amp;quot;Hand of Sacrifice&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Sacrifice |cffFF0066on Tank or No Role assigned Raid or Group member.&amp;quot;,
					},
					newSection = true,
				},	
				{ 	name	= &amp;quot;Hand of Salvation&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 80,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Salvation |cffFF0066on DPS or Healer Raid or Group member.&amp;quot;,
					},
				},				
				{ 	name	= &amp;quot;Hand of Protection&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 45,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Protection |cffFF0066on DPS or Healer Raid or Group member.&amp;quot;,
					},
				},				
				{ 	name	= &amp;quot;Hand of Freedom&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFActive Hand of Freedom |cffFF0066on Raid or Group|cffFF0066.&amp;quot;,
					enable	= true,
				},					
				{ 	name	= &amp;quot;Divine Protection&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 45,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFDivine Protection|cffFF0066.&amp;quot;,
					},
				},					
				{ 	name	= &amp;quot;Guardian Of Ancient Kings&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 25,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to use |cffFFFFFFGuardian of Ancient Kings|cffFF0066.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Avenging Wrath&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 30,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to use |cffFFFFFFAvenging Wrath|cffFF0066.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Divine Favor&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 20,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to use |cffFFFFFFDivine Favor|cffFF0066.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Sacred Shield&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 100,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFWhat HP |cffFF0066we wait before using |cffFFFFFFSacred Shield |cffFF0066to buff ourself. Set to 100 to keep it up as much as possible, it will still only cast to keep the buff up.&amp;quot;,
					},
				},	
								
				{ 	name	= &amp;quot;Divine Plea&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 100,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFWhat Mana |cffFF0066we wait before using |cffFFFFFFDivine Plea |cffFF0066.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Denounce&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Denounce.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 40,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFWhat Minimum Mana we stop using |cffFF0066Denounce.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Rebuke&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFRebuke.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values 	= {&amp;quot;|cffFF0066Random&amp;quot;,&amp;quot;|cff00CC0030&amp;quot;,&amp;quot;|cff00CC000&amp;quot;},
						value	= 1,
						width	= 60,
						tooltip	= &amp;quot;|cffFFFFFFWhat % of cast |cffFF0066you want to wait before using |cffFFFFFFRebuke|cffFF0066. The channels will always be instant Rebuke unless Avenger&amp;apos;s Shield is ready.&amp;quot;,
					},
					newSection = true,
				},	
								
				
				{ 	name	= &amp;quot;Debug&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Displays Rotation locally in chat.&amp;quot;,
					enable	= false,
					newSection = true,
				},			
			},
			
			
			hotkeys = {
				{	name	= &amp;quot;Lights Hammer&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;lc&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFLight&amp;apos;s Hammer |cffFF0066Keybind.&amp;quot;,
				},
				{	name	= &amp;quot;Pause&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;la&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFPause |cffFF0066Keybind.&amp;quot;,
				},
				{	name	= &amp;quot;Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ls&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFMouseover Focus |cffFF0066Keybind&amp;quot;,
				},
			},
		}
		CODEMYLIFE_HOLY = PQI:AddRotation(config)
	end
	
	-- OPTIONS -- 
	
	ActiveSealsValue					= PQI_CodeMyLifeHoly_ActiveSeals_value
	ActiveSealsCheck					= PQI_CodeMyLifeHoly_ActiveSeals_enable
	
	ActiveBlessingsValue				= PQI_CodeMyLifeHoly_ActiveBlessings_value
	ActiveBlessingsCheck				= PQI_CodeMyLifeHoly_ActiveBlessings_enable
	
	ArdentDefender						= PQI_CodeMyLifeHoly_ArdentDefender_value
	ArdentDefenderCheck					= PQI_CodeMyLifeHoly_ArdentDefender_enable
	
	AvengingWrath						= PQI_CodeMyLifeHoly_AvengingWrath_value
	AvengingWrathCheck					= PQI_CodeMyLifeHoly_AvengingWrath_enable
	
	BeaconOfLightCheck					= PQI_CodeMyLifeHoly_BeaconOfLight_enable
	BeaconOfLightValue					= PQI_CodeMyLifeHoly_BeaconOfLight_value
	
	Cleanse	 							= PQI_CodeMyLifeHoly_Cleanse_value
	CleanseCheck 						= PQI_CodeMyLifeHoly_Cleanse_enable
	
	CML_Debug							= PQI_CodeMyLifeHoly_Debug_enable
	
	CML_SelfFlameHP						= PQI_CodeMyLifeHoly_SelfFlame_value
	CML_SelfFlameHPCheck				= PQI_CodeMyLifeHoly_SelfFlame_enable
	
	CombatCheckCheck					= PQI_CodeMyLifeHoly_CombatCheck_enable
	
	DenounceValue	 					= PQI_CodeMyLifeHoly_Denounce_value
	DenounceCheck 						= PQI_CodeMyLifeHoly_Denounce_enable		
	
	DivineFavor							= PQI_CodeMyLifeHoly_DivineFavor_value
	DivineFavorCheck					= PQI_CodeMyLifeHoly_DivineFavor_enable
	
	DivineLightValue					= PQI_CodeMyLifeHoly_DivineLight_value
	DivineLightCheck					= PQI_CodeMyLifeHoly_DivineLight_enable
	
	DivinePleaValue	 					= PQI_CodeMyLifeHoly_DivinePlea_value
	DivinePleaCheck 					= PQI_CodeMyLifeHoly_DivinePlea_enable
	
	DivineProtection					= PQI_CodeMyLifeHoly_DivineProtection_value
	DivineProtectionCheck				= PQI_CodeMyLifeHoly_DivineProtection_enable
	
	EternalFlameValue					= PQI_CodeMyLifeHoly_EternalFlame_value
	EternalFlameCheck					= PQI_CodeMyLifeHoly_EternalFlame_enable
	
	ExecutionSentenceCheck				= PQI_CodeMyLifeHoly_ExecutionSentence_enable
	ExecutionSentence					= PQI_CodeMyLifeHoly_ExecutionSentence_value
	
	FeastTakerCheck 					= PQI_CodeMyLifeHoly_FeastTaker_enable
	
	FlashOfLightValue					= PQI_CodeMyLifeHoly_FlashOfLight_value
	FlashOfLightCheck					= PQI_CodeMyLifeHoly_FlashOfLight_enable
	
	GuardianOfAncientKings				= PQI_CodeMyLifeHoly_GuardianOfAncientKings_value
	GuardianOfAncientKingsCheck			= PQI_CodeMyLifeHoly_GuardianOfAncientKings_enable
	
	HolyRadianceValue					= PQI_CodeMyLifeHoly_HolyRadiance_value
	HolyRadianceCheck					= PQI_CodeMyLifeHoly_HolyRadiance_enable
	
	HolyShockValue						= PQI_CodeMyLifeHoly_HolyShock_value
	HolyShockCheck						= PQI_CodeMyLifeHoly_HolyShock_enable
	
	LightOfDawnValue					= PQI_CodeMyLifeHoly_LightOfDawn_value
	LightOfDawnCheck					= PQI_CodeMyLifeHoly_LightOfDawn_enable
	
	
	Healthstone	 						= PQI_CodeMyLifeHoly_Healthstone_value
	HealthstoneCheck 					= PQI_CodeMyLifeHoly_Healthstone_enable
	
	HandOfSacrifice						= PQI_CodeMyLifeHoly_HandofSacrifice_value
	HandOfSacrificeCheck				= PQI_CodeMyLifeHoly_HandofSacrifice_enable
	
	HandOfSalvation						= PQI_CodeMyLifeHoly_HandofSalvation_value
	HandOfSalvationCheck				= PQI_CodeMyLifeHoly_HandofSalvation_enable
	
	HandOfProtection					= PQI_CodeMyLifeHoly_HandofProtection_value
	HandOfProtectionCheck				= PQI_CodeMyLifeHoly_HandofProtection_enable
	
	HandOfFreedomCheck					= PQI_CodeMyLifeHoly_HandofProtection_enable
	
	HolyLightValue						= PQI_CodeMyLifeHoly_HolyLight_value
	HolyLightCheck						= PQI_CodeMyLifeHoly_HolyLight_enable
	
	HolyPrism	 						= PQI_CodeMyLifeHoly_HolyPrism_value
	HolyPrismValue	 					= PQI_CodeMyLifeHoly_HolyPrism_value
	HolyPrismCheck 						= PQI_CodeMyLifeHoly_HolyPrism_enable
	
	LayOnHands	 						= PQI_CodeMyLifeHoly_LayonHands_value
	LayOnHandsCheck 					= PQI_CodeMyLifeHoly_LayonHands_enable
	
	NoFacingCheckCheck					= PQI_CodeMyLifeHoly_NoFacingCheck_enable	
	
	PlayerStatusCheck					= PQI_CodeMyLifeHoly_PlayerStatus_enable
	PlayerStatusValue					= PQI_CodeMyLifeHoly_PlayerStatus_value
	
	Rebuke								= PQI_CodeMyLifeHoly_Rebuke_value
	RebukeCheck							= PQI_CodeMyLifeHoly_Rebuke_enable
	
	RighteousFuryCheck					= PQI_CodeMyLifeHoly_RighteousFury_enable
	
	PVE_SacredVengeanceCheck    		= PQI_CodeMyLifeHoly_SacredVengeance_enable
	PVE_SacredVengeance       			= PQI_CodeMyLifeHoly_SacredVengeance_value	
	
	SacredShield						= PQI_CodeMyLifeHoly_SacredShield_value
	SacredShieldCheck					= PQI_CodeMyLifeHoly_SacredShield_enable
	
	SelflessHealerValue					= PQI_CodeMyLifeHoly_SelflessHealer_value
	SelflessHealerCheck					= PQI_CodeMyLifeHoly_SelflessHealer_enable
	
	SpamFilter							= PQI_CodeMyLifeHoly_SpamFilter_value
	SpamFilterCheck						= PQI_CodeMyLifeHoly_SpamFilter_enable
	
	SotRPowValue						= PQI_CodeMyLifeHoly_ShieldoftheRighteous_value
	SotRPowCheck						= PQI_CodeMyLifeHoly_ShieldoftheRighteous_enable
	
	StayOfExecutionCheck				= PQI_CodeMyLifeHoly_StayOfExecution_enable
	StayOfExecutionValue				= PQI_CodeMyLifeHoly_StayOfExecution_value
	
	ThrottleCheck						= PQI_CodeMyLifeHoly_Throttle_enable
	ThrottleValue						= PQI_CodeMyLifeHoly_Throttle_value
	
	WordOfGlory							= PQI_CodeMyLifeHoly_WordOfGlory_value
	WOG									= PQI_CodeMyLifeHoly_WordOfGlory_enable
	
	--Keybinds
	FocusKey							= PQI:IsHotkeys(PQI_CodeMyLifeHoly_Focus_key)
	FocusKeyCheck						= PQI_CodeMyLifeHoly_Pause_enable
	
	LightsHammerKey						= PQI:IsHotkeys(PQI_CodeMyLifeHoly_LightsHammer_key)
	LightsHammerKeyCheck				= PQI_CodeMyLifeHoly_LightsHammer_enable
	
	PauseKey							= PQI:IsHotkeys(PQI_CodeMyLifeHoly_Pause_key)
	PauseKeyCheck						= PQI_CodeMyLifeHoly_Pause_enable
end


if _PQIConfigValue == 2 then
	if  ActivePQI ~= 2 then
		ActivePQI = 2
		local config = {
			name	= &amp;quot;Protection&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
			
			    ----  Options  ----		    
			    { 	name	= &amp;quot;Combat Check&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUncheck for Aggressive Mode. Leave this check for safety. If uncheck, you ranged abilities will be thrown on any target that you mouseover, target or focus|cffFF0066.&amp;quot;,
					enable	= true,
				},	
				{ 	name	= &amp;quot;No Facing Check&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Checking this |cffFFFFFFturns off Facing Checks and Multi-Target|cffFF0066. This is to be used only |cffFFFFFFif you experiment framerate issues|cffFF0066.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Throttle&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle Rotation |cffFFFFFFThrottle|cffFF0066.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						min 	= 0,
						max 	= 500,
						value	= 60,
						step	= 20,
						width 	= 60,
						tooltip	= &amp;quot;|cffFFFFFFHow long in miliseconds to wait before refiring profile. |cffFF0066Highering this value will lighten the FPS drop. |cffFFFFFFRemember to keep PQR settings low (20ms/40ms) otherwise you might see unusual delays. Default 60ms&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Feast Taker&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle Automatic |cffFFFFFFFeast Taker.|cffFF0066Eperimental, might cause some loses on feasts. Includes |cffFFFFFFHealthStone Taker|cffFF0066.&amp;quot;,
					enable	= false,
				},	
				{ 	name	= &amp;quot;Player Status&amp;quot;, 
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFPlayer Status|cffFF0066.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Pink&amp;quot;,&amp;quot;|cff00CC00Colored&amp;quot;},
						value = 2,
						width = 60,
						tooltip = &amp;quot;|cffFF0066Choose |cffFFFFFFHealth Bar Color|cffFF0066.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Spam Filter&amp;quot;, 
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFSpam Filter.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE00000Disable&amp;quot;,&amp;quot;|cff00E0DCSound&amp;quot;,&amp;quot;|cffFF9D00Alerts&amp;quot;,&amp;quot;|cff62FF00Both&amp;quot;},
						value = 4,
						width = 60,
						tooltip = &amp;quot;|cffFF0066Choose |cffFFFFFFSpam Filter Mode|cffFF0066.|cffE00000Disable will do nothing.|cff00E0DCSound will turn off sound for casting.|cffFF9D00Alerts will toggle off Red Alerts in middle of sreen.|cff62FF00Both will turn off Sound and Alerts.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Active Seals&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Seal|cffFF0066, should let that always checked and use |cffFFFFFF/activeseals |cffFF0066macro to toggle.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Auto&amp;quot;,&amp;quot;|cffFFFF33Truth&amp;quot;,&amp;quot;|cffFF9900Insight&amp;quot;,&amp;quot;|cff24E0FBRighteousness&amp;quot;,&amp;quot;|cff33FF33Justice&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFFFFFFChoose Seal. Auto should take the most appropriate Seal for your class/aoe mode.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Active Blessings&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Blessings|cffFF0066.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Auto&amp;quot;,&amp;quot;|cff24E0FBKings&amp;quot;,&amp;quot;|cffFF9900Might&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFFFFFFChoose Blessing. Choose Auto for class scanning feature that select appropriate buff to use.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Righteous Fury&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Righteous Fury |cffFF0066when protection.&amp;quot;,
					enable	= true,
				},		
				
				{ 	name	= &amp;quot;Execution Sentence&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;|cffFF0066Activate |cffFFFFFFExecution Sentence&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						min		= 0,
						max 	= 400000,
						width 	= 60,
						value	= 75000,
						step	= 10000,
						tooltip	= &amp;quot;Set |cffFFFFFFVengeance |cffFF0066treshold for|cffFFFFFF protection|cffFF0066.&amp;quot;,
					},
				},
				
				{  name = &amp;quot;Sacred Vengeance&amp;quot;,
			     	enable = true,
			     	tooltip = &amp;quot;|cffFF0066Activate |cffFFFFFFSacred Shield&amp;quot;,
			     	widget = { type = &amp;quot;numBox&amp;quot;,
			      		min  = 0,
			      		max  = 400000,
			      		width  = 60,
			      		value = 75000,
			      		step = 10000,
			      		tooltip = &amp;quot;|cffFF0066How much |cffFFFFFFvengeance gain |cffFF0066is needed to overwrite |cffFFFFFFSacred Shield or |cffFFFFFFEternal Flame |cffFF0066buffs.&amp;quot;,
			     	},
			    },
				
				----  Healing  ----
				
				{ 	name	= &amp;quot;SelfFlame&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFEternal Flame with 4 Holy Power |cffFF0066on self.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Eternal Flame with 4 Holy Power on self.&amp;quot;,
					},
					newSection = true,
				},
					
				{ 	name	= &amp;quot;Word Of Glory&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFWord of Glory |cffFF0066or |cffFFFFFFEternal Flame with 3 Holy Power |cffFF0066on Raid or Group members |cffFFFFFFwhile /activehealing.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFWord of Glory with 3 Holy Power |cffFF0066on Raid or Group member |cffFFFFFFwhile /activehealing.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Lay on Hands&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFLay on Hands |cffFF0066on Raid or Group members.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 17,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFLay on Hands |cffFF0066on Raid or Group member.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Holy Prism&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFHoly Prism |cffFF0066on Raid or Group members |cffFFFFFFwhile /activehealing.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 32,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHoly Prism |cffFF0066on Raid or Group member |cffFFFFFFwhile /activehealing.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Flash Of Light&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFFlash Of Light |cffFF0066on self when not moving.|cffFFFFFFRequires more than 50% mana and /activehealing.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFFlash Of Light |cffFF0066on self when not moving.|cffFFFFFFRequires more than 50% mana and /activehealing.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check |cffFF0066to use |cffFFFFFFHealthstone|cffFF0066.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 25,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to use |cffFFFFFFHealthstone|cffFF0066.&amp;quot;,
					},
					newSection = true,
				},	
				{ 	name	= &amp;quot;Selfless Healer&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Selfless Healer.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Selfless Healer.&amp;quot;,
					},
				},				
				----  Utility  ----
					
				{ 	name	= &amp;quot;Hand of Sacrifice&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFHand of Sacrifice |cffFF0066on Tank Role assigned Raid or Group member.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Sacrifice |cffFF0066on |cffFFFFFFTank Role assigned Raid or Group member.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Hand of Salvation&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFHand of Salvation |cffFF0066on |cffFFFFFFDPS or Healer Raid or Group member.&amp;quot;,
						widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 80,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Salvation |cffFF0066on |cffFFFFFFDPS or Healer Raid or Group member.&amp;quot;,
					},
				},				
				{ 	name	= &amp;quot;Hand of Protection&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFHand of Protection |cffFF0066on |cffFFFFFFDPS or Healer Raid or Group member.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 45,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Protection |cffFF0066on |cffFFFFFFDPS or Healer Raid or Group member.&amp;quot;,
					},
				},				
				{ 	name	= &amp;quot;Hand of Freedom&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFActive Hand of Freedom on Self|cffFF0066.&amp;quot;,
					enable	= false,
				},	
				{ 	name	= &amp;quot;Ardent Defender&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to activate |cffFFFFFFArdent Defender|cffFF0066.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 12,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFArdent Defender|cffFF0066.&amp;quot;,
					},
					newSection = true,
				},					
				{ 	name	= &amp;quot;Divine Protection&amp;quot;,
					enable	= false,
					tooltip	= &amp;quot;|cffFF0066Check to activate |cffFFFFFFDivine Protection|cffFF0066.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 45,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFDivine Protection|cffFF0066.&amp;quot;,
					},
				},					
				{ 	name	= &amp;quot;Guardian Of Ancient Kings&amp;quot;,
					enable	= false,
					tooltip	= &amp;quot;|cffFF0066Check to activate |cffFFFFFFGuardian of Ancient Kings|cffFF0066.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 30,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFGuardian of Ancient Kings|cffFF0066.&amp;quot;,
					},
					
				},
				{ 	name	= &amp;quot;Sacred Shield&amp;quot;,
					enable	= false,
					tooltip	= &amp;quot;|cffFF0066Check to activate |cffFFFFFFSacred Shield|cffFF0066.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 100,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFWhat HP |cffFF0066we wait before using |cffFFFFFFSacred Shield |cffFF0066to |cffFFFFFFbuff ourself. Set to 100 to keep it up as much as possible, it will still only cast to keep the buff up.&amp;quot;,
					},
				},	
				
				{ 	name	= &amp;quot;Shield of the Righteous&amp;quot;,
					enable	= false,
					tooltip	= &amp;quot;|cffFF0066Check to activate |cffFFFFFFSotR Chat Overlay|cffFF0066.&amp;quot;,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;Manual&amp;quot;,&amp;quot;3 HP&amp;quot;,&amp;quot;4 HP&amp;quot;,&amp;quot;5 HP&amp;quot;,&amp;quot;Wise Mode&amp;quot;},
						value = 5,
						width = 85,
						tooltip	= &amp;quot;|cffFFFFFFHow much Holy Power|cffFF0066 we want to have before using |cffFFFFFFShield of Righteous |cffFF0066to buff ourself. Setting it to |cffFFFFFFManual |cffFF0066will enable |cffFFFFFFManual shielding(No Shielding at all, ALL Manual)|cffFF0066 // |cffFFFFFF3 HP |cffFF0066will instantly use at |cffFFFFFF3 holy power |cffFF0066// |cffFFFFFF4 HP |cffFF0066instant use at |cffFFFFFF4 holy power |cffFF0066// |cffFFFFFF5 HP |cffFF0066instant use at |cffFFFFFF5 holy power |cffFF0066// |cffFFFFFF Wise Shielding mode |cffFF0066will use |cffFFFFFFat 5 holy power only if another holy generator ability is near ready to cast. Additionally |cffFF0066if you check the box |cffFFFFFFit will report Shielding Events to your overlay.&amp;quot;,
					},			
				},
				
				{ 	name	= &amp;quot;Rebuke&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFRebuke.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values 	= {&amp;quot;|cffFF0066Random&amp;quot;,&amp;quot;|cff00CC0030&amp;quot;,&amp;quot;|cff00CC000&amp;quot;},
						value	= 1,
						width	= 60,
						tooltip	= &amp;quot;|cffFFFFFFWhat % of cast |cffFF0066you want to wait before using |cffFFFFFFRebuke|cffFF0066. The channels will always be instant Rebuke unless Avenger&amp;apos;s Shield is ready.&amp;quot;,
					},
					newSection = true,
				},
				
				{ 	name	= &amp;quot;Debug&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Displays Rotation locally in chat.&amp;quot;,
					enable	= false,
					tooltip	= &amp;quot;|cffFFFFFFEnables Debug Print To Chat to see Rotation Casts.&amp;quot;,
					newSection = true,
				},			
			},
			
			
			hotkeys = {
				{	name	= &amp;quot;Lights Hammer&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;lc&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFLight&amp;apos;s Hammer |cffFF0066Keybind.&amp;quot;,
				},
				{	name	= &amp;quot;Pause&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;la&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFPause |cffFF0066Keybind.&amp;quot;,
				},
				{	name	= &amp;quot;Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ls&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFMouseover Focus |cffFF0066Keybind&amp;quot;,
				},
			},
		}
		CODEMYLIFE_PROTECTION = PQI:AddRotation(config)
	end
	-- OPTIONS -- 
	
	ActiveSealsValue					= PQI_CodeMyLifeProtection_ActiveSeals_value
	ActiveSealsCheck					= PQI_CodeMyLifeProtection_ActiveSeals_enable
	
	ActiveBlessingsValue				= PQI_CodeMyLifeProtection_ActiveBlessings_value
	ActiveBlessingsCheck				= PQI_CodeMyLifeProtection_ActiveBlessings_enable
	
	ArdentDefender						= PQI_CodeMyLifeProtection_ArdentDefender_value
	ArdentDefenderCheck					= PQI_CodeMyLifeProtection_ArdentDefender_enable
	
	AvengingWrath						= PQI_CodeMyLifeProtection_AvengingWrath_value
	AvengingWrathCheck					= PQI_CodeMyLifeProtection_AvengingWrath_enable
	
	BeaconOfLightCheck					= PQI_CodeMyLifeProtection_BeaconOfLight_enable
	BeaconOfLightValue					= PQI_CodeMyLifeProtection_BeaconOfLight_value
	
	Cleanse	 							= PQI_CodeMyLifeProtection_Cleanse_value
	CleanseCheck 						= PQI_CodeMyLifeProtection_Cleanse_enable
	
	CML_Debug							= PQI_CodeMyLifeProtection_Debug_enable
	
	CML_SelfFlameHP						= PQI_CodeMyLifeProtection_SelfFlame_value
	CML_SelfFlameHPCheck				= PQI_CodeMyLifeProtection_SelfFlame_enable
	
	CombatCheckCheck					= PQI_CodeMyLifeProtection_CombatCheck_enable
	
	DenounceValue	 					= PQI_CodeMyLifeProtection_Denounce_value
	DenounceCheck 						= PQI_CodeMyLifeProtection_Denounce_enable		
	
	DivineFavor							= PQI_CodeMyLifeProtection_DivineFavor_value
	DivineFavorCheck					= PQI_CodeMyLifeProtection_DivineFavor_enable
	
	DivineLightValue					= PQI_CodeMyLifeProtection_DivineLight_value
	DivineLightCheck					= PQI_CodeMyLifeProtection_DivineLight_enable
	
	DivinePleaValue	 					= PQI_CodeMyLifeProtection_DivinePlea_value
	DivinePleaCheck 					= PQI_CodeMyLifeProtection_DivinePlea_enable
	
	DivineProtection					= PQI_CodeMyLifeProtection_DivineProtection_value
	DivineProtectionCheck				= PQI_CodeMyLifeProtection_DivineProtection_enable
	
	EternalFlameValue					= PQI_CodeMyLifeProtection_EternalFlame_value
	EternalFlameCheck					= PQI_CodeMyLifeProtection_EternalFlame_enable
	
	ExecutionSentenceCheck				= PQI_CodeMyLifeProtection_ExecutionSentence_enable
	ExecutionSentence					= PQI_CodeMyLifeProtection_ExecutionSentence_value
	
	FeastTakerCheck 					= PQI_CodeMyLifeProtection_FeastTaker_enable
	
	FlashOfLightValue					= PQI_CodeMyLifeProtection_FlashOfLight_value
	FlashOfLightCheck					= PQI_CodeMyLifeProtection_FlashOfLight_enable
	
	GuardianOfAncientKings				= PQI_CodeMyLifeProtection_GuardianOfAncientKings_value
	GuardianOfAncientKingsCheck			= PQI_CodeMyLifeProtection_GuardianOfAncientKings_enable
	
	HolyRadianceValue					= PQI_CodeMyLifeProtection_HolyRadiance_value
	HolyRadianceCheck					= PQI_CodeMyLifeProtection_HolyRadiance_enable
	
	HolyShockValue						= PQI_CodeMyLifeProtection_HolyShock_value
	HolyShockCheck						= PQI_CodeMyLifeProtection_HolyShock_enable
	
	LightOfDawnValue					= PQI_CodeMyLifeProtection_LightOfDawn_value
	LightOfDawnCheck					= PQI_CodeMyLifeProtection_LightOfDawn_enable
	
	
	Healthstone	 						= PQI_CodeMyLifeProtection_Healthstone_value
	HealthstoneCheck 					= PQI_CodeMyLifeProtection_Healthstone_enable
	
	HandOfSacrifice						= PQI_CodeMyLifeProtection_HandofSacrifice_value
	HandOfSacrificeCheck				= PQI_CodeMyLifeProtection_HandofSacrifice_enable
	
	HandOfSalvation						= PQI_CodeMyLifeProtection_HandofSalvation_value
	HandOfSalvationCheck				= PQI_CodeMyLifeProtection_HandofSalvation_enable
	
	HandOfProtection					= PQI_CodeMyLifeProtection_HandofProtection_value
	HandOfProtectionCheck				= PQI_CodeMyLifeProtection_HandofProtection_enable
	
	HandOfFreedomCheck					= PQI_CodeMyLifeProtection_HandofProtection_enable
	
	HolyLightValue						= PQI_CodeMyLifeProtection_HolyLight_value
	HolyLightCheck						= PQI_CodeMyLifeProtection_HolyLight_enable
	
	HolyPrism	 						= PQI_CodeMyLifeProtection_HolyPrism_value
	HolyPrismValue	 					= PQI_CodeMyLifeProtection_HolyPrism_value
	HolyPrismCheck 						= PQI_CodeMyLifeProtection_HolyPrism_enable
	
	LayOnHands	 						= PQI_CodeMyLifeProtection_LayonHands_value
	LayOnHandsCheck 					= PQI_CodeMyLifeProtection_LayonHands_enable
	
	NoFacingCheckCheck					= PQI_CodeMyLifeProtection_NoFacingCheck_enable	
	
	PlayerStatusCheck					= PQI_CodeMyLifeProtection_PlayerStatus_enable
	PlayerStatusValue					= PQI_CodeMyLifeProtection_PlayerStatus_value
	
	Rebuke								= PQI_CodeMyLifeProtection_Rebuke_value
	RebukeCheck							= PQI_CodeMyLifeProtection_Rebuke_enable
	
	RighteousFuryCheck					= PQI_CodeMyLifeProtection_RighteousFury_enable
	
	PVE_SacredVengeanceCheck    		= PQI_CodeMyLifeProtection_SacredVengeance_enable
	PVE_SacredVengeance       			= PQI_CodeMyLifeProtection_SacredVengeance_value	
	
	SacredShield						= PQI_CodeMyLifeProtection_SacredShield_value
	SacredShieldCheck					= PQI_CodeMyLifeProtection_SacredShield_enable
	
	SelflessHealerValue					= PQI_CodeMyLifeProtection_SelflessHealer_value
	SelflessHealerCheck					= PQI_CodeMyLifeProtection_SelflessHealer_enable
	
	SpamFilter							= PQI_CodeMyLifeProtection_SpamFilter_value
	SpamFilterCheck						= PQI_CodeMyLifeProtection_SpamFilter_enable
	
	SotRPowValue						= PQI_CodeMyLifeProtection_ShieldoftheRighteous_value
	SotRPowCheck						= PQI_CodeMyLifeProtection_ShieldoftheRighteous_enable
	
	StayOfExecutionCheck				= PQI_CodeMyLifeProtection_StayOfExecution_enable
	StayOfExecutionValue				= PQI_CodeMyLifeProtection_StayOfExecution_value
	
	ThrottleCheck						= PQI_CodeMyLifeProtection_Throttle_enable
	ThrottleValue						= PQI_CodeMyLifeProtection_Throttle_value
	
	WordOfGlory							= PQI_CodeMyLifeProtection_WordOfGlory_value
	WOG									= PQI_CodeMyLifeProtection_WordOfGlory_enable
	
	--Keybinds
	FocusKey							= PQI:IsHotkeys(PQI_CodeMyLifeProtection_Focus_key)
	FocusKeyCheck						= PQI_CodeMyLifeProtection_Pause_enable
	
	LightsHammerKey						= PQI:IsHotkeys(PQI_CodeMyLifeProtection_LightsHammer_key)
	LightsHammerKeyCheck				= PQI_CodeMyLifeProtection_LightsHammer_enable
	
	PauseKey							= PQI:IsHotkeys(PQI_CodeMyLifeProtection_Pause_key)
	PauseKeyCheck						= PQI_CodeMyLifeProtection_Pause_enable
end

if _PQIConfigValue == 3 then
	if  ActivePQI ~= 3 then
		ActivePQI = 3
		local config = {
			name	= &amp;quot;Retribution&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
			
			    ----  Options  ----		    
			    { 	name	= &amp;quot;Combat Check&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUncheck for Aggressive Mode. Leave this check for safety. If uncheck, you ranged abilities will be thrown on any target that you mouseover, target or focus|cffFF0066.&amp;quot;,
					enable	= true,
				},	
				{ 	name	= &amp;quot;No Facing Check&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Checking this |cffFFFFFFturns off Facing Checks and Multi-Target|cffFF0066. This is to be used only |cffFFFFFFif you experiment framerate issues|cffFF0066.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Throttle&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle Rotation |cffFFFFFFThrottle|cffFF0066.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						min 	= 0,
						max 	= 500,
						value	= 60,
						step	= 20,
						width 	= 60,
						tooltip	= &amp;quot;|cffFFFFFFHow long in miliseconds to wait before refiring profile. |cffFF0066Highering this value will lighten the FPS drop. |cffFFFFFFRemember to keep PQR settings low (20ms/40ms) otherwise you might see unusual delays. Default 60ms&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Feast Taker&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle Automatic |cffFFFFFFFeast Taker.|cffFF0066Eperimental, might cause some loses on feasts. Includes |cffFFFFFFHealthStone Taker|cffFF0066.&amp;quot;,
					enable	= false,
				},	
				{ 	name	= &amp;quot;Player Status&amp;quot;, 
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFPlayer Status|cffFF0066.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Pink&amp;quot;,&amp;quot;|cff00CC00Colored&amp;quot;},
						value = 2,
						width = 60,
						tooltip = &amp;quot;|cffFF0066Choose |cffFFFFFFHealth Bar Color|cffFF0066.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Spam Filter&amp;quot;, 
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFSpam Filter.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffE00000Disable&amp;quot;,&amp;quot;|cff00E0DCSound&amp;quot;,&amp;quot;|cffFF9D00Alerts&amp;quot;,&amp;quot;|cff62FF00Both&amp;quot;},
						value = 4,
						width = 60,
						tooltip = &amp;quot;|cffFF0066Choose |cffFFFFFFSpam Filter Mode|cffFF0066.|cffE00000Disable will do nothing.|cff00E0DCSound will turn off sound for casting.|cffFF9D00Alerts will toggle off Red Alerts in middle of sreen.|cff62FF00Both will turn off Sound and Alerts.&amp;quot;,	
					},
				},
				{ 	name	= &amp;quot;Active Seals&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Seal|cffFF0066, should let that always checked and use |cffFFFFFF/activeseals |cffFF0066macro to toggle.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Auto&amp;quot;,&amp;quot;|cffFFFF33Truth&amp;quot;,&amp;quot;|cffFF9900Insight&amp;quot;,&amp;quot;|cff24E0FBRighteousness&amp;quot;,&amp;quot;|cff33FF33Justice&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFFFFFFChoose Seal. Auto should take the most appropriate Seal for your class/aoe mode.&amp;quot;,	
					},
				},		
				{ 	name	= &amp;quot;Active Blessings&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Toggle |cffFFFFFFAutomatic Blessings|cffFF0066.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Auto&amp;quot;,&amp;quot;|cff24E0FBKings&amp;quot;,&amp;quot;|cffFF9900Might&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFFFFFFChoose Blessing. Choose Auto for class scanning feature that select appropriate buff to use.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Execution Sentence&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;|cffFF0066Activate |cffFFFFFFExecution Sentence&amp;quot;,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffFF0066Auto&amp;quot;,&amp;quot;|cffFFFFFFManual&amp;quot;},
						value = 1,
						width = 60,
						tooltip = &amp;quot;|cffFFFFFFChoose wich way you want Exectuon Sentance to be cast. Auto will use only with ActiveCooldowns. Queue will queue it when you use /exsent. Toggle /exsent will use it on CD.&amp;quot;,	
					},
				},
				----  Healing  ----
				{ 	name	= &amp;quot;Word Of Glory&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFWord of Glory |cffFF0066or |cffFFFFFFEternal Flame with 3 Holy Power |cffFF0066on Raid or Group members |cffFFFFFFwhile /activehealing.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFWord of Glory with 3 Holy Power |cffFF0066on Raid or Group member |cffFFFFFFwhile /activehealing.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Lay on Hands&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFLay on Hands |cffFF0066on Raid or Group members.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 17,
						step	= 1,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFLay on Hands |cffFF0066on Raid or Group member.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Holy Prism&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFHoly Prism |cffFF0066on Raid or Group members |cffFFFFFFwhile /activehealing.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 32,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHoly Prism |cffFF0066on Raid or Group member |cffFFFFFFwhile /activehealing.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Flash Of Light&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFFlash Of Light |cffFF0066on self when not moving.|cffFFFFFFRequires more than 50% mana and /activehealing.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 70,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFFlash Of Light |cffFF0066on self when not moving.|cffFFFFFFRequires more than 50% mana and /activehealing.&amp;quot;,
					},
				},
				
				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check |cffFF0066to use |cffFFFFFFHealthstone|cffFF0066.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 25,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to use |cffFFFFFFHealthstone|cffFF0066.&amp;quot;,
					},
					newSection = true,
				},	
				{ 	name	= &amp;quot;Selfless Healer&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFFFFFFCheck to Activate |cffFF0066Selfless Healer.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value to cast |cffFF0066Selfless Healer.&amp;quot;,
					},
				},				
				----  Utility  ----
					
				{ 	name	= &amp;quot;Hand of Sacrifice&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFHand of Sacrifice |cffFF0066on Tank Role assigned Raid or Group member.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 35,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Sacrifice |cffFF0066on |cffFFFFFFTank Role assigned Raid or Group member.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Hand of Salvation&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFHand of Salvation |cffFF0066on |cffFFFFFFDPS or Healer Raid or Group member.&amp;quot;,
						widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 80,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Salvation |cffFF0066on |cffFFFFFFDPS or Healer Raid or Group member.&amp;quot;,
					},
				},				
				{ 	name	= &amp;quot;Hand of Protection&amp;quot;,
					enable	= true,
					tooltip	= &amp;quot;|cffFF0066Check to Activate |cffFFFFFFHand of Protection |cffFF0066on |cffFFFFFFDPS or Healer Raid or Group member.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 45,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFHand of Protection |cffFF0066on |cffFFFFFFDPS or Healer Raid or Group member.&amp;quot;,
					},
				},				
				{ 	name	= &amp;quot;Hand of Freedom&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFActive Hand of Freedom on Self|cffFF0066.&amp;quot;,
					enable	= false,
				},					
				{ 	name	= &amp;quot;Divine Protection&amp;quot;,
					enable	= false,
					tooltip	= &amp;quot;|cffFF0066Check to activate |cffFFFFFFDivine Protection|cffFF0066.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 45,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFHealth value |cffFF0066to cast |cffFFFFFFDivine Protection|cffFF0066.&amp;quot;,
					},
				},					
				{ 	name	= &amp;quot;Sacred Shield&amp;quot;,
					enable	= false,
					tooltip	= &amp;quot;|cffFF0066Check to activate |cffFFFFFFSacred Shield|cffFF0066.&amp;quot;,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 100,
						step	= 5,
						tooltip	= &amp;quot;|cffFFFFFFWhat HP |cffFF0066we wait before using |cffFFFFFFSacred Shield |cffFF0066to |cffFFFFFFbuff ourself. Set to 100 to keep it up as much as possible, it will still only cast to keep the buff up.&amp;quot;,
					},
				},	
				
				{ 	name	= &amp;quot;Rebuke&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Enables |cffFFFFFFRebuke.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values 	= {&amp;quot;|cffFF0066Random&amp;quot;,&amp;quot;|cff00CC0030&amp;quot;,&amp;quot;|cff00CC000&amp;quot;},
						value	= 1,
						width	= 60,
						tooltip	= &amp;quot;|cffFFFFFFWhat % of cast |cffFF0066you want to wait before using |cffFFFFFFRebuke|cffFF0066. The channels will always be instant Rebuke unless Avenger&amp;apos;s Shield is ready.&amp;quot;,
					},
					newSection = true,
				},
				
				{ 	name	= &amp;quot;Debug&amp;quot;,
					tooltip	= &amp;quot;|cffFF0066Displays Rotation locally in chat.&amp;quot;,
					enable	= true,
					newSection = true,
				},	
			},
			
			
			hotkeys = {
				{	name	= &amp;quot;Lights Hammer&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;lc&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFLight&amp;apos;s Hammer |cffFF0066Keybind.&amp;quot;,
				},
				{	name	= &amp;quot;Pause&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;la&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFPause |cffFF0066Keybind.&amp;quot;,
				},
				{	name	= &amp;quot;Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ls&amp;apos;},
					tooltip	= &amp;quot;|cffFF0066Assign |cffFFFFFFMouseover Focus |cffFF0066Keybind&amp;quot;,
				},
			},
		}
		CODEMYLIFE_RETRIBUTION = PQI:AddRotation(config)
	end
	-- OPTIONS -- 

	ActiveSealsValue					= PQI_CodeMyLifeRetribution_ActiveSeals_value
	ActiveSealsCheck					= PQI_CodeMyLifeRetribution_ActiveSeals_enable
	
	ActiveBlessingsValue				= PQI_CodeMyLifeRetribution_ActiveBlessings_value
	ActiveBlessingsCheck				= PQI_CodeMyLifeRetribution_ActiveBlessings_enable
	
	ArdentDefender						= PQI_CodeMyLifeRetribution_ArdentDefender_value
	ArdentDefenderCheck					= PQI_CodeMyLifeRetribution_ArdentDefender_enable
	
	AvengingWrath						= PQI_CodeMyLifeRetribution_AvengingWrath_value
	AvengingWrathCheck					= PQI_CodeMyLifeRetribution_AvengingWrath_enable
	
	BeaconOfLightCheck					= PQI_CodeMyLifeRetribution_BeaconOfLight_enable
	BeaconOfLightValue					= PQI_CodeMyLifeRetribution_BeaconOfLight_value
	
	Cleanse	 							= PQI_CodeMyLifeRetribution_Cleanse_value
	CleanseCheck 						= PQI_CodeMyLifeRetribution_Cleanse_enable
	
	CML_Debug							= PQI_CodeMyLifeRetribution_Debug_enable
	
	CML_SelfFlameHP						= PQI_CodeMyLifeRetribution_SelfFlame_value
	CML_SelfFlameHPCheck				= PQI_CodeMyLifeRetribution_SelfFlame_enable
	
	CombatCheckCheck					= PQI_CodeMyLifeRetribution_CombatCheck_enable
	
	DenounceValue	 					= PQI_CodeMyLifeRetribution_Denounce_value
	DenounceCheck 						= PQI_CodeMyLifeRetribution_Denounce_enable		
	
	DivineFavor							= PQI_CodeMyLifeRetribution_DivineFavor_value
	DivineFavorCheck					= PQI_CodeMyLifeRetribution_DivineFavor_enable
	
	DivineLightValue					= PQI_CodeMyLifeRetribution_DivineLight_value
	DivineLightCheck					= PQI_CodeMyLifeRetribution_DivineLight_enable
	
	DivinePleaValue	 					= PQI_CodeMyLifeRetribution_DivinePlea_value
	DivinePleaCheck 					= PQI_CodeMyLifeRetribution_DivinePlea_enable
	
	DivineProtection					= PQI_CodeMyLifeRetribution_DivineProtection_value
	DivineProtectionCheck				= PQI_CodeMyLifeRetribution_DivineProtection_enable
	
	EternalFlameValue					= PQI_CodeMyLifeRetribution_EternalFlame_value
	EternalFlameCheck					= PQI_CodeMyLifeRetribution_EternalFlame_enable
	
	ExecutionSentenceCheck				= PQI_CodeMyLifeRetribution_ExecutionSentence_enable
	ExecutionSentence					= PQI_CodeMyLifeRetribution_ExecutionSentence_value
	
	FeastTakerCheck 					= PQI_CodeMyLifeRetribution_FeastTaker_enable
	
	FlashOfLightValue					= PQI_CodeMyLifeRetribution_FlashOfLight_value
	FlashOfLightCheck					= PQI_CodeMyLifeRetribution_FlashOfLight_enable
	
	GuardianOfAncientKings				= PQI_CodeMyLifeRetribution_GuardianOfAncientKings_value
	GuardianOfAncientKingsCheck			= PQI_CodeMyLifeRetribution_GuardianOfAncientKings_enable
	
	HolyRadianceValue					= PQI_CodeMyLifeRetribution_HolyRadiance_value
	HolyRadianceCheck					= PQI_CodeMyLifeRetribution_HolyRadiance_enable
	
	HolyShockValue						= PQI_CodeMyLifeRetribution_HolyShock_value
	HolyShockCheck						= PQI_CodeMyLifeRetribution_HolyShock_enable
	
	LightOfDawnValue					= PQI_CodeMyLifeRetribution_LightOfDawn_value
	LightOfDawnCheck					= PQI_CodeMyLifeRetribution_LightOfDawn_enable
	
	
	Healthstone	 						= PQI_CodeMyLifeRetribution_Healthstone_value
	HealthstoneCheck 					= PQI_CodeMyLifeRetribution_Healthstone_enable
	
	HandOfSacrifice						= PQI_CodeMyLifeRetribution_HandofSacrifice_value
	HandOfSacrificeCheck				= PQI_CodeMyLifeRetribution_HandofSacrifice_enable
	
	HandOfSalvation						= PQI_CodeMyLifeRetribution_HandofSalvation_value
	HandOfSalvationCheck				= PQI_CodeMyLifeRetribution_HandofSalvation_enable
	
	HandOfProtection					= PQI_CodeMyLifeRetribution_HandofProtection_value
	HandOfProtectionCheck				= PQI_CodeMyLifeRetribution_HandofProtection_enable
	
	HandOfFreedomCheck					= PQI_CodeMyLifeRetribution_HandofProtection_enable
	
	HolyLightValue						= PQI_CodeMyLifeRetribution_HolyLight_value
	HolyLightCheck						= PQI_CodeMyLifeRetribution_HolyLight_enable
	
	HolyPrism	 						= PQI_CodeMyLifeRetribution_HolyPrism_value
	HolyPrismValue	 					= PQI_CodeMyLifeRetribution_HolyPrism_value
	HolyPrismCheck 						= PQI_CodeMyLifeRetribution_HolyPrism_enable
	
	LayOnHands	 						= PQI_CodeMyLifeRetribution_LayonHands_value
	LayOnHandsCheck 					= PQI_CodeMyLifeRetribution_LayonHands_enable
	
	NoFacingCheckCheck					= PQI_CodeMyLifeRetribution_NoFacingCheck_enable	
	
	PlayerStatusCheck					= PQI_CodeMyLifeRetribution_PlayerStatus_enable
	PlayerStatusValue					= PQI_CodeMyLifeRetribution_PlayerStatus_value
	
	Rebuke								= PQI_CodeMyLifeRetribution_Rebuke_value
	RebukeCheck							= PQI_CodeMyLifeRetribution_Rebuke_enable
	
	RighteousFuryCheck					= PQI_CodeMyLifeRetribution_RighteousFury_enable
	
	PVE_SacredVengeanceCheck    		= PQI_CodeMyLifeRetribution_SacredVengeance_enable
	PVE_SacredVengeance       			= PQI_CodeMyLifeRetribution_SacredVengeance_value	
	
	SacredShield						= PQI_CodeMyLifeRetribution_SacredShield_value
	SacredShieldCheck					= PQI_CodeMyLifeRetribution_SacredShield_enable
	
	SelflessHealerValue					= PQI_CodeMyLifeRetribution_SelflessHealer_value
	SelflessHealerCheck					= PQI_CodeMyLifeRetribution_SelflessHealer_enable
	
	SpamFilter							= PQI_CodeMyLifeRetribution_SpamFilter_value
	SpamFilterCheck						= PQI_CodeMyLifeRetribution_SpamFilter_enable
	
	SotRPowValue						= PQI_CodeMyLifeRetribution_ShieldoftheRighteous_value
	SotRPowCheck						= PQI_CodeMyLifeRetribution_ShieldoftheRighteous_enable
	
	StayOfExecutionCheck				= PQI_CodeMyLifeRetribution_StayOfExecution_enable
	StayOfExecutionValue				= PQI_CodeMyLifeRetribution_StayOfExecution_value
	
	ThrottleCheck						= PQI_CodeMyLifeRetribution_Throttle_enable
	ThrottleValue						= PQI_CodeMyLifeRetribution_Throttle_value
	
	WordOfGlory							= PQI_CodeMyLifeRetribution_WordOfGlory_value
	WOG									= PQI_CodeMyLifeRetribution_WordOfGlory_enable
	
	--Keybinds
	FocusKey							= PQI:IsHotkeys(PQI_CodeMyLifeRetribution_Focus_key)
	FocusKeyCheck						= PQI_CodeMyLifeRetribution_Pause_enable
	
	LightsHammerKey						= PQI:IsHotkeys(PQI_CodeMyLifeRetribution_LightsHammer_key)
	LightsHammerKeyCheck				= PQI_CodeMyLifeRetribution_LightsHammer_enable
	
	PauseKey							= PQI:IsHotkeys(PQI_CodeMyLifeRetribution_Pause_key)
	PauseKeyCheck						= PQI_CodeMyLifeRetribution_Pause_enable
end




if Rebuke == nil then return true end

if SpamToggle ~= true and SpamFilterCheck and SpamFilter &amp;gt; 2 then
	SpamToggle = true
	RunMacroText(&amp;quot;/script UIErrorsFrame:Hide();&amp;quot;)
end

if SpamToggle ~= false and SpamFilterCheck and SpamFilter &amp;lt;= 2 then
	SpamToggle = false
	RunMacroText(&amp;quot;/script UIErrorsFrame:Show();&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--- Updates ---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CodeMyLife Paladin 3.13
- Fixed Avenging wrath for protection that was delaying fillers.
- Fixed PQI values not saving properly. Should now save values for each specs.
- Attempt to fix (untested) cleanse as prot and ret.

CodeMyLife Paladin 3.12
- SotR Bar now Hides along the Player Status Bar.

CodeMyLife Paladin 3.11
- Linked pause to bar display(Black border).
- Added secondary facing mode. Not as precise as PQR_UnitFacing but light and efficient.

CodeMyLife Paladin 3.10
- Added Selfless Healer to PQI.
- Fixed Flash of Light target issue.

CodeMyLife 3.09
- Fixed Divine Protection for Ret/Holy.
- Fixed(Hopefully) Cleanse for Ret/Prot.
- Yopu can now use /settalents to activate developper&amp;apos;s suggested talents. Works for all specs.

CodeMyLife 3.08
- Attempt fixing Selfless Healer for all specs out of Activehealing.

CodeMyLife 3.07
- Fixed Healing.
- Added Throttle to PQI.
- Healing Engine Throttled separately, actually set to 200 ms.

CodeMyLife 3.06
- Updated   !   to reflect most recent changes.
- Added /pause macro as suggested by Psyrex. Thanks for this great idea.
- Fixed Sacred Shield protection/retribution codes.
- Fixed Double Geopardy.
- Fixed Sacred Shield.
- Fixed ranged Retribution.
- Removed Avenger&amp;apos;s Shield interupt as it seems to fail too often this way to my taste. Will rework it more precise.

CodeMyLife 3.05
- Retribution fixes to Holy Prism.
- General fixed facing checkbox.
- Fixed Guardian of Ancient Kings(typo).
- Healing works again.

CodeMyLife 3.04
- Now Healthstones under combat check.
- Fixed Retribution Mass Exorcism Glyph.
- Fixed Hammer of wrath at 20% instead of under 20%.

CodeMyLife 3.03
- Fixed Blessing of Protection and Hand of Purity queues.
- Fixed Divine Shield.
- Fixed &amp;quot;Flickering&amp;quot;

CodeMyLife 3.02
- New Queueing System that use some codes I developped. No more need for macros, just hit the button once.
 - Supported Spells
  - Avenger&amp;apos;s Shield
  - Blinding Light
  - Divine Shield
  - Execution Sentence
  - Hammer of Justice
- Now Using Dedicated Data File for all my profiles.
- Added Holy Abilities and Rotation. The setup has not been tested in raids. I did a lot of Proving Grounds but no raids with it.
- Added multi-PQI support depending on specs. You asked for it, here it is.
- Added Holy Bar Display/Multiple modifications to bar.
- Reimplemented Hand of Freedom macro for mouseover.

CodeMyRetribution 3.00/3.01
- Added Retribution Abilities and Rotation.
- Fixed Retribution Master.
- Added Flash Heal to rotation/PQI.
- Added 3rd AoE mode to /aoe while Ret. This 3rd mode should be used on massive AoE situations so I called Mass.
- Added Retribution Bar Display.
- Slightly improved takecontrol logic.
- Cleanup in PQI tooltips.

CodeMyTest v3.00
- New Healing Engine made by Bubba thanks a lot to him for sharing his works.
- New Targetting engine that uses multi-target.
- New CodeMyBar Addon that displays your Vengeance,Health,AoE Mode,Healing Mode,Holy Power,Range and Proximity/Facing Status.
- Now with UnitFacing and Range Checkbox in PQI that you can turn off when you do 25 man raids to lighten profile.
- Added /Justice Macro to Queue Hammer/Fist of Justice.
- Added /Blindinglight Macro to Queue Blinding Light.
- Added /TakeControl Macro. This will make Mouseover Top Priority and Reckoning ennemies that are not attacking you.
- Slightly modified AoE Rotation to abuse Avenger&amp;apos;s Shield Procs.
- Fixed target losing bug that was caused by Feast Taker by adding a targetlasttarget to it.
- I found a way to get rid of the red &amp;quot;This Ability is not ready yet.&amp;quot;. This is so nice. Keep in mind tought that no red spams will occur at all as its basically disabling all red alerts.
- I found a way to get rid of the annoying sound effect that was occuring at same time as red alerts. The profile disables sound while casting and re-enables it after. It works just perfectly.
- Added /takecontrol macro that can replace the Reckoning. Basically this macros will make your mouse a mob magnet.
- CodeMyBar now also include SotR Timer Bar that can be moved alone. I like to put it just on the side of my toon.
- Improved Hands of Salvation , Protection and Sacrifice codes. Also Freedom is actually empty, we should populate a list of every slow/stuck we want to dispel with it.

CodeMyTest v2.15
- Added Self Flame to PQI. When Enabled, Eternal Flame will be cast on you when you get under the desired treshold.  
- Modifications to Blessing in PQI. Now you can choose from 3 options: Auto - Kings - Might.
- Modifications to Seals in PQI. Now you can choose from 5 options: Auto - Truth - Righteousness - Justice.
- Modifications to Shield of the Righteous in PQI now has a dropbox rather than a Slider. Ability remains unchanged. Wise Shielding is still the way to go.

CodeMyTest v2.14 (5.4)
- Modified Slightly Eternal Flame to make it not overwrite existing EF HoT.
- Removed Hammer of the Righteous Debuff as now normal rotation will cover the Debuff.

CodeMyTest v2.13
- Mod to Selfless Healer now should heal raid members under 30% hp even without active healing.

CodeMyTest v2.12
- Added Solo Tank Dark Animus Zerg Optimizations.

CodeMyTest v2.11
- Removed condition to do not overwrite an existing shield of the righteous as anyway it just higher the buff uptime, it do not overwrite it.
Thanks to pve for reporting this issue!

CodeMyTest v2.10
- Interrupts now on Target/Focus/Mouseover.
- Modified SotR Divine Purpose Procs to blow on sight rather than keeping for later. This make the shielding uptime even better now.
- Modified GCD management for Holy Generator abilities. This should higher our Holy power generation by a lot.

CodeMyTest v2.09
- Added Execution Sentence vengeance treshold to PQI. You can now set the Required Vengeance value and toggle automatic usage on/off.
- Added macro /exsent to queue Execution Sentence. Works exactly like the Judgement on focus but it is on main target.
- Highly reworked the Shield of the Righteous. You should however not see any difference at all. It&amp;apos;s purely a rework to get rid of the &amp;quot;GCD Calculation&amp;quot; error many reported.

v2.08
- Removed table usage that seemed to take too much ressources.
- This version doesnt include any facing checks at all. No options for it either. Includes Sacred Shield mods to recast with APBoost.

v2.07
- Pretty much 2.02 with the version # changed, had to roll back, I had some codes out of control that was crashing client. Hard to know the cause, no logs, no errors, just WoW crash lol. 2.02 seemed fine so I revert back to it while I find what was the problem.

v2.06
- Another try on fixing Sacred Shield issues.

v2.05
- Hopefully fixed Sacred Shield Attack Power var by forcing the value at start of profile.

v2.04
- Fixed Active Cooldowns, forgot the remove checks in 2.03.

v2.03 
- Removed ActiveHealing/Seal/Cooldowns as these are /macros to make some precious space in PQI for later uses.
- Added Sacred Shield AP + 6000 rebuff as priority filler.
- Added Redemption, Should be cast to Resurrect when you mouseover a Dead Player. Not tested yet!
- Made splitted rotations for each specs. Feel free to test this out but I am not sure how better this could be and why it would be!
- Made some revisions to fillers while I was at it. Sacred Shield should be even more always 100% but at the same time, I made it refresh less unless needed so that filling with consecration or holy wrath is preferred.</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Retribution</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ThrottleCheck and GeneralThrottle and GetTime() &amp;lt;= GeneralThrottle + (ThrottleValue/1000) then return true end
if ThrottleCheck then GeneralThrottle = GetTime() end
-- Retribution
if CML_StopAll() then return true end
CML_Interrupts()
CML_Seal()
-- Blessings
if ActiveBlessingsCheck and ( Spells[_BlessingOfKings].known or Spells[_BlessingOfMight].known ) 
  and ( _SA(_BlessingOfKings) or _SA(_BlessingOfMight) ) then CML_Blessings() end
-- Defenses
CML_DefensiveCDS()
CML_LayonHands()
CML_HandOfSalvation()
CML_HandOfProtection()
CML_HandOfPurity()
CML_HandOfSacrifice()
CML_HandOfFreedom()
CML_SelflessHealer()
if _ActiveHealing then
	CML_FlashOfLight(2)
	CML_EternalFlame()
	CML_WordOfGlory()
end

if macros[&amp;quot;DivineShieldQueue&amp;quot;] then
	CML_DivineShield()
end

--------- Combat Check ---------
if ( CombatCheckCheck and CML_CombatCheck() ) or CML_Pause() then return true end
CML_Facing()
-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end

if macros[&amp;quot;ActiveCooldowns&amp;quot;] and select(2, CML_MeleeTarget()) == true then
	CML_ActiveCooldowns()
end

-- Light&amp;apos;s Hammer
if Spells[_LightsHammer].known  and _SA(_LightsHammer) then
	if LightsHammerKey and LightsHammerKeyCheck then 
		_Cast(_LightsHammer)
		if SpellIsTargeting() then 
			CameraOrSelectOrMoveStart() 
			CameraOrSelectOrMoveStop() 
		end 
		return true 
	end 
end

CML_HammerOfJustice()	
-- Blinding Light		
if macros[&amp;quot;BlindingLightQueue&amp;quot;] then
	if Spells[_BlindingLight].known  and _SA(_BlindingLight) then
		_Cast(_BlindingLight, CML_MeleeTarget(false)) 
		return true
	end 
end

-- Inquisition
CML_Inquisition(1.5)
CML_Cleanse()
	
-- Templar&amp;apos;s/Storm 5 Holy Power	or with holy avenger
if macros[&amp;quot;AoE&amp;quot;] == 2 or 3 then _Verdict = _DivineStorm end
if macros[&amp;quot;AoE&amp;quot;] == 1 then _Verdict = _TemplarsVerdict end
if select(2, CML_MeleeTarget()) and Spells[_Verdict].known  and _SA(_Verdict) and ( _HolyPower == 5 or (_UB(&amp;quot;player&amp;quot;,_HolyAvenger) and _HolyPower &amp;gt;= 3) ) then
	_Cast(_Verdict, CML_MeleeTarget()) 
	return true
end	
	
-- Divine Crusader AoE
if select(2, CML_MeleeTarget()) and _AoE and _UB(&amp;quot;player&amp;quot;, 144595) and Spells[_DivineStorm].known  and _SA(_DivineStorm) then
	_Cast(_DivineStorm, CML_MeleeTarget()) 
	return true
end	

-- Hammer of Wrath
if _UB(&amp;quot;player&amp;quot;, 31884) or ((UnitHealth(&amp;quot;target&amp;quot;)/UnitHealthMax(&amp;quot;target&amp;quot;) * 100) &amp;lt;= 20 )
  and Spells[_HammerOfWrath].known  then 
  	if _SA(_HammerOfWrath) then
		_Cast(_HammerOfWrath, CML_RangeTarget()) 
		return true
	end
end

-- Exorcism Mass &amp; Normal
if select(2, CML_MeleeTarget()) and CML_MassExoGlyph() == true and Spells[_Exorcism].known and _SA(_Exorcism) and _SA(_MassExorcism) then 
	_Cast(_Exorcism, CML_MeleeTarget()) 
	return true
end
if CML_MassExoGlyph() == false and Spells[_Exorcism].known and _SA(_Exorcism) then
	_Cast(_Exorcism, CML_RangeTarget()) 
	return true
end 

-- Crusader Strike / Hammer of the Righteous
if _AoE then _Strike = _HammerOfTheRighteous else _Strike = _CrusaderStrike end
if select(2, CML_MeleeTarget()) and Spells[_Strike].known  and _SA(_Strike) then 
	_Cast(_Strike, CML_MeleeTarget()) 
	return true
end

-- Judgement
if Spells[_Judgement].known  and _SA(_Judgement) then
	CML_DoubleJeopardy()
  	if macros[&amp;quot;JudgeFocusQueue&amp;quot;] then _Cast(_Judgement, &amp;quot;focus&amp;quot;) end
  	_Cast(_Judgement, CML_RangeTarget(false)) 
  	return true
end

-- Divine Crusader Single
if select(2, CML_MeleeTarget()) and not _AoE and _UB(&amp;quot;player&amp;quot;, 144595) and Spells[_DivineStorm].known  and _SA(_DivineStorm) then
	_Cast(_DivineStorm, CML_MeleeTarget()) 
	return true
end	  	

if select(2, CML_MeleeTarget()) and CML_GetHolyGen() then return true end

CML_SacredShield()

-- Execution Sentence
if Spells[_ExecutionSentence].known  and _SA(_ExecutionSentence)  and ExecutionSentence == 1 and CML_HaveBuff(&amp;quot;player&amp;quot;, _Inquisition, 7) == true  then
	_Cast(_ExecutionSentence, CML_RangeTarget())
	return true
end

-- Holy Prism
if UnitAffectingCombat(&amp;quot;player&amp;quot;) and Spells[_HolyPrism].known and _SA(_HolyPrism) then
	if _AoE then
  		_Cast(_HolyPrism, &amp;quot;player&amp;quot;) 
  		return true
	else 
		_Cast(_HolyPrism, CML_RangeTarget()) 
		return true
	end
end

-- Inquisition as filler if under 5 sec.
CML_Inquisition(5)

-- Templar&amp;apos;s/Storm 3 Holy Power	
if select(2, CML_MeleeTarget()) and Spells[_Verdict].known  and _SA(_Verdict) and ( _HolyPower &amp;gt;= 3 or divinePurpose )then
	_Cast(_Verdict, CML_MeleeTarget()) 
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Tables</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Paladins
if not _AbilityList then
	_AbilityList = true
 
 
	   	
	_ArdentDefender				=	31850
	_AvengersShield				=	31935
	_AvengingWrath				=	31884
	_BeaconOfLight				= 	53563
	_Berserking  				= 	26297  
	_BlessingOfKings			=	20217
	_BlessingOfMight			= 	19740
	_BlindingLight				=	115750
	_BloodFury					= 	20572 
	_Cleanse					= 	4987
	_Consecration				=	26573
	_CrusaderStrike				=	35395
	_Denounce					= 	2812
	_DevotionAura				=	31821
	_DivineLight				= 	82326
	_DivinePlea					= 	54428
	_DivineProtection 			=	498
	_DivineShield				=	642
	_DivineStorm				=	53385
	_EternalFlame				=	114163
	_ExecutionSentence			=	114157
	_Exorcism					=	879
	_FistOfJustice				=	105593
	_FlashOfLight				=	19750
	_HandOfFreedom 				=	1044
	_HandOfProtection 			=	1022
	_HandOfPurity				=	114039
	_HandOfSacrifice	 		=	6940
	_HandOfSalvation	 		=	1038
	_HammerOfJustice			=	853
	_HammerOfTheRighteous		=	53595
	_HammerOfWrath				=	24275
	_HolyAvenger				=	105809
	_HolyLight					=	635
	_HolyPrism					=	114165
	_HolyRadiance				= 	82327
	_HolyShock					= 	20473
	_HolyWrath					=   119072
	_GiftOfTheNaaru				= 	59542
	_GuardianOfAncientKings		=	86659
	_GuardianOfAncientKingsHoly	=	86669
	_GuardianOfAncientKingsRet	=	86698
	_Inquisition				=	84963
	_Judgement					=	20271
	_LayOnHands					=	633
	_LightOfDawn				=	85222
	_LightsHammer				=	114158
	_MassExorcism				=	122032
	_MassResurection			= 	83968
	_Reckoning					=	62124
	_Redemption					=	7328
	_RighteousFury 				=	25780			
	_Repentance					=	20066
	_SacredShield				=	20925
	_SealOfInsight 				=	20165
	_SealOfRighteousness 		=	20154
	_SealOfThruth 				=	31801
	_ShieldOfTheRighteous 		=	53600
	_SpeedOfLight				=	85499
	_TemplarsVerdict			=	85256
	_TurnEvil					=	10326		
	_WordOfGlory				=	85673
	
	
	
		
	Spells = {
		[_ArdentDefender] 				=	{ known = IsPlayerSpell(31850) 	},	
		[_AvengersShield] 				=	{ known = IsPlayerSpell(31935) 	},
		[_AvengingWrath] 				=	{ known = IsPlayerSpell(31884) 	},
		[_BeaconOfLight]				= 	{ known = IsPlayerSpell(53563) 	},
		[_Berserking]      				= 	{ known = IsPlayerSpell(26297) 	},
		[_BlessingOfKings]				=	{ known = IsPlayerSpell(20217) 	},
		[_BlessingOfMight] 				=	{ known = IsPlayerSpell(19740) 	},
		[_BlindingLight]				=	{ known = IsPlayerSpell(115750) },
		[_BloodFury]      				= 	{ known = IsPlayerSpell(20572) 	},  
		[_Cleanse] 						=	{ known = IsPlayerSpell(4987) 	},
		[_Consecration] 				=	{ known = IsPlayerSpell(26573) 	},
		[_CrusaderStrike] 				=	{ known = IsPlayerSpell(35395) 	},
		[_Denounce]						= 	{ known = IsPlayerSpell(2812) 	},
		[_DevotionAura] 				=	{ known = IsPlayerSpell(31821) 	},
		[_DivineLight]					= 	{ known = IsPlayerSpell(82326)	},
		[_DivinePlea]					= 	{ known = IsPlayerSpell(54428) 	},
		[_DivineProtection] 			=	{ known = IsPlayerSpell(498) 	},
		[_DivineShield] 				=	{ known = IsPlayerSpell(642) 	},
		[_DivineStorm] 					=	{ known = IsPlayerSpell(53385) 	},
		[_EternalFlame]					=	{ known = IsPlayerSpell(114163) },
		[_ExecutionSentence]			=	{ known = IsPlayerSpell(114157) },
		[_Exorcism] 					=	{ known = IsPlayerSpell(879) 	},
		[_FistOfJustice]				=	{ known = IsPlayerSpell(105593) },
		[_FlashOfLight]					=	{ known = IsPlayerSpell(19750) 	},
		[_HandOfFreedom] 				=	{ known = IsPlayerSpell(1044) 	},
		[_HandOfProtection] 			=	{ known = IsPlayerSpell(1022) 	},
		[_HandOfPurity]					=	{ known = IsPlayerSpell(114039) },
		[_HandOfSalvation]	 			=	{ known = IsPlayerSpell(1038) 	},
		[_HandOfSacrifice]	 			=	{ known = IsPlayerSpell(6940) 	},
		[_HammerOfJustice] 				=	{ known = IsPlayerSpell(853) 	},
		[_HammerOfTheRighteous]			=	{ known = IsPlayerSpell(53595) 	},	
		[_HammerOfWrath] 				=	{ known = IsPlayerSpell(24275) 	},
		[_HolyAvenger]					=	{ known = IsPlayerSpell(105809) },
		[_HolyLight]					=	{ known = IsPlayerSpell(635) 	},
		[_HolyPrism]					=	{ known = IsPlayerSpell(114165) },
		[_HolyRadiance]					= 	{ known = IsPlayerSpell(82327)	},
		[_HolyShock]					= 	{ known = IsPlayerSpell(20473) 	},
		[_HolyWrath]					=   { known = IsPlayerSpell(119072) },
		[_GiftOfTheNaaru]				= 	{ known = IsPlayerSpell(59542) 	},
		[_GuardianOfAncientKings]		=	{ known = IsPlayerSpell(86659)  },
		[_GuardianOfAncientKingsHoly]	=	{ known = IsPlayerSpell(86669)  },
		[_GuardianOfAncientKingsRet]	=	{ known = IsPlayerSpell(86698)  },
		[_Inquisition]					=	{ known = IsPlayerSpell(84963)  },
		[_Judgement] 					=	{ known = IsPlayerSpell(20271) 	},
		[_LayOnHands]					=	{ known = IsPlayerSpell(633) 	},
		[_LightOfDawn]					=	{ known = IsPlayerSpell(85222) 	},
		[_LightsHammer]					=	{ known = IsPlayerSpell(114158) },
		[_MassExorcism]					=	{ known = IsPlayerSpell(122032) },
		[_MassResurection]				=	{ known = IsPlayerSpell(83968)  },
		[_Reckoning] 					=	{ known = IsPlayerSpell(62124) 	},
		[_Redemption] 					=	{ known = IsPlayerSpell(7328) 	},	
		[_RighteousFury] 				=	{ known = IsPlayerSpell(25780) 	},			
		[_Repentance]					=	{ known = IsPlayerSpell(20066) 	},
		[_SacredShield]					=	{ known = IsPlayerSpell(20925) 	},
		[_SealOfInsight] 				=	{ known = IsPlayerSpell(20165) 	},
		[_SealOfRighteousness] 			=	{ known = IsPlayerSpell(20154) 	},
		[_SealOfThruth] 				=	{ known = IsPlayerSpell(31801) 	},
		[_ShieldOfTheRighteous] 		=	{ known = IsPlayerSpell(53600) 	},
		[_SpeedOfLight]					=	{ known = IsPlayerSpell(85499) 	},
		[_TemplarsVerdict]				=	{ known = IsPlayerSpell(85256) 	},
		[_TurnEvil]						=	{ known = IsPlayerSpell(10326) 	},		
		[_WordOfGlory] 					=	{ known = IsPlayerSpell(85673) 	},
	}
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Healing Functions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not HealingFunctionsSetup then
	HealingFunctionsSetup = true

	CML_BeaconOfLight = nil
	function CML_BeaconOfLight()
		if BeaconOfLightCheck and Spells[_BeaconOfLight].known and _SA(_BeaconOfLight) then
			if BeaconOfLightValue == 1 then
				if UnitExists(&amp;quot;focus&amp;quot;) and UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;) then
					if not CML_HaveBuff(&amp;quot;focus&amp;quot;, 53563) and CanHeal2(&amp;quot;focus&amp;quot;) then
				 		_Cast(_BeaconOfLight, &amp;quot;focus&amp;quot;)
				 	end
				end
				BeaconFound = false
				for i = 1, #nNova - 1 do
					if CML_HaveBuff(nNova[i].unit, 53563) then
						BeaconFound = true
						BeaconTarget = nNova[i].unit
						if UnitGUID(nNova[i].unit) == &amp;quot;0xF1311A1A0000574F&amp;quot; then
							BeaconRole = &amp;quot;TANK&amp;quot;
						else
							BeaconRole = nNova[i].role
						end
					end
				end
				if BeaconFound then
					if CanHeal2(nNova[1].unit) and not CML_HaveBuff(nNova[1].unit, 53563) and nNova[1].hp &amp;lt; 100 then
						if BeaconRole == &amp;quot;TANK&amp;quot; then OverBeacon = 55 else OverBeacon = 25 end
						if not BeaconRole then BeaconRole = &amp;quot;NOOB&amp;quot; end
					  	if not BeaconFound 
					  	  or nNova[1].hp &amp;lt; CML_GetHP(BeaconTarget) - OverBeacon
					  	  or CML_GetHP(BeaconTarget) &amp;gt;= 99 and BeaconRole ~= &amp;quot;TANK&amp;quot;
					  	  or ( nNova[1].role == &amp;quot;TANK&amp;quot; and BeaconRole ~= &amp;quot;TANK&amp;quot; ) then
							_Cast(_BeaconOfLight, nNova[1].unit)
						end
					end
				else
					if nNova[1].hp &amp;lt; 100 and not CML_HaveBuff(nNova[1].unit, 53563) and CanHeal2(nNova[1].unit) then
						_Cast(_BeaconOfLight, nNova[1].unit)
					end
				end
				
			elseif BeaconOfLightValue == 2 then
				if UnitExists(&amp;quot;focus&amp;quot;) and UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;) then
					if not CML_HaveBuff(&amp;quot;focus&amp;quot;, 53563) and CanHeal2(&amp;quot;focus&amp;quot;) then
				 		_Cast(_BeaconOfLight, &amp;quot;focus&amp;quot;)
				 	end
				end
				for i=1, #nNova do
					if nNova[i].threat == 3 then
						if not CML_HaveBuff(nNova[i].unit, 53563) and CanHeal2(nNova[i].unit) then
				 			_Cast(_BeaconOfLight, nNova[i].unit)
				 			return true
						end	
					end
				end	
				
			elseif BeaconOfLightValue == 3 then
				 if not CML_HaveBuff(&amp;quot;focus&amp;quot;, 53563) and CanHeal2(&amp;quot;focus&amp;quot;) then
				 	_Cast(_BeaconOfLight, &amp;quot;focus&amp;quot;)
				 end
			end
		end
	end
		
	CML_BlanketFlame = nil
	function CML_BlanketFlame()
		if WOG and Spells[_EternalFlame].known and _SA(_EternalFlame) and ( _HolyPower &amp;gt;= 1 or CML_HaveBuff(&amp;quot;player&amp;quot;,90174) ) then	
			for i = 1, #nNova do
				if CanHeal2(nNova[i].unit) then
					if nNova[i].hp &amp;lt;= WordOfGlory and not CML_HaveBuff(nNova[i].unit, 114163) then
						_Cast(_EternalFlame, nNova[i].unit)
					end
				end
			end
		end
	end
	
	CML_Cleanse = nil
	function CML_Cleanse()
		if macros[&amp;quot;ActiveDispel&amp;quot;] and Spells[_Cleanse].known and _SA(_Cleanse) then
			if UnitExists(&amp;quot;boss1&amp;quot;) then
				if tonumber(UnitGUID(&amp;quot;boss1&amp;quot;):sub(6,10), 16) == 71734 then
					if not CML_HaveBuff(&amp;quot;player&amp;quot;,144351) then 
						return false
					end
				end
			end
			for i=1, #nNova do
				if nNova[i].dispel == true and CanHeal2(nNova[i].unit) then 
					_Cast(_Cleanse, nNova[i].unit)
				end
			end
		end
	end
	
	CML_DivineLight = nil
	function CML_DivineLight()
		if not DivineLightCheck then return false end
		if Spells[_DivineLight].known and _SA(_DivineLight) and not PQR_IsMoving() then
			if nNova[1].hp &amp;lt;= 25 and CanHeal2(nNova[1].unit) then
				_Cast(_DivineLight, nNova[1].unit)
			end
			if UnitExists(&amp;quot;Party2&amp;quot;) or UnitExists(&amp;quot;Raid2&amp;quot;) and CML_HaveBuff(nNova[1].unit, 53563) then
				if nNova[2].hp &amp;lt;= DivineLightValue + 10 or ( CML_HaveBuff(&amp;quot;player&amp;quot;, _GuardianOfAncientKingsHoly,3) and nNova[2].hp &amp;lt;= DivineLightValue + 25 ) and CanHeal2(nNova[2].unit) then
					_Cast(_DivineLight, nNova[2].unit)
				end
				
			end
			if nNova[1].hp &amp;lt;= DivineLightValue  or ( CML_HaveBuff(&amp;quot;player&amp;quot;, _GuardianOfAncientKingsHoly,3) and nNova[1].hp &amp;lt;= DivineLightValue + 25 ) and CanHeal2(nNova[1].unit) then
				_Cast(_DivineLight, nNova[1].unit)
			end
		end
	end
	
	CML_DivinePlea = nil
	function CML_DivinePlea()
		if DivinePleaCheck and Spells[_DivinePlea].known and _SA(_DivinePlea) then
			if _Mana &amp;lt;= DivinePleaValue then
				_Cast(_DivinePlea, &amp;quot;player&amp;quot;)
			end
		end
	end
	
	CML_EternalFlame = nil
	function CML_EternalFlame()
		if WOG and Spells[_EternalFlame].known and _SA(_EternalFlame) and ( _HolyPower &amp;gt;= 3 or CML_HaveBuff(&amp;quot;player&amp;quot;,90174) ) then	
			if #nNova &amp;gt; 5 then FlameScan = 5 else FlameScan = #nNova end
			for i = 1, FlameScan do
				--if CanHeal2(nNova[i].unit) then
					if nNova[i].hp &amp;lt;= WordOfGlory and not CML_HaveBuff(nNova[i].unit, 114163) then
						_Cast(_EternalFlame, nNova[i].unit)
					end
				--end
			end
		end
	end
	
	CML_HolyEternalFlame = nil
	function CML_HolyEternalFlame()
		if EternalFlameCheck and Spells[_EternalFlame].known and _SA(_EternalFlame) then
			if _HolyPower &amp;gt;= 3 or CML_HaveBuff(&amp;quot;player&amp;quot;,90174) then	
				for i = 1, #nNova do
					if CanHeal2(nNova[i].unit) then
						if nNova[i].hp &amp;lt;= EternalFlameValue and not CML_HaveBuff(nNova[i].unit, 114163) then
							_Cast(_EternalFlame, nNova[i].unit)
						end
					end
				end
			end
			if _HolyPower == 5 or CML_HaveBuff(&amp;quot;player&amp;quot;,90174) then	
				if not CML_HaveBuff(&amp;quot;player&amp;quot;, 114163) then
					_Cast(_EternalFlame, &amp;quot;player&amp;quot;)
				end
				for i = 1, #nNova do
					if CanHeal2(nNova[i].unit) then
						if not CML_HaveBuff(nNova[i].unit, 114163) then
							_Cast(_EternalFlame, nNova[i].unit)
						end
					end
				end
			end
		end
	end

	CML_GiftOfTheNaaru = nil
	function CML_GiftOfTheNaaru()
		if Spells[_GiftOfTheNaaru].known and _SA(_GiftOfTheNaaru) then
	 		if nNova[1].hp &amp;lt; 30 and CanHeal2(nNova[1].unit) then
				_Cast(_GiftOfTheNaaru, nNova[1].unit)
			end
		end
	end
	
	CML_FlashOfLight = nil
	function CML_FlashOfLight()
		if _Spec ~= 1 and select(2,CML_MeleeTarget()) == true then return false end
		if FlashOfLightCheck and Spells[_FlashOfLight].known and _SA(_FlashOfLight) and not PQR_IsMoving() then
			if nNova[1].hp &amp;lt;= FlashOfLightValue and _Mana &amp;gt;= 20 and CanHeal2(nNova[1].unit) then
				_Cast(_FlashOfLight, nNova[1].unit)
			end
		end
	end
	
	CML_HolyFlashOfLight = nil
	function CML_HolyFlashOfLight()
		if FlashOfLightCheck and Spells[_FlashOfLight].known and _SA(_FlashOfLight) and not PQR_IsMoving() then
			if nNova[1].hp &amp;lt;= FlashOfLightValue and CanHeal2(nNova[1].unit) and not CML_HaveBuff(nNova[1].unit, 53563) then
				_Cast(_FlashOfLight, nNova[1].unit)
			end
		end
	end
	
	CML_HolyLight = nil
	function CML_HolyLight()
		if HolyLightCheck and Spells[_HolyLight].known and _SA(_HolyLight) and not PQR_IsMoving() and _Mana &amp;gt; 9 then
			if UnitExists(&amp;quot;Party2&amp;quot;) or UnitExists(&amp;quot;Raid2&amp;quot;) then
				if CML_HaveBuff(nNova[1].unit, 53563) then
					if nNova[2].hp &amp;lt;= HolyLightValue and CanHeal2(nNova[2].unit) then
						_Cast(_HolyLight, nNova[2].unit)
					end
					if nNova[1].hp &amp;lt;= HolyLightValue and _Mana &amp;lt; 15 and CanHeal2(nNova[1].unit) then
						_Cast(_HolyLight, nNova[1].unit)
					end
					if nNova[1].hp &amp;lt;= HolyLightValue and nNova[2].hp &amp;gt;= HolyLightValue and CanHeal2(nNova[1].unit) then
						_Cast(_HolyLight, nNova[1].unit)
					end
				end
			end
		end
	end
	
	CML_HolyPrism = nil
	function CML_HolyPrism()	
		if Spells[_HolyPrism].known and _SA(_HolyPrism) then
	 		if nNova[1].hp &amp;lt; HolyPrismValue then 
				_Cast(_HolyPrism, CML_RangeTarget())
			end
		end
	end
	
	CML_HolyRadiance = nil
	function CML_HolyRadiance()
		if HolyRadianceCheck and Spells[_HolyRadiance].known and _SA(_HolyRadiance) then			
			if CanHeal2(nNova[1].unit) and nNova[1].hp &amp;lt;= HolyRadianceValue then
				Inrange = 0
				for i = 1, #nNova do
					if CanHeal2(nNova[i].unit) then
						if CML_GetDistance(nNova[1].unit,nNova[i].unit) &amp;lt;= 10
						  and CML_GetHP(nNova[i].unit) &amp;lt;= HolyRadianceValue and CanHeal2(nNova[i].unit) then
							Inrange = Inrange + 1
						end
					end
				end
				if Inrange &amp;gt;= 3 then
					_Cast(_HolyRadiance, nNova[1].unit)
				end
			end
		end
	end
	
	CML_HolyShock = nil
	function CML_HolyShock()
		if HolyShockCheck and Spells[_HolyShock].known and _SA(_HolyShock) and _Mana &amp;gt; 02 then
			if nNova[1].hp &amp;lt; 50 and CanHeal2(nNova[1].unit) then
				_Cast(_HolyShock, nNova[1].unit)
			end
			if UnitExists(&amp;quot;Party2&amp;quot;) or UnitExists(&amp;quot;Raid2&amp;quot;) then
				if nNova[2].hp &amp;lt; HolyShockValue and CML_HaveBuff(nNova[1].unit, 53563) and CanHeal2(nNova[2].unit) then
					_Cast(_HolyShock, nNova[2].unit)
				end
			end
			if _HolyPower &amp;lt; 5 and CanHeal2(nNova[1].unit) then
				_Cast(_HolyShock, nNova[1].unit)
			end
		end
	end
	
	CML_LayonHands = nil
	function CML_LayonHands()
		if LayOnHandsCheck and Spells[_LayOnHands].known and _SA(_LayOnHands) then
			-- Bosses on wich we do not want to use Lay on Hands on us.
			local NoLoHBosses = { 
				68036, -- Durumu the Forgotten 
				68078, -- Iron Qon
				68476 -- Horridon
			}
			for i = 1, #NoLoHBosses do
				if UnitGUID(&amp;quot;boss1&amp;quot;) ~= UnitGUID(NoLoHBosses[i])
				  and _HP &amp;lt;= LayOnHands then
					_Cast(_LayOnHands, &amp;quot;player&amp;quot;)
			 	end
			end
			if nNova[1].hp &amp;lt; LayOnHands and CanHeal2(nNova[1].unit) and UnitGUID(nNova[1].unit) ~= UnitGUID(&amp;quot;player&amp;quot;) then
			 	_Cast(_LayOnHands, nNova[1].unit)
			end
		end
	end
	
	CML_LightOfDawn = nil
	function CML_LightOfDawn()
		if LightOfDawnCheck and Spells[_LightOfDawn].known and _SA(_LightOfDawn) and ( _HolyPower &amp;gt;= 3 or CML_HaveBuff(&amp;quot;player&amp;quot;,90174) ) then
			if nNova[1].hp &amp;lt;= LightOfDawnValue and CanHeal2(nNova[1].unit) then
				local Inrange = 0
				for i = 1, #nNova do
					if CanHeal2(nNova[i].unit) then
						if CML_GetDistance(&amp;quot;player&amp;quot;,nNova[i].unit) &amp;lt;= 30 and CML_GetHP(nNova[i].unit) &amp;lt;= LightOfDawnValue and CanHeal2(nNova[i].unit) then
							Inrange = Inrange + 1
						end
					end
				end
				if Inrange &amp;gt;= 3 and CanHeal2(nNova[1].unit) then
					_Cast(_LightOfDawn, nNova[1].unit)
				end
			end
		end
	end
	
	CML_NeedToBeTopped = nil
	function CML_NeedToBeTopped()
		for i = 1, #DebuffToTop do
			if CML_HaveDebuff(&amp;quot;player&amp;quot;, DebuffToTop[i]) then
				--print(&amp;quot;DebuffFound&amp;quot;)
				if _HP &amp;lt; 70 then
					if _Spec == 1 then 
						CML_DivilneShield()
					end
					CML_DefensiveCDS()
					CML_HandOfPurity(true)
				end	
			end
		end
	end
 	
 	CML_SacredShieldHoly = nil
	function CML_SacredShieldHoly()
		if SacredShieldCheck and Spells[_SacredShield].known and _SA(_SacredShield) then
			SSFound = false
			for i = 1, #nNova do
				if CML_HaveBuff(nNova[i].unit, _SacredShield) then
					SSFound = true
					SSTarget = nNova[i].unit
				end
			end
			if SSFound then
				if ( not CML_HaveBuff(nNova[1].unit, _SacredShield,3) and nNova[1].hp &amp;lt; SacredShield
				  and ( nNova[1].hp &amp;lt; CML_GetHP(SSTarget) - 25 or CML_GetHP(SSTarget) &amp;gt;= 95 ) ) and CanHeal2(nNova[1].unit) then
					_Cast(_SacredShield, nNova[1].unit)
				end
			else
				if nNova[1].hp &amp;lt; SacredShield and not CML_HaveBuff(nNova[1].unit, _SacredShield,3) and CanHeal2(nNova[1].unit) then
					_Cast(_SacredShield, nNova[1].unit)
				end
			end
		end
	end
 	
	CML_SacredShield = nil
 	function CML_SacredShield()
 		if CML_HaveBuff(&amp;quot;player&amp;quot;,20925) then SacredShieldTimer = select(7, _UB(&amp;quot;player&amp;quot;, _GI(20925))) - GetTime() else SacredShieldTimer = 0 end
  		if SacredShieldCheck and _HP &amp;lt;= SacredShield then
   			-- Sacred Shield Vars   
    		if Spells[_SacredShield].known and _SA(_SacredShield) then
    			if _Spec == 2 then
	     			if (( PQR_IsMoving() or UnitAffectingCombat(&amp;quot;player&amp;quot;) ) and not _UB(&amp;quot;player&amp;quot;,20925)) or ( LastVengeance ~= nil and ( CML_GetVengeance() &amp;gt; PVE_SacredVengeance + LastVengeance )) then
	      				LastVengeance = CML_GetVengeance()
	      				_Cast(_SacredShield, &amp;quot;player&amp;quot;)
	     			end
	     		end
	     		if _Spec == 3 then
	     			if APBonus() 
	  	  	  		  and SacredShieldTimer - GetTime() &amp;lt; 15 then
	   					_Cast(_SacredShield, &amp;quot;player&amp;quot;)
	  				end
	  			end
  				if SacredShieldTimer &amp;lt;= 3 then
  					_Cast(_SacredShield, &amp;quot;player&amp;quot;)
  				end
    		end
  		end	
 	end
	
	CML_SelfFlame = nil
	function CML_SelfFlame()
		if Spells[_EternalFlame].known and _SA(_EternalFlame) and CML_SelfFlameHPCheck then
			if (CML_BoGStacks() &amp;gt;= 5 and ( _HolyPower &amp;gt;= 3 or divinePurpose ) )
			  or ( ProtT16Equipped and CML_BoGStacks() &amp;gt;= 3 ) then
				if _HP &amp;lt;= CML_SelfFlameHP and not _UB(&amp;quot;player&amp;quot;,114163) then
					_Cast(_EternalFlame, &amp;quot;player&amp;quot;) 
				end
				if _HP &amp;lt;= CML_SelfFlameHP -30 then
					_Cast(_EternalFlame, &amp;quot;player&amp;quot;) 
				end
				if LastVengeance ~= nil and LastVengeance &amp;lt;= CML_GetVengeance() + PVE_SacredVengeance then
					_Cast(_EternalFlame, &amp;quot;player&amp;quot;) 
				end
			end
		end
	end
	
	CML_SelflessHealer = nil
	function CML_SelflessHealer()	
		if SelflessHealerCheck and Spells[_FlashOfLight].known and _SA(_FlashOfLight) and select(4,UnitBuffID(&amp;quot;player&amp;quot;,114250)) == 3 then
			if _HP &amp;lt;= SelflessHealerValue then
				_Cast(_FlashOfLight, &amp;quot;player&amp;quot;)
			end
 			if nNova[1].hp &amp;lt;= SelflessHealerValue and CanHeal2(nNova[1].unit) then
				_Cast(_FlashOfLight, nNova[1].unit) 
			end
		end
	end
	
	CML_StayOfExecution = nil
	function CML_StayOfExecution()
		if StayOfExecutionCheck and Spells[_ExecutionSentence].known and _SA(_ExecutionSentence) then
			if nNova[1].hp &amp;lt;= StayOfExecutionValue and CanHeal2(nNova[1].unit) then
				_Cast(_ExecutionSentence, nNova[1].unit)
			end
		end
	end
	
	CML_WordOfGlory = nil
	function CML_WordOfGlory()
		if WOG and Spells[_WordOfGlory].known and _SA(_WordOfGlory) and ( _HolyPower &amp;gt;= 3 or CML_HaveBuff(&amp;quot;player&amp;quot;,90174) ) and not Spells[_EternalFlame].known then
			if CanHeal2(nNova[1].unit) then
				if nNova[1].hp &amp;lt;= WordOfGlory then
					_Cast(_WordOfGlory, nNova[1].unit)
				end
			end	
		end
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Bubba&amp;apos;s Healing Engine</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not metaTable1 then
	
	-- localizing the commonly used functions while inside loops
	local tinsert, tremove, UnitDebuff, UnitHealth, UnitHealthMax, UnitExists, UnitGUID = tinsert, tremove, UnitDebuff, UnitHealth, UnitHealthMax, UnitExists, UnitGUID
	nNova = {} -- This is our main Table that the world will see
	memberSetup = {} -- This is one of our MetaTables that will be the default user/contructor
	memberSetup.cache = { } -- This is for the cache Table to check against
	BlacklistID = {} -- This is for the Dispel Check, all Debuffs we don&amp;apos;t want dispelled go here
	metaTable1 = {} -- This will be the MetaTable attached to our Main Table that the world will see
	BadDebuffList= {
		104451, -- Ice Tomb
		76577,-- Smoke Bomb
		121949, -- Parasistic Growth
		122784, -- Reshape Life
		122370, -- Reshape Life 2
		123184, -- Dissonance Field
		123255, -- Dissonance Field 2
		123596, -- Dissonance Field 3
		128353, -- Dissonance Field 4
	} -- This is where we house the Debuffs that are bad for our users, and should not be healed when they have it

	SpecialHealUnitList = {
		6459, -- Boss#3 SoO
		6460, -- Boss#3 SoO
		6464, -- Boss#3 SoO
	}
	SavedSpecialTargets = {
		[&amp;quot;target&amp;quot;] = nil,
		[&amp;quot;mouseover&amp;quot;] = nil,
		[&amp;quot;focus&amp;quot;] = nil,
	}
	
	DebuffToTop = {
	145263, -- Proving Grounds Healer Debuff.
	}
	
	SpecificHPBuffs = { 
	{ buff = 142865 , value = 75 }, -- Strong Ancient Barrier (Green)
	{ buff = 142865 , value = 50 }, -- Ancient Barrier (Yellow)
	{ buff = 142863 , value = 25 }, -- Weak Ancient Barrier (Red)
	}

	metaTable1.__call = function(_, ...) -- (_, forceRetable, excludePets, onlyInRange) [Not Implemented]
		local group =  IsInRaid() and &amp;quot;raid&amp;quot; or &amp;quot;party&amp;quot; -- Determining if the UnitID will be raid or party based
		local groupSize = IsInRaid() and GetNumGroupMembers() or GetNumGroupMembers() - 1 -- If in raid, we check the entire raid. If in party, we remove one from max to account for the player.
		if group == &amp;quot;party&amp;quot; then tinsert(nNova, memberSetup:new(&amp;quot;player&amp;quot;)) end -- We are creating a new User for player if in a Group
		for i=1, groupSize do -- start of the loop to read throught the party/raid
			local groupUnit = group..i
			local groupMember = memberSetup:new(groupUnit)
			if groupMember then tinsert(nNova, groupMember) end -- Inserting a newly created Unit into the Main Frame
		end
	end
	

	metaTable1.__index =  {-- Setting the Metamethod of Index for our Main Table
		name = &amp;quot;Healing Table&amp;quot;,
		author = &amp;quot;Bubba&amp;quot;,
	}


	-- Creating a default Unit to default to on a check
	memberSetup.__index = {
		name = &amp;quot;noob&amp;quot;,
		hp = 100,
		unit = &amp;quot;noob&amp;quot;,
		role = &amp;quot;NOOB&amp;quot;,
		range = false,
		guid = 0,
		guidsh = 0,
	}
	

	-- If ever somebody enters or leaves the raid, wipe the entire Table
	local updateHealingTable = CreateFrame(&amp;quot;frame&amp;quot;, nil)
	updateHealingTable:RegisterEvent(&amp;quot;GROUP_ROSTER_UPDATE&amp;quot;)
	updateHealingTable:SetScript(&amp;quot;OnEvent&amp;quot;, function()
		table.wipe(nNova);
		table.wipe(memberSetup.cache);
		SetupTables()
	end)

	function GetAbsorbAmountOnUnit(tar)
		return 0
	end

	-- Will be replaced when placed in Data File
	function Nova_GUID(unit)
  		local nShortHand = &amp;quot;&amp;quot;
  		if UnitExists(unit) then
   			if UnitIsPlayer(unit) then
    			targetGUID = UnitGUID(unit)
   			else
    			targetGUID = tonumber((UnitGUID(unit)):sub(-12, -9), 16)
   			end
   
   			nShortHand = string.sub(tostring(UnitGUID(unit)), -5, -1)
   			
  		end
  		return targetGUID, nShortHand
 	end

	-- This is for those NPC units that need healing. Compare them against our list of Unit ID&amp;apos;s
	local function SpecialHealUnit(tar)
		for i=1, #SpecialHealUnitList do
			if Nova_GUID(tar) == SpecialHealUnitList[i] then
				return true
			end
		end
	end

	-- We are checking if the user has a Debuff we either can not or don&amp;apos;t want to heal them
	local function CheckBadDebuff(tar)
		for i=1, #BadDebuffList do
			if UnitDebuff(tar, GetSpellInfo(BadDebuffList[i])) then
				return false
			end
		end

		return true
	end

	local function CheckCreatureType(tar)
		local CreatureTypeList = {&amp;quot;Critter&amp;quot;, &amp;quot;Totem&amp;quot;, &amp;quot;Non-combat Pet&amp;quot;, &amp;quot;Wild Pet&amp;quot;}
		for i=1, #CreatureTypeList do
			if UnitCreatureType(tar) == CreatureTypeList[i] then
				return false
			end
		end


		if not UnitIsBattlePet(tar) and not UnitIsWildBattlePet(tar) then
			return true
		else
			return false
		end
	end

	-- Verifying the target is a Valid Healing target
	function HealCheck(tar)
		if (( UnitCanCooperate(&amp;quot;player&amp;quot;,tar) and not UnitIsCharmed(tar) and not UnitIsDeadOrGhost(tar) and UnitIsConnected(tar)) or SpecialHealUnit(tar) or UnitIsUnit(&amp;quot;player&amp;quot;, tar) )
		 and CheckBadDebuff(tar)
		 and CheckCreatureType(tar)
		then return true else return false end
	end

	-- This is the list of all the different magic types that be can Dispelled
	-- I might need to split this up by spec to be even more accurate as well...
	local UnitDispel = {
		&amp;apos;Disease&amp;apos;, &amp;apos;Poison&amp;apos; , &amp;apos;Magic&amp;apos; 
	}

	-- We are checking to verify there&amp;apos;s no bad debuff on the target
	local function DebuffBlacklistCheck(tab)
		if type(tab) ~= tab then
			tab = {tab}
		end

		for i=1, #tab do
			for k=1, #BlacklistID do
				if tab[i] == BlacklistID[k].spellid then
					return false
				end
			end
		end

		return true, tab

	end


	function memberSetup:new(unit)
		-- Seeing if we have already cached this unit before
		if memberSetup.cache[select(2, Nova_GUID(unit))] then return false end
		local o = {}
		setmetatable(o, memberSetup)
		if unit and type(unit) == &amp;quot;string&amp;quot; then
			o.unit = unit
		end

		-- This is the function for Dispel checking built into the player itself.
		function o:Dispel()
--			print(#UnitDispel[&amp;apos;PALADIN&amp;apos;])
			local nDebuffList = {}
			for i=1, #UnitDispel do
				if not ( _Spec == 2 and i == 3 ) and not ( _Spec == 3 and i == 3 ) then
	--				print(UnitDispel[i])
	--				print(i)	
	--				print(&amp;quot;Im a Paladin&amp;quot;)
					local k=1
					while UnitDebuff(o.unit, k) do
						local nDebuff = {UnitDebuff(o.unit, k)}
						if nDebuff[5] == UnitDispel[i] and UnitIsUnit(o.unit, &amp;quot;player&amp;quot;) then
							tinsert(nDebuffList, { spellid = nDebuff[11], groupType = &amp;quot;personal&amp;quot; } )
	--						print(&amp;quot;Found a dispellable Debuff on Me&amp;quot;)
						elseif nDebuff[5] == UnitDispel[i] then
	--						print(&amp;quot;Found a dispellable Debuff in group&amp;quot;)
							tinsert(nDebuffList, { spellid = nDebuff[11], groupType = &amp;quot;group&amp;quot; } )
						end
						k=k+1
					end
				end
			end

			if #nDebuffList &amp;gt; 0 then

				return DebuffBlacklistCheck(nDebuffList)
			end

			return false
		end

		-- We are checking the HP of the person through their own function.
		function o:CalcHP()
--			print(&amp;quot;calculating HP&amp;quot;)
			local incomingheals = UnitGetIncomingHeals(o.unit) and UnitGetIncomingHeals(o.unit) or 0
			local nAbsorbs = ( 25*UnitGetTotalAbsorbs(o.unit)/100 )
			local PercentWithIncoming = 100 * ( UnitHealth(o.unit) + incomingheals + nAbsorbs ) / UnitHealthMax(o.unit)
			if o.role == &amp;quot;TANK&amp;quot; then PercentWithIncoming = PercentWithIncoming - 5 end -- Using the group role assigned to the Unit
			if UnitIsDeadOrGhost(o.unit) == 1 then PercentWithIncoming = 250 end -- Place Dead players at the end of the list
			if o.dispel then PercentWithIncoming = PercentWithIncoming - 2 end -- Using Dispel Check to see if we should give bonus weight
			if UnitName(o.unit) == &amp;quot;Oto the Protector&amp;quot; then PercentWithIncoming = PercentWithIncoming - 5 end -- Tank in Proving Grounds
			for i = 1, #DebuffToTop do
				if CML_HaveDebuff(o.unit, DebuffToTop[i]) then
					PercentWithIncoming = PercentWithIncoming - 40
				end
			end	
			local ActualWithIncoming = ( UnitHealthMax(o.unit) - ( UnitHealth(o.unit) + incomingheals ) )
			for i = 1, #SpecificHPBuffs do
				if CML_HaveDebuff(o.unit, SpecificHPBuffs[i].buff) then
					PercentWithIncoming = PercentWithIncoming - SpecificHPBuffs[i].value
				end
			end	
			return PercentWithIncoming, ActualWithIncoming, nAbsorbs
		end

		function o:nGUID()
			local nSH = nil
			if UnitExists(o.unit) then
				if UnitIsPlayer(o.unit) then
					targetGUID = UnitGUID(o.unit)
				else
					targetGUID = tonumber((UnitGUID(o.unit)):sub(-12, -9), 16)
				end
			end

			if string.len(tostring(targetGUID)) &amp;gt; 5 then
				nSH = string.sub(tostring(targetGUID), -5, -1)
			else
				nSH = tostring(targetGUID)
			end

			return targetGUID, nSH
		end

		-- Updating the values of the Unit
		function o:UpdateUnit()
			o.name = UnitName(o.unit)
			o.role = UnitGroupRolesAssigned(o.unit)
			o.guid = o:nGUID()
			o.guidsh = select(2, o:nGUID())
			o.range = IsSpellInRange(tostring(GetSpellInfo(19750)),o.unit)
			o.dispel = o:Dispel()
			o.hp = o:CalcHP()
			o.absorb = select(3, o:CalcHP())
			o.threat = UnitThreatSituation(o.unit)
			o.target = tostring(o.unit)..&amp;quot;target&amp;quot;
			memberSetup.cache[select(2, Nova_GUID(o.unit))] = o
		end

		-- Adding the user and functions we just created to this cached version in case we need it again
		-- This will also serve as a good check for if the unit is already in the table easily
		--print(UnitName(unit), select(2, Nova_GUID(unit)))
		memberSetup.cache[select(2, o:nGUID())] = o
		return o
	end



	-- Setting up the tables on either Wipe or Initial Setup
	function SetupTables() -- Creating the cache (we use this to check if some1 is already in the table)
		setmetatable(nNova, metaTable1) -- Set the metaTable of Main to Meta)
		function nNova:Update(MO)
			local MouseoverCheck = MO or true


			-- This is for special situations, IE world healing or NPC healing in encounters
			local SpecialTargets = { &amp;quot;focus&amp;quot; }
			for p=1, #SpecialTargets do
				-- Checking if Unit Exists and it&amp;apos;s possible to heal them
				if UnitExists(SpecialTargets[p]) and HealCheck(SpecialTargets[p]) then
					if not memberSetup.cache[select(2, Nova_GUID(SpecialTargets[p]))] then
						local SpecialCase = memberSetup:new(SpecialTargets[p])
						if SpecialCase then
							-- Creating a new user, if not already tabled, will return with the User
							for j=1, #nNova do
								if nNova[j].unit == SpecialTargets[p] then
									-- Now we add the Unit we just created to the Main Table
									for k,v in pairs(memberSetup.cache) do
										if nNova[j].guidsh == k then
											memberSetup.cache[k] = nil
										end
									end
									tremove(nNova, j)
									break
								end
							end
						end
						tinsert(nNova, SpecialCase)
						SavedSpecialTargets[SpecialTargets[p]] = select(2, Nova_GUID(SpecialTargets[p]))
					end
				end
			end


			for i=1, #nNova do
				-- We are updating all of the User Info (Health/Range/Name)
				nNova[i]:UpdateUnit()
			end

			for p=1, #SpecialTargets do
				if not UnitExists(SpecialTargets[p]) then
					for j=1, #nNova do
						-- Trying to find a case of the unit inside the Main Table to remove
						if nNova[j].unit == SpecialTargets[p] then
							tremove(nNova, j)
							break
						end
					end
					for k,v in pairs(memberSetup.cache) do
						-- Now we&amp;apos;re trying to find that unit in the Cache table to remove
						if SpecialTargets[p] == v.unit then
							memberSetup.cache[k] = nil
						end
					end
				end
			end
			
			-- We are sorting by Health with range thrown in as well
			table.sort(nNova, function(x,y)
				if x.range and y.range then return x.hp &amp;lt; y.hp
				elseif x.range then return true
				elseif y.range then return false
				else return x.hp &amp;lt; y.hp end
			end)
			if UnitExists(&amp;quot;target&amp;quot;) and memberSetup.cache[select(2, Nova_GUID(&amp;quot;target&amp;quot;))] then
				table.sort(nNova, function(x)return UnitIsUnit(x.unit, &amp;quot;target&amp;quot;) end)
			end
		end
		-- We are creating the initial Main Table
		nNova()
	end
	-- We are setting up the Tables for the first time
	SetupTables()
end

-- And to update our users Health and Sort :)
if NovaEngineUpdate and NovaEngineUpdate &amp;lt;= GetTime() - 0.2 then
	NovaEngineUpdate = GetTime()
	nNova:Update()
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Protection</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ThrottleCheck and GeneralThrottle and GetTime() &amp;lt;= GeneralThrottle + (ThrottleValue/1000) then return true end
if ThrottleCheck then GeneralThrottle = GetTime() end

-- Protection
if CML_StopAll() then return true end
CML_Interrupts()
--if ( CombatCheckCheck and CML_CombatCheck()) or CML_Pause() then return true end
-- Healing Functions
CML_SelflessHealer()
if macros[&amp;quot;ActiveHealing&amp;quot;] then
	CML_HolyEternalFlame()
--	CML_WordOfGlory()
--	CML_HolyPrism()
end
-- Shield of the Righteous
if Spells[_ShieldOfTheRighteous].known and _SA(_ShieldOfTheRighteous) then
	if ( Nova_SotRQueue == 1 and _HolyPower &amp;gt;= 3 and Shielded &amp;lt; GetTime() - 2.5 ) then -- Queued
		_Cast(_ShieldOfTheRighteous, CML_MeleeTarget()) 
	end
	if _UB(&amp;quot;player&amp;quot;, 105809) or _UB(&amp;quot;player&amp;quot;, 90174) and _HolyPower &amp;gt;= 3 then -- Holy Avenger
		_Cast(_ShieldOfTheRighteous, CML_MeleeTarget()) 
	end
	if SixHolyPoW()  -- Wise
	  or (SotRPowValue == 4 and _HolyPower == 5)
	  or (SotRPowValue == 3 and _HolyPower &amp;gt;= 4)
	  or (SotRPowValue == 2 and _HolyPower &amp;gt;= 3) then
		_Cast(_ShieldOfTheRighteous, CML_MeleeTarget())
	end
	
end
-- Healing Functions
CML_GiftOfTheNaaru()
-- Righteous Fury if protection.
if Spells[_RighteousFury].known and _SA(_RighteousFury) and RighteousFuryCheck then
	if not _UB(&amp;quot;player&amp;quot;, _RighteousFury) then 
		_Cast(_RighteousFury,&amp;quot;player&amp;quot;)
	end 
end
CML_Seal()
-- Blessings
if ActiveBlessingsCheck and ( Spells[_BlessingOfKings].known or Spells[_BlessingOfMight].known ) 
  and ( _SA(_BlessingOfKings) or _SA(_BlessingOfMight) ) then 
  	CML_Blessings() 
end

-- Defenses
CML_DefensiveCDS()
CML_LayonHands()
CML_HandOfSalvation()
CML_HandOfProtection()
CML_HandOfPurity()
CML_HandOfSacrifice()
CML_HandOfFreedom()
CML_SacredShield()
if _ActiveHealing then
	CML_FlashOfLight(2)
	CML_EternalFlame()
	CML_WordOfGlory()
end
if macros[&amp;quot;DivineShieldQueue&amp;quot;] then
	CML_DivineShield()
end

--------- Combat Check ---------
if ( CombatCheckCheck and CML_CombatCheck() ) or CML_Pause() then return true end
CML_Facing()
-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end
if GuardianOfAncientKingsCheck and _HP &amp;lt;= GuardianOfAncientKings and Spells[_GuardianOfAncientKings].known and _SA(_GuardianOfAncientKings) then
	_Cast(_GuardianOfAncientKings, &amp;quot;player&amp;quot;)
end

if macros[&amp;quot;ActiveCooldowns&amp;quot;] and select(2, CML_MeleeTarget()) then
	CML_ActiveCooldowns()
end

-- Light&amp;apos;s Hammer
if Spells[_LightsHammer].known  and _SA(_LightsHammer) then
	if LightsHammerKey and LightsHammerKeyCheck then 
		_Cast(_LightsHammer)
		if SpellIsTargeting() then 
			CameraOrSelectOrMoveStart() 
			CameraOrSelectOrMoveStop() 
		end 
		return true 
	end 
end
	
CML_HammerOfJustice()		
if macros[&amp;quot;BlindingLightQueue&amp;quot;] then
	if Spells[_BlindingLight].known  and _SA(_BlindingLight) and select(2,CML_MeleeTarget(false)) == true then
		_Cast(_BlindingLight, CML_MeleeTarget(false))
		return true
	end 
end
--if macros[&amp;quot;AvengersQueue&amp;quot;] then
--	if Spells[_AvengersShield].known and _SA(_AvengersShield) and select(2,CML_RangeTarget()) == true then 
--		_Cast(_AvengersShield, CML_RangeTarget()) 
--	end
--end
		
-- Eternal Flame for us.
CML_SelfFlame()
CML_TakeControl()
CML_Cleanse()


-- Avenger&amp;apos;s Shield Procs (Aoe only, for Single Keep normal order and use shield to interrupt)
CML_AvengersShield(true)
-- Crusader Strike / Hammer of the Righteous
if _AoE then _Strike = _HammerOfTheRighteous else _Strike = _CrusaderStrike end
if Spells[_Strike].known  and _SA(_Strike) and select(2,CML_MeleeTarget()) == true then 
	_Cast(_Strike, CML_MeleeTarget())
	return true
--	return true
end

-- Judgement
if Spells[_Judgement].known  and _SA(_Judgement) then
  	if macros[&amp;quot;JudgeFocusQueue&amp;quot;] then 
  		_Cast(_Judgement, &amp;quot;focus&amp;quot;)
  		return true
  	end
  	CML_DoubleJeopardy()
  	_Cast(_Judgement, CML_RangeTarget(false))
  	return true
end	
-- Glyphed Consecration
if Spells[_Consecration].known  and _SA(_Consecration) and CML_ConsecrationGlyph() then
	if LightsHammerKey and LightsHammerKeyCheck then 
		_Cast(_Consecration) 
		if SpellIsTargeting() then 
			CameraOrSelectOrMoveStart() 
			CameraOrSelectOrMoveStop() 
		end 
		return true 
	end 
end
-- Execution Sentence
if Spells[_ExecutionSentence].known  and _SA(_ExecutionSentence) 
  and ( CML_GetVengeance() &amp;gt; ExecutionSentence or macros[&amp;quot;ExecutionQueue&amp;quot;]) and select(2,CML_RangeTarget()) == true then
  		RunMacroText(&amp;quot;/use 10&amp;quot;)
	_Cast(_ExecutionSentence, CML_RangeTarget()) 
end

-- Hammer of Wrath
if ((UnitHealth(&amp;quot;target&amp;quot;)/UnitHealthMax(&amp;quot;target&amp;quot;) * 100) &amp;lt;= 20 )
  and Spells[_HammerOfWrath].known  and _SA(_HammerOfWrath) and select(2,CML_RangeTarget()) == true then
	_Cast(_HammerOfWrath, CML_RangeTarget())
	return true
end	
-- Avenger&amp;apos;s Shield
CML_AvengersShield()
-- Consecration
if macros[&amp;quot;Consecration&amp;quot;] and Spells[_Consecration].known and _SA(_Consecration) 
  and not CML_ConsecrationGlyph() and select(2,CML_MeleeTarget(false)) == true then 
	_Cast(_Consecration, &amp;quot;player&amp;quot;) 
	return true
end
-- Holy Wrath
if Spells[_HolyWrath].known and _SA(_HolyWrath) and select(2, CML_MeleeTarget()) == true then 
	_Cast(_HolyWrath, &amp;quot;player&amp;quot;) 
	return true
end

-- Holy Prism
if Spells[_HolyPrism].known and _SA(_HolyPrism) and select(2,CML_RangeTarget()) == true then
	if _AoE then
  		_Cast(_HolyPrism, &amp;quot;player&amp;quot;) 
  		return true
	else 
		_Cast(_HolyPrism, CML_RangeTarget()) 
		return true
	end
	if select(2,CML_RangeTarget()) == false and select(2,CML_RangeTarget(false)) == true then
		_Cast(_HolyPrism, &amp;quot;player&amp;quot;)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Status</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PlayerStatusCheck then
	CML_VengeanceFrame:Hide()
	if _Spec == 2 then
		CML_SotRFrame:Hide() 
	end
else
	CML_VengeanceFrame:Show()
	if _Spec == 2 then
		CML_SotRFrame:Show() 
	end
end

if PlayerStatusValue == 1 then
	IlikeMyBarsGreenColored = false
else
	IlikeMyBarsGreenColored = true
end

if IlikeMyBarsGreenColored then
	if _HP &amp;gt;= 91 then CML_HealthFrame:GetStatusBarTexture():SetTexture(45/255, 214/255, 0/255,0.85,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 90 and _HP &amp;gt;= 81 then CML_HealthFrame:GetStatusBarTexture():SetTexture(90/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 80 and _HP &amp;gt;= 71  then CML_HealthFrame:GetStatusBarTexture():SetTexture(135/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 70 and _HP &amp;gt;= 61 then CML_HealthFrame:GetStatusBarTexture():SetTexture(180/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 60 and _HP &amp;gt;= 51 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 50 and _HP &amp;gt;= 41  then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 180/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 40 and _HP &amp;gt;= 31 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 135/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 30 and _HP &amp;gt;= 21 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 90/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 20 and _HP &amp;gt;= 11  then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 45/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 10 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 40/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
else	
	CML_HealthFrame:GetStatusBarTexture():SetTexture(232/255, 172/255, 200/255,1,&amp;quot;OVERLAY&amp;quot;) 
end
if _HolyPower &amp;gt;= 1 then CML_VengeanceFrame.HP1Bar:Show() else CML_VengeanceFrame.HP1Bar:Hide() end
if _HolyPower &amp;gt;= 2 then CML_VengeanceFrame.HP2Bar:Show() else CML_VengeanceFrame.HP2Bar:Hide() end
if _HolyPower &amp;gt;= 3 then CML_VengeanceFrame.HP3Bar:Show() else CML_VengeanceFrame.HP3Bar:Hide() end
if _HolyPower &amp;gt;= 4 then CML_VengeanceFrame.HP4Bar:Show() else CML_VengeanceFrame.HP4Bar:Hide() end
if _HolyPower &amp;gt;= 5 then CML_VengeanceFrame.HP5Bar:Show() else CML_VengeanceFrame.HP5Bar:Hide() end



-- ActiveHealing
if macros[&amp;quot;ActiveHealing&amp;quot;] then
	CML_VengeanceFrame.healingmodebartext:SetText(&amp;quot;ON&amp;quot;, 1, 1, 1, 0.7)
	CML_VengeanceFrame.healingmodebar:SetTexture(232/255, 172/255, 200/255,1)
	CML_VengeanceFrame.healingmodebartext:SetTextColor(255/255, 255/255, 255/255,1)
else
	CML_VengeanceFrame.healingmodebartext:SetText(&amp;quot;OFF&amp;quot;, 1, 1, 1, 0.7)
	CML_VengeanceFrame.healingmodebar:SetTexture(25/255,25/255,25/255,1)
	CML_VengeanceFrame.healingmodebartext:SetTextColor(255/255, 255/255, 255/255,1)
end



-- Health Status
CML_HealthFrame:SetValue(_HP)
CML_HealthFrame.healthbartext:SetText(math.floor(_HP)..&amp;quot;%&amp;quot;, 1, 1, 1, 1)
CML_HealthFrame.healthbarnumbers:SetText(UnitHealth(&amp;quot;player&amp;quot;)..&amp;quot; / &amp;quot;..UnitHealthMax(&amp;quot;player&amp;quot;), 1, 1, 1, 1)
CML_HPYellowValue = math.abs((_HP/100)-1)



-- Mana Status
if _Spec == 1 then
	CML_SotRFrame:Hide() 
	CML_VengeanceFrame:GetStatusBarTexture():SetTexture(33/255, 66/255, 255/255,0.90,&amp;quot;OVERLAY&amp;quot;)
	CML_VengeanceFrame:SetValue(_Mana)
	if UnitPowerMax(&amp;quot;player&amp;quot;) &amp;lt;= 10000 then
		DisplayActualMana = UnitPower(&amp;quot;player&amp;quot;)
		DisplayMaxMana = UnitPowerMax(&amp;quot;player&amp;quot;)
	else 
		DisplayActualMana = math.floor(UnitPower(&amp;quot;player&amp;quot;)/1000)
		DisplayMaxMana = tostring(math.floor(UnitPowerMax(&amp;quot;player&amp;quot;)/1000)..&amp;quot;k&amp;quot;)
	end
	CML_VengeanceFrame.Text:SetText(DisplayActualMana..&amp;quot;/&amp;quot;..DisplayMaxMana..&amp;quot; (&amp;quot;..math.floor(_Mana)..&amp;quot;%)&amp;quot;, 1, 1, 1, 0.7)
end
-- Vengeance Status
if _Spec == 2 then
	-- SotR Status
	if CML_HaveBuff(&amp;quot;player&amp;quot;, 53600) then 
		SotRTimer = select(7, UnitAura(&amp;quot;player&amp;quot;, GetSpellInfo(53600))) - GetTime() 
	else 
		SotRTimer = 0 
	end
	CML_SotRFrame:SetValue(SotRTimer)
	SotRTimer = floor(SotRTimer*10)/10
	CML_SotRFrame.Text:SetText(SotRTimer, 1, 1, 1, 0.7)
	CML_VengeanceFrame:GetStatusBarTexture():SetTexture(217/255, 0/255, 0/255,0.90,&amp;quot;OVERLAY&amp;quot;)
	CML_MyVengeance = CML_GetVengeance()/1000
	CML_MyMaxVengeance = math.floor(UnitHealthMax(&amp;quot;player&amp;quot;)/2000)
	CML_MyVengeancePercent = math.floor((CML_MyVengeance/CML_MyMaxVengeance)*100)
	CML_VengeanceFrame:SetValue(CML_MyVengeancePercent)
	CML_VengeanceFrame.Text:SetText((CML_MyVengeance*1000)..&amp;quot;/&amp;quot;..CML_MyMaxVengeance..&amp;quot;k(&amp;quot;..CML_MyVengeancePercent..&amp;quot;%)&amp;quot;, 1, 1, 1, 0.7)
end
-- Inquisition Status
if _Spec == 3 then
	CML_SotRFrame:Hide() 
	CML_VengeanceFrame:GetStatusBarTexture():SetTexture(255/255, 255/255, 51/255,0.90,&amp;quot;OVERLAY&amp;quot;)
	InquisitionTime = CML_InquisitionTime()
	CML_VengeanceFrame:SetValue(InquisitionTime)
	CML_VengeanceFrame.Text:SetText(InquisitionTime..&amp;quot;s&amp;quot;, 1, 1, 1, 0.7)
end



-- If Prot or Ret
if _Spec == 2 or _Spec ==  3 then
	-- AoE
	if macros[&amp;quot;AoE&amp;quot;] == 2 then
		CML_VengeanceFrame.aoebartext:SetText(&amp;quot;AoE&amp;quot;, 255/255,255/255,0/255)
		CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.aoebar:SetTexture(191/255,0/255,0/255,0.85)
	elseif macros[&amp;quot;AoE&amp;quot;] == 3 then
		CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Mass&amp;quot;, 255/255,255/255,255/255)
		CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.aoebar:SetTexture(0/255, 0/255, 255/255,0.90)
	else
		CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Single&amp;quot;,255/255,255/255,0/255)
		CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.aoebar:SetTexture(45/255, 214/255, 0/255,0.85)
	end
	if macros[&amp;quot;ActiveCooldowns&amp;quot;] then
		CML_VengeanceFrame.rangebar:SetTexture(45/255, 214/255, 0/255,0.85)
		CML_VengeanceFrame.rangebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.rangebartext:SetText(&amp;quot;ON&amp;quot;, 0, 1, 0, 0.7)
	else
		CML_VengeanceFrame.rangebar:SetTexture(191/255,0/255,0/255,0.85)
		CML_VengeanceFrame.rangebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.rangebartext:SetText(&amp;quot;OFF&amp;quot;, 0, 1, 0, 0.7)
	end	
end



-- If Holy
if _Spec == 1 then
	if macros[&amp;quot;ActiveDispel&amp;quot;] then
		CML_VengeanceFrame.aoebartext:SetText(&amp;quot;OFF&amp;quot;, 255/255,255/255,0/255)
		CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.aoebar:SetTexture(191/255,0/255,0/255,0.85)	
	else
		CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Dispel&amp;quot;,255/255,255/255,0/255)
		CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.aoebar:SetTexture(45/255, 214/255, 0/255,0.85)
	end
	if macros[&amp;quot;ActiveDPS&amp;quot;] then
		CML_VengeanceFrame.rangebar:SetTexture(45/255, 214/255, 0/255,0.85)
		CML_VengeanceFrame.rangebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.rangebartext:SetText(&amp;quot;ON&amp;quot;, 0, 1, 0, 0.7)
	else
		CML_VengeanceFrame.rangebar:SetTexture(191/255,0/255,0/255,0.85)
		CML_VengeanceFrame.rangebartext:SetTextColor(255/255, 255/255, 255/255)
		CML_VengeanceFrame.rangebartext:SetText(&amp;quot;OFF&amp;quot;, 0, 1, 0, 0.7)
	end	
end


if CML_Pause() or macros[&amp;quot;Pause&amp;quot;] == true then
	CML_VengeanceFrame.Border:SetTexture(0/255, 0/255, 0/255,0.35)
	CML_SotRFrame.Border:SetTexture(0/255, 0/255, 0/255,0.35)
elseif not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	CML_VengeanceFrame.Border:SetTexture(232/255, 172/255, 200/255,0.35)
	CML_SotRFrame.Border:SetTexture(232/255, 172/255, 200/255,0.35)
elseif CML_UnitFacing() ~= true or IsSpellInRange(_GI(35395),&amp;quot;target&amp;quot;) ~= 1 then
	CML_VengeanceFrame.Border:SetTexture(1,0,0,0.35)
	CML_SotRFrame.Border:SetTexture(1,0,0,0.35)
else
	CML_VengeanceFrame.Border:SetTexture(0,1,0,0.35)
	CML_SotRFrame.Border:SetTexture(0,1,0,0.35)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Holy</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ThrottleCheck and GeneralThrottle and GetTime() &amp;lt;= GeneralThrottle + (ThrottleValue/1000) then return true end
if ThrottleCheck then GeneralThrottle = GetTime() end

if CML_Pause() or CML_StopAll() then return true end
CML_Interrupts()
if UnitChannelInfo(&amp;quot;player&amp;quot;) then return false end
CML_Seal()
-- Blessings
if ActiveBlessingsCheck and ( Spells[_BlessingOfKings].known or Spells[_BlessingOfMight].known ) 
  and ( _SA(_BlessingOfKings) or _SA(_BlessingOfMight) ) then 
  	CML_Blessings() 
end

-- Defenses
CML_DefensiveCDS()
CML_LayonHands()
CML_SelflessHealer()
-- Light&amp;apos;s Hammer
if Spells[_LightsHammer].known  and _SA(_LightsHammer) then
	if LightsHammerKey and LightsHammerKeyCheck then 
		_Cast(_LightsHammer)
		if SpellIsTargeting() then 
			CameraOrSelectOrMoveStart() 
			CameraOrSelectOrMoveStop() 
		end 
		return true 
	end 
end

CML_HammerOfJustice()		
if macros[&amp;quot;BlindingLightQueue&amp;quot;] then
	if Spells[_BlindingLight].known  and _SA(_BlindingLight) and select(2,CML_MeleeTarget(false)) == true then
		_Cast(_BlindingLight, CML_MeleeTarget(false))
	end 
end


CML_HammerOfJustice()	
	
-- Blinding Light		
if macros[&amp;quot;BlindingLightQueue&amp;quot;] then
	if Spells[_BlindingLight].known  and _SA(_BlindingLight) then
		_Cast(_BlindingLight, CML_MeleeTarget(false)) 
	end 
end

if macros[&amp;quot;DivineShieldQueue&amp;quot;] then
	CML_DivineShield()
end

--------- Combat Check ---------
if ( CombatCheckCheck and CML_CombatCheck() ) then return true end
CML_Facing()
-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end


if _ActiveHealing then
	CML_HolyShock()
	CML_BlanketFlame()
end
-- Guardian Of Ancient Kings
if GuardianOfAncientKingsCheck and ( CooldownUsed == nil or CooldownUsed &amp;lt;= GetTime() - 3 ) and Spells[_GuardianOfAncientKingsHoly].known  and _SA(_GuardianOfAncientKingsHoly) and nNova[1].hp &amp;lt;= GuardianOfAncientKings and not CML_HaveBuff(&amp;quot;player&amp;quot;, _AvengingWrath,3) then
	_Cast(_GuardianOfAncientKingsHoly, &amp;quot;player&amp;quot;) CooldownUsed = GetTime() 
end

-- Avenging Wrath
if AvengingWrathCheck and ( CooldownUsed == nil or CooldownUsed &amp;lt;= GetTime() - 3 ) and Spells[_AvengingWrath].known  and _SA(_AvengingWrath) and nNova[1].hp &amp;lt;= AvengingWrath and not CML_HaveBuff(&amp;quot;player&amp;quot;, _GuardianOfAncientKingsHoly,3) then
	_Cast(_AvengingWrath, &amp;quot;player&amp;quot;) CooldownUsed = GetTime() 
end
	
CML_HandOfSalvation()
CML_HandOfProtection()
CML_HandOfPurity()
CML_HandOfSacrifice()
CML_HandOfFreedom()
CML_GiftOfTheNaaru()
-- Healing
CML_Cleanse()

CML_DivinePlea()
if _ActiveHealing then
	CML_HolyPrism()
	CML_BeaconOfLight()
	CML_StayOfExecution()
	CML_SacredShieldHoly()
	CML_LightOfDawn()
	CML_HolyEternalFlame()
	CML_WordOfGlory()
	CML_HolyFlashOfLight()
	--CML_NeedToBeTopped()
	CML_HolyRadiance()
	CML_DivineLight()
	CML_HolyRadiance()
	CML_HolyLight()
	CML_SelflessHealer()
end

if UnitExists(&amp;quot;target&amp;quot;) ~= nil and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) ~= nil then	
	RunMacroText(&amp;quot;/startattack&amp;quot;)
end

-- Hammer of Wrath
if _UB(&amp;quot;player&amp;quot;, 31884) or ((UnitHealth(&amp;quot;target&amp;quot;)/UnitHealthMax(&amp;quot;target&amp;quot;) * 100) &amp;lt; 20 )
  and Spells[_HammerOfWrath].known  and _SA(_HammerOfWrath) then
	_Cast(_HammerOfWrath, CML_RangeTarget()) 
	return true
end	  	

if macros[&amp;quot;ActiveDPS&amp;quot;] then
	-- Holy Shock
	if Spells[_HolyShock].known and _SA(_HolyShock) and _HolyPower &amp;lt; 5 then
	  	_Cast(_HolyShock, CML_RangeTarget()) 
	  	return true
	end
	
	-- Holy Prism
	if Spells[_HolyPrism].known and _SA(_HolyPrism) then
	  	_Cast(_HolyPrism, CML_RangeTarget())
	  	return true
	end
	  	
	
	-- Denounce
	if DenounceCheck and Spells[_Denounce].known  and _SA(_Denounce) and _Mana &amp;gt;= DenounceValue then
	  	_Cast(_Denounce, CML_RangeTarget()) 
	  	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PALADIN>