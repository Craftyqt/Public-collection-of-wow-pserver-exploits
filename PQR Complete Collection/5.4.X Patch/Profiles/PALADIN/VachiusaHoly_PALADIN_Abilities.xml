<?xml version="1.0" encoding="utf-8" ?><PALADIN><Ability><Name>-- Init --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	-- Should be reloaded every time you reload Profile (No more needing to /rl)
	-- Only takes effect when we&amp;apos;re 90
 	if UnitLevel(&amp;quot;player&amp;quot;) ~= 90 then
 		PQR_WriteToChat(&amp;quot;\124cFFFF55FFWarning: only takes full effect when we&amp;apos;re 90!&amp;quot;)		
 	end	
	PQR_RotationStarted = false

PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Holy Pally Profile Verion - 2.0.13&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
PQR_SwapCheckTimer = 0
 	
--------------------
-- Register CVars
--------------------

Nova_ValueCheck = {
	{	Var1 = nil,	Text = &amp;quot;Healing Values&amp;quot;,			Var2 = nil		},
	{	Var1 = 60,	Text = &amp;quot;VDivineLight&amp;quot;,				Var2 = 1		},	
	{	Var1 = 70,	Text = &amp;quot;VWordOfGlory&amp;quot;,				Var2 = 1		},	
	{	Var1 = 80,	Text = &amp;quot;VHolyShock&amp;quot;,				Var2 = 1		},				
	{	Var1 = 80,	Text = &amp;quot;VHolyLight&amp;quot;,				Var2 = 1		},				
	{	Var1 = 40,	Text = &amp;quot;VFlashOfLight&amp;quot;,				Var2 = 1		},
	{	Var1 = 80,	Text = &amp;quot;VHolyShockAOE&amp;quot;, 			Var2 = 1		},
	{	Var1 = 3,	Text = &amp;quot;VHolyShockAOELimit&amp;quot;, 		Var2 = 1		},		
	{	Var1 = 80,	Text = &amp;quot;VHolyRadiance&amp;quot;, 			Var2 = 1		},
	{	Var1 = 3,	Text = &amp;quot;VHolyRadianceLimit&amp;quot;, 		Var2 = 1		},				
	{	Var1 = 80,	Text = &amp;quot;VLightOfDawn&amp;quot;, 				Var2 = 1		},
	{	Var1 = 3,	Text = &amp;quot;VLightOfDawnLimit&amp;quot;, 		Var2 = 1		},		
	{	Var1 = 4,	Text = &amp;quot;VDivineFavorLimit&amp;quot;,			Var2 = 1		},		
	{	Var1 = 60,	Text = &amp;quot;VDivineFavor&amp;quot;,				Var2 = 1		},
	{	Var1 = 2,	Text = &amp;quot;VHolyPrismLimit&amp;quot;,			Var2 = 1		},		
	{	Var1 = 85,	Text = &amp;quot;VHolyPrism&amp;quot;,				Var2 = 1		},	
	{	Var1 = 30,	Text = &amp;quot;VSacredShield&amp;quot;,				Var2 = 1		},					
	{	Var1 = nil,	Text = &amp;quot;Cooldown Values&amp;quot;,			Var2 = nil		},
	{	Var1 = 20,	Text = &amp;quot;VLayOnHands&amp;quot;,				Var2 = 1		},
	{	Var1 = 30,	Text = &amp;quot;VBeaconOfLight&amp;quot;,			Var2 = 1		},
	{	Var1 = 20,	Text = &amp;quot;VGuardianOfAncientKings&amp;quot;,	Var2 = 1		},	
	{	Var1 = 20,	Text = &amp;quot;VHandOfProtection&amp;quot;,			Var2 = 1		},
	{	Var1 = 20,	Text = &amp;quot;VHandOfSacrifice&amp;quot;,			Var2 = 1		},
	{	Var1 = 20,	Text = &amp;quot;VHandOfSalvation&amp;quot;,			Var2 = 1		},	
	{	Var1 = 0,	Text = &amp;quot;VAvengingWrathAuto&amp;quot;,		Var2 = 1		},	
	{	Var1 = 0,	Text = &amp;quot;VDevotionAuraAuto&amp;quot;,			Var2 = 1		},	
	{	Var1 = 0,	Text = &amp;quot;VDivineFavorAuto&amp;quot;,			Var2 = 1		},	
	{	Var1 = 0,	Text = &amp;quot;VHolyPrismAuto&amp;quot;,			Var2 = 1		},							
	{	Var1 = nil,	Text = &amp;quot;Misc Values&amp;quot;,				Var2 = nil		},			
	{	Var1 = 20,	Text = &amp;quot;VManaLayOnHands&amp;quot;,			Var2 = 0		},			
	{	Var1 = 80,	Text = &amp;quot;VDPS&amp;quot;,						Var2 = 1		},	
	{	Var1 = 0,	Text = &amp;quot;VAutoTarget&amp;quot;,				Var2 = 1		},	
	{	Var1 = 20,	Text = &amp;quot;VLowMana&amp;quot;,					Var2 = 1		},
	{	Var1 = 80,	Text = &amp;quot;VDivinePlea&amp;quot;,				Var2 = 1		},	
	{	Var1 = 60,	Text = &amp;quot;VCleanse&amp;quot;,					Var2 = 1		},	
	--{	Var1 = 0,	Text = &amp;quot;VSmart&amp;quot;,					Var2 = 1		},			
	{	Var1 = 0,	Text = &amp;quot;Racials&amp;quot;,					Var2 = 1		},				
	{	Var1 = 0,	Text = &amp;quot;NewEvents&amp;quot;,					Var2 = 1		},		
	{	Var1 = 0,	Text = &amp;quot;OldEvents&amp;quot;,					Var2 = 0		}		
	--{	Var1 = 80,	Text = &amp;quot;LowHPThreshold&amp;quot;, 			Var2 = nil		}
}		

Nova_CooldownCheck = {
	{	Mod = 8,	Text = &amp;quot;VMAvengingWrath&amp;quot;,			Var1 = 1		}, --IsRightShiftKeyDown
	{	Mod = 1,	Text = &amp;quot;VPauseRotation&amp;quot;,			Var1 = 1		}, --IsLeftShiftKeyDown
	{	Mod = 2,	Text = &amp;quot;VTalent90&amp;quot;,					Var1 = 1		}, --IsLeftControlKeyDown
	{	Mod = 4,	Text = &amp;quot;VDispelRaid&amp;quot;,				Var1 = 1		}, --IsLeftAltKeyDown		
	{	Mod = 32,	Text = &amp;quot;VMDivineFavor&amp;quot;,				Var1 = 1		}, --IsRightAltKeyDown
	{	Mod = 16,	Text = &amp;quot;VMDevotionAura&amp;quot;,			Var1 = 1		}  --IsRightControlKeyDown
	--{	Mod = 2,	Text = &amp;quot;RemoveFromCustomTable&amp;quot;,		Var1 = 1		}, --IsLeftControlKeyDown
	--{	Mod = 4,	Text = &amp;quot;AddToCustomTable&amp;quot;,			Var1 = 1		}  --IsLeftAltKeyDown			
}

if GetCVar(&amp;quot;PQ_WipeCustomTable&amp;quot;) == nil then RegisterCVar(&amp;quot;PQ_WipeCustomTable&amp;quot;, 0) end
if GetCVar(&amp;quot;Nova_OverRide&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_OverRide&amp;quot;, 0) end
if GetCVar(&amp;quot;PQ_UseCustomT&amp;quot;) == nil then RegisterCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0) end
if GetCVar(&amp;quot;Nova_Recording&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_Recording&amp;quot;, 0) end
if GetCVar(&amp;quot;Nova_DisableCD&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_DisableCD&amp;quot;, 1) end
if GetCVar(&amp;quot;Nova_Mouseover&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_Mouseover&amp;quot;, 0) end
if GetCVar(&amp;quot;Nova_LowHP&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_LowHP&amp;quot;, 80) end
if GetCVar(&amp;quot;Nova_ActualHP&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_ActualHP&amp;quot;, 0) end
-- Registering the CVars for the CustomFrame
for i=1, #Nova_ValueCheck do
	if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text) == nil then 
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1) 
	end
	if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text..&amp;apos;_Enabled&amp;apos;) == nil then 
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;)..&amp;apos;_Enabled&amp;apos;, Nova_ValueCheck[i].Var2) 
	end
end
for i=1, #Nova_CooldownCheck do
	if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_CooldownCheck[i].Text) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..Nova_CooldownCheck[i].Text, Nova_CooldownCheck[i].Mod)
	end	
	if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_CooldownCheck[i].Text..&amp;quot;_Enabled&amp;quot;) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..Nova_CooldownCheck[i].Text..&amp;quot;_Enabled&amp;quot;, Nova_CooldownCheck[i].Var1)
	end
end

--------------------
-- Slash Commands
--------------------
SLASH_WIPETABLE1 = &amp;quot;/wipetable&amp;quot;
SLASH_WIPETABLE2 = &amp;quot;/wipecustomtable&amp;quot;
SLASH_WIPETABLE3 = &amp;quot;/wt&amp;quot;
function SlashCmdList.WIPETABLE(msg, editbox)
	Nova_CustomT = { }
	if GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) then 
		SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0)
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;Wiped Custom Table clean, and reverting to Normal Table.&amp;quot;)
		end
	else
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;Wiped Custom Table clean.&amp;quot;)
		end
	end
end

SLASH_USECUSTOMT1 = &amp;quot;/usecustomt&amp;quot;
SLASH_USECUSTOMT2 = &amp;quot;/uct&amp;quot;
SLASH_USECUSTOMT3 = &amp;quot;/usecustomtable&amp;quot;
function SlashCmdList.USECUSTOMT(msg, editbox)
	if not GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) and #Nova_CustomT &amp;gt; 0 then
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;Enabling Custom Table&amp;quot;)
		end
		SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 1)
	else
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;Enabling Normal Table&amp;quot;)
		end
		SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0)
	end
end

SLASH_RECORDING1 = &amp;quot;/recording&amp;quot;
SLASH_RECORDING2 = &amp;quot;/recraid&amp;quot;
SLASH_RECORDING3 = &amp;quot;/recordingraid&amp;quot;
function SlashCmdList.RECORDING(msg, editbox)
	if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
		SetCVar(&amp;quot;Nova_Recording&amp;quot;, 1)
		for i=1, 20 do ChatFrame1:AddMessage(&amp;quot; &amp;quot;) end
	else
		PQR_WriteToChat(&amp;quot;Silent Mode Disabled&amp;quot;)
		SetCVar(&amp;quot;Nova_Recording&amp;quot;, 0)
	end
end

SLASH_DISABLECD1 = &amp;quot;/disablecd&amp;quot;
function SlashCmdList.DISABLECD(msg, editbox)
	if not GetCVarBool(&amp;quot;Nova_DisableCD&amp;quot;) then
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;Disabling your Automatic Cooldown Usage&amp;quot;)
		end
		SetCVar(&amp;quot;Nova_DisableCD&amp;quot;, 1)
	else
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;Enabling your Automatic Cooldown Usage&amp;quot;)
		end
		SetCVar(&amp;quot;Nova_DisableCD&amp;quot;, 0)
	end
end

SLASH_CLEARCHAT1 = &amp;quot;/clearchat&amp;quot;
function SlashCmdList.CLEARCHAT(msg, editbox)
	for i=1, 20 do
		ChatFrame1:AddMessage(&amp;quot; &amp;quot;)
	end
end

SLASH_DISABLEMOUSEOVER1 = &amp;quot;/mouseoverheal&amp;quot;
SLASH_DISABLEMOUSEOVER2 = &amp;quot;/mh&amp;quot;
function SlashCmdList.DISABLEMOUSEOVER(msg, editbox)
	if not GetCVarBool(&amp;quot;Nova_DisableMouseover&amp;quot;) then
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;Disabled Mouseover.&amp;quot;)
		end
		SetCVar(&amp;quot;Nova_DisableMouseover&amp;quot;, 1)
	else
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;Enabled Mouseover.&amp;quot;)
		end
		SetCVar(&amp;quot;Nova_DisableMouseover&amp;quot;, 0)
	end		
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

-----------------------------
-- Create the CVar Macros
-----------------------------

	if PQR_LoadLua ~= nil then
		-- Load Data File
		if PQR_LoadLua(&amp;quot;PQR_Vachiusa_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_Vachiusa_Data.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		
		if PQR_LoadLua(&amp;quot;PQR_Vachiusa_Frame.lua&amp;quot;) == true then
			if not mmC then
				mmC = true
				MiniMapCreation()
			end
		
			-- Setup the Slash Commands for the Frame
			SLASH_NOVAFRAME1 = &amp;quot;/novaframe&amp;quot;
			SLASH_NOVAFRAME2 = &amp;quot;/nova&amp;quot;
			function SlashCmdList.NOVAFRAME(msg, editbox)
				if Setup == nil then
					Setup = true
					FrameCreation(Nova_ValueCheck, Nova_CooldownCheck)
				end
			
				if not Nova_Frame:IsShown() then
					Nova_Frame:Show()
				else
					Nova_Frame:Hide()
				end
			end
		else
			print(&amp;quot;Failed to load Frame&amp;quot;)
		end
	end
	
	PQR_Spec = GetSpecialization()
	if PQR_Spec ~= 1 then
		PQR_WriteToChat(&amp;quot;You must be in Holy Spec. Please switch then try again.&amp;quot;, &amp;quot;Warning&amp;quot;)
		PQR_StopRotation()
		return true
	end
end

if PQR_IsMoving() then
	Nova_Moving = true
else
	Nova_Moving = false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Healing Engine --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>SheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActulHP)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true


if GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) then
	members = Nova_CustomT
	lowhpmembers = 0
	for i=1, #Nova_CustomT do
		if Nova_CustomT[i].HP &amp;lt; 80 then
			lowhpmembers = lowhpmembers + 1
		end
	end
	
	table.sort(members, function(x,y) return x.HP &amp;lt; y.HP end)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- ToInteger --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- To Integer from String
Nova_LowHP 							= tonumber( GetCVar(&amp;quot;Nova_LowHP&amp;quot;) )
for i=1, #Nova_ValueCheck do
	if Nova_ValueCheck[i].Var1 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)] = tonumber(GetCVar(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)))
	end
	if Nova_ValueCheck[i].Var2 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;Check&amp;apos;] = GetCVarBool(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;_Enabled&amp;apos;)		
	end
end

-- To Integer for Cooldowns
Nova_VMAvengingWrath				= tonumber(	GetCVar(&amp;apos;Nova_VMAvengingWrath&amp;apos;) )
Nova_VTalent90						= tonumber(	GetCVar(&amp;apos;Nova_VTalent90&amp;apos;) )
Nova_VDispelRaid					= tonumber(	GetCVar(&amp;apos;Nova_VDispelRaid&amp;apos;) )
Nova_VMDivineFavor					= tonumber(	GetCVar(&amp;apos;Nova_VMDivineFavor&amp;apos;) )
Nova_VMDevotionAura					= tonumber(	GetCVar(&amp;apos;Nova_VMDevotionAura&amp;apos;) )
--Nova_RemoveCT							= tonumber(	GetCVar(&amp;apos;Nova_RemoveFromCustomTable&amp;apos;) )
--Nova_AddCT							= tonumber(	GetCVar(&amp;apos;Nova_AddToCustomTable&amp;apos;) )

-- To Boolean from String
Nova_Mouseover 						= GetCVarBool(&amp;quot;Nova_Mouseover&amp;quot;)
Nova_VMAvengingWrathCheck			= GetCVarBool(&amp;apos;Nova_VMAvengingWrath_Enabled&amp;apos;) 
Nova_VTalent90Check					= GetCVarBool(&amp;apos;Nova_VTalent90_Enabled&amp;apos;) 
Nova_VDispelRaidCheck				= GetCVarBool(&amp;apos;Nova_VDispelRaid_Enabled&amp;apos;) 
Nova_VMDivineFavorCheck				= GetCVarBool(&amp;apos;Nova_VMDivineFavor_Enabled&amp;apos;) 
Nova_VMDevotionAuraCheck			= GetCVarBool(&amp;apos;Nova_VMDevotionAura_Enabled&amp;apos;) 
--Nova_RemoveCTCheck					= GetCVarBool(&amp;apos;Nova_RemoveFromCustomTable_Enabled&amp;apos;)
--Nova_AddCTCheck						= GetCVarBool(&amp;apos;Nova_AddToCustomTable_Enabled&amp;apos;)</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Stop Casting</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Stop Casting
if UnitExists(&amp;quot;boss1&amp;quot;) then
	local npcid = tonumber(UnitGUID(&amp;quot;boss1&amp;quot; ):sub(6,10), 16)
else
	local npcid = 0
end

if SpellIsTargeting() then
	SpellStopCasting()
elseif ((UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(635)) --HolyLight
or (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(2812)) --Denounce
or (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(54428))) --DivinePlea
and (CalStop(members[1].Unit) &amp;lt; 40 or (lowhpmembers &amp;gt; 3 and CalStop(members[1].Unit) &amp;lt; 70)) 
and IsUsableSpell(19750) --FlashOfLight -- prevent loop stop
and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 12
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	SpellStopCasting() 
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting HolyLight/Denounce/DivinePlea - HP: &amp;quot; ..members[1].HP) 		
	return true 
elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(635)) --HolyLight
and IsSpellInRange(GetSpellInfo(635),members[1].Unit) == 1
and CanHeal(members[1].Unit)
and CalStop(members[1].Unit) &amp;gt; Nova_VDPS and CalStop(members[1].Unit) &amp;gt; 95 
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	SpellStopCasting() 	
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Cast HolyLight - Name: &amp;quot; ..UnitName(members[1].Unit)..&amp;quot; - Current HP: &amp;quot;..CalStop(members[1].Unit)..&amp;quot; - overheal: &amp;quot;..select(2, CalStop(members[1].Unit)))	
	return true 
elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(82326)) --DivineLight
and IsSpellInRange(GetSpellInfo(82326),members[1].Unit) == 1
and CanHeal(members[1].Unit)
and npcid ~= 62442 --Tsulong 
and npcid ~= nil
and CalStop(members[1].Unit) &amp;gt; Nova_VDivineLight and CalStop(members[1].Unit) &amp;gt; Nova_VDPS
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
	SpellStopCasting() 
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting DivineLight - HP: &amp;quot; ..members[1].HP) 		
	return true 
elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(19750)) --FlashOfLight
and IsSpellInRange(GetSpellInfo(19750),members[1].Unit) == 1
and CanHeal(members[1].Unit)
and npcid ~= 62442 --Tsulong 
and npcid ~= nil
and CalStop(members[1].Unit) &amp;gt; Nova_VFlashOfLight and CalStop(members[1].Unit) &amp;gt; Nova_VDPS 
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
	SpellStopCasting() 
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting FlashOfLight - HP: &amp;quot; ..members[1].HP) 		
	return true 	
elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(82327)) --HolyRadiance
and (CalStop(members[1].Unit) &amp;gt; 95 or (lowhpmembers &amp;lt; 3 and CalStop(members[1].Unit) &amp;gt; 90)) 
and not UnitDebuffID(&amp;quot;player&amp;quot;,116260) --Crossed Over
and not UnitDebuffID(&amp;quot;player&amp;quot;,116161) --Crossed Over
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
	SpellStopCasting() 
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting HolyRadiance - HP: &amp;quot; ..members[1].HP) 		
	return true 	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AutoTarget</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--AutoTarget
if Nova_VAutoTargetCheck then
	if (not UnitExists(&amp;quot;focus&amp;quot;)
		or UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
		or not UnitInRange(&amp;quot;focus&amp;quot;) 
		or not UnitIsConnected(&amp;quot;focus&amp;quot;)
		or not UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;))
	and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
		or not UnitExists(&amp;quot;target&amp;quot;))	
	and #Nova_Tanks &amp;gt; 0 then
		for i=1, #Nova_Tanks do
			if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			
			and UnitAffectingCombat(&amp;quot;player&amp;quot;)		 
			and CanHeal(Nova_Tanks[i].Unit) then			
	   			TargetUnit(Nova_Tanks[i].Unit)           		
	    		RunMacroText(&amp;quot;/focus&amp;quot;)			
	            RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)			
			end
		end
	end
	
	if UnitExists(&amp;quot;focus&amp;quot;)
	and not Nova_Moving
	--and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) or not UnitExists(&amp;quot;target&amp;quot;) or (UnitExists(&amp;quot;target&amp;quot;) and not UnitIsFriend(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) and not (IsSpellInRange(GetSpellInfo(403),&amp;quot;target&amp;quot;) == 1 )))
	and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) or not UnitExists(&amp;quot;target&amp;quot;))
	and not UnitIsDeadOrGhost(&amp;quot;focustarget&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
	and UnitExists(&amp;quot;focustarget&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;focustarget&amp;quot;)
	and IsSpellInRange(GetSpellInfo(20473),&amp;quot;focustarget&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;focustarget&amp;quot;)
	--and PQR_UnitFacing(&amp;quot;player&amp;quot;, &amp;quot;focustarget&amp;quot;) --Elegon not work
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		TargetUnit(&amp;quot;focustarget&amp;quot;)
		--AttackTarget()
		return false 	
	elseif UnitExists(&amp;quot;target&amp;quot;) 
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;)
	--and IsSpellInRange(GetSpellInfo(6603),&amp;quot;target&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;) then
		if IsSpellInRange(GetSpellInfo(35395),&amp;quot;target&amp;quot;) == 1 then		
			AttackTarget()
			return false 			
		else
			StopAttack()
			return false 
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Trinket spirit 2</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 80
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
then 
	UseInventoryItem(14)
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- SelfSurvival</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if GetItemCount(5512,false,true) &amp;gt; 0
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 20	
	and PQR_SpellAvailable(5512) --Healthstone		
	and GetItemCooldown(5512) == 0 then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end		
		UseItemByName(5512)
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHealthstone - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
		return true
	--elseif GetInventoryItemCooldown(6)==0 --Grounded Plasma Shield 	
	--then 
		--UseInventoryItem(6) 
		--return true
	--The next 3 attacks within 45 sec that deal damage equal to 20% or more of your total health are reduced in half.
	elseif PQR_SpellAvailable(498)	
	and not UnitBuffID(&amp;quot;player&amp;quot;,642) --Divine Shield
	and (UnitBuffID(&amp;quot;player&amp;quot;,6940) --Hand of Sacrifice
	or Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 20)
	--and select(2,GetTalentRowSelectionInfo(5)) == 14
	and select(2,GetSpellCooldown(498)) &amp;lt; 2 then
	--and IsUsableSpell(115176) 	
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end		
		CastSpellByName(tostring(GetSpellInfo(498),nil))	 			
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDivine Protection - My HP: &amp;quot;..Nova_UnitInfo(&amp;quot;player&amp;quot;))		
		return true		
	elseif PQR_SpellAvailable(642) 
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 20	
	and IsUsableSpell(642) 
	and not UnitBuffID(&amp;quot;player&amp;quot;,498) --Divine Protection
	and select(2,GetSpellCooldown(642)) &amp;lt; 2 then
	--and IsUsableSpell(115203) 	
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end		
		CastSpellByName(tostring(GetSpellInfo(642),nil))	 	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDivine Shield - My HP: &amp;quot;..Nova_UnitInfo(&amp;quot;player&amp;quot;))	
		return true		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Custom Table --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--------------------------------------
-- Adding Players to Custom Table
--------------------------------------

--if Nova_AddCTCheck 	
 --and ( Nova_Mod2() == tonumber(GetCVar(&amp;apos;Nova_PauseRotation&amp;apos;))
 --and GetCVarBool(&amp;apos;Nova_PauseRotation_Enabled&amp;apos;) )
 --and Nova_Mod2() == Nova_AddCT
 if IsLeftShiftKeyDown()
 and IsLeftAltKeyDown()
 and not GetCurrentKeyBoardFocus()
 and UnitExists(&amp;quot;mouseover&amp;quot;)
 and ( CanHeal(&amp;quot;mouseover&amp;quot;) 
  or UnitIsUnit(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) ) then  
	for i=1, #Nova_CustomT do
		if Nova_CustomT[i].GUID and Nova_CustomT[i].GUID == UnitGUID(&amp;quot;mouseover&amp;quot;) then
			return false
		end
	end
	
	table.insert(Nova_CustomT, { GUID = UnitGUID(&amp;quot;mouseover&amp;quot;) } )
	
	if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
		PQR_WriteToChat(&amp;quot;We just added &amp;quot;..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; to the Custom Healing Table.&amp;quot;, &amp;quot;Alert&amp;quot;)
	end
	return true

end


--------------------------------------
-- Removing Players from Custom Table
--------------------------------------

--if Nova_RemoveCTCheck 	
 --and ( Nova_Mod2() == tonumber(GetCVar(&amp;apos;Nova_PauseRotation&amp;apos;))
 --and GetCVarBool(&amp;apos;Nova_PauseRotation_Enabled&amp;apos;) )
 --and Nova_Mod2() == Nova_RemoveCT
if IsLeftShiftKeyDown()
 and IsLeftControlKeyDown() 
 and not GetCurrentKeyBoardFocus()
 and UnitExists(&amp;quot;mouseover&amp;quot;)
 and ( CanHeal(&amp;quot;mouseover&amp;quot;) 
  or UnitIsUnit(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) )then
	for i=1, #Nova_CustomT do
		if Nova_CustomT[i].GUID and Nova_CustomT[i].GUID == UnitGUID(&amp;quot;mouseover&amp;quot;) then
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;We just removed &amp;quot;..UnitName(Nova_CustomT[i].Unit)..&amp;quot; from the Custom Healing Table.&amp;quot;, &amp;quot;Alert&amp;quot;)
			end
			table.remove(Nova_CustomT, i)
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>TsulongHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_NewEventsCheck then	
	local bossCheck = &amp;quot;boss1&amp;quot; 
	
	if UnitExists(bossCheck) then 
		local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16) 	
		local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(bossCheck)         
		if npcID ~= 62442 
		and not UnitDebuff(&amp;quot;player&amp;quot;,GetSpellInfo(122768)) --Dread Shadows
		and not UnitDebuff(&amp;quot;player&amp;quot;,GetSpellInfo(122789)) --Sunbeam
		and not UnitAffectingCombat(&amp;quot;player&amp;quot;) then --Tsulong	
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDebug NPCID: &amp;quot; ..npcID) 
			return false
		end
	end	
	
	if PQR_SpellAvailable(82326)  	
	 and IsUsableSpell(82326) 
	 and IsSpellInRange(GetSpellInfo(82326),&amp;quot;boss1&amp;quot;) == 1
	 and not Nova_Moving then
		if Nova_UnitInfo(&amp;quot;boss1&amp;quot;) &amp;lt; 99 then
			if GetInventoryItemCooldown(10)==0 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			--if select(2,GetInventoryItemCooldown(10)) &amp;lt; 2 then
				UseInventoryItem(10)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGloves Engineer buff!&amp;quot;)			
			end	 				
	
			local prepairBIL = false			
			local BathedInLight = GetSpellInfo(122855) --Sun Breath
 			if (bossCasting == BathedInLight) or (bossCasting == &amp;quot;Sun Breath&amp;quot;) then
 				prepairBIL = true
 			--else
 				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting: &amp;quot;..bossCasting)
 			end
 				
			if PQR_SpellAvailable(86669) 	 
			 and select(2,GetSpellCooldown(86669)) &amp;lt; 2	 
			 and ((UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,GetSpellInfo(122858))) --Bathed in Light buff					 	 
			 	or prepairBIL)
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			 then	 
				 CastSpellByName(tostring(GetSpellInfo(86669)),&amp;quot;boss1&amp;quot;)	
				 --PQR_WriteToChat(&amp;quot;\124cFFFF55FFPop Guardian - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 						 
			end
			
			--WordOfGlory 
			if select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= 3 then
				if IsPlayerSpell(114163) --Eternal Flame - talent check
				and select(2,GetTalentRowSelectionInfo(3)) == 8
				and PQR_SpellAvailable(114163) then
					if select(2, GetSpellCooldown(114163)) == 0
					and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
					--and not UnitBuffID(&amp;quot;boss1&amp;quot;,114163,&amp;quot;player&amp;quot;) 
					then
						CastSpellByName(GetSpellInfo(114163), &amp;quot;boss1&amp;quot;)
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting EternalFlame - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 		
						return true						
					end
				elseif PQR_SpellAvailable(85673) then --WordOfGlory
					 if select(2, GetSpellCooldown(85673)) == 0 
					 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then				
						CastSpellByName(GetSpellInfo(85673), &amp;quot;boss1&amp;quot;)			
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting WordOfGlory - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 		
						return true						
					end
				end
			end

		 	if PQR_SpellAvailable(20473) 	
		 	and IsUsableSpell(20473) 	 			 
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(20473)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyShock Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 
		 		return true
			end	
							 	
		 	if false
		 	 and PQR_SpellAvailable(19750) 		 
			 and IsUsableSpell(19750) 			 
			 and (select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 70 or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,GetSpellInfo(122858))) --Bathed in Light buff					 	 
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(19750)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast FlashOfLight Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 
		 		return true
			end	
			
			if members[1].HP &amp;gt; 30 --Prevent raid wipe
			and lowhpmembers &amp;lt; 10 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 					
				CastSpellByName(tostring(GetSpellInfo(82326)),&amp;quot;boss1&amp;quot;)	 			
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast DivineLight Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;))	 		
		 		return true
			else		
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFNOOOOOOOOOOOOOOOOOT Cast DivineLight Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 	
				return false
			end		
	
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ( Nova_Mod() == tonumber(GetCVar(&amp;apos;Nova_VPauseRotation&amp;apos;))
 and GetCVarBool(&amp;apos;Nova_VPauseRotation_Enabled&amp;apos;) )
 or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) 
 or IsMounted()
 --or UnitBuffID(&amp;quot;player&amp;quot;, 54428) --Divine Plea
 or UnitBuffID(&amp;quot;player&amp;quot;, 104269) then --drink
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Master File --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
 and Nova_CheckLastCast(6, 2) then
	-- If we are in a 5 man instance
	if IsInInstance() and select(2, GetInstanceInfo()) == &amp;quot;party&amp;quot; then
		FirstRun = false
		PQR_SwapRotation(&amp;quot;Party (VachiusaHoly)&amp;quot;)	
	-- If we are in a 10m raid 
	elseif IsInInstance() and select(2, GetInstanceInfo()) == &amp;quot;raid&amp;quot; and (select(3, GetInstanceInfo()) == 3 or select(3, GetInstanceInfo()) == 5) then
		FirstRun = false
		PQR_SwapRotation(&amp;quot;Raid10 (VachiusaHoly)&amp;quot;)
	elseif IsInInstance() and select(2, GetInstanceInfo()) == &amp;quot;raid&amp;quot; and (select(3, GetInstanceInfo()) == 4 or select(3, GetInstanceInfo()) == 6 or select(3, GetInstanceInfo()) == 7 or select(3, GetInstanceInfo()) == 6) then
		FirstRun = false
		PQR_SwapRotation(&amp;quot;Raid25 (VachiusaHoly)&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Master Settings --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not FirstRun 
 and not GetCVarBool(&amp;quot;Nova_OverRide&amp;quot;) then
	FirstRun = true	
	SetCVar(&amp;quot;Nova_VHolyShockAOE&amp;quot;, 85)  
	SetCVar(&amp;quot;Nova_VHolyShockAOELimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VHolyRadiance&amp;quot;, 85)  		
	SetCVar(&amp;quot;Nova_VHolyRadianceLimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VLightOfDawn&amp;quot;, 85)  
	SetCVar(&amp;quot;Nova_VLightOfDawnLimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VDivineFavorLimit&amp;quot;, 4)  
	SetCVar(&amp;quot;Nova_VDivineFavor&amp;quot;, 60)  
	SetCVar(&amp;quot;Nova_VHolyPrism&amp;quot;, 85)  
	SetCVar(&amp;quot;Nova_VHolyPrismLimit&amp;quot;, 2)  	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Party File --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (not IsInInstance() or select(2, GetInstanceInfo()) ~= &amp;quot;party&amp;quot;) and not UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) then
	PQR_SwapRotation(&amp;quot;Master (VachiusaHoly)&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Party Settings --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not FirstRun 
 and not GetCVarBool(&amp;quot;Nova_OverRide&amp;quot;) then
	FirstRun = true	
	SetCVar(&amp;quot;Nova_VHolyShockAOE&amp;quot;, 85)  
	SetCVar(&amp;quot;Nova_VHolyShockAOELimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VHolyRadiance&amp;quot;, 85)  		
	SetCVar(&amp;quot;Nova_VHolyRadianceLimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VLightOfDawn&amp;quot;, 85)  
	SetCVar(&amp;quot;Nova_VLightOfDawnLimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VDivineFavorLimit&amp;quot;, 4)  
	SetCVar(&amp;quot;Nova_VDivineFavor&amp;quot;, 60)  
	SetCVar(&amp;quot;Nova_VHolyPrism&amp;quot;, 85)  
	SetCVar(&amp;quot;Nova_VHolyPrismLimit&amp;quot;, 2) 	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Raid10 File --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (not IsInInstance() or select(2, GetInstanceInfo()) ~= &amp;quot;raid&amp;quot;) 
and (select(3, GetInstanceInfo()) == 4 or select(3, GetInstanceInfo()) == 6 or select(3, GetInstanceInfo()) == 7 or select(3, GetInstanceInfo()) == 6) 
and not UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) then
	PQR_SwapRotation(&amp;quot;Master (VachiusaHoly)&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Raid10 Settings --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not FirstRun 
 and not GetCVarBool(&amp;quot;Nova_OverRide&amp;quot;) then
	FirstRun = true	
	SetCVar(&amp;quot;Nova_VHolyShockAOE&amp;quot;, 80)  
	SetCVar(&amp;quot;Nova_VHolyShockAOELimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VHolyRadiance&amp;quot;, 75)  		
	SetCVar(&amp;quot;Nova_VHolyRadianceLimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VLightOfDawn&amp;quot;, 80)  
	SetCVar(&amp;quot;Nova_VLightOfDawnLimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VDivineFavorLimit&amp;quot;, 8)  
	SetCVar(&amp;quot;Nova_VDivineFavor&amp;quot;, 60)  
	SetCVar(&amp;quot;Nova_VHolyPrism&amp;quot;, 80)  
	SetCVar(&amp;quot;Nova_VHolyPrismLimit&amp;quot;, 3) 	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Raid25 Settings --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not FirstRun 
 and not GetCVarBool(&amp;quot;Nova_OverRide&amp;quot;) then
	FirstRun = true	
	SetCVar(&amp;quot;Nova_VHolyShockAOE&amp;quot;, 80)  
	SetCVar(&amp;quot;Nova_VHolyShockAOELimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VHolyRadiance&amp;quot;, 75)  		
	SetCVar(&amp;quot;Nova_VHolyRadianceLimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VLightOfDawn&amp;quot;, 80)  
	SetCVar(&amp;quot;Nova_VLightOfDawnLimit&amp;quot;, 3)  
	SetCVar(&amp;quot;Nova_VDivineFavorLimit&amp;quot;, 16)  
	SetCVar(&amp;quot;Nova_VDivineFavor&amp;quot;, 60)  
	SetCVar(&amp;quot;Nova_VHolyPrism&amp;quot;, 80)  
	SetCVar(&amp;quot;Nova_VHolyPrismLimit&amp;quot;, 4) 	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Raid25 File --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (not IsInInstance() or select(2, GetInstanceInfo()) ~= &amp;quot;raid&amp;quot;) 
and (select(3, GetInstanceInfo()) == 3 or select(3, GetInstanceInfo()) == 5)
and not UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) then
	PQR_SwapRotation(&amp;quot;Master (VachiusaHoly)&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyLight</Name><Default>false</Default><SpellID>635</SpellID><Actions></Actions><Lua>--HolyLight
--Infusion of Light support
if Nova_VHolyLightCheck then
	if PQR_SpellAvailable(635) 
	 and members[1].HP &amp;lt; Nova_VHolyLight	 
	 and lowhpmembers &amp;lt; 3
	 --and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and IsUsableSpell(635) 
	 and not Nova_Moving 
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	 and CanHeal(members[1].Unit)
	 and IsSpellInRange(GetSpellInfo(635),members[1].Unit) == 1 
	 and not stopcasting then	
		PQR_CustomTarget = members[1].Unit					
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting HolyLight - HP: &amp;quot; ..members[1].HP) 
		return true
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyShockDmg</Name><Default>false</Default><SpellID>20473</SpellID><Actions></Actions><Lua>--HolyShockDmg
if Nova_VDPSCheck then
	if #VDaybreak &amp;lt; 1 then
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and members[1].HP &amp;gt;= Nova_VDPS	
		and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_VLowMana
		and PQR_SpellAvailable(20473) 
		and UnitExists(&amp;quot;target&amp;quot;)
		--and PQR_UnitFacing(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) --Elegon not work
		and IsSpellInRange(GetSpellInfo(20473),&amp;quot;target&amp;quot;) == 1
		and GetSpellCooldown(20473) == 0
		--and select(5, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 3
		--and select(2,GetSpellCooldown(8921)) &amp;lt; 2
		and IsUsableSpell(20473)
		and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
		and not UnitBuffID(&amp;quot;player&amp;quot;, 88819) --Daybreak
		and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
		and not LineOfSight(&amp;quot;target&amp;quot;)
		--and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) 
		--and VUnitFacingCheck(Nova_VAutoFollowCheck)
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			return true 
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyShock</Name><Default>false</Default><SpellID>20473</SpellID><Actions></Actions><Lua>--HolyShock
if Nova_VHolyShockCheck then
	--if #VDaybreak &amp;lt; 1 then
		if PQR_SpellAvailable(20473) 		 
		and (members[1].HP &amp;lt; Nova_VHolyShock
		or ((not UnitExists(&amp;quot;target&amp;quot;) or 
		(UnitExists(&amp;quot;target&amp;quot;) and
		(UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
		or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
		or not Nova_VDPSCheck 
		or not UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;)
		or IsSpellInRange(GetSpellInfo(20473),&amp;quot;target&amp;quot;) == 0
		or PQR_IsOutOfSight(&amp;quot;target&amp;quot;)))) and members[1].HP &amp;lt;= 100))
		 --and lowhpmembers &amp;lt; 3
		 --and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		 --and not UnitBuffID(&amp;quot;player&amp;quot;, 88819) --Daybreak
		 and IsUsableSpell(20473) 	 
		 and CanHeal(members[1].Unit)
		 and IsSpellInRange(GetSpellInfo(20473),members[1].Unit) == 1 
		 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
			PQR_CustomTarget = members[1].Unit					
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting HolyShock - HP: &amp;quot; ..members[1].HP) 
			return true
		end
	--end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>WordOfGlory</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--WordOfGlory 
if Nova_VWordOfGloryCheck 
--and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and (select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= 3 or UnitBuffID(&amp;quot;player&amp;quot;,90174)) then
	if IsPlayerSpell(114163) --Eternal Flame - talent check
	and select(2,GetTalentRowSelectionInfo(3)) == 8
	and PQR_SpellAvailable(114163) then
		if select(2, GetSpellCooldown(114163)) == 0 then
			if members[1].HP &amp;lt; Nova_VWordOfGlory 
			and lowhpmembers &amp;lt; 3
			--and not UnitBuffID(members[1].HP,114163)
			and CanHeal(members[1].Unit)
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	 		and IsSpellInRange(GetSpellInfo(85673),members[1].Unit) == 1 then	
				CastSpellByName(GetSpellInfo(114163), members[1].Unit)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting EternalFlame - HP: &amp;quot; ..members[1].HP) 
				return true
			end
		end
	elseif PQR_SpellAvailable(85673) then --WordOfGlory
		 if select(2, GetSpellCooldown(85673)) == 0 then
			 if members[1].HP &amp;lt; Nova_VWordOfGlory	 
		 	 and lowhpmembers &amp;lt; 3 
			 and CanHeal(members[1].Unit)
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			 and IsSpellInRange(GetSpellInfo(85673),members[1].Unit) == 1 then	
				CastSpellByName(GetSpellInfo(85673), members[1].Unit)			
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting WordOfGlory - HP: &amp;quot; ..members[1].HP) 
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>LightOfDawnSmart</Name><Default>false</Default><SpellID>85222</SpellID><Actions></Actions><Lua>if Nova_VLightOfDawnCheck then
	--if Nova_VSmartCheck then
		if PQR_SpellAvailable(85222) 
		--and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and (select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= 3 or UnitBuffID(&amp;quot;player&amp;quot;,90174)) 
		and not LLdebuff then		 		 				
		 	if AverageHealth(Nova_VLightOfDawnLimit) &amp;lt;= Nova_VLightOfDawn then		
		 		 	
				local real_b = 0
				if #members &amp;gt; 1 then
					for i=1,#members do		
						if PQR_UnitDistance(&amp;quot;player&amp;quot;,members[i].Unit) and members[i].HP then
							if PQR_UnitDistance(&amp;quot;player&amp;quot;,members[i].Unit) &amp;lt;= 30 
							and not UnitIsUnit(&amp;quot;player&amp;quot;,members[i].Unit) 
							and members[i].HP &amp;lt;= Nova_VLightOfDawn then
								real_b = real_b + 1					
								if real_b &amp;gt;= Nova_VLightOfDawnLimit then
									break
								end									
							end
						end
					end

					if real_b &amp;gt;= Nova_VLightOfDawnLimit 
					and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
						--CastSpellByName(tostring(GetSpellInfo(85222),nil))
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast LightOfDawn - PD: &amp;quot;..prdistance[1].PD) 
						return true					
					end
				end	
			end
		end
	--end
end

--Debug
--if not PQR_UnitDistance(&amp;quot;player&amp;quot;,members[1].Unit) and UnitInRange(members[1].Unit) then
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFPQR_UnitDistance not work&amp;quot;) 
--end
--if #members == 0 or not #members then
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFmembers not work&amp;quot;) 
--end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DivineLight</Name><Default>false</Default><SpellID>82326</SpellID><Actions></Actions><Lua>--DivineLight
--Infusion of Light support
if Nova_VDivineLightCheck then
	if PQR_SpellAvailable(82326) 
	 and IsSpellInRange(GetSpellInfo(82326),members[1].Unit) == 1
	 and CanHeal(members[1].Unit)
	 and IsUsableSpell(82326) 	 
	 and not Nova_Moving 
	 and not stopcasting then
		if members[1].HP &amp;lt;= Nova_VDivineLight and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_VLowMana 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
		 	PQR_CustomTarget = members[1].Unit
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>FlashOfLight</Name><Default>false</Default><SpellID>19750</SpellID><Actions></Actions><Lua>--FlashOfLight
if Nova_VFlashOfLightCheck then
	if PQR_SpellAvailable(19750) 
	 --and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and IsSpellInRange(GetSpellInfo(19750),members[1].Unit) == 1
	 and CanHeal(members[1].Unit)
	 and IsUsableSpell(19750)	 	 
	 and not Nova_Moving 
	 and not stopcasting then
		if members[1].HP &amp;lt;= Nova_VFlashOfLight and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_VLowMana 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
		 	PQR_CustomTarget = members[1].Unit
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>BeaconOfLight</Name><Default>false</Default><SpellID>53563</SpellID><Actions></Actions><Lua>--BeaconOfLight
if not GlyphCheck(63218) then
	local CBeaconOfLight = false

	for i=1, #members do	
		if (UnitBuffID(members[i].Unit, 53563, &amp;quot;PLAYER&amp;quot;)
		--and select(7, UnitBuffID(members[i].Unit, 53563, &amp;quot;PLAYER&amp;quot;)) - GetTime() &amp;gt; 1 
		and UnitThreatSituation(members[i].Unit) == 3)
		or UnitBuffID(&amp;quot;boss1&amp;quot;, 53563)
		then
			CBeaconOfLight = true
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight on: &amp;quot;..UnitName(members[i].Unit))
		end
	end
	
	if not CBeaconOfLight
	and PQR_SpellAvailable(53563) 
	--and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 	
	then
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			 
				 and CanHeal(Nova_Tanks[i].Unit)
				 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
				 and GetSpellCooldown(53563) == 0 
				 and IsSpellInRange(GetSpellInfo(53563),Nova_Tanks[i].Unit) == 1 then
						PQR_CustomTarget = Nova_Tanks[i].Unit
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight tank!&amp;quot;)	
						return true							
				end
			end
		end
		
		if UnitThreatSituation(members[1].Unit) == 3	 
		 and members[1].HP &amp;lt; Nova_VBeaconOfLight --30 
		 --and UnitIsPlayer(members[1].Unit)
		 --and not UnitIsUnit(members[1].Unit, &amp;quot;player&amp;quot;)
		 and CanHeal(members[1].Unit)
		 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
		 and GetSpellCooldown(53563) == 0 
		 and IsSpellInRange(GetSpellInfo(53563),members[1].Unit) == 1 then
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight high threat member: &amp;quot;..UnitName(members[1].Unit))	
		 	return true
		end
	end
else
	if not UnitBuffID(members[1].Unit, 53563, &amp;quot;PLAYER&amp;quot;)
	and not UnitBuffID(members[1].Unit, 20925, &amp;quot;PLAYER&amp;quot;)
	and IsSpellInRange(GetSpellInfo(53563),members[1].Unit) == 1
	and UnitIsPlayer(members[1].Unit)
	and CanHeal(members[1].Unit)
	and GetSpellCooldown(53563) == 0 	
	--and not PQR_IsOutOfSight(members[1].Unit)
	then		
		if members[1].HP &amp;lt;= 90 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			--CastSpellByName(tostring(GetSpellInfo(53563)),members[1].Unit)
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight: &amp;quot;..UnitName(members[1].Unit))	
			PQR_CustomTarget = members[1].Unit
			return true
		end
	end	 
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>SealOfInsight</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--SealOfInsight
if GetShapeshiftForm() ~= 3 
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	CastShapeshiftForm(3)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyRadianceSmart</Name><Default>false</Default><SpellID>82327</SpellID><Actions></Actions><Lua>--HolyRadianceSmart
--Infusion of Light support
if Nova_VHolyRadianceCheck then
	--if Nova_VSmartCheck then		
		if PQR_SpellAvailable(82327) 		 
		and IsUsableSpell(82327) 
		--and not UnitBuffID(&amp;quot;player&amp;quot;, 88819) --Daybreak
		--and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_VLowMana
		--and Nova_CheckLastCast(82327, 1.0)		
		and not Nova_Moving 
		and not stopcasting then
			if #VDaybreak &amp;lt; 1 
			or (select(2,GetSpellCooldown(20473)) &amp;gt; 2 --If you dont wanna spam HolyRadianceSmart and wait for daybreak face-out, comment out this line
				and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_VLowMana) then
				if AverageHealth(Nova_VHolyRadianceLimit) &amp;lt;= Nova_VHolyRadiance then		
					PRGetDistanceTable((Nova_VHolyRadiance+10), 10, (Nova_VHolyRadianceLimit-1))	
					PRGetDistanceTablebyHP(Nova_VHolyRadiance,(Nova_VHolyRadianceLimit-1))								
					if IsSpellInRange(GetSpellInfo(82327),prdistancebyhp[1].Unit) 
					and CanHeal(prdistancebyhp[1].Unit)
					and (prdistancebyhp[1].PD &amp;gt;= (Nova_VHolyRadianceLimit-1))
					and prdistancebyhp[1].HP &amp;lt;= Nova_VHolyRadiance 
					and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
						table.wipe(VDaybreak)
						VDaybreak = { }						
						--CastSpellByName(tostring(GetSpellInfo(82327)),prdistancebyhp[1].Unit)
						table.insert(VDaybreak, { VDBUnit = prdistancebyhp[1].Unit, VDBCastTime = GetTime(), VDBHP = prdistancebyhp[1].HP, VDBPD = prdistancebyhp[1].PD  } )					
						PQR_CustomTarget = prdistancebyhp[1].Unit
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyRadiance - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 
						return true				
					end				
				end
			else
				if ((GetTime() - VDaybreak[1].VDBCastTime) &amp;gt;= 5) then
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFClear VDaybreak 1&amp;quot;)							
					table.wipe(VDaybreak)
					VDaybreak = { }					
					return true	
				end							
			end
		end
	--end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>GuardianOfAncientKings</Name><Default>false</Default><SpellID>86669</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(86669) 
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and Nova_VGuardianOfAncientKingsCheck then
 	if members[1].HP &amp;lt; Nova_VGuardianOfAncientKings then
 		if not UnitBuffID(&amp;apos;player&amp;apos;, 31842) --Divine Favor
 		 and UnitIsPlayer(members[1].Unit)
 		 and not UnitBuffID(&amp;apos;player&amp;apos;, 31884) then --Avenging Wrath
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	 		 
 		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGuardianOfAncientKings - HP: &amp;quot;..members[1].HP)
 		 	return true
 		end
 	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HandOfSacrifice</Name><Default>false</Default><SpellID>6940</SpellID><Actions></Actions><Lua>if Nova_VHandOfSacrificeCheck then
	if PQR_SpellAvailable(6940) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(2,GetSpellCooldown(6940)) &amp;lt; 2
	 --and GetSpellCooldown(6940) == 0
	 and UnitThreatSituation(members[1].Unit) == 3
	 and IsUsableSpell(6940)
	 and not UnitBuffID(members[1].Unit, 6940) --HandOfSacrifice
	 and not UnitBuffID(members[1].Unit, 1022) --HandOfProtection
	 and not UnitBuffID(members[1].Unit, 1044) --HandOfFreedom
	 and not UnitBuffID(members[1].Unit, 1038) --HandOfSalvation
	 and UnitIsPlayer(members[1].Unit)
	 and CanHeal(members[1].Unit)
	 and IsSpellInRange(GetSpellInfo(6940),members[1].Unit) == 1 then
		if members[1].HP &amp;lt; Nova_VHandOfSacrifice and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;gt;= 95 then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHandOfSacrifice - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>LayOnHands</Name><Default>false</Default><SpellID>633</SpellID><Actions></Actions><Lua>if Nova_VLayOnHandsCheck then
	if PQR_SpellAvailable(633) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(2,GetSpellCooldown(633)) &amp;lt; 2
	 --and GetSpellCooldown(633) == 0
	 and UnitThreatSituation(members[1].Unit) == 3	 
	 and CanHeal(members[1].Unit)
	 and UnitIsPlayer(members[1].Unit)
	 and not UnitBuffID(&amp;apos;player&amp;apos;, 6940) --Hand of Sacrifice
	 and IsSpellInRange(GetSpellInfo(633),members[1].Unit) == 1 then
		if members[1].HP &amp;lt; Nova_VLayOnHands then
		--and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;gt;= 95 then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLayOnHands - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		elseif select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= Nova_VLowMana
		and Nova_VManaLayOnHandsCheck
		and members[1].HP &amp;gt;= 80
		and lowhpmembers &amp;lt; 3 then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end			
			PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLayOnHands for mana - HP: &amp;quot; ..members[1].HP) 		
		 	return true			
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DivineFavor (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DivineFavor (TC)
if (Nova_VMDivineFavorCheck and Nova_Mod() == Nova_VMDivineFavor)
or (Nova_VDivineFavorAutoCheck and AverageHealth(Nova_VDivineFavorLimit) &amp;lt;= Nova_VDivineFavor and not UnitBuffID(&amp;quot;player&amp;quot;, 31884) and not UnitBuffID(&amp;quot;player&amp;quot;, 31821)) then
	if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	--and IsSpellKnown(31842) 
	and PQR_SpellAvailable(31842)	
	--and select(2,GetTalentRowSelectionInfo(4)) == 11	
	and GetSpellCooldown(31842) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(31842),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Alt Key Down - DivineFavor!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AvengingWrath (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--AvengingWrath (TC)
if (Nova_VMAvengingWrathCheck and Nova_Mod() == Nova_VMAvengingWrath)
or (Nova_VAvengingWrathAutoCheck and AverageHealth(Nova_VDivineFavorLimit) &amp;lt;= Nova_VDivineFavor and not UnitBuffID(&amp;quot;player&amp;quot;, 31842) and not UnitBuffID(&amp;quot;player&amp;quot;, 31821)) then
	if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	--and IsSpellKnown(31884) 
	and PQR_SpellAvailable(31884)		
	--and select(2,GetTalentRowSelectionInfo(4)) == 11	
	and GetSpellCooldown(31884) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(31884),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Shift Key Down - AvengingWrath!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DevotionAura (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DevotionAura (TC)
if (Nova_VMDevotionAuraCheck and Nova_Mod() == Nova_VMDevotionAura)
or (Nova_VDevotionAuraAutoCheck and AverageHealth(Nova_VDivineFavorLimit) &amp;lt;= Nova_VDivineFavor and not UnitBuffID(&amp;quot;player&amp;quot;, 31842) and not UnitBuffID(&amp;quot;player&amp;quot;, 31884)) then
	if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	--and IsSpellKnown(31821) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(31821)	
	--and select(2,GetTalentRowSelectionInfo(4)) == 11	
	and GetSpellCooldown(31821) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(31821),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Control Key Down - DevotionAura!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyShockSmart</Name><Default>false</Default><SpellID>20473</SpellID><Actions></Actions><Lua>--HolyShockSmart
if not VDaybreak then
	VDaybreak = { }
end
		
if Nova_VHolyShockAOECheck then	
	if #VDaybreak &amp;gt; 0 then
		if PQR_SpellAvailable(20473) 
		--and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_VLowMana
		and IsUsableSpell(20473)		 
		and AverageHealth(Nova_VHolyShockAOELimit) &amp;lt;= Nova_VHolyShockAOE
		and UnitBuffID(&amp;quot;player&amp;quot;, 88819) --Daybreak
		--and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		and select(2,GetSpellCooldown(20473)) &amp;lt; 2 
		and not LLdebuff then
			PRGetDistanceTable((Nova_VHolyShockAOE+10), 10, (Nova_VHolyShockAOELimit-1)) 
			PRGetDistanceTablebyHP(Nova_VHolyShockAOE,(Nova_VHolyShockAOELimit-1))					
			
			if (prdistancebyhp[1].PD &amp;gt;= (Nova_VHolyShockAOELimit-1))
			and prdistancebyhp[1].HP &amp;lt;= Nova_VHolyShockAOE 
			and IsSpellInRange(GetSpellInfo(20473),prdistancebyhp[1].Unit) 
			and CanHeal(prdistancebyhp[1].Unit)
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			then	
				--CastSpellByName(tostring(GetSpellInfo(20473)),prdistance[1].Unit)
				PQR_CustomTarget = prdistancebyhp[1].Unit
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyShockAOE1 - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 
				return true							
			end				
		end
			
		if ((GetTime() - VDaybreak[1].VDBCastTime) &amp;gt;= 5) then							
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFClear VDaybreak 2&amp;quot;)							
			table.wipe(VDaybreak)
			VDaybreak = { }
			return true				
		end		
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DivinePlea</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DivinePlea
if GlyphCheck(63223) 
and stopcasting then
	local dpstopcasting = true
end

if Nova_VDivinePleaCheck then	
	if ((select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= Nova_VDivinePlea
	and lowhpmembers &amp;lt; 3
	and members[1].HP &amp;gt;= 70) 
	or select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 10)
	and GetSpellCooldown(118730) == 0	
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and not Nova_Moving
	and PQR_SpellAvailable(54428) 
	and not dpstopcasting then	
		CastSpellByName(tostring(GetSpellInfo(54428),nil))	--or 118730
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDivinePlea!&amp;quot;)	
		return true 
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>LightsHammer (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--LightsHammer (TC)
if select(2,GetTalentRowSelectionInfo(6)) == 17 then
	if Nova_VTalent90Check and Nova_Mod() == Nova_VTalent90 then
		if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		--and IsSpellKnown(114158) 
		and PQR_SpellAvailable(114158)		 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		--and GetSpellCooldown(114158) == 0 then
		  CastSpellByName(tostring(GetSpellInfo(114158),nil))	
		   if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  	   
		  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFLeft Control Key Down - LightsHammer!&amp;quot;)
		  return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Cleanse</Name><Default>false</Default><SpellID>4987</SpellID><Actions></Actions><Lua>if Nova_VDispelRaidCheck then	
	if Nova_Mod() == Nova_VDispelRaid
	and PQR_SpellAvailable(4987)
	and select(2,GetSpellCooldown(4987)) &amp;lt; 2
	--and IsLeftAltKeyDown() 
	--and not IsLeftShiftKeyDown() 
	--and not GetCurrentKeyBoardFocus() 
	and IsUsableSpell(4987)	
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		if members[1].HP &amp;gt;= Nova_VCleanse then
			for i=1, #members do
				if ValidDispel(members[i].Unit) 
				and CanHeal(members[i].Unit)
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
				and IsSpellInRange(GetSpellInfo(4987),members[i].Unit) == 1 then
					PQR_CustomTarget = members[i].Unit
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLeft alt key down - Auto dispeled!&amp;quot;)
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CleanseMouseover</Name><Default>false</Default><SpellID>4987</SpellID><Actions></Actions><Lua>--CleanseMouseover
if Nova_VDispelRaidCheck then	
	if Nova_Mod() == Nova_VDispelRaid then
		if PQR_SpellAvailable(4987) 
		and select(2,GetSpellCooldown(4987)) &amp;lt; 2
		and UnitExists(&amp;quot;mouseover&amp;quot;)
		and IsUsableSpell(4987)
		and IsSpellInRange(GetSpellInfo(4987),&amp;quot;mouseover&amp;quot;) == 1
		and UnitIsFriend(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;)
		and CanHeal(&amp;quot;mouseover&amp;quot;)
		then
			if ValidDispel(&amp;quot;mouseover&amp;quot;) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then		
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto dispeled!&amp;quot;)
				return true	
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CrusaderStrike</Name><Default>false</Default><SpellID>35395</SpellID><Actions></Actions><Lua>--CrusaderStrike
if Nova_VDPSCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and members[1].HP &amp;gt;= Nova_VDPS	
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 80
	and PQR_SpellAvailable(35395) 
	and UnitExists(&amp;quot;target&amp;quot;)
	--and PQR_UnitFacing(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) --Elegon not work
	and IsSpellInRange(GetSpellInfo(35395),&amp;quot;target&amp;quot;) == 1
	and GetSpellCooldown(35395) == 0
	and select(5, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 3
	--and select(2,GetSpellCooldown(35395)) &amp;lt; 2
	and IsUsableSpell(35395)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and not LineOfSight(&amp;quot;target&amp;quot;)
	--and VUnitFacingCheck(Nova_VAutoFollowCheck)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
		return true 
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>BlessingBuff</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--BlessingBuff
if not UnitBuffID(&amp;quot;player&amp;quot;,1126)
and not UnitBuffID(&amp;quot;player&amp;quot;,19740)
and not UnitBuffID(&amp;quot;player&amp;quot;,20217)
and not UnitBuffID(&amp;quot;player&amp;quot;,90363)
and not UnitBuffID(&amp;quot;player&amp;quot;,115921) 
and PQR_SpellAvailable(20217)
and IsUsableSpell(20217) 
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
then
	CastSpellByName(tostring(GetSpellInfo(20217)),&amp;quot;player&amp;quot;)
	return true
elseif (UnitBuffID(&amp;quot;player&amp;quot;,1126)
--or UnitBuffID(&amp;quot;player&amp;quot;,20217)
or UnitBuffID(&amp;quot;player&amp;quot;,90363)
or UnitBuffID(&amp;quot;player&amp;quot;,115921))
and not UnitBuffID(&amp;quot;player&amp;quot;,19740)
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
and PQR_SpellAvailable(19740)
and IsUsableSpell(19740) then
	CastSpellByName(tostring(GetSpellInfo(19740)),&amp;quot;player&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>SacredShield</Name><Default>false</Default><SpellID>20925</SpellID><Actions></Actions><Lua>--SacredShield
if IsPlayerSpell(20925) --SacredShield - talent check
and select(2,GetTalentRowSelectionInfo(3)) == 9 then
	local CSacredShield = false
	
	for i=1, #members do	
		if (UnitBuffID(members[i].Unit, 20925, &amp;quot;PLAYER&amp;quot;)
		--and select(7, UnitBuffID(members[i].Unit, 20925, &amp;quot;PLAYER&amp;quot;)) - GetTime() &amp;gt; 1 
		and UnitThreatSituation(members[i].Unit) == 3)
		or UnitBuffID(&amp;quot;boss1&amp;quot;, 20925)
		then
			CSacredShield = true
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSacredShield on: &amp;quot;..UnitName(members[i].Unit))
		end
	end
	
	if not CSacredShield
	and PQR_SpellAvailable(20925) 
	--and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
	then
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			 
				 and CanHeal(Nova_Tanks[i].Unit)
				 and not UnitBuffID(Nova_Tanks[i].Unit, 20925, &amp;quot;PLAYER&amp;quot;)
				 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
				 and IsSpellInRange(GetSpellInfo(20925),Nova_Tanks[i].Unit) == 1 then
				 	if #Nova_Tanks &amp;gt;= 2 
				 	and not UnitBuffID(Nova_Tanks[i].Unit, 53563, &amp;quot;PLAYER&amp;quot;) 
				 	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then --Beacon
						PQR_CustomTarget = Nova_Tanks[i].Unit
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSacredShield tank!&amp;quot;)	
						return true							
					else 
						PQR_CustomTarget = Nova_Tanks[i].Unit
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSacredShield tank!&amp;quot;)	
						return true						
					end
				end
			end
		end
		
		if UnitThreatSituation(members[1].Unit) == 3	 
		 and members[1].HP &amp;lt; Nova_VSacredShield --30 
		 --and not UnitIsUnit(members[1].Unit, &amp;quot;player&amp;quot;)
		 and CanHeal(members[1].Unit)
		 and UnitIsPlayer(members[1].Unit)
		 and not UnitBuffID(members[1].Unit, 53563, &amp;quot;PLAYER&amp;quot;) --Beacon
		 and not UnitBuffID(members[1].Unit, 20925, &amp;quot;PLAYER&amp;quot;)
		 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
		 and IsSpellInRange(GetSpellInfo(20925),members[1].Unit) == 1 then
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSacredShield high threat member!&amp;quot;)	
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyPrismSmart</Name><Default>false</Default><SpellID>114165</SpellID><Actions></Actions><Lua>--HolyPrismSmart
if select(2,GetTalentRowSelectionInfo(6)) == 16 then
	if (Nova_VTalent90Check and Nova_Mod() == Nova_VTalent90)
	or (Nova_VHolyPrismAutoCheck and AverageHealth(Nova_VHolyPrismLimit) &amp;lt;= Nova_VHolyPrism) then
		--if Nova_VSmartCheck then
			if PQR_SpellAvailable(114165) 
			and UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsUsableSpell(114165) 
			and GetSpellCooldown(114165) == 0
			--and VUnitFacingCheck(Nova_VAutoFollowCheck)	 
			and not LLdebuff 
			then	
				local bossCheck,bossid = bossid()	 		 				
			 	if UnitExists(bossCheck) 
			 	or UnitExists(&amp;quot;target&amp;quot;) then				 		
			 		if Nova_Mod() == Nova_VTalent90 then			 			
			 			if UnitExists(&amp;quot;target&amp;quot;) then
			 				bossCheck = &amp;quot;target&amp;quot;
			 			end						
						if IsSpellInRange(GetSpellInfo(114165),bossCheck) == 1						
						and not PQR_IsOutOfSight(bossCheck)
						and not UnitIsDeadOrGhost(bossCheck)
						and (UnitCanAttack(&amp;quot;player&amp;quot;, bossCheck) 
							or UnitCanCooperate(&amp;quot;player&amp;quot;,bossCheck)) 
						and not LineOfSight(bossCheck)
						and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
							PQR_CustomTarget = bossCheck
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyPrism on target: &amp;quot;..UnitName(bossCheck)) 	
							return true	
						end
					else			 
						if UnitExists(&amp;quot;target&amp;quot;) then
			 				bossCheck = &amp;quot;target&amp;quot;
			 			end
			 			
			 			if IsSpellInRange(GetSpellInfo(114165),bossCheck) == 1						
						and not PQR_IsOutOfSight(bossCheck)
						and not LineOfSight(bossCheck)
						and not UnitIsDeadOrGhost(bossCheck) then							
							if UnitCanAttack(&amp;quot;player&amp;quot;, bossCheck) then
								local targetrangecheck = 15
								if IsBoss(bossCheck) then									
									targetrangecheck = 20								
								end
								local real_b = 0
								if #members &amp;gt; 1 then
									for i=1,#members do		
										if PQR_UnitDistance(bossCheck,members[i].Unit) and members[i].HP then
											if PQR_UnitDistance(bossCheck,members[i].Unit) &amp;lt;= targetrangecheck 							
											and members[i].HP &amp;lt;= Nova_VHolyPrism then
												real_b = real_b + 1					
												if real_b &amp;gt;= Nova_VHolyPrismLimit then
													break
												end									
											end
										end
									end
									if real_b &amp;gt;= Nova_VHolyPrismLimit 
									and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
										--CastSpellByName(tostring(GetSpellInfo(114165)),bossCheck)
										PQR_CustomTarget = bossCheck
										--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyPrism - PD: &amp;quot;..real_b) 
										return true					
									end
								end								
							end
						end
					end
				end			
			end
		--end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HandOfProtection</Name><Default>false</Default><SpellID>1022</SpellID><Actions></Actions><Lua>if Nova_VHandOfProtectionCheck then
	if PQR_SpellAvailable(1022) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)	 
	 and select(2,GetSpellCooldown(1022)) &amp;lt; 2
	 --and GetSpellCooldown(1022) == 0
	 and UnitThreatSituation(members[1].Unit) == 3
	 and UnitGroupRolesAssigned(members[1].Unit) ~= &amp;quot;TANK&amp;quot;
	 and UnitIsPlayer(members[1].Unit)
	 and IsUsableSpell(1022)
	 and not UnitBuffID(members[1].Unit, 6940) --HandOfSacrifice
	 and not UnitBuffID(members[1].Unit, 1022) --HandOfProtection
	 and not UnitBuffID(members[1].Unit, 1044) --HandOfFreedom
	 and not UnitBuffID(members[1].Unit, 1038) --HandOfSalvation
	 and not UnitDebuffID(members[1].Unit, 25771) --Forbearance
	 and CanHeal(members[1].Unit)
	 and IsSpellInRange(GetSpellInfo(1022),members[1].Unit) == 1 
	 and not stopfade then
		if members[1].HP &amp;lt; Nova_VHandOfProtection then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHandOfProtection - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HandOfSalvation</Name><Default>false</Default><SpellID>1038</SpellID><Actions></Actions><Lua>if Nova_VHandOfSalvationCheck then
	if PQR_SpellAvailable(1038) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(2,GetSpellCooldown(1038)) &amp;lt; 2
	 --and GetSpellCooldown(1038) == 0
	 and UnitThreatSituation(members[1].Unit) == 3
	 and UnitGroupRolesAssigned(members[1].Unit) ~= &amp;quot;TANK&amp;quot;
	 and UnitIsPlayer(members[1].Unit)
	 and IsUsableSpell(1038)
	 and not UnitBuffID(members[1].Unit, 6940) --HandOfSacrifice
	 and not UnitBuffID(members[1].Unit, 1022) --HandOfProtection
	 and not UnitBuffID(members[1].Unit, 1044) --HandOfFreedom
	 and not UnitBuffID(members[1].Unit, 1038) --HandOfSalvation
	 --and not UnitDebuffID(members[1].Unit, 25771) --Forbearance
	 and CanHeal(members[1].Unit)
	 and IsSpellInRange(GetSpellInfo(1038),members[1].Unit) == 1 
	 and not stopfade then
		if members[1].HP &amp;lt; Nova_VHandOfSalvation then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHandOfSalvation - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>BresAndRes</Name><Default>false</Default><SpellID>4987</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;mouseover&amp;quot;) 
and IsPlayerSpell(110501) 
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
and UnitCanCooperate(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;)    
and IsSpellInRange(GetSpellInfo(110501),&amp;quot;mouseover&amp;quot;) == 1
and GetSpellCooldown(110501) == 0 
and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;)
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	CastSpellByName(tostring(GetSpellInfo(110501)),&amp;quot;mouseover&amp;quot;)	--Rebirth Symbiosis
	return false	
elseif not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
and UnitInRange(&amp;quot;mouseover&amp;quot;) 
and UnitIsConnected(&amp;quot;mouseover&amp;quot;)
and UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) 			
and UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
and not Nova_Moving
and not UnitHasIncomingResurrection(&amp;quot;mouseover&amp;quot;) 
then
	if PQR_SpellAvailable(83968) 		
	and not UnitDebuff(&amp;quot;mouseover&amp;quot;, GetSpellInfo(95223)) ----Mass Resurrection debuff
	--and (IsSpellInRange(GetSpellInfo(83968),&amp;quot;mouseover&amp;quot;) == 1) - not work?
	--and UnitInRange(&amp;quot;mouseover&amp;quot;) 
	and Nova_CheckLastCast(83968, 2.0)		
	then
		if IsInRaid() then
				group = &amp;quot;raid&amp;quot;
		elseif IsInGroup() then
				group = &amp;quot;party&amp;quot;
		end
		local deadnum = 0
		if group then
			for i = 1, GetNumGroupMembers() do 
				local member = group..i
				if UnitIsDeadOrGhost(member) then
					if not UnitDebuff(member, GetSpellInfo(95223)) then ----Mass Resurrection debuff 
						deadnum = deadnum + 1
					end
				end
			end
		end		
		if deadnum &amp;gt;= 2 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(83968),nil)) --Mass Resurrection	 
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto MasRes!&amp;quot;)
			return false		
		end
	end
	
	if PQR_SpellAvailable(7328)
	and IsUsableSpell(7328) 		
	and Nova_CheckLastCast(7328, 2.0)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 	
	and (IsSpellInRange(GetSpellInfo(7328),&amp;quot;mouseover&amp;quot;) == 1) 		
	and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;) then 
		CastSpellByName(tostring(GetSpellInfo(7328)),&amp;quot;mouseover&amp;quot;) --Resurrection	 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto Res!&amp;quot;)
		return false			
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Drink</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;lt;= 50
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
and not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
--and GetItemCount(80618,false,true) &amp;gt; 0	
and PQR_SpellAvailable(80618) --Mage cookies	
and not UnitBuffID(&amp;quot;player&amp;quot;, 104269)
and not Nova_Moving 
and GetItemCooldown(80618) == 0 then
	UseItemByName(80618)
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMage cookies - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- NewEvents</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_NewEventsCheck then
	local boss,bossid = bossid()
	local dispelid = 4987		
	local buff = { }
	stopcasting = false
	stopfade = false
	LLdebuff = false
	LLdebuffunit = false	
	if UnitExists(boss) then
		local _, _, rdifficulty = GetInstanceInfo()
		--TFT raid		
		if bossid == 69465 and (rdifficulty == 5 or rdifficulty ==6) then --Jin&amp;apos;rokh the Breaker
			local buff = { 138732 } --Ionization 
			local fluiditydebuff  = 138002 --Fluidity
			RaidJBDispel(dispelid,buff,fluiditydebuff,5)
		elseif bossid == 68905 or bossid == 68904 then --Lu&amp;apos;lin 68905, Suen 68904 - Twin Consorts
			local buff  = { 137360 } --Corrupted Healing
			LLdebuff,LLdebuffunit = RaidLLDispel(buff) 
			if LLdebuff
			and UnitBuffID(LLdebuffunit, 53563, &amp;quot;PLAYER&amp;quot;) 
			and PQR_SpellAvailable(53563) then
				CastSpellByName(tostring(GetSpellInfo(53563)),&amp;quot;player&amp;quot;)	
				return true
			end			
		elseif bossid == 69134 or bossid == 69131 or bossid == 69078 or bossid == 69132 then --Council of Elders
			local buff  = { 136878, 136857 } 	
			RaidDispel(dispelid,buff) 	
		elseif bossid == 68476 then --Horridon
			--local buff  = { 136708, 136719, 136587, 136710, 136512 } --Magic, Magic, Poison, Disease, Curse
			local buff  = { 136708, 136719, 136587, 136710 }
			RaidDispel(dispelid,buff) 
		elseif bossid == 68065 or bossid == 70212 or bossid == 70235 or bossid == 70247 then --Flaming Head 
		-- Players affected by  Cinders should be quick to run over any existing  Icy Ground void zones, and then move to a safe location (out of the way of the raid) to be dispelled.		
			local buff  = { 139822 } 	
			RaidRangeDispel(dispelid,buff,10) 		
		elseif bossid == 69427 then --Dark Animus
			local buff  = { 138609 } 	
			RaidDispelDelay(dispelid,buff,5)
			local InterruptingJolt = GetSpellInfo(138763) --139867 
			local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(boss) 
			if (bossCasting == InterruptingJolt) then
				stopcasting = true
			end			
			stopfade = true	
		--DS raid
		elseif bossid == 53879 then --Blood Corruption: Death
			local buff  = { 106199 } 
			RaidDispel(dispelid,buff)	
		--TeS raid
		elseif bossid == 60585 or bossid == 60583 or bossid == 60586 then 
			local buff  = { 117436 } 
			RaidDispel(dispelid,buff) --Protectors of the Endless, Lightning Prison
		elseif bossid == 62442 then --Terrorize
			local buff  = { 123011 } 
			RaidDispel(dispelid,buff)			
		--MSV raid
		elseif bossid == 60051 or bossid == 60047 or bossid == 60043 or bossid == 59915 then --Cobalt Mine Blast
			local buff  = { 116281 } 
			RaidDispel(dispelid,buff)	
		elseif bossid == 60410 then --Closed Circuit
			local buff  = { 117949 } 
			RaidDispel(dispelid,buff)	
		--HoF raid
		elseif bossid == 62837 then --Visions of Demise
			local buff  = { 124863 } 
			RaidDispel(dispelid,buff)		
		--else
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBossid: &amp;quot;..bossid..&amp;quot; - boss: &amp;quot;..boss)
		end		
		
		if bossid == 62442 then		
			BossDispel(123011,dispelid,boss) --Tsulong, Terrorize 
		end
		
		--MSV raid
		if bossid == 60143 then --not test
			-- Gara&amp;apos;jal the Spiritbinder
			if UnitDebuffID(&amp;quot;player&amp;quot;,116161) then
				local timer = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
				if timer and timer - GetTime() &amp;lt; 1.5 then
					SpellStopCasting()
					RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end		
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- OldEvents</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_OldEventsCheck then --Old raid
	local boss,bossid = bossid()
	if UnitExists(boss) then					
		if bossid == 55294 then
			local PQ_SN = PQ_Shrapnel
			local PQ_FL = PQ_FadingLight
			local PQ_HOT = PQ_HourOfTwilight				
		
			-- Fading Light Debuff
			for i=1,#PQ_FL do
				if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i]))
					and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i])) - GetTime() &amp;lt; 0.7 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end
			
			-- Hour of Twilight
			--if IsLeftShiftKeyDown() and not GetCurrentKeyBoardFocus() then	
			if false then
				if PQR_SpellAvailable(115176)
				and select(2,GetSpellCooldown(115176)) &amp;lt; 2
				then SpellStopCasting() CastSpellByName(tostring(GetSpellInfo(115176)),&amp;quot;player&amp;quot;) return true end
			else
				local HourOfTwilight,_,_,_,_,endTime = UnitCastingInfo(boss) 
				for i=1,#PQ_HOT do
					if HourOfTwilight == GetSpellInfo(PQ_HOT[i]) and endTime/1000 - GetTime() &amp;lt; 0.7 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
					end
				end
			end
		end
		
		if bossid == 56173 then
			-- Target for Shrapnel
			for i=1,#PQ_SN do
				if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i]))
					and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i])) - GetTime() &amp;lt; 2 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_RacialsCheck
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then

	local PQ_Class = select(2, UnitClass(&amp;quot;player&amp;quot;)) 
	
	--Draenei 
	local GiftOfTheNaaru = 59542	
	--Blood Elf
	local ArcaneTorrent = 28730 --mana regen
	
	if PQ_Class == &amp;quot;PALADIN&amp;quot; then
		GiftOfTheNaaru = 59542	
	elseif PQ_Class == &amp;quot;MONK&amp;quot; then 
		GiftOfTheNaaru = 121093
		ArcaneTorrent = 129597 --chi regen
	elseif PQ_Class == &amp;quot;PRIEST&amp;quot; then  
		GiftOfTheNaaru = 59544
	elseif PQ_Class == &amp;quot;SHAMAN&amp;quot; then 
		GiftOfTheNaaru = 59547
	end

	--Troll 
	local Berserking = 26297 
	--Undead
	local WillOfTheForsaken = 7744  
	--Dwarven 
	local Stoneform = 20594 
	--Human 
	local EveryManForHimself = 59752
	--Undead 
	--local Cannibalize = 20577 --not much helpful
	--Orc 
	local BloodFury = 33702
	--Gloves Engineer
	local _, GECooldown, GEReady = GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 10)
			
	--HP
	if IsSpellKnown(GiftOfTheNaaru) 
	and GetSpellCooldown(GiftOfTheNaaru) == 0 
	and PQR_SpellAvailable(GiftOfTheNaaru)
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 30	
	then		
		CastSpellByName(tostring(GetSpellInfo(GiftOfTheNaaru),nil))	 
		return true 
	end
	
	--Mana
	if IsSpellKnown(ArcaneTorrent) 
	and PQ_Class ~= &amp;quot;MONK&amp;quot;
	and GetSpellCooldown(ArcaneTorrent) == 0 
	and PQR_SpellAvailable(ArcaneTorrent)
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 80	
	then		
		CastSpellByName(tostring(GetSpellInfo(ArcaneTorrent),nil))	 
		return true 
	end	
  	
  	--CDs
  	if not racialcds then
	  	function racialcds()
			if IsSpellKnown(BloodFury) 
			and GetSpellCooldown(BloodFury) == 0 
			and PQR_SpellAvailable(BloodFury)	
			then		
				CastSpellByName(tostring(GetSpellInfo(BloodFury),nil))	 
				return true 
			elseif IsSpellKnown(Berserking) 
			and GetSpellCooldown(Berserking) == 0 
			and PQR_SpellAvailable(Berserking)	
			then		
				CastSpellByName(tostring(GetSpellInfo(Berserking),nil))	 
				return true 
			elseif GECooldown == 0 
			and GEReady == 1 then
				UseInventoryItem(10)
			end
		end
	end
  	
  	if lowhpmembers &amp;gt;=5 then
  		racialcds()
  	end
  	
  	--Removes any Charm, Fear and Sleep effect
	if not GotFear then
		function GotFear(t) 
			local debuff = { 10326, 8122, 2094, 5782, 5484, 6358, 5246 }
			for i=1, #debuff do if UnitDebuffID(t,debuff[i]) then return true end end
		end
	end
	if IsSpellKnown(WillOfTheForsaken) 
	and GetSpellCooldown(WillOfTheForsaken) == 0 
	and PQR_SpellAvailable(WillOfTheForsaken)	
	and GotFear(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(WillOfTheForsaken),nil))	 
		return true 
	end  
	
	--Removes all poison, disease and bleed effects and reduces all damage taken by 10% for 8 sec
	if not GotPoison then
		function GotPoison(t)
			local i, debuff = 1, select(5,UnitDebuff(t, 1)) 
			while debuff do
				if debuff == &amp;quot;Poison&amp;quot; or debuff == &amp;quot;Disease&amp;quot; then return true end
				i = i + 1 debuff = select(5,UnitDebuff(t, i)) 
			end
		end
	end	
	if IsSpellKnown(Stoneform) 
	and GetSpellCooldown(Stoneform) == 0 
	and PQR_SpellAvailable(Stoneform)	
	and GotPoison(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(Stoneform),nil))	 
		return true 
	end    	
	
	--Removes all movement impairing effects and all effects which cause loss of control of your character
	if not LostControl then
		function LostControl(t) 
			local debuff = { 122, 10326, 8122, 2094, 5782, 5484, 6358, 5246, 408 }
			for i=1, #debuff do if UnitDebuffID(t,debuff[i]) then return true end end
		end
	end  
	if IsSpellKnown(EveryManForHimself) 
	and GetSpellCooldown(EveryManForHimself) == 0 
	and PQR_SpellAvailable(EveryManForHimself)	
	and LostControl(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(EveryManForHimself),nil))	 
		return true 
	end		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PALADIN>