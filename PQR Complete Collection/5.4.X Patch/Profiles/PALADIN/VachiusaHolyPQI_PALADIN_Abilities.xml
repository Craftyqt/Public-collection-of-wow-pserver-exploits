<?xml version="1.0" encoding="utf-8" ?><PALADIN><Ability><Name>-- Init --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Queue System
SLASH_VQUEUE1 = &amp;quot;/vqueue&amp;quot;
function SlashCmdList.VQUEUE(msg, editbox)		
	local spellid, unit = msg:match(&amp;quot;^(%S*)%s*(.-)$&amp;quot;);
	if tonumber(spellid) ~= nil and unit ~= &amp;quot;&amp;quot; then 			
		if not UnitExists(tostring(unit)) and unit ~= &amp;quot;tank&amp;quot; and unit ~= &amp;quot;low&amp;quot; and unit ~= &amp;quot;aoe5&amp;quot; and unit ~= &amp;quot;aoe10&amp;quot; and unit ~= &amp;quot;aoe15&amp;quot; and unit ~= &amp;quot;aoe20&amp;quot; and unit ~= &amp;quot;aoe25&amp;quot; and unit ~= &amp;quot;aoe30&amp;quot; then			
			PQR_WriteToChat(&amp;quot;unit not exist&amp;quot;);
		elseif not IsSpellKnown(tonumber(spellid)) then
			PQR_WriteToChat(&amp;quot;spell unknown&amp;quot;);
		else
			if not Queue_Spell then
				Queue_Spell = { }	
			end				
			table.insert(Queue_Spell, { Unit = unit, SpellID = spellid, Time = GetTime() } )
		end
	else
		PQR_WriteToChat(&amp;quot;Syntax: /vqueue spellid unit&amp;quot;);
	end
end	
	
if PQR_RotationStarted == true then
	-- Should be reloaded every time you reload Profile (No more needing to /rl)
 	-- Only takes full effects when we&amp;apos;re 90
 	if UnitLevel(&amp;quot;player&amp;quot;) ~= 90 then
 		PQR_WriteToChat(&amp;quot;\124cFFFF55FFWarning: only takes full effect when we&amp;apos;re 90!&amp;quot;)		
 	end	
	PQR_RotationStarted = false

	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Holy Paladin Profile Verion - 2.2.11&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
	PQR_SwapCheckTimer = 0

	--Begin PQI
--	if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
		PQInterfaceLoaded = true
--		PQInterfaceVersion = (2.22)
--		if PQInterfaceVersion &amp;gt;= 2.22 then
			PQInterfaceUpdated = true
--		else 
--			PQInterfaceUpdated = nil 
--			PQR_WriteToChat(&amp;quot;Your PQI is not up to date. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
--			PQR_StopRotation()
--			return true					
--		end
--	else 
--		PQInterfaceLoaded = nil 
--		PQR_WriteToChat(&amp;quot;Please download the latest version of PQI. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
--		PQR_StopRotation()
--		return true				
--	end
		-- Load Data File
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Vachiusa_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_Vachiusa_Data.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == true then
			PQInterfaceDataLoaded = true
		else 
			PQInterfaceDataLoaded = false 
			PQR_WriteToChat(&amp;quot;You are missing PQR_PQI.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true		
		end		
	end	
	
	if not PQI_General_Holy_Paladin_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 	
		local config = {
			name	= &amp;apos;General Holy Paladin&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {
				-- General --
				{	name = &amp;quot;Auto Open PQI Options&amp;quot;,
					tooltip = &amp;quot;Auto Opens PQI Options for you, will only happen once per login.&amp;quot;,
					enable = true,
				},
				{	name = &amp;quot;54 Events&amp;quot;,
					tooltip = &amp;quot;Enables the use of 5.4 boss specific mechanics&amp;quot;,
					enable = true,
				},				
				{	name = &amp;quot;53 Events&amp;quot;,
					tooltip = &amp;quot;Enables the use of 5.3 boss specific mechanics&amp;quot;,
					enable = false,
				},
				{ 	name = &amp;quot;4x Events&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of 4.x boss specific mechanics&amp;quot;,
				},
				{ 	name = &amp;quot;Special Events&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of special events mechanics (Providing Ground...)&amp;quot;,
				},	
				{ 	name = &amp;quot;Auto Event Dispel&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of dispel on special events mechanics&amp;quot;,
				},											
				{ 	name = &amp;quot;Queue Sys&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of auto dispel for Queue System&amp;quot;,
				},					
				{ 	name = &amp;quot;Auto Target&amp;quot;,
					enable = true,
					tooltip = &amp;quot;If you dont have a target it will target your focus target&amp;quot;,
				},
				{ 	name = &amp;quot;Lay On Hands For Mana&amp;quot;,	
					enable = false,
					tooltip = &amp;quot;Enables the use of Lay On Hands For Mana&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of Mana to use Lay On Hands For Mana at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Divine Plea&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Divine Plea&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 80,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of Mana to use Divine Plea at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Low Mana&amp;quot;,	
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of Mana to not use some high mana skills at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;DPS&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables DPS&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 90,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of minimum raid members HP to DPS at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Cleanse&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Cleanse&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 50,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Cleanse at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Racials&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Racials&amp;quot;,
				},								
				{ 	name = &amp;quot;Target Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Target Heal priority&amp;quot;,
				},											
				{ 	name = &amp;quot;Mouseover Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Mouseover Heal priority&amp;quot;,
				},	
				{ 	name = &amp;quot;NPC Mouseover Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of NPC Mouseover Heal priority&amp;quot;,
				},		
				{ 	name = &amp;quot;Pet Heal&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Pet Heal&amp;quot;,
				},			
				{ 	name = &amp;quot;Stop Casting&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Stop Casting&amp;quot;,
				},							
				{ 	name = &amp;quot;V debug&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Vachiusa debug&amp;quot;,
				},							
			},
			hotkeys = {
			},
		}
		PQI_General_Holy_Paladin_GUI_Loaded = PQI:AddRotation(config)
	end
	
	if not PQI_CD_Holy_Paladin_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 
		local config = {
			name	= &amp;apos;CD Holy Paladin&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {									
				-- CD&amp;apos;s --			
				{ 	name = &amp;quot;Lay On Hands&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Lay On Hands&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Lay On Hands at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Beacon Of Light&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Beacon Of Light&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 30,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Beacon Of Light at&amp;quot;,
					},
				},		
				{ 	name = &amp;quot;Beacon Of Light Tanks Only&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the auto use of Beacon Of Light on Tanks only&amp;quot;,
				},	
				{ 	name = &amp;quot;Crusader Strike On CD&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the auto use of Crusader Strike on cooldown&amp;quot;,
				},				
				{ 	name = &amp;quot;Judgment&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the auto use of Judgment (talent Selfless Healer)&amp;quot;,
				},																					
				{ 	name = &amp;quot;Guardian Of Ancient Kings&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Guardian Of Ancient Kings&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Guardian Of Ancient Kings at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Hand Of Protection&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Hand Of Protection&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of target HP to use Hand Of Protection at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Hand Of Sacrifice&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Hand Of Sacrifice&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of target HP to use Hand Of Sacrifice at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Hand Of Salvation&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Hand Of Salvation&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of target HP to use Hand Of Salvation at&amp;quot;,
					},
				},									
				{ 	name = &amp;quot;Auto Avenging Wrath&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the auto use of Avenging Wrath&amp;quot;,
				},					
				{ 	name = &amp;quot;Auto Devotion Aura&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the auto use of Devotion Aura&amp;quot;,
				},						
				{ 	name = &amp;quot;Auto Holy Avenger&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the auto use of Holy Avenger&amp;quot;,
				},												
			},
			hotkeys = {
			},
		}
		PQI_CD_Holy_Paladin_GUI_Loaded = PQI:AddRotation(config)
	end
	
	if not PQI_Healing_Holy_Paladin_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 
		local config = {
			name	= &amp;apos;Healing Holy Paladin&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {												
				-- Healing --
				{ 	name = &amp;quot;Divine Light&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Divine Light&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 60,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Divine Light at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Word Of Glory&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Word Of Glory&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 90,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Word Of Glory at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Word Of Glory Holy Power&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 1,
						step = 1,
						max = 4,
						min = 1,
						tooltip = &amp;quot;Caution: change this value may break my healing logic. The number of holy power to use Word Of Glory or Eternal Flame at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Eternal Flame Buff Spam&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Eternal Flame Buff Spam&amp;quot;,
				},	
				{ 	name = &amp;quot;EF Spam Holy Power&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 5,
						min = 1,
						tooltip = &amp;quot;Caution: change this value may break my healing logic. The number of holy power to use Eternal Flame Buff Spam at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Holy Shock Healing Spam&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Holy Shock Healing Spam&amp;quot;,
				},																
				{ 	name = &amp;quot;Holy Light&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Holy Light&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 80,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Holy Light at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Flash Of Light&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Flash Of Light&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Flash Of Light at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Flash Of Light Tank&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Flash Of Light on Tanks&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 30,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Flash Of Light on Tanks at&amp;quot;,
					},
				},							
				{ 	name = &amp;quot;Sacred Shield&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Sacred Shield&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 30,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Sacred Shield at&amp;quot;,
					},
				},						
				{ 	name = &amp;quot;Holy Shock AOE&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Holy Shock AOE&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 100,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Holy Shock AOE at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Holy Shock AOE Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 1,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Holy Shock AOE at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Holy Radiance&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Holy Radiance&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to auto use Holy Radiance at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Holy Radiance Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 2,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members to use Holy Radiance at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Light Of Dawn&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Light Of Dawn&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 90,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Light Of Dawn at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Light Of Dawn Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 20,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Light Of Dawn at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Light Of Dawn Spam&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Eternal Flame Buff Spam&amp;quot;,
				},					
				{ 	name = &amp;quot;Divine Favor&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Divine Favor&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 70,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Divine Favor at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Divine Favor Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Divine Favor at&amp;quot;,
					},
				},							
				{ 	name = &amp;quot;Talent 90&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Talent 90&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Holy Prism at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Talent 90 Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of raid members around healing target to use Talent 90 at&amp;quot;,
					},
				},													
			},
			hotkeys = {
				{	name = &amp;quot;Pause Rotation&amp;quot;,		enable = true,	hotkeys = {&amp;apos;ls&amp;apos;},	},
				{	name = &amp;quot;Avenging Wrath&amp;quot;,			enable = true,	hotkeys = {&amp;apos;rs&amp;apos;},	
					tooltip = &amp;quot;Pop Avenging Wrath or Holy Avenger&amp;quot;, },
				{	name = &amp;quot;Talent 90&amp;quot;,		enable = true,	hotkeys = {&amp;apos;lc&amp;apos;},
					tooltip = &amp;quot;Pop Talent 90&amp;quot;, },
				{	name = &amp;quot;Divine Favor&amp;quot;,			enable = true,	hotkeys = {&amp;apos;ra&amp;apos;},	
					tooltip = &amp;quot;Pop Divine Favor&amp;quot;, },
				{	name = &amp;quot;Devotion Aura&amp;quot;,		enable = true,	hotkeys = {&amp;apos;rc&amp;apos;},	
					tooltip = &amp;quot;Pop Devotion Aura&amp;quot;, },	
				{	name	= &amp;quot;Adding Players CT&amp;quot;,		enable	= true,	hotkeys	= {&amp;apos;ls&amp;apos;, &amp;apos;la&amp;apos;},
					tooltip = &amp;quot;Adding Players to Custom Table&amp;quot;, },	
				{	name	= &amp;quot;Removing Players CT&amp;quot;,		enable	= true,	hotkeys	= {&amp;apos;ls&amp;apos;, &amp;apos;lc&amp;apos;},
					tooltip = &amp;quot;Removing Players from Custom Table&amp;quot;, },						
			},
		}
		PQI_Healing_Holy_Paladin_GUI_Loaded = PQI:AddRotation(config)
	end
	--End PQI
		
	--------------------
	-- Slash Commands
	--------------------
	if GetCVar(&amp;quot;PQ_WipeCustomTable&amp;quot;) == nil then RegisterCVar(&amp;quot;PQ_WipeCustomTable&amp;quot;, 0) end
	if GetCVar(&amp;quot;PQ_UseCustomT&amp;quot;) == nil then RegisterCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0) end
	if GetCVar(&amp;quot;Nova_Recording&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_Recording&amp;quot;, 0) end	
	
	SLASH_WIPETABLE1 = &amp;quot;/wipetable&amp;quot;
	SLASH_WIPETABLE2 = &amp;quot;/wipecustomtable&amp;quot;
	SLASH_WIPETABLE3 = &amp;quot;/wt&amp;quot;
	function SlashCmdList.WIPETABLE(msg, editbox)
		Nova_CustomT = { }
		if GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) then 
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0)
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Wiped Custom Table clean, and reverting to Normal Table.&amp;quot;)
			end
		else
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Wiped Custom Table clean.&amp;quot;)
			end
		end
	end
	
	SLASH_USECUSTOMT1 = &amp;quot;/usecustomt&amp;quot;
	SLASH_USECUSTOMT2 = &amp;quot;/uct&amp;quot;
	SLASH_USECUSTOMT3 = &amp;quot;/usecustomtable&amp;quot;
	function SlashCmdList.USECUSTOMT(msg, editbox)
		if not GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) and #Nova_CustomT &amp;gt; 0 then
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Enabling Custom Table&amp;quot;)
			end
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 1)
		else
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Enabling Normal Table&amp;quot;)
			end
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0)
		end
	end	
	
	-- Variables
	PQR_ResetMovementTime = 0.3
	PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)
	
	PQR_Spec = GetSpecialization()
	if PQR_Spec ~= 1 then
		PQR_WriteToChat(&amp;quot;You must be in Holy Spec. Please switch then try again.&amp;quot;, &amp;quot;Warning&amp;quot;)
		PQR_StopRotation()
		return true
	end
end

if PQR_IsMoving() then
	Nova_Moving = true
else
	Nova_Moving = false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Healing Engine --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Healing Engine --
if Nova_54EventsCheck then
	if not UnitDebuffID(&amp;quot;player&amp;quot;,144850) --Test of Reliance
	and not UnitDebuffID(&amp;quot;player&amp;quot;,142861) then --Ancient Miasma
		SheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_SpecialEvents, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true
	end
else
	SheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_SpecialEvents, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true	
end

if GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) then
	members = Nova_CustomT
	lowhpmembers = 0
	for i=1, #Nova_CustomT do
		if Nova_CustomT[i].HP &amp;lt; 80 then
			lowhpmembers = lowhpmembers + 1
		end
	end
	
	table.sort(members, function(x,y) return x.HP &amp;lt; y.HP end)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Stop Casting</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Stop Casting
if PQI_VachiusaGeneralHolyPaladin_StopCasting_enable 
and not UnitBuffID(&amp;quot;player&amp;quot;,137331) --Lucidity
then
	if UnitExists(&amp;quot;boss1&amp;quot;) then
		local npcid = tonumber(UnitGUID(&amp;quot;boss1&amp;quot; ):sub(6,10), 16)
	else
		local npcid = 0
	end
	
	if SpellIsTargeting() then
		SpellStopCasting()
	elseif ((UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(635)) --HolyLight
	or (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(2812)) --Denounce
	or (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(54428))) --DivinePlea
	and (CalStop(members[1].Unit) &amp;lt; 40 or (lowhpmembers &amp;gt; 3 and CalStop(members[1].Unit) &amp;lt; 70)) 
	and IsUsableSpell(19750) --FlashOfLight -- prevent loop stop
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 12
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting HolyLight/Denounce/DivinePlea - HP: &amp;quot; ..members[1].HP) 		
		return true 
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(635)) --HolyLight
	and IsSpellInRange(GetSpellInfo(635),members[1].Unit) == 1
	and CalStop(members[1].Unit) &amp;gt; Nova_DPS and CalStop(members[1].Unit) &amp;gt; 95 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		SpellStopCasting() 	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Cast HolyLight - Name: &amp;quot; ..UnitName(members[1].Unit)..&amp;quot; - Current HP: &amp;quot;..CalStop(members[1].Unit)..&amp;quot; - overheal: &amp;quot;..select(2, CalStop(members[1].Unit)))	
		return true 
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(82326)) --DivineLight
	and IsSpellInRange(GetSpellInfo(82326),members[1].Unit) == 1
	and npcid ~= 62442 --Tsulong 
	and npcid ~= nil
	and CalStop(members[1].Unit) &amp;gt; Nova_DivineLight and CalStop(members[1].Unit) &amp;gt; Nova_DPS
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting DivineLight - HP: &amp;quot; ..members[1].HP) 		
		return true 
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(19750)) --FlashOfLight
	and IsSpellInRange(GetSpellInfo(19750),members[1].Unit) == 1
	and npcid ~= 62442 --Tsulong 
	and npcid ~= nil
	and CalStop(members[1].Unit) &amp;gt; Nova_FlashOfLight and CalStop(members[1].Unit) &amp;gt; Nova_DPS 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting FlashOfLight - HP: &amp;quot; ..members[1].HP) 		
		return true 	
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(82327)) --HolyRadiance
	and (CalStop(members[1].Unit) &amp;gt; 95 or (lowhpmembers &amp;lt; 3 and CalStop(members[1].Unit) &amp;gt; 90)) 
	and not UnitDebuffID(&amp;quot;player&amp;quot;,116260) --Crossed Over
	and not UnitDebuffID(&amp;quot;player&amp;quot;,116161) --Crossed Over
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then 
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting HolyRadiance - HP: &amp;quot; ..members[1].HP) 		
		return true 	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AutoTarget</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--AutoTarget
if Nova_AutoTargetCheck then
	if (not UnitExists(&amp;quot;focus&amp;quot;)
		or UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
		or not UnitInRange(&amp;quot;focus&amp;quot;) 
		or not UnitIsConnected(&amp;quot;focus&amp;quot;)
		or not UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;))
	and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
		or not UnitExists(&amp;quot;target&amp;quot;))	
	and #Nova_Tanks &amp;gt; 0 then
		for i=1, #Nova_Tanks do
			if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			
			and UnitAffectingCombat(&amp;quot;player&amp;quot;)		 
			then			
	   			TargetUnit(Nova_Tanks[i].Unit)           		
	    		RunMacroText(&amp;quot;/focus&amp;quot;)			
	            RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)			
			end
		end
	end
	
	if UnitExists(&amp;quot;focus&amp;quot;)
	and not Nova_Moving
	and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) or not UnitExists(&amp;quot;target&amp;quot;))
	and not UnitIsDeadOrGhost(&amp;quot;focustarget&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
	and UnitExists(&amp;quot;focustarget&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;focustarget&amp;quot;)
	and IsSpellInRange(GetSpellInfo(20473),&amp;quot;focustarget&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;focustarget&amp;quot;)
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		TargetUnit(&amp;quot;focustarget&amp;quot;)
		return false 	
	elseif UnitExists(&amp;quot;target&amp;quot;) 
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;) then
		if IsSpellInRange(GetSpellInfo(35395),&amp;quot;target&amp;quot;) == 1 then		
			AttackTarget()
			return false 			
		else
			StopAttack()
			return false 
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Trinket spirit 2</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 80
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
then 
	UseInventoryItem(14)
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- SelfSurvival</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if GetItemCount(5512,false,true) &amp;gt; 0
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 20	
	and PQR_SpellAvailable(5512) --Healthstone		
	and GetItemCooldown(5512) == 0 then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end		
		UseItemByName(5512)
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHealthstone - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
		return true
	--elseif GetInventoryItemCooldown(6)==0 --Grounded Plasma Shield 	
	--then 
		--UseInventoryItem(6) 
		--return true
	--The next 3 attacks within 45 sec that deal damage equal to 20% or more of your total health are reduced in half.
	elseif PQR_SpellAvailable(498)	
	and not UnitBuffID(&amp;quot;player&amp;quot;,642) --Divine Shield
	and (UnitBuffID(&amp;quot;player&amp;quot;,6940) --Hand of Sacrifice
	or Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 20)
	and select(2,GetSpellCooldown(498)) &amp;lt; 2 then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end		
		CastSpellByName(tostring(GetSpellInfo(498),nil))	 			
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDivine Protection - My HP: &amp;quot;..Nova_UnitInfo(&amp;quot;player&amp;quot;))		
		return true		
	elseif PQR_SpellAvailable(642) 
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 20	
	and IsUsableSpell(642) 
	and not UnitBuffID(&amp;quot;player&amp;quot;,498) --Divine Protection
	and select(2,GetSpellCooldown(642)) &amp;lt; 2 then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end		
		CastSpellByName(tostring(GetSpellInfo(642),nil))	 	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDivine Shield - My HP: &amp;quot;..Nova_UnitInfo(&amp;quot;player&amp;quot;))	
		return true		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Custom Table --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--------------------------------------
-- Adding Players to Custom Table
--------------------------------------
if Nova_AddingPlayersCTCheck then
	if VachiusaHolyPaladin_AddingPlayersCT_key
	and not GetCurrentKeyBoardFocus()
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and ( CanHeal(&amp;quot;mouseover&amp;quot;) 
	or UnitIsUnit(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) ) then  
		for i=1, #Nova_CustomT do
			if Nova_CustomT[i].GUID and Nova_CustomT[i].GUID == UnitGUID(&amp;quot;mouseover&amp;quot;) then
				return false
			end
		end
		
		table.insert(Nova_CustomT, { GUID = UnitGUID(&amp;quot;mouseover&amp;quot;) } )
		
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;We just added &amp;quot;..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; to the Custom Healing Table.&amp;quot;, &amp;quot;Alert&amp;quot;)
		end
		return true
	
	end
end

--------------------------------------
-- Removing Players from Custom Table
--------------------------------------
if Nova_RemovingPlayersCTCheck then
	if VachiusaHolyPaladin_RemovingPlayersCT_key
	and not GetCurrentKeyBoardFocus() 
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and ( CanHeal(&amp;quot;mouseover&amp;quot;) 
	or UnitIsUnit(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) )then
		for i=1, #Nova_CustomT do
			if Nova_CustomT[i].GUID and Nova_CustomT[i].GUID == UnitGUID(&amp;quot;mouseover&amp;quot;) then
				if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
					PQR_WriteToChat(&amp;quot;We just removed &amp;quot;..UnitName(Nova_CustomT[i].Unit)..&amp;quot; from the Custom Healing Table.&amp;quot;, &amp;quot;Alert&amp;quot;)
				end
				table.remove(Nova_CustomT, i)
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>TsulongHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--TsulongHeal 
if Nova_53EventsCheck then	
	local bossCheck = &amp;quot;boss1&amp;quot; 
	local tsulongboss = false
	if UnitExists(bossCheck) then 
		local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16) 	        
		if npcID == 62442 
		--and UnitDebuff(&amp;quot;player&amp;quot;,GetSpellInfo(122768)) --Dread Shadows
		--and UnitDebuff(&amp;quot;player&amp;quot;,GetSpellInfo(122789)) --Sunbeam
		and UnitAffectingCombat(&amp;quot;player&amp;quot;) then --Tsulong	
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDebug NPCID: &amp;quot; ..npcID) 
			tsulongboss = true
		end
	end	
	
	if tsulongboss
	and PQR_SpellAvailable(82326)  	
	and IsUsableSpell(82326) 
	and IsSpellInRange(GetSpellInfo(82326),&amp;quot;boss1&amp;quot;) == 1
	and not Nova_Moving then
		if Nova_UnitInfo(&amp;quot;boss1&amp;quot;) &amp;lt; 99 then
			if GetInventoryItemCooldown(10)==0 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				UseInventoryItem(10)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGloves Engineer buff!&amp;quot;)			
			end	 				
	
			local prepairBIL = false			
			local BathedInLight = GetSpellInfo(122855) --Sun Breath
 			if (bossCasting == BathedInLight) or (bossCasting == &amp;quot;Sun Breath&amp;quot;) then
 				prepairBIL = true
 			end
 				
			if PQR_SpellAvailable(86669) 	 
			 and select(2,GetSpellCooldown(86669)) &amp;lt; 2	 
			 and ((UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,GetSpellInfo(122858))) --Bathed in Light buff					 	 
			 	or prepairBIL)
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			 then	 
				 CastSpellByName(tostring(GetSpellInfo(86669)),&amp;quot;boss1&amp;quot;)	
				 --PQR_WriteToChat(&amp;quot;\124cFFFF55FFPop Guardian - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 						 
			end
			
			--WordOfGlory 
			if select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= 3 then
				if IsPlayerSpell(114163) --Eternal Flame - talent check
				and select(2,GetTalentRowSelectionInfo(3)) == 8
				and PQR_SpellAvailable(114163) then
					if select(2, GetSpellCooldown(114163)) == 0
					and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
					then
						CastSpellByName(GetSpellInfo(114163), &amp;quot;boss1&amp;quot;)
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting EternalFlame - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 		
						return true						
					end
				elseif PQR_SpellAvailable(85673) then --WordOfGlory
					 if select(2, GetSpellCooldown(85673)) == 0 
					 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then				
						CastSpellByName(GetSpellInfo(85673), &amp;quot;boss1&amp;quot;)			
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting WordOfGlory - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 		
						return true						
					end
				end
			end

		 	if PQR_SpellAvailable(20473) 	
		 	and IsUsableSpell(20473) 	 			 
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(20473)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyShock Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 
		 		return true
			end	
							 	
		 	if false
		 	 and PQR_SpellAvailable(19750) 		 
			 and IsUsableSpell(19750) 			 
			 and (select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 70 or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,GetSpellInfo(122858))) --Bathed in Light buff					 	 
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(19750)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast FlashOfLight Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 
		 		return true
			end	
			
			if members[1].HP &amp;gt; 30 --Prevent raid wipe
			and lowhpmembers &amp;lt; 10 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 					
				CastSpellByName(tostring(GetSpellInfo(82326)),&amp;quot;boss1&amp;quot;)	 			
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast DivineLight Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;))	 		
		 		return true
			end		
	
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (VachiusaHolyPaladin_PauseRotation_key and not GetCurrentKeyBoardFocus())
 or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) 
 or IsMounted()
 or UnitBuffID(&amp;quot;player&amp;quot;, 104269) then --drink
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyLight</Name><Default>false</Default><SpellID>635</SpellID><Actions></Actions><Lua>--HolyLight
if Nova_HolyLightCheck then
	if PQR_SpellAvailable(635) 
	 and members[1].HP &amp;lt; Nova_HolyLight	 
	 and lowhpmembers &amp;lt; 3
	 and IsUsableSpell(635) 
	 and not Nova_Moving 
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	 and IsSpellInRange(GetSpellInfo(635),members[1].Unit) == 1 
	 and not stopcasting then	
		PQR_CustomTarget = members[1].Unit					
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting HolyLight - HP: &amp;quot; ..members[1].HP) 
		return true
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>WordOfGlory</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--WordOfGlory 
if Nova_WordOfGloryCheck 
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
and (select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= Nova_WordOfGloryHolyPower or UnitBuffID(&amp;quot;player&amp;quot;,90174)) then
	if not IsPlayerSpell(114163) --Eternal Flame - talent check
	and select(2,GetTalentRowSelectionInfo(3)) ~= 8
	and PQR_SpellAvailable(85673) then --WordOfGlory
		 if select(2, GetSpellCooldown(85673)) == 0 then
		 	if ((members[1].HP &amp;lt; Nova_WordOfGlory 
			and members[1].HP &amp;lt;= 90
			and select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) == 1)
			or ((members[1].HP &amp;lt; (Nova_WordOfGlory - 5))
			and members[1].HP &amp;lt;= 85
			and select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) == 2)
			or ((members[1].HP &amp;lt; (Nova_WordOfGlory - 10))
			and members[1].HP &amp;lt;= 80
			and (UnitBuffID(&amp;quot;player&amp;quot;,90174) or select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) == 3))
			or ((members[1].HP &amp;lt; (Nova_WordOfGlory - 15))
			and members[1].HP &amp;lt;= 75
			and select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) == 4)
			or ((members[1].HP &amp;lt; (Nova_WordOfGlory - 20))
			and members[1].HP &amp;lt;= 70
			and select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) == 5))	 
			and IsSpellInRange(GetSpellInfo(85673),members[1].Unit) == 1 then	
				CastSpellByName(GetSpellInfo(85673), members[1].Unit)			
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting WordOfGlory - HP: &amp;quot; ..members[1].HP) 
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>LightOfDawnSmart</Name><Default>false</Default><SpellID>85222</SpellID><Actions></Actions><Lua>if Nova_LightOfDawnCheck then
	if PQR_SpellAvailable(85222) 
	and (select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= 3 or UnitBuffID(&amp;quot;player&amp;quot;,90174)) 
	and not LLdebuff then	
		--Shield Spam
		if members[1].HP &amp;gt;= 98 then
			if not smembers then smembers = { } end
			smembers = members
			table.sort(smembers, function(x,y) return x.ASP &amp;gt; y.ASP end)	 		 				
			if smembers[1].ASP &amp;lt; 10000 then
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast LightOfDawn for Raid Shield&amp;quot;) 						
				return true					
			end
		end
	 	if AverageHealth(Nova_LightOfDawnLimit) &amp;lt;= Nova_LightOfDawn then	 		 	
			local real_b = 0
			if #members &amp;gt; 1 then
				for i=1,#members do		
					if PQR_UnitDistance(&amp;quot;player&amp;quot;,members[i].Unit) and members[i].HP then
						if PQR_UnitDistance(&amp;quot;player&amp;quot;,members[i].Unit) &amp;lt;= 30 
						and not UnitIsUnit(&amp;quot;player&amp;quot;,members[i].Unit) 
						and members[i].HP &amp;lt;= Nova_LightOfDawn then
							real_b = real_b + 1					
							if real_b &amp;gt;= Nova_LightOfDawnLimit then
								break
							end									
						end
					end
				end
				if real_b &amp;gt;= Nova_LightOfDawnLimit 
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast LightOfDawn - PD: &amp;quot;..prdistance[1].PD) 						
					return true					
				end
			end	
		end
	end
end

if Nova_LightOfDawnSpamCheck 
and PQR_SpellAvailable(85222) 
and (select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= 3 or UnitBuffID(&amp;quot;player&amp;quot;,90174)) 
and not LLdebuff then
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSpam Cast LightOfDawn&amp;quot;) 						
	return true	
end</Lua><RecastDelay>50</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DivineLight</Name><Default>false</Default><SpellID>82326</SpellID><Actions></Actions><Lua>--DivineLight
if Nova_DivineLightCheck then
	if PQR_SpellAvailable(82326) 
	 and IsSpellInRange(GetSpellInfo(82326),members[1].Unit) == 1
	 and IsUsableSpell(82326) 	 
	 and not Nova_Moving 
	 and not stopcasting then
		if members[1].HP &amp;lt;= Nova_DivineLight and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_LowMana 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
			--Beacon for HP
			if GlyphCheck(63218) and not Nova_BeaconOfLightTanksOnlyCheck then		
				if PQR_SpellAvailable(53563)
				and not UnitBuffID(members[1].Unit, 53563, &amp;quot;PLAYER&amp;quot;)
				and IsSpellInRange(GetSpellInfo(53563),members[1].Unit) == 1
				and GetSpellCooldown(53563) == 0 	
				then		
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight before flash: &amp;quot;..UnitName(members[1].Unit))
					CastSpellByName(GetSpellInfo(53563), members[1].Unit)
				end			
			end		
		 	PQR_CustomTarget = members[1].Unit
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>FlashOfLight</Name><Default>false</Default><SpellID>19750</SpellID><Actions></Actions><Lua>--FlashOfLight
if Nova_FlashOfLightCheck then
	if PQR_SpellAvailable(19750) 
	 and IsSpellInRange(GetSpellInfo(19750),members[1].Unit) == 1
	 and IsUsableSpell(19750)	
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 	 
	 and not Nova_Moving 
	 and not stopcasting then
		if members[1].HP &amp;lt;= Nova_FlashOfLight 
		and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_LowMana then	
			--Beacon for HP
			if GlyphCheck(63218) 
			and not Nova_BeaconOfLightTanksOnlyCheck then		
				if PQR_SpellAvailable(53563)
				and not UnitBuffID(members[1].Unit, 53563, &amp;quot;PLAYER&amp;quot;)
				and IsSpellInRange(GetSpellInfo(53563),members[1].Unit) == 1
				and GetSpellCooldown(53563) == 0 then		
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight before flash: &amp;quot;..UnitName(members[1].Unit))
					CastSpellByName(GetSpellInfo(53563), members[1].Unit)
				 	PQR_CustomTarget = members[1].Unit
				 	return true					
				end			
			end
		 	PQR_CustomTarget = members[1].Unit
		 	return true
		end
	end
end</Lua><RecastDelay>50</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>BeaconOfLight</Name><Default>false</Default><SpellID>53563</SpellID><Actions></Actions><Lua>--BeaconOfLight
if PQR_SpellAvailable(53563) 
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
and GetSpellCooldown(53563) == 0 then
	if not GlyphCheck(63218) or Nova_BeaconOfLightTanksOnlyCheck then
		local CBeaconOfLight = false	
		for i=1, #members do	
			if (UnitBuffID(members[i].Unit, 53563, &amp;quot;PLAYER&amp;quot;)
			and UnitThreatSituation(members[i].Unit) == 3)
			or UnitBuffID(&amp;quot;boss1&amp;quot;, 53563) then
				CBeaconOfLight = true
				break
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight on: &amp;quot;..UnitName(members[i].Unit))
			end
		end		
		if not CBeaconOfLight then
			if #Nova_Tanks &amp;gt; 0 then
				for i=1, #Nova_Tanks do
					if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			 
					 and IsSpellInRange(GetSpellInfo(53563),Nova_Tanks[i].Unit) == 1 then
						PQR_CustomTarget = Nova_Tanks[i].Unit
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight tank!&amp;quot;)							
						return true							
					end
				end
			end			
			if UnitThreatSituation(members[1].Unit) == 3	 
			and members[1].HP &amp;lt; Nova_BeaconOfLight --30 
			and IsSpellInRange(GetSpellInfo(53563),members[1].Unit) == 1 then
			 	PQR_CustomTarget = members[1].Unit
			 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight high threat member: &amp;quot;..UnitName(members[1].Unit))									 	
			 	return true
			end
		end
	else
		if not UnitBuffID(members[1].Unit, 53563, &amp;quot;PLAYER&amp;quot;)
		and not UnitBuffID(members[1].Unit, 20925, &amp;quot;PLAYER&amp;quot;)
		and IsSpellInRange(GetSpellInfo(53563),members[1].Unit) == 1
		and UnitIsPlayer(members[1].Unit) then
			if members[1].HP &amp;lt;= 90 then
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight: &amp;quot;..UnitName(members[1].Unit))	
				PQR_CustomTarget = members[1].Unit
				return true
			end
		end	 
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>SealOfInsight</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--SealOfInsight
if GetShapeshiftForm() ~= 3 
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	CastShapeshiftForm(3)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyRadianceSmart</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--HolyRadianceSmart
if Nova_HolyRadianceCheck then
	if not VDaybreak then VDaybreak = {} end
	if PQR_SpellAvailable(82327) 		 
	and IsUsableSpell(82327) 
	and not Nova_Moving 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and not stopcasting then
		if #VDaybreak &amp;lt; 1 
		or (select(2,GetSpellCooldown(20473)) &amp;gt; 2 --If you dont wanna spam HolyRadianceSmart and wait for daybreak face-out, comment out this line
			and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= Nova_LowMana) then
			if AverageHealth(Nova_HolyRadianceLimit) &amp;lt;= Nova_HolyRadiance then		
				PRGetDistanceTable((Nova_HolyRadiance+10), 10, (Nova_HolyRadianceLimit-1))	
				PRGetDistanceTablebyHP(Nova_HolyRadiance,(Nova_HolyRadianceLimit-1))								
				if IsSpellInRange(GetSpellInfo(82327),prdistancebyhp[1].Unit) 
				and (prdistancebyhp[1].PD &amp;gt;= (Nova_HolyRadianceLimit-1))
				and prdistancebyhp[1].HP &amp;lt;= Nova_HolyRadiance then
					table.wipe(VDaybreak)
					VDaybreak = { }						
					table.insert(VDaybreak, { VDBUnit = prdistancebyhp[1].Unit, VDBCastTime = GetTime(), VDBHP = prdistancebyhp[1].HP, VDBPD = prdistancebyhp[1].PD  } )					
					if (select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;lt; 5) then
						CastSpellByName(tostring(GetSpellInfo(82327),prdistancebyhp[1].Unit))
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyRadiance - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 													
						return true				
					else
						--Dump Holy power with EF/WoG
						if IsPlayerSpell(114163) --Eternal Flame - talent check
						and select(2,GetTalentRowSelectionInfo(3)) == 8
						and PQR_SpellAvailable(114163) then
							if select(2, GetSpellCooldown(114163)) == 0 then
						 		if IsSpellInRange(GetSpellInfo(85673),members[1].Unit) == 1 then	
									CastSpellByName(GetSpellInfo(114163), members[1].Unit)
									--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting Dump EternalFlame - HP: &amp;quot; ..members[1].HP) 																		
									return true
								end
							end
						elseif PQR_SpellAvailable(85673) then --WordOfGlory
							 if select(2, GetSpellCooldown(85673)) == 0 then
								 if IsSpellInRange(GetSpellInfo(85673),members[1].Unit) == 1 then	
									CastSpellByName(GetSpellInfo(85673), members[1].Unit)			
									--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting WordOfGlory - HP: &amp;quot; ..members[1].HP) 																		
									return true
								end
							end
						end		
						--End dump Holy power with EF/WoG					
					end
				end				
			end
		else
			if ((GetTime() - VDaybreak[1].VDBCastTime) &amp;gt;= 5) then
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFClear VDaybreak 1&amp;quot;)							
				table.wipe(VDaybreak)
				VDaybreak = { }						
				if (select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;lt; 5) then
					CastSpellByName(tostring(GetSpellInfo(82327),prdistancebyhp[1].Unit))
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyRadiance - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 
					return true				
				else
					--Dump Holy power with EF/WoG
					if IsPlayerSpell(114163) --Eternal Flame - talent check
					and select(2,GetTalentRowSelectionInfo(3)) == 8
					and PQR_SpellAvailable(114163) then
						if select(2, GetSpellCooldown(114163)) == 0 then
					 		if IsSpellInRange(GetSpellInfo(85673),members[1].Unit) == 1 then	
								CastSpellByName(GetSpellInfo(114163), members[1].Unit)
								--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting Dump EternalFlame - HP: &amp;quot; ..members[1].HP) 
								return true
							end
						end
					elseif PQR_SpellAvailable(85673) then --WordOfGlory
						 if select(2, GetSpellCooldown(85673)) == 0 then
							 if IsSpellInRange(GetSpellInfo(85673),members[1].Unit) == 1 then	
								CastSpellByName(GetSpellInfo(85673), members[1].Unit)			
								--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting WordOfGlory - HP: &amp;quot; ..members[1].HP) 
								return true
							end
						end
					end		
					--End dump Holy power with EF/WoG					
				end
			end							
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>GuardianOfAncientKings</Name><Default>false</Default><SpellID>86669</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(86669) 
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and Nova_GuardianOfAncientKingsCheck then
 	if members[1].HP &amp;lt; Nova_GuardianOfAncientKings then
 		if not UnitBuffID(&amp;apos;player&amp;apos;, 31842) --Divine Favor
 		 and UnitIsPlayer(members[1].Unit)
 		 and not UnitBuffID(&amp;apos;player&amp;apos;, 31884) then --Avenging Wrath
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	 		 
 		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGuardianOfAncientKings - HP: &amp;quot;..members[1].HP)
 		 	return true
 		end
 	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HandOfSacrifice</Name><Default>false</Default><SpellID>6940</SpellID><Actions></Actions><Lua>if Nova_HandOfSacrificeCheck then
	if PQR_SpellAvailable(6940) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(2,GetSpellCooldown(6940)) &amp;lt; 2
	 and UnitThreatSituation(members[1].Unit) == 3
	 and IsUsableSpell(6940)
	 and not UnitBuffID(members[1].Unit, 6940) --HandOfSacrifice
	 and not UnitBuffID(members[1].Unit, 1022) --HandOfProtection
	 and not UnitBuffID(members[1].Unit, 1044) --HandOfFreedom
	 and not UnitBuffID(members[1].Unit, 1038) --HandOfSalvation
	 and UnitIsPlayer(members[1].Unit)
	 and IsSpellInRange(GetSpellInfo(6940),members[1].Unit) == 1 then
		if members[1].HP &amp;lt; Nova_HandOfSacrifice and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;gt;= 95 then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHandOfSacrifice - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>LayOnHands</Name><Default>false</Default><SpellID>633</SpellID><Actions></Actions><Lua>if Nova_LayOnHandsCheck then
	if PQR_SpellAvailable(633) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(2,GetSpellCooldown(633)) &amp;lt; 2
	 and UnitThreatSituation(members[1].Unit) == 3	 
	 and UnitIsPlayer(members[1].Unit)
	 and not UnitBuffID(&amp;apos;player&amp;apos;, 6940) --Hand of Sacrifice
	 and IsSpellInRange(GetSpellInfo(633),members[1].Unit) == 1 then
		if members[1].HP &amp;lt; Nova_LayOnHands then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLayOnHands - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		elseif select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= Nova_LowMana
		and Nova_ManaLayOnHandsCheck
		and members[1].HP &amp;gt;= 80
		and lowhpmembers &amp;lt; 3 then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end			
			PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLayOnHands for mana - HP: &amp;quot; ..members[1].HP) 		
		 	return true			
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DivineFavor (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DivineFavor (TC)
if (Nova_MDivineFavorCheck and VachiusaHolyPaladin_DivineFavor_key and not GetCurrentKeyBoardFocus())
or (Nova_DivineFavorAutoCheck and AverageHealth(Nova_DivineFavorLimit) &amp;lt;= Nova_DivineFavor and not UnitBuffID(&amp;quot;player&amp;quot;, 105809) and not UnitBuffID(&amp;quot;player&amp;quot;, 31884) and not UnitBuffID(&amp;quot;player&amp;quot;, 31821)) then
	if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(31842)	
	and GetSpellCooldown(31842) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(31842),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Alt Key Down - DivineFavor!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AvengingWrath (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--AvengingWrath (TC)
if (Nova_MAvengingWrathCheck and VachiusaHolyPaladin_AvengingWrath_key and not GetCurrentKeyBoardFocus())
or (Nova_AvengingWrathAutoCheck and AverageHealth(Nova_DivineFavorLimit) &amp;lt;= Nova_DivineFavor and not UnitBuffID(&amp;quot;player&amp;quot;, 105809) and not UnitBuffID(&amp;quot;player&amp;quot;, 31842) and not UnitBuffID(&amp;quot;player&amp;quot;, 31821)) then
	if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(31884)		
	and GetSpellCooldown(31884) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(31884),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Shift Key Down - AvengingWrath!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DevotionAura (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DevotionAura (TC)
if (Nova_MDevotionAuraCheck and VachiusaHolyPaladin_DevotionAura_key and not GetCurrentKeyBoardFocus())
or (Nova_DevotionAuraAutoCheck and AverageHealth(Nova_DivineFavorLimit) &amp;lt;= Nova_DivineFavor and not UnitBuffID(&amp;quot;player&amp;quot;, 105809) and not UnitBuffID(&amp;quot;player&amp;quot;, 31842) and not UnitBuffID(&amp;quot;player&amp;quot;, 31884)) then
	if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(31821)	
	and GetSpellCooldown(31821) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(31821),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Control Key Down - DevotionAura!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyShockSmart</Name><Default>false</Default><SpellID>20473</SpellID><Actions></Actions><Lua>--HolyShockSmart
if not VDaybreak then
	VDaybreak = { }
end
		
if Nova_HolyShockAOECheck then	
	if #VDaybreak &amp;gt; 0 then
		if PQR_SpellAvailable(20473) 
		and IsUsableSpell(20473)		 
		and AverageHealth(Nova_HolyShockAOELimit) &amp;lt;= Nova_HolyShockAOE
		and UnitBuffID(&amp;quot;player&amp;quot;, 88819) --Daybreak
		and select(2,GetSpellCooldown(20473)) &amp;lt; 2 
		and not LLdebuff then
			PRGetDistanceTable((Nova_HolyShockAOE+10), 10, (Nova_HolyShockAOELimit-1)) 
			PRGetDistanceTablebyHP(Nova_HolyShockAOE,(Nova_HolyShockAOELimit-1))					
			
			if (prdistancebyhp[1].PD &amp;gt;= (Nova_HolyShockAOELimit-1))
			and prdistancebyhp[1].HP &amp;lt;= Nova_HolyShockAOE 
			and IsSpellInRange(GetSpellInfo(20473),prdistancebyhp[1].Unit) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			then	
				PQR_CustomTarget = prdistancebyhp[1].Unit
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyShockAOE1 - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 												
				return true							
			end				
		end	
			
		if ((GetTime() - VDaybreak[1].VDBCastTime) &amp;gt;= 5) then							
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFClear VDaybreak 2&amp;quot;)							
			table.wipe(VDaybreak)
			VDaybreak = { }
			return true				
		end		
	end	
	
	local _, _, _, DBcount, _, DBduration, DBexpirationTime = UnitBuffID(&amp;quot;player&amp;quot;, 88819)
	if DBcount and DBcount &amp;gt;= 1 then --DB stack
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDebug1: &amp;quot; ..(DBexpirationTime - GetTime()))
		if ((DBexpirationTime - GetTime()) &amp;lt;= 2) 
		and IsSpellInRange(GetSpellInfo(20473),members[1].Unit) 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			PQR_CustomTarget = members[1].Unit
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyShockAOE before expired - Name: &amp;quot; ..UnitName(members[1].Unit))
			return true	
		end
	end			
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>DivinePlea</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DivinePlea
if Nova_DivinePleaCheck then	
	if select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= Nova_DivinePlea	
	and GetSpellCooldown(118730) == 0	
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and not Nova_Moving
	and PQR_SpellAvailable(54428) 
	and not dpstopcasting then	
		CastSpellByName(tostring(GetSpellInfo(54428),nil)) --118730
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDivinePlea!&amp;quot;)	
		return true 
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>LightsHammer (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--LightsHammer (TC)
if select(2,GetTalentRowSelectionInfo(6)) == 17 then
	if (Nova_Talent90ModCheck and VachiusaHolyPaladin_Talent90_key and not GetCurrentKeyBoardFocus()) then
		if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and PQR_SpellAvailable(114158)		 
		then
		  CastSpellByName(tostring(GetSpellInfo(114158),nil))	
		   if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  	   
		  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFLeft Control Key Down - LightsHammer!&amp;quot;)
		  return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>CrusaderStrike</Name><Default>false</Default><SpellID>35395</SpellID><Actions></Actions><Lua>--CrusaderStrike
if Nova_DPSCheck or Nova_CrusaderStrikeOnCDCheck then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not stopdps
	and ((members[1].HP &amp;gt;= Nova_DPS	
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 80)
	or Nova_CrusaderStrikeOnCDCheck)
	and PQR_SpellAvailable(35395) 
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(35395),&amp;quot;target&amp;quot;) == 1
	and GetSpellCooldown(35395) == 0
	and select(5, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 5
	and IsUsableSpell(35395)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
		return true 
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>BlessingBuff</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--BlessingBuff
if not UnitBuffID(&amp;quot;player&amp;quot;,1126)
and not UnitBuffID(&amp;quot;player&amp;quot;,19740)
and not UnitBuffID(&amp;quot;player&amp;quot;,20217)
and not UnitBuffID(&amp;quot;player&amp;quot;,90363)
and not UnitBuffID(&amp;quot;player&amp;quot;,115921) 
and PQR_SpellAvailable(20217)
and IsUsableSpell(20217) 
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
then
	CastSpellByName(tostring(GetSpellInfo(20217)),&amp;quot;player&amp;quot;)
	return true
elseif (UnitBuffID(&amp;quot;player&amp;quot;,1126)
or UnitBuffID(&amp;quot;player&amp;quot;,90363)
or UnitBuffID(&amp;quot;player&amp;quot;,115921))
and not UnitBuffID(&amp;quot;player&amp;quot;,19740)
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
and PQR_SpellAvailable(19740)
and IsUsableSpell(19740) then
	CastSpellByName(tostring(GetSpellInfo(19740)),&amp;quot;player&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>SacredShield</Name><Default>false</Default><SpellID>20925</SpellID><Actions></Actions><Lua>--SacredShield - 5.4 id 148039
if IsPlayerSpell(20925) --SacredShield - talent check
and IsUsableSpell(20925) 
and PQR_SpellAvailable(20925)
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
and select(2,GetTalentRowSelectionInfo(3)) == 9 then
	local CSacredShield = false
	
	for i=1, #members do	
		if (UnitBuffID(members[i].Unit, 20925, &amp;quot;PLAYER&amp;quot;)
		and UnitThreatSituation(members[i].Unit) == 3)
		or UnitBuffID(&amp;quot;boss1&amp;quot;, 20925)
		then
			CSacredShield = true
			break
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSacredShield on: &amp;quot;..UnitName(members[i].Unit))
		end
	end
	
	if not CSacredShield
	and PQR_SpellAvailable(20925) 
	then
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			 
				 and not UnitBuffID(Nova_Tanks[i].Unit, 20925, &amp;quot;PLAYER&amp;quot;)
				 and IsSpellInRange(GetSpellInfo(20925),Nova_Tanks[i].Unit) == 1 then
				 	if #Nova_Tanks &amp;gt;= 2 
				 	and not UnitBuffID(Nova_Tanks[i].Unit, 53563, &amp;quot;PLAYER&amp;quot;) then --Beacon
						PQR_CustomTarget = Nova_Tanks[i].Unit
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSacredShield tank!&amp;quot;)							
						return true							
					else 
						PQR_CustomTarget = Nova_Tanks[i].Unit
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSacredShield tank!&amp;quot;)							
						return true						
					end
				end
			end
		end
		
		if UnitThreatSituation(members[1].Unit) == 3	 
		and members[1].HP &amp;lt; Nova_SacredShield --30 
		and UnitIsPlayer(members[1].Unit)
		and not UnitBuffID(members[1].Unit, 53563, &amp;quot;PLAYER&amp;quot;) --Beacon
		and not UnitBuffID(members[1].Unit, 20925, &amp;quot;PLAYER&amp;quot;)
		and IsSpellInRange(GetSpellInfo(20925),members[1].Unit) == 1 then
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSacredShield high threat member!&amp;quot;)	
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HandOfProtection</Name><Default>false</Default><SpellID>1022</SpellID><Actions></Actions><Lua>if Nova_HandOfProtectionCheck then
	if PQR_SpellAvailable(1022) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)	 
	 and select(2,GetSpellCooldown(1022)) &amp;lt; 2
	 and UnitThreatSituation(members[1].Unit) == 3
	 and UnitGroupRolesAssigned(members[1].Unit) ~= &amp;quot;TANK&amp;quot;
	 and UnitIsPlayer(members[1].Unit)
	 and IsUsableSpell(1022)
	 and not UnitBuffID(members[1].Unit, 6940) --HandOfSacrifice
	 and not UnitBuffID(members[1].Unit, 1022) --HandOfProtection
	 and not UnitBuffID(members[1].Unit, 1044) --HandOfFreedom
	 and not UnitBuffID(members[1].Unit, 1038) --HandOfSalvation
	 and not UnitDebuffID(members[1].Unit, 25771) --Forbearance
	 and IsSpellInRange(GetSpellInfo(1022),members[1].Unit) == 1 
	 and not stopfade then
		if members[1].HP &amp;lt; Nova_HandOfProtection then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHandOfProtection - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HandOfSalvation</Name><Default>false</Default><SpellID>1038</SpellID><Actions></Actions><Lua>if Nova_HandOfSalvationCheck then
	if PQR_SpellAvailable(1038) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(2,GetSpellCooldown(1038)) &amp;lt; 2
	 and UnitThreatSituation(members[1].Unit) == 3
	 and UnitGroupRolesAssigned(members[1].Unit) ~= &amp;quot;TANK&amp;quot;
	 and UnitIsPlayer(members[1].Unit)
	 and IsUsableSpell(1038)
	 and not UnitBuffID(members[1].Unit, 6940) --HandOfSacrifice
	 and not UnitBuffID(members[1].Unit, 1022) --HandOfProtection
	 and not UnitBuffID(members[1].Unit, 1044) --HandOfFreedom
	 and not UnitBuffID(members[1].Unit, 1038) --HandOfSalvation
	 and IsSpellInRange(GetSpellInfo(1038),members[1].Unit) == 1 
	 and not stopfade then
		if members[1].HP &amp;lt; Nova_HandOfSalvation then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end	
		 	PQR_CustomTarget = members[1].Unit
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHandOfSalvation - HP: &amp;quot; ..members[1].HP) 		
		 	return true
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>BresAndRes</Name><Default>false</Default><SpellID>4987</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;mouseover&amp;quot;) 
and IsPlayerSpell(110501) 
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
and UnitCanCooperate(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;)    
and IsSpellInRange(GetSpellInfo(110501),&amp;quot;mouseover&amp;quot;) == 1
and GetSpellCooldown(110501) == 0 
and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;)
and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	CastSpellByName(tostring(GetSpellInfo(110501)),&amp;quot;mouseover&amp;quot;)	--Rebirth Symbiosis
	return true	
elseif not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
and UnitInRange(&amp;quot;mouseover&amp;quot;) 
and UnitIsConnected(&amp;quot;mouseover&amp;quot;)
and UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) 			
and UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
and not Nova_Moving
and not UnitHasIncomingResurrection(&amp;quot;mouseover&amp;quot;) 
then
	if PQR_SpellAvailable(83968) 		
	and not UnitDebuff(&amp;quot;mouseover&amp;quot;, GetSpellInfo(95223)) ----Mass Resurrection debuff
	and Nova_CheckLastCast(83968, 2.0)		
	then
		if IsInRaid() then
				group = &amp;quot;raid&amp;quot;
		elseif IsInGroup() then
				group = &amp;quot;party&amp;quot;
		end
		local deadnum = 0
		if group then
			for i = 1, GetNumGroupMembers() do 
				local member = group..i
				if UnitIsDeadOrGhost(member) then
					if not UnitDebuff(member, GetSpellInfo(95223)) then ----Mass Resurrection debuff 
						deadnum = deadnum + 1
					end
				end
			end
		end		
		if deadnum &amp;gt;= 2 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(83968),nil)) --Mass Resurrection	 
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto MasRes!&amp;quot;)
			return true		
		end
	end
	
	if PQR_SpellAvailable(7328)
	and IsUsableSpell(7328) 		
	and Nova_CheckLastCast(7328, 2.0)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 	
	and (IsSpellInRange(GetSpellInfo(7328),&amp;quot;mouseover&amp;quot;) == 1) 		
	and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;) then 
		CastSpellByName(tostring(GetSpellInfo(7328)),&amp;quot;mouseover&amp;quot;) --Resurrection	 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto Res!&amp;quot;)
		return true			
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Drink</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;lt;= 50
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
and not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
and PQR_SpellAvailable(80618) --Mage cookies	
and not UnitBuffID(&amp;quot;player&amp;quot;, 104269)
and not Nova_Moving 
and GetItemCooldown(80618) == 0 then
	UseItemByName(80618)
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMage cookies - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 53Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_53EventsCheck then
	local boss,bossid = bossid()
	local dispelid = 4987		
	local buff = { }
	stopcasting = false
	stopfade = false
	stopdps = false
	LLdebuff = false
	LLdebuffunit = false	
	if UnitExists(boss) then
		local _, _, rdifficulty = GetInstanceInfo()
		--TFT raid		
		if bossid == 69465 and (rdifficulty == 5 or rdifficulty ==6) then --Jin&amp;apos;rokh the Breaker
			local buff = { 138732 } --Ionization 
			local fluiditydebuff  = 138002 --Fluidity
			RaidJBDispel(dispelid,buff,fluiditydebuff,5)
		elseif bossid == 68905 or bossid == 68904 then --Lu&amp;apos;lin 68905, Suen 68904 - Twin Consorts
			local buff  = { 137360 } --Corrupted Healing
			LLdebuff,LLdebuffunit = RaidLLDispel(buff) 
			if LLdebuff
			and UnitBuffID(LLdebuffunit, 53563, &amp;quot;PLAYER&amp;quot;) 
			and PQR_SpellAvailable(53563) then
				CastSpellByName(tostring(GetSpellInfo(53563)),&amp;quot;player&amp;quot;)	
				return true
			end			
		elseif bossid == 69134 or bossid == 69131 or bossid == 69078 or bossid == 69132 then --Council of Elders
			local buff  = { 136878, 136857 } 	
			RaidDispel(dispelid,buff) 	
		elseif bossid == 68476 then --Horridon
			local buff  = { 136708, 136719, 136587, 136710 }
			RaidDispel(dispelid,buff) 
		elseif bossid == 68065 or bossid == 70212 or bossid == 70235 or bossid == 70247 then --Flaming Head 
			local buff  = { 139822 } 	
			RaidRangeDispel(dispelid,buff,10) 		
		elseif bossid == 69427 then --Dark Animus
			local buff  = { 138609 } 	
			RaidDispelDelay(dispelid,buff,5)
			local InterruptingJolt = GetSpellInfo(138763) --139867 
			local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(boss) 
			if (bossCasting == InterruptingJolt) then
				stopcasting = true
			end			
			stopfade = true	
		--DS raid
		elseif bossid == 53879 then --Blood Corruption: Death
			local buff  = { 106199 } 
			RaidDispel(dispelid,buff)	
		--TeS raid
		elseif bossid == 60585 or bossid == 60583 or bossid == 60586 then 
			local buff  = { 117436 } 
			RaidDispel(dispelid,buff) --Protectors of the Endless, Lightning Prison
		elseif bossid == 62442 then --Terrorize
			local buff  = { 123011 } 
			SBossDispel(123011,dispelid)
			--RaidDispel(dispelid,buff)			
		--MSV raid
		elseif bossid == 60051 or bossid == 60047 or bossid == 60043 or bossid == 59915 then --Cobalt Mine Blast
			local buff  = { 116281 } 
			RaidDispel(dispelid,buff)	
		elseif bossid == 60708 then --Meng the Demented
			for i=1, #members do	
				if UnitDebuffID(members[i].Unit, 117708) then --Maddening Shout
					stopdps = true
					break
				end
			end			
		elseif bossid == 60410 then --Closed Circuit
			local buff  = { 117949 } 
			RaidDispel(dispelid,buff)	
		--HoF raid
		elseif bossid == 62837 then --Visions of Demise
			local buff  = { 124863 } 
			RaidDispel(dispelid,buff)		
		end		
		
		if bossid == 62442 then		
			BossDispel(123011,dispelid,boss) --Tsulong, Terrorize 
		end
		
		--MSV raid
		if bossid == 60143 then --not test
			-- Gara&amp;apos;jal the Spiritbinder
			if UnitDebuffID(&amp;quot;player&amp;quot;,116161) then
				local timer = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
				if timer and timer - GetTime() &amp;lt; 1.5 then
					SpellStopCasting()
					RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end		
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 4xEvents</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_4xEventsCheck then --Old raid
	local boss,bossid = bossid()
	if UnitExists(boss) then					
		if bossid == 55294 then
			local PQ_SN = PQ_Shrapnel
			local PQ_FL = PQ_FadingLight
			local PQ_HOT = PQ_HourOfTwilight				
		
			-- Fading Light Debuff
			for i=1,#PQ_FL do
				if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i]))
					and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i])) - GetTime() &amp;lt; 0.7 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end
			
			-- Hour of Twilight
			if false then
				if PQR_SpellAvailable(115176)
				and select(2,GetSpellCooldown(115176)) &amp;lt; 2
				then SpellStopCasting() CastSpellByName(tostring(GetSpellInfo(115176)),&amp;quot;player&amp;quot;) return true end
			else
				local HourOfTwilight,_,_,_,_,endTime = UnitCastingInfo(boss) 
				for i=1,#PQ_HOT do
					if HourOfTwilight == GetSpellInfo(PQ_HOT[i]) and endTime/1000 - GetTime() &amp;lt; 0.7 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
					end
				end
			end
		end
		
		if bossid == 56173 then
			-- Target for Shrapnel
			for i=1,#PQ_SN do
				if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i]))
					and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i])) - GetTime() &amp;lt; 2 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_RacialsCheck
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then

	local PQ_Class = select(2, UnitClass(&amp;quot;player&amp;quot;)) 
	
	--Draenei 
	local GiftOfTheNaaru = 59542	
	--Blood Elf
	local ArcaneTorrent = 28730 --mana regen
	
	if PQ_Class == &amp;quot;PALADIN&amp;quot; then
		GiftOfTheNaaru = 59542	
	elseif PQ_Class == &amp;quot;MONK&amp;quot; then 
		GiftOfTheNaaru = 121093
		ArcaneTorrent = 129597 --chi regen
	elseif PQ_Class == &amp;quot;PRIEST&amp;quot; then  
		GiftOfTheNaaru = 59544
	elseif PQ_Class == &amp;quot;SHAMAN&amp;quot; then 
		GiftOfTheNaaru = 59547
	end

	--Troll 
	local Berserking = 26297 
	--Undead
	local WillOfTheForsaken = 7744  
	--Dwarven 
	local Stoneform = 20594 
	--Human 
	local EveryManForHimself = 59752
	--Undead 
	--local Cannibalize = 20577 --not much helpful
	--Orc 
	local BloodFury = 33702
	--Gloves Engineer
	local _, GECooldown, GEReady = GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 10)
			
	--HP
	if IsSpellKnown(GiftOfTheNaaru) 
	and GetSpellCooldown(GiftOfTheNaaru) == 0 
	and PQR_SpellAvailable(GiftOfTheNaaru)
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 30	
	then		
		CastSpellByName(tostring(GetSpellInfo(GiftOfTheNaaru),nil))	 
		return true 
	end
	
	--Mana
	if IsSpellKnown(ArcaneTorrent) 
	and PQ_Class ~= &amp;quot;MONK&amp;quot;
	and GetSpellCooldown(ArcaneTorrent) == 0 
	and PQR_SpellAvailable(ArcaneTorrent)
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 80	
	then		
		CastSpellByName(tostring(GetSpellInfo(ArcaneTorrent),nil))	 
		return true 
	end	
  	
  	--CDs
  	if not racialcds then
	  	function racialcds()
			if IsSpellKnown(BloodFury) 
			and GetSpellCooldown(BloodFury) == 0 
			and PQR_SpellAvailable(BloodFury)	
			then		
				CastSpellByName(tostring(GetSpellInfo(BloodFury),nil))	 
				return true 
			elseif IsSpellKnown(Berserking) 
			and GetSpellCooldown(Berserking) == 0 
			and PQR_SpellAvailable(Berserking)	
			then		
				CastSpellByName(tostring(GetSpellInfo(Berserking),nil))	 
				return true 
			elseif GECooldown == 0 
			and GEReady == 1 then
				UseInventoryItem(10)
			end
		end
	end
  	
  	if lowhpmembers &amp;gt;=5 then
  		racialcds()
  	end
  	
  	--Removes any Charm, Fear and Sleep effect
	if not GotFear then
		function GotFear(t) 
			local debuff = { 10326, 8122, 2094, 5782, 5484, 6358, 5246 }
			for i=1, #debuff do if UnitDebuffID(t,debuff[i]) then return true end end
		end
	end
	if IsSpellKnown(WillOfTheForsaken) 
	and GetSpellCooldown(WillOfTheForsaken) == 0 
	and PQR_SpellAvailable(WillOfTheForsaken)	
	and GotFear(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(WillOfTheForsaken),nil))	 
		return true 
	end  
	
	--Removes all poison, disease and bleed effects and reduces all damage taken by 10% for 8 sec
	if not GotPoison then
		function GotPoison(t)
			local i, debuff = 1, select(5,UnitDebuff(t, 1)) 
			while debuff do
				if debuff == &amp;quot;Poison&amp;quot; or debuff == &amp;quot;Disease&amp;quot; then return true end
				i = i + 1 debuff = select(5,UnitDebuff(t, i)) 
			end
		end
	end	
	if IsSpellKnown(Stoneform) 
	and GetSpellCooldown(Stoneform) == 0 
	and PQR_SpellAvailable(Stoneform)	
	and GotPoison(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(Stoneform),nil))	 
		return true 
	end    	
	
	--Removes all movement impairing effects and all effects which cause loss of control of your character
	if not LostControl then
		function LostControl(t) 
			local debuff = { 122, 10326, 8122, 2094, 5782, 5484, 6358, 5246, 408 }
			for i=1, #debuff do if UnitDebuffID(t,debuff[i]) then return true end end
		end
	end  
	if IsSpellKnown(EveryManForHimself) 
	and GetSpellCooldown(EveryManForHimself) == 0 
	and PQR_SpellAvailable(EveryManForHimself)	
	and LostControl(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(EveryManForHimself),nil))	 
		return true 
	end		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PQI Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Variables
if PQInterfaceLoaded and PQInterfaceUpdated and PQInterfaceDataLoaded then
	--They have PQI and its up-to-date use PQI
	
	PQI_Variables_Loaded = PQI_VachiusaGeneralHolyPaladin_AutoOpenPQIOptions_enable
	VachiusaHolyPaladin_AutoOpenPQIOptions_enable = PQI_VachiusaGeneralHolyPaladin_AutoOpenPQIOptions_enable

	Nova_DivineLightCheck = PQI_VachiusaHealingHolyPaladin_DivineLight_enable
	Nova_DivineLight = PQI_VachiusaHealingHolyPaladin_DivineLight_value
	Nova_WordOfGloryCheck = PQI_VachiusaHealingHolyPaladin_WordOfGlory_enable
	Nova_WordOfGlory = PQI_VachiusaHealingHolyPaladin_WordOfGlory_value
	Nova_WordOfGloryHolyPowerCheck = PQI_VachiusaHealingHolyPaladin_WordOfGloryHolyPower_enable
	Nova_WordOfGloryHolyPower = PQI_VachiusaHealingHolyPaladin_WordOfGloryHolyPower_value
	Nova_EternalFlameBuffSpamCheck = PQI_VachiusaHealingHolyPaladin_EternalFlameBuffSpam_enable
	Nova_EFSpamHolyPower = PQI_VachiusaHealingHolyPaladin_EFSpamHolyPower_value
	Nova_HolyShockHealingSpamCheck = PQI_VachiusaHealingHolyPaladin_HolyShockHealingSpam_enable	
	Nova_HolyLightCheck = PQI_VachiusaHealingHolyPaladin_HolyLight_enable
	Nova_HolyLight = PQI_VachiusaHealingHolyPaladin_HolyLight_value
	Nova_FlashOfLightCheck = PQI_VachiusaHealingHolyPaladin_FlashOfLight_enable
	Nova_FlashOfLight = PQI_VachiusaHealingHolyPaladin_FlashOfLight_value
	Nova_FlashOfLightTankCheck = PQI_VachiusaHealingHolyPaladin_FlashOfLightTank_enable
	Nova_FlashOfLightTank = PQI_VachiusaHealingHolyPaladin_FlashOfLightTank_value	
	Nova_SacredShieldCheck = PQI_VachiusaHealingHolyPaladin_SacredShield_enable
	Nova_SacredShield = PQI_VachiusaHealingHolyPaladin_SacredShield_value
	Nova_HolyShockAOECheck = PQI_VachiusaHealingHolyPaladin_HolyShockAOE_enable
	Nova_HolyShockAOE = PQI_VachiusaHealingHolyPaladin_HolyShockAOE_value
	Nova_HolyShockAOELimitCheck = PQI_VachiusaHealingHolyPaladin_HolyShockAOELimit_enable
	Nova_HolyShockAOELimit = PQI_VachiusaHealingHolyPaladin_HolyShockAOELimit_value	
	Nova_HolyRadianceCheck = PQI_VachiusaHealingHolyPaladin_HolyRadiance_enable
	Nova_HolyRadiance = PQI_VachiusaHealingHolyPaladin_HolyRadiance_value
	Nova_HolyRadianceLimitCheck = PQI_VachiusaHealingHolyPaladin_HolyRadianceLimit_enable
	Nova_HolyRadianceLimit = PQI_VachiusaHealingHolyPaladin_HolyRadianceLimit_value
	Nova_LightOfDawnCheck = PQI_VachiusaHealingHolyPaladin_LightOfDawn_enable
	Nova_LightOfDawn = PQI_VachiusaHealingHolyPaladin_LightOfDawn_value
	Nova_LightOfDawnLimitCheck = PQI_VachiusaHealingHolyPaladin_LightOfDawnLimit_enable
	Nova_LightOfDawnLimit = PQI_VachiusaHealingHolyPaladin_LightOfDawnLimit_value
	Nova_LightOfDawnSpamCheck = PQI_VachiusaHealingHolyPaladin_LightOfDawnSpam_enable	
	Nova_DivineFavorCheck = PQI_VachiusaHealingHolyPaladin_DivineFavor_enable
	Nova_DivineFavor = PQI_VachiusaHealingHolyPaladin_DivineFavor_value
	Nova_DivineFavorLimitCheck = PQI_VachiusaHealingHolyPaladin_DivineFavorLimit_enable
	Nova_DivineFavorLimit = PQI_VachiusaHealingHolyPaladin_DivineFavorLimit_value	
	Nova_Talent90Check = PQI_VachiusaHealingHolyPaladin_Talent90_enable
	Nova_Talent90 = PQI_VachiusaHealingHolyPaladin_Talent90_value
	Nova_Talent90LimitCheck = PQI_VachiusaHealingHolyPaladin_Talent90Limit_enable
	Nova_Talent90Limit = PQI_VachiusaHealingHolyPaladin_Talent90Limit_value
	Nova_DivineFavorAutoCheck = PQI_VachiusaHealingHolyPaladin_DivineFavor_enable
	Nova_Talent90AutoCheck = PQI_VachiusaHealingHolyPaladin_Talent90_enable
			
	Nova_LayOnHandsCheck = PQI_VachiusaCDHolyPaladin_LayOnHands_enable
	Nova_LayOnHands = PQI_VachiusaCDHolyPaladin_LayOnHands_value
	Nova_BeaconOfLightCheck = PQI_VachiusaCDHolyPaladin_BeaconOfLight_enable
	Nova_BeaconOfLight = PQI_VachiusaCDHolyPaladin_BeaconOfLight_value
	Nova_BeaconOfLightTanksOnlyCheck = PQI_VachiusaCDHolyPaladin_BeaconOfLightTanksOnly_enable
	Nova_BeaconOfLightTanksOnly = PQI_VachiusaCDHolyPaladin_BeaconOfLightTanksOnly_value
	Nova_CrusaderStrikeOnCDCheck = PQI_VachiusaCDHolyPaladin_CrusaderStrikeOnCD_enable
	Nova_CrusaderStrikeOnCD = PQI_VachiusaCDHolyPaladin_CrusaderStrikeOnCD_value
	Nova_JudgmentCheck = PQI_VachiusaCDHolyPaladin_Judgment_enable
	Nova_Judgment = PQI_VachiusaCDHolyPaladin_Judgment_value
	Nova_GuardianOfAncientKingsCheck = PQI_VachiusaCDHolyPaladin_GuardianOfAncientKings_enable
	Nova_GuardianOfAncientKings = PQI_VachiusaCDHolyPaladin_GuardianOfAncientKings_value
	Nova_HandOfProtectionCheck = PQI_VachiusaCDHolyPaladin_HandOfProtection_enable
	Nova_HandOfProtection = PQI_VachiusaCDHolyPaladin_HandOfProtection_value
	Nova_HandOfSacrificeCheck = PQI_VachiusaCDHolyPaladin_HandOfSacrifice_enable
	Nova_HandOfSacrifice = PQI_VachiusaCDHolyPaladin_HandOfSacrifice_value
	Nova_HandOfSalvationCheck = PQI_VachiusaCDHolyPaladin_HandOfSalvation_enable
	Nova_HandOfSalvation = PQI_VachiusaCDHolyPaladin_HandOfSalvation_value
	Nova_AvengingWrathAutoCheck = PQI_VachiusaCDHolyPaladin_AutoAvengingWrath_enable
	Nova_AvengingWrathAuto = PQI_VachiusaCDHolyPaladin_AutoAvengingWrath_value
	Nova_DevotionAuraAutoCheck = PQI_VachiusaCDHolyPaladin_AutoDevotionAura_enable
	Nova_DevotionAuraAuto = PQI_VachiusaCDHolyPaladin_AutoDevotionAura_value	
	Nova_HolyAvengerAutoCheck = PQI_VachiusaCDHolyPaladin_AutoHolyAvenger_enable
	Nova_HolyAvengerAuto = PQI_VachiusaCDHolyPaladin_AutoHolyAvenger_value		
	
	Nova_AutoTargetCheck = PQI_VachiusaGeneralHolyPaladin_AutoTarget_enable
	Nova_AutoTarget = PQI_VachiusaGeneralHolyPaladin_AutoTarget_value
	Nova_ManaLayOnHandsCheck = PQI_VachiusaGeneralHolyPaladin_LayOnHandsForMana_enable
	Nova_ManaLayOnHands = PQI_VachiusaGeneralHolyPaladin_LayOnHandsForMana_value
	Nova_DivinePleaCheck = PQI_VachiusaGeneralHolyPaladin_DivinePlea_enable
	Nova_DivinePlea = PQI_VachiusaGeneralHolyPaladin_DivinePlea_value
	Nova_LowManaCheck = PQI_VachiusaGeneralHolyPaladin_LowMana_enable
	Nova_LowMana = PQI_VachiusaGeneralHolyPaladin_LowMana_value	
	Nova_DPSCheck = PQI_VachiusaGeneralHolyPaladin_DPS_enable
	Nova_DPS = PQI_VachiusaGeneralHolyPaladin_DPS_value
	Nova_CleanseCheck = PQI_VachiusaGeneralHolyPaladin_Cleanse_enable
	Nova_Cleanse = PQI_VachiusaGeneralHolyPaladin_Cleanse_value
	Nova_RacialsCheck = PQI_VachiusaGeneralHolyPaladin_Racials_enable
	Nova_Racials = PQI_VachiusaGeneralHolyPaladin_Racials_value
	Nova_4xEventsCheck = PQI_VachiusaGeneralHolyPaladin_4xEvents_enable
	Nova_4xEvents = PQI_VachiusaGeneralHolyPaladin_4xEvents_value
	Nova_53EventsCheck = PQI_VachiusaGeneralHolyPaladin_53Events_enable
	Nova_53Events = PQI_VachiusaGeneralHolyPaladin_53Events_value
	Nova_54EventsCheck = PQI_VachiusaGeneralHolyPaladin_54Events_enable
	Nova_54Events = PQI_VachiusaGeneralHolyPaladin_54Events_value	
	Nova_SpecialEvents = PQI_VachiusaGeneralHolyPaladin_SpecialEvents_enable	
	Nova_AutoEventDispel = PQI_VachiusaGeneralHolyPaladin_AutoEventDispel_enable	
	Nova_QueueSysCheck = PQI_VachiusaGeneralHolyPaladin_QueueSys_enable
	Nova_QueueSys = PQI_VachiusaGeneralHolyPaladin_QueueSys_value	
	Nova_Mouseover = PQI_VachiusaGeneralHolyPaladin_MouseoverHeal_enable
	Nova_TargetHeal = PQI_VachiusaGeneralHolyPaladin_TargetHeal_enable
	Nova_NPCMouseoverHeal = PQI_VachiusaGeneralHolyPaladin_NPCMouseoverHeal_enable
	Nova_PetHeal = PQI_VachiusaGeneralHolyPaladin_PetHeal_enable
	Vdebug = PQI_VachiusaGeneralHolyPaladin_Vdebug_enable	

	
	if Nova_LowHP == nil then Nova_LowHP = 80 end
	if Nova_ActualHP == nil or Nova_ActualHP then Nova_ActualHP = false end
	
	-- Hotkeys
	if not PQI_Hotkeys_Functions_Set then
		function PQI_PauseRotation()
			if PQI_VachiusaHealingHolyPaladin_PauseRotation_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPaladin_PauseRotation_key) then
			return true else return false 
		end	end
		function PQI_AvengingWrath()
			if PQI_VachiusaHealingHolyPaladin_AvengingWrath_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPaladin_AvengingWrath_key) then
			return true else return false
		end	end		
		function PQI_Talent90()
			if PQI_VachiusaHealingHolyPaladin_Talent90_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPaladin_Talent90_key) then
			return true else return false
		end	end			
		function PQI_DivineFavor()
			if PQI_VachiusaHealingHolyPaladin_DivineFavor_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPaladin_DivineFavor_key) then
			return true else return false
		end	end	
		function PQI_DevotionAura()
			if PQI_VachiusaHealingHolyPaladin_DevotionAura_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPaladin_DevotionAura_key) then
			return true else return false
		end	end		
		function PQI_AddingPlayersCT()
			if PQI_VachiusaHealingHolyPaladin_AddingPlayersCT_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPaladin_AddingPlayersCT_key) then
			return true else return false
		end	end	
		function PQI_RemovingPlayersCT()
			if PQI_VachiusaHealingHolyPaladin_RemovingPlayersCT_enable and PQI:IsHotkeys(PQI_VachiusaHealingHolyPaladin_RemovingPlayersCT_key) then
			return true else return false
		end	end			
	end	
	
	Nova_PauseRotationCheck = PQI_VachiusaHealingHolyPaladin_PauseRotation_enable
	Nova_MAvengingWrathCheck = PQI_VachiusaHealingHolyPaladin_AvengingWrath_enable
	Nova_Talent90ModCheck = PQI_VachiusaHealingHolyPaladin_Talent90_enable
	Nova_MDivineFavorCheck = PQI_VachiusaHealingHolyPaladin_DivineFavor_enable
	Nova_MDevotionAuraCheck = PQI_VachiusaHealingHolyPaladin_DevotionAura_enable	
	Nova_AddingPlayersCTCheck = PQI_VachiusaHealingHolyPaladin_AddingPlayersCT_enable
	Nova_RemovingPlayersCTCheck = PQI_VachiusaHealingHolyPaladin_RemovingPlayersCT_enable
	
	VachiusaHolyPaladin_PauseRotation_key = PQI_PauseRotation()
	VachiusaHolyPaladin_AvengingWrath_key = PQI_AvengingWrath()
	VachiusaHolyPaladin_Talent90_key = PQI_Talent90()
	VachiusaHolyPaladin_DivineFavor_key = PQI_DivineFavor()
	VachiusaHolyPaladin_DevotionAura_key = PQI_DevotionAura()
	VachiusaHolyPaladin_AddingPlayersCT_key = PQI_AddingPlayersCT()
	VachiusaHolyPaladin_RemovingPlayersCT_key = PQI_RemovingPlayersCT()	

	--Set PQI
	if not PQI_VachiusaHolyPaladin_Set and VachiusaHolyPaladin_AutoOpenPQIOptions_enable ~= nil then
		RunMacroText(&amp;quot;/PQI show&amp;quot;)
		RunMacroText(&amp;quot;/PQI config show&amp;quot;)
		RunMacroText(&amp;quot;/PQI config width 220&amp;quot;)
		if not VachiusaHolyPaladin_AutoOpenPQIOptions_enable then
		RunMacroText(&amp;quot;/PQI config hide&amp;quot;) end
		PQI_VachiusaHolyPaladin_Set = true
	end
end

--PQI is not loading variables instantly any more ?_? need to delay till they are loaded to avoid errors!
if PQI_Variables_Loaded == nil then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>FlashOfLightTank</Name><Default>false</Default><SpellID>19750</SpellID><Actions></Actions><Lua>--FlashOfLightTank
if Nova_FlashOfLightTankCheck then
	if PQR_SpellAvailable(19750) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)	 
	 and IsUsableSpell(19750)
	 and not Nova_Moving 
	 and not UnitChannelInfo(&amp;quot;player&amp;quot;)
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;)	 
	 and not stopcasting then	 
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit) 	
				 and Nova_Tanks[i].HP &amp;lt;= Nova_FlashOfLightTank 
				 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 10 		 
				 and IsSpellInRange(GetSpellInfo(19750),Nova_Tanks[i].Unit) == 1 then
					--Beacon for HP
					if GlyphCheck(63218) and not Nova_BeaconOfLightTanksOnlyCheck then		
						if PQR_SpellAvailable(53563)
						and not UnitBuffID(Nova_Tanks[i].Unit, 53563, &amp;quot;PLAYER&amp;quot;)
						and IsSpellInRange(GetSpellInfo(53563),Nova_Tanks[i].Unit) == 1
						and GetSpellCooldown(53563) == 0 	
						then		
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight before flash: &amp;quot;..UnitName(Nova_Tanks[i].Unit))
							CastSpellByName(GetSpellInfo(53563), Nova_Tanks[i].Unit)
						end			
					end				 					 
					PQR_CustomTarget = Nova_Tanks[i].Unit
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFFlash Of Light Tank!&amp;quot;)	
					return true					
				end
			end
		end
	end
end</Lua><RecastDelay>50</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 54Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_54EventsCheck 
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	local boss,bossid = bossid()
	local dispelid = 4987	
	local rangecheckid = 635	
	local buff = { }
	stopcasting = false
	stopfade = false
	stopdps = false
	LLdebuff = false
	LLdebuffunit = false	
	if UnitExists(boss) then
		--local _, _, rdifficulty = GetInstanceInfo()
		if bossid == 71515 then --General Nazgrim
			if UnitBuffID(&amp;quot;boss1&amp;quot;, 143593) then --Defensive Stance
				stopdps = true				
			else
				stopdps = false
			end
		elseif bossid == 71995 or bossid == 71996 or bossid == 72000 then --Amalgam of Corruption - Norushen
			if UnitDebuffID(&amp;quot;player&amp;quot;,144850) --Test of Reliance
			then 
				BossSheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, 3, true, rangecheckid)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true
				local buff  = { 144514 } --Lingering Corruption
				RaidDispel(dispelid,buff) 	
			end
		elseif bossid == 71475 or bossid == 71479 or bossid == 71480 then --The Fallen Protectors
			local buff  = { 143434 } --Shadow Word: Bane
			RaidDispel(dispelid,buff) 	
		elseif bossid == 71734 then --Sha of Pride
			if UnitDebuffID(&amp;quot;player&amp;quot;,144359) then
				local buff  = { 144351 } --Mark of Arrogance
				RaidDispel(dispelid,buff) 			
			end
		elseif bossid == 71454 then --Malkorok	
			local buff  = { 142913 } 	
			RaidRangeDispel(dispelid,buff,8) 	
			if UnitDebuffID(&amp;quot;player&amp;quot;,142861) then --Ancient Miasma			
				ShieldSheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true					
			end
		elseif bossid == 71161 then --Kil&amp;apos;ruk the Wind-Reaver - Paragons of the Klaxxi
			if UnitDebuffID(&amp;quot;player&amp;quot;,141858) then --Ingenious			
				if not tIngenious or (#tIngenious &amp;gt; 0 and (GetTime() &amp;gt; tIngenious[1].Time + 30)) then
					tIngenious = { }						
					local qTime = GetTime() 
					local lastmax = 0
					local maxunit = &amp;quot;player&amp;quot;		
					local lasttype = &amp;quot;notype&amp;quot;						
					local ClassList = { {&amp;apos;WARRIOR&amp;apos;, 0 }, {&amp;apos;PALADIN&amp;apos;, 0 }, {&amp;apos;HUNTER&amp;apos;, 0 }, {&amp;apos;ROGUE&amp;apos;, 0 }, {&amp;apos;PRIEST&amp;apos;, 0 }, {&amp;apos;DEATHKNIGHT&amp;apos;, 0 }, {&amp;apos;SHAMAN&amp;apos;, 0 }, {&amp;apos;MAGE&amp;apos;, 0 }, {&amp;apos;WARLOCK&amp;apos;, 0 }, {&amp;apos;MONK&amp;apos;, 0 }, {&amp;apos;DRUID&amp;apos;, 0 } }				
					local RaceList = { {&amp;apos;Draenei&amp;apos;, 0 }, {&amp;apos;Gnome&amp;apos;, 0 }, {&amp;apos;Human&amp;apos;, 0 }, {&amp;apos;NightElf&amp;apos;, 0 }, {&amp;apos;Worgen&amp;apos;, 0 }, {&amp;apos;Pandaren&amp;apos;, 0 }, {&amp;apos;BloodElf&amp;apos;, 0 }, {&amp;apos;Goblin&amp;apos;, 0 }, {&amp;apos;Orc&amp;apos;, 0 }, {&amp;apos;Tauren&amp;apos;, 0 }, {&amp;apos;Troll&amp;apos;, 0 }, {&amp;apos;Scourge&amp;apos;, 0 } }
					for i=1,25 do
						local unitCheck = &amp;quot;raid&amp;quot;..i
					    if UnitExists(unitCheck) and UnitIsPlayer(unitCheck) then
					    	local _, unitClass = UnitClass(unitCheck)				    	
					    	local _, unitRace = UnitRace(unitCheck)				    	
					        if unitClass and UnitRace then	
								--Class
								for j=1, #ClassList do
									if unitClass == ClassList[j][1] then
										--PQR_WriteToChat(&amp;quot;Debug1 - Num: &amp;quot; ..ClassList[j][2]..&amp;quot; - Class: &amp;quot; ..ClassList[j][1])
										ClassList[j][2] = ClassList[j][2] + 1
										if ClassList[j][2] &amp;gt; lastmax then
											lastmax = ClassList[j][2]
											maxunit = unitCheck
											lasttype = ClassList[j][1]
										end												
									end		
								end
								--Race
								for j=1, #RaceList do
									if unitRace == RaceList[j][1] then
										--PQR_WriteToChat(&amp;quot;Debug1 - Num: &amp;quot; ..RaceList[j][2]..&amp;quot; - Race: &amp;quot; ..RaceList[j][1])
										RaceList[j][2] = RaceList[j][2] + 1
										if RaceList[j][2] &amp;gt; lastmax then
											lastmax = RaceList[j][2]
											maxunit = unitCheck
											lasttype = RaceList[j][1]
										end												
									end		
								end
					        end			               	
					    end
					end				
					--PQR_WriteToChat(&amp;quot;Debug1 - Unit: &amp;quot; ..maxunit..&amp;quot; - Type: &amp;quot; ..lasttype..&amp;quot; - Total: &amp;quot; ..lastmax..&amp;quot; - Time: &amp;quot; ..qTime)		
					table.insert(tIngenious, { Unit = maxunit, Type = lasttype, Total = lastmax, Time = qTime } )			
					return true								
				else
					if #tIngenious &amp;gt; 0 then			
						if UnitExists(tIngenious[1].Unit) 
						and IsSpellInRange(GetSpellInfo(rangecheckid),tIngenious[1].Unit) == 1
						and CanHeal(tIngenious[1].Unit) then	
			    			TargetUnit(tIngenious[1].Unit) 
			                --Press the ExtraActionButton 
			                RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)                     
			                RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
			                --PQR_WriteToChat(&amp;quot;Ingenious Name: &amp;quot;..UnitName(tIngenious[1].Unit)..&amp;quot; - Type: &amp;quot;..tIngenious[1].Type..&amp;quot; - Total: &amp;quot;..tIngenious[1].Total..&amp;quot; - Time: &amp;quot;..tIngenious[1].Time)						        					        	   	
						end
					end				
				end   				
			else
				tIngenious = false
			end
		elseif bossid == 71529 then --Thok the Bloodthirsty
			local buff  = { 143791 } --Corrosive Blood
			RaidDispel(dispelid,buff) 
			local DeafeningScreech = GetSpellInfo(143343) --Deafening Screech
			local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(boss) 
			if (bossCasting == DeafeningScreech) then
				stopcasting = true
			end							
		end	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- NPCMouseoverHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--NPCMouseoverHeal
if Nova_NPCMouseoverHeal
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
then
	local dispelid = 4987	
	local rangecheckid = 635 --Holy Light
	if UnitExists(&amp;quot;mouseover&amp;quot;)				
	and not UnitIsPlayer(&amp;quot;mouseover&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;mouseover&amp;quot;):sub(6,10), 16) 				
		if npcID == 71604 --Contaminated Puddle - Immerseus - SoO
		or npcID == 71995 or npcID == 71996 or npcID == 72000 --Norushen
		or npcID == 71357 --Wrathion 
		then				
			if IsSpellInRange(GetSpellInfo(rangecheckid),&amp;quot;mouseover&amp;quot;)
			and Nova_UnitInfo(&amp;quot;mouseover&amp;quot;) &amp;lt; 100 then	
				--WordOfGlory 
				if select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= 3 then
					if IsPlayerSpell(114163) --Eternal Flame - talent check
					and select(2,GetTalentRowSelectionInfo(3)) == 8
					and PQR_SpellAvailable(114163) then
						if select(2, GetSpellCooldown(114163)) == 0
						and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
						then
							CastSpellByName(GetSpellInfo(114163), &amp;quot;mouseover&amp;quot;)							
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast EternalFlame - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 	
							return true						
						end
					elseif PQR_SpellAvailable(85673) then --WordOfGlory
						 if select(2, GetSpellCooldown(85673)) == 0 
						 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then				
							CastSpellByName(GetSpellInfo(85673), &amp;quot;mouseover&amp;quot;)										
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast WordOfGlory - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 	
							return true						
						end
					end
				end
	
			 	if PQR_SpellAvailable(20473) 	
			 	and IsUsableSpell(20473) 	 			 
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
					CastSpellByName(tostring(GetSpellInfo(20473)),&amp;quot;mouseover&amp;quot;)	 			 		
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyShock - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 	
			 		return true
				end	
								 	
			 	if PQR_SpellAvailable(19750) 		 
				and IsUsableSpell(19750) 			 
				and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 70
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
					CastSpellByName(tostring(GetSpellInfo(19750)),&amp;quot;mouseover&amp;quot;)	 			 		
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast FlashOfLight - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 	
			 		return true
				end	
				
				if PQR_SpellAvailable(82326) 		 
				and IsUsableSpell(82326) 	
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 					
					CastSpellByName(tostring(GetSpellInfo(82326)),&amp;quot;mouseover&amp;quot;)	 						 		
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast DivineLight - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 			
			 		return true
				end	
			end
		end		
	elseif UnitExists(&amp;quot;focus&amp;quot;)				
	and not UnitIsPlayer(&amp;quot;focus&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;focus&amp;quot;):sub(6,10), 16) 				
		if npcID == 71604 --Contaminated Puddle - Immerseus - SoO
		or npcID == 71995 or npcID == 71996 or npcID == 72000 --Norushen
		or npcID == 71357 --Wrathion 
		then
			if IsSpellInRange(GetSpellInfo(rangecheckid),&amp;quot;focus&amp;quot;) --FlashHeal
			then		
				local focushp = CalculateHP(&amp;quot;focus&amp;quot;)
				if focushp ~= nil and select(2, CalculateHP(&amp;quot;focus&amp;quot;)) ~= nil then
					table.insert(members, { Unit = &amp;quot;focus&amp;quot;, HP = focushp, AHP = select(2, CalculateHP(&amp;quot;focus&amp;quot;)), IsNPC = true } )
				end
				if #members &amp;gt; 0 then
					table.sort(members, function(x,y) return x.HP &amp;lt; y.HP end)
				end				
			end
		end	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Judgment</Name><Default>false</Default><SpellID>20271</SpellID><Actions></Actions><Lua>--Judgment
if Nova_JudgmentCheck
and select(2,GetTalentRowSelectionInfo(3)) == 7 then	
	if not UnitBuffID(&amp;quot;PLAYER&amp;quot;, 114250)
	or select(5, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 5
	or (UnitBuffID(&amp;quot;PLAYER&amp;quot;, 114250)
	and (select(7, UnitBuffID(&amp;quot;PLAYER&amp;quot;, 114250)) - GetTime() &amp;lt; 2 
	or select(4, UnitBuffID(&amp;quot;PLAYER&amp;quot;, 114250)) &amp;lt; 3)) then --Selfless Healer
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDebug 2&amp;quot;)
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)	
		and not stopdps	
		and PQR_SpellAvailable(20271) 
		and UnitExists(&amp;quot;target&amp;quot;)
		and IsSpellInRange(GetSpellInfo(20271),&amp;quot;target&amp;quot;) == 1
		and select(2,GetSpellCooldown(20271)) &amp;lt; 2
		and IsUsableSpell(20271)
		and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
		and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
		and not UnitCastingInfo(&amp;quot;player&amp;quot;)
		and not LineOfSight(&amp;quot;target&amp;quot;)
		and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
			return true 
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyAvenger (TC)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--HolyAvenger (TC)
if select(2,GetTalentRowSelectionInfo(5)) == 13 then
	if (Nova_MAvengingWrathCheck and VachiusaHolyPaladin_AvengingWrath_key and not GetCurrentKeyBoardFocus())
	or (Nova_HolyAvengerAutoCheck and select(5, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 3 and AverageHealth(Nova_DivineFavorLimit) &amp;lt;= Nova_DivineFavor and not UnitBuffID(&amp;quot;player&amp;quot;, 105809) and not UnitBuffID(&amp;quot;player&amp;quot;, 31842) and not UnitBuffID(&amp;quot;player&amp;quot;, 31821)) then
		if not UnitCastingInfo(&amp;quot;player&amp;quot;) 
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)		
		and PQR_SpellAvailable(105809)				
		and GetSpellCooldown(105809) == 0 then
		  CastSpellByName(tostring(GetSpellInfo(105809),nil))		   
		  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Shift Key Down - HolyAvenger!&amp;quot;)
		  return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ExecutionSentence</Name><Default>false</Default><SpellID>114157</SpellID><Actions></Actions><Lua>--ExecutionSentence
if select(2,GetTalentRowSelectionInfo(6)) == 18 then	
	if (Nova_Talent90ModCheck and VachiusaHolyPaladin_Talent90_key and not GetCurrentKeyBoardFocus())	
	or (Nova_Talent90AutoCheck and AverageHealth(Nova_Talent90Limit) &amp;lt;= Nova_Talent90) then
		if PQR_SpellAvailable(114157) 
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and select(2,GetSpellCooldown(114157)) &amp;lt; 2		
		and not LLdebuff 
		and not UnitChannelInfo(&amp;quot;player&amp;quot;)	
		and not UnitCastingInfo(&amp;quot;player&amp;quot;)		
		then	
			if not stopdps then		
			 
				PRGetDistanceTable((Nova_Talent90+10), 10, (Nova_Talent90Limit-1)) 
				PRGetDistanceTablebyHP(Nova_Talent90,(Nova_Talent90Limit-1))					
				
				if (prdistancebyhp[1].PD &amp;gt;= (Nova_Talent90Limit-1))
				and prdistancebyhp[1].HP &amp;lt;= Nova_Talent90 
				and IsSpellInRange(GetSpellInfo(114157),prdistancebyhp[1].Unit) 
				then	
					PQR_CustomTarget = prdistancebyhp[1].Unit
					PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast ExecutionSentence - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 											
					return true							
				end				 	 					
			end
	
		end		
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyPrismSmart</Name><Default>false</Default><SpellID>114165</SpellID><Actions></Actions><Lua>--HolyPrismSmart
if select(2,GetTalentRowSelectionInfo(6)) == 16 then
	if (Nova_Talent90ModCheck and VachiusaHolyPaladin_Talent90_key and not GetCurrentKeyBoardFocus())
	or (Nova_Talent90AutoCheck and AverageHealth(Nova_Talent90Limit) &amp;lt;= Nova_Talent90 and not stopdps) then
		if PQR_SpellAvailable(114165) 
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsUsableSpell(114165) 
		and GetSpellCooldown(114165) == 0
		and not LLdebuff 
		then	
			local bossCheck,bossid = bossid()	 		 				
		 	if UnitExists(bossCheck) 
		 	or UnitExists(&amp;quot;target&amp;quot;) then				 		
		 		if Nova_Talent90ModCheck and VachiusaHolyPaladin_Talent90_key and not GetCurrentKeyBoardFocus() then		 			
		 			if UnitExists(&amp;quot;target&amp;quot;) then
		 				bossCheck = &amp;quot;target&amp;quot;
		 			end						
					if IsSpellInRange(GetSpellInfo(114165),bossCheck) == 1						
					and not PQR_IsOutOfSight(bossCheck)
					and not UnitIsDeadOrGhost(bossCheck)
					and (UnitCanAttack(&amp;quot;player&amp;quot;, bossCheck) 
						or UnitCanCooperate(&amp;quot;player&amp;quot;,bossCheck)) 
					and not LineOfSight(bossCheck)
					and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
						PQR_CustomTarget = bossCheck
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyPrism on target: &amp;quot;..UnitName(bossCheck)) 	
						return true	
					end
				else			 
					if UnitExists(&amp;quot;target&amp;quot;) then
		 				bossCheck = &amp;quot;target&amp;quot;
		 			end
		 			
		 			if IsSpellInRange(GetSpellInfo(114165),bossCheck) == 1						
					and not PQR_IsOutOfSight(bossCheck)
					and not LineOfSight(bossCheck)
					and not UnitIsDeadOrGhost(bossCheck) then							
						if UnitCanAttack(&amp;quot;player&amp;quot;, bossCheck) then
							local targetrangecheck = 15
							if IsBoss(bossCheck) then									
								targetrangecheck = 20								
							end
							local real_b = 0
							if #members &amp;gt; 1 then
								for i=1,#members do		
									if PQR_UnitDistance(bossCheck,members[i].Unit) and members[i].HP then
										if PQR_UnitDistance(bossCheck,members[i].Unit) &amp;lt;= targetrangecheck 							
										and members[i].HP &amp;lt;= Nova_Talent90 then
											real_b = real_b + 1					
											if real_b &amp;gt;= Nova_Talent90Limit then
												break
											end									
										end
									end
								end
								if real_b &amp;gt;= Nova_Talent90Limit 
								and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
									PQR_CustomTarget = bossCheck
									--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HolyPrism - PD: &amp;quot;..real_b) 																
									return true					
								end
							end								
						end
					end
				end
			end			
		end
	end
end</Lua><RecastDelay>300</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- QueueSys</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- QueueSys
if Nova_QueueSysCheck 
then
	local dispelid = 4987	
	local rangecheckid = 635	
	if #Queue_Sys &amp;gt; 0 then
		function tablelength(T)
		  local count = 0
		  for _ in pairs(T) do count = count + 1 end
		  return count
		end		
		
		if PQR_SpellAvailable(dispelid) 
		and select(2,GetSpellCooldown(dispelid)) &amp;lt; 2
		and UnitExists(Queue_Sys[1].Unit)
		and IsUsableSpell(dispelid)
		and IsSpellInRange(GetSpellInfo(dispelid),Queue_Sys[1].Unit) == 1
		and CanHeal(Queue_Sys[1].Unit)
		and not PQR_IsOutOfSight(Queue_Sys[1].Unit) then
			if not UnitChannelInfo(&amp;quot;player&amp;quot;)
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			then	
				CastSpellByName(tostring(GetSpellInfo(dispelid)),Queue_Sys[1].Unit)							
				return true	
			end
		end
	end
	
	if Queue_Spell then
		if #Queue_Spell &amp;gt; 0 then	
			if GetTime() - Queue_Spell[1].Time &amp;gt;= 10 then
				--PQR_WriteToChat(&amp;quot;Removed expired queue &amp;quot;..Queue_Spell[1].SpellID)
				Queue_Spell = { }				
				return true
			end			
			if #Queue_Spell &amp;gt; 1 then			
				if Queue_Spell[1].SpellID == Queue_Spell[2].SpellID and Queue_Spell[1].Unit == Queue_Spell[2].Unit then
					--PQR_WriteToChat(&amp;quot;Removed dup queue &amp;quot;..Queue_Spell[1].SpellID)
					table.remove(Queue_Spell,2)	
					return true	
				end
			end
			
			local qunit = &amp;quot;player&amp;quot;
			if Queue_Spell[1].Unit == &amp;quot;low&amp;quot; then
				qunit = members[1].Unit
			elseif Queue_Spell[1].Unit == &amp;quot;tank&amp;quot; then
				if #Nova_Tanks &amp;gt; 0 then
					for i=1, #Nova_Tanks do
						if UnitThreatSituation(Nova_Tanks[i].Unit) then
							qunit = Nova_Tanks[i].Unit
							break
						end
					end
				end
				if UnitThreatSituation(members[1].Unit)	== 3 then
				 	qunit = members[1].Unit
				end			
			else
				qunit = Queue_Spell[1].Unit
			end
			
			if PQR_SpellAvailable(tonumber(Queue_Spell[1].SpellID)) 
			and select(2,GetSpellCooldown(tonumber(Queue_Spell[1].SpellID))) &amp;lt; 2
			and UnitExists(qunit)
			then
				if not UnitChannelInfo(&amp;quot;player&amp;quot;)
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
				then					
					local qmembers = members
					table.sort(qmembers, function(x) return UnitIsUnit(qunit,x.Unit) end)
					if UnitIsUnit(qmembers[1].Unit,qunit) then
						qunit = qmembers[1].Unit	
					else
						if IsSpellInRange(GetSpellInfo(Queue_Spell[1].SpellID),Queue_Spell[1].Unit) then
							qunit = Queue_Spell[1].Unit	
						else
							qunit = &amp;quot;player&amp;quot;				
						end
					end
					SpellSUCCEEDED(Queue_Spell[1].SpellID,qunit)
					CastSpellByName(tostring(GetSpellInfo(Queue_Spell[1].SpellID)),qunit)									
					return true						
				end
			end						
		end
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>EFSpam</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--EternalFlameBuffSpam 
if Nova_EternalFlameBuffSpamCheck 
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and (select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;)) &amp;gt;= Nova_EFSpamHolyPower or UnitBuffID(&amp;quot;player&amp;quot;,90174)) then
	if IsPlayerSpell(114163) --Eternal Flame - talent check
	and select(2,GetTalentRowSelectionInfo(3)) == 8
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(114163) then
		if select(2, GetSpellCooldown(114163)) == 0 then
			if #Nova_Tanks &amp;gt; 0 then
				for i=1, #Nova_Tanks do
					if UnitThreatSituation(Nova_Tanks[i].Unit) 	
					and not UnitBuffID(Nova_Tanks[i].Unit,114163,&amp;quot;player&amp;quot;)		
		 			and IsSpellInRange(GetSpellInfo(85673),Nova_Tanks[i].Unit) == 1 then 					 
			 			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting EternalFlame Buff Spam on Tanks - HP: &amp;quot; ..Nova_Tanks[i].HP..&amp;quot; - HolyP: &amp;quot;..select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;))) 
						CastSpellByName(GetSpellInfo(114163), Nova_Tanks[i].Unit)				
						return true			
					end
				end
			end		
			for i=1, #members do
				if not UnitBuffID(members[i].Unit,114163,&amp;quot;player&amp;quot;)		
	 			and IsSpellInRange(GetSpellInfo(85673),members[i].Unit) == 1 then 	
		 			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting EternalFlame Buff Spam - HP: &amp;quot; ..members[i].HP..&amp;quot; - HolyP: &amp;quot;..select(5, Nova_UnitInfo(&amp;apos;player&amp;apos;))) 
					CastSpellByName(GetSpellInfo(114163), members[i].Unit)				
					return true
				end
			end		
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HolyShockSpam</Name><Default>false</Default><SpellID>20473</SpellID><Actions></Actions><Lua>--HolyShockSpam
if Nova_HolyShockHealingSpamCheck then
	if PQR_SpellAvailable(20473) 		 
	and IsUsableSpell(20473) 	 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
		--Tank Shield Spam
		if #Nova_Tanks &amp;gt; 0 then
			if members[1].HP &amp;gt;= 98 then
				if not tmembers then tmembers = { } end
				tmembers = Nova_Tanks
				table.sort(tmembers, function(x,y) return x.ASP &amp;lt; y.ASP end)
				if IsSpellInRange(GetSpellInfo(20473),tmembers[1].Unit) == 1 then	 		 				
					PQR_CustomTarget = tmembers[1].Unit	
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HS for Tank Shield Spam&amp;quot;) 						
					return true									
				end
			end
		end
				
		if IsSpellInRange(GetSpellInfo(20473),members[1].Unit) == 1 then
			PQR_CustomTarget = members[1].Unit					
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting HolyShock - HP: &amp;quot; ..members[1].HP) 
			return true
		end
	end
end</Lua><RecastDelay>50</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>FlashOfLightLegendGem</Name><Default>false</Default><SpellID>19750</SpellID><Actions></Actions><Lua>--FlashOfLight
if PQR_SpellAvailable(19750) 
and IsSpellInRange(GetSpellInfo(19750),members[1].Unit) == 1
and IsUsableSpell(19750)	
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 	 
and not Nova_Moving 
and not stopcasting then
	if UnitBuffID(&amp;quot;player&amp;quot;,137331) 
	and ((select(7, UnitBuffID(&amp;quot;player&amp;quot;, 137331)) - GetTime()) &amp;gt;= 2) --Meta gem Lucidity
	then	
		--Beacon for HP
		if GlyphCheck(63218) and not Nova_BeaconOfLightTanksOnlyCheck then		
			if PQR_SpellAvailable(53563)
			and not UnitBuffID(members[1].Unit, 53563, &amp;quot;PLAYER&amp;quot;)
			and IsSpellInRange(GetSpellInfo(53563),members[1].Unit) == 1
			and GetSpellCooldown(53563) == 0 	
			then		
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBeaconOfLight Lucidity before FOL: &amp;quot;..UnitName(members[1].Unit))
				PQR_CustomTarget = members[1].Unit
				CastSpellByName(GetSpellInfo(53563), members[1].Unit)
				return true			
			end
		end
		for i=1, #members do	
			if UnitBuffID(members[i].Unit, 53563, &amp;quot;PLAYER&amp;quot;) then
				PQR_CustomTarget = members[i].Unit
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFFoL Lucidity on: &amp;quot;..UnitName(members[i].Unit))
			 	return true				
			end
		end				 	
	end
end</Lua><RecastDelay>50</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PALADIN>