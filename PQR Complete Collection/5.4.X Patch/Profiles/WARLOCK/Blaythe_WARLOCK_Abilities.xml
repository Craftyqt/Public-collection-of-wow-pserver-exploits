<?xml version="1.0" encoding="utf-8" ?><WARLOCK><Ability><Name>-- Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--SUMMARY--
--Constants and variables:
--PQ_target;PQ_focus;PQ_mouseover;PQ_boss1;PQ_boss2;PQ_boss3;PQ_boss4;PQ_mainboss;PQ_secondaryboss;PQ_trashboss;PQ_RotationMode
--Buffs IDs:
--PQ_DemonSoul;PQ_BloodFury;PQ_Soulburn;PQ_EmpoweredImp;PQ_ImpruvedSoulFire;PQ_Heroism;PQ_BloodLust;PQ_TimeWarp;PQ_Hysteria
--Skill IDs:
--PQ_Shadowflame;PQ_Corruption;PQ_BaneOfAgony;PQ_CurseOfElements;PQ_Conflagate;PQ_LifeTap;PQ_ChaosBolt;PQ_Shadowburn;PQ_BaneOfHavoc;PQ_Incinerate;PQ_Immolate;PQ_SoulFire;PQ_BaneOfDoom;PQ_FelFlame;PQ_Fear;PQ_Doomguard
--Logic booleans:
--PQ_HasLossOfControl;PQ_HasEveryManSpell;PQ_InCombat
--Tables:
--PQ_Buffs{check,hasBuff,endTime};PQ_PlayerDebuffs{check,playerdebuffList,spellid,hasDebuff,endTime};PQ_Units{check,unitdebuffList,guid,immunity};PQ_Skills{castonmove,isknown}
--Lists:
--PQ_PlayerDebuffList[BreakOnDamage,Fear,Root,MovementImpairing];PQ_UnitDebuffList[mouseover,target,focus,boss1,boss2,boss3,boss4];PQ_UnitSkillList[target,focus,mouseover,mainboss,secondaryboss,trashboss];PQ_ImmunityList;PQ_PriorityList;PQ_RotationList

if not PQ_LockVariablesLoaded then
	if PQ_Debug then
		DebugFrame.messageFrame:AddMessage(&amp;apos;Loading WarLock variables ...&amp;apos;)
	end	
	
	--Targeting constants and variables
	PQ_player			= &amp;apos;player&amp;apos;
	PQ_target			= &amp;apos;target&amp;apos;
	PQ_focus			= &amp;apos;focus&amp;apos;
	PQ_mouseover		= &amp;apos;mouseover&amp;apos;
	PQ_boss1			= &amp;apos;boss1&amp;apos;
	PQ_boss2			= &amp;apos;boss2&amp;apos;
	PQ_boss3			= &amp;apos;boss3&amp;apos;
	PQ_boss4			= &amp;apos;boss4&amp;apos;
	PQ_mainboss			= nil
	PQ_secondaryboss	= nil
	PQ_trashboss		= nil
	PQ_RotationMode		= nil
	
	--Buffs IDs
	PQ_Backdraft		= 117896
	PQ_Potok			= 74241
	PQ_Speed			= 107982
	PQ_Peski			= 107804
	PQ_Heroism			= 32182
	PQ_BloodLust		= 2825
	PQ_TimeWarp			= 80353
	PQ_Hysteria			= 90355

	--Skill IDs
	PQ_Shadowflame		= 47897
	PQ_Corruption		= 172
	PQ_BaneOfAgony		= 980
	PQ_CurseOfElements	= 1490
	PQ_Conflagate		= 17962
	PQ_ChaosBolt		= 116858
	PQ_Shadowburn		= 17877
	PQ_BaneOfHavoc		= 80240
	PQ_Incinerate		= 29722
	PQ_Immolate			= 348
	PQ_BaneOfDoom		= 603
	PQ_FelFlame			= 77799
	PQ_Fear				= 5782
	PQ_DemonSoul		= 113858
	
	--Logic booleans
	PQ_HasLossOfControl = false
	PQ_HasEveryManSpell = IsSpellKnown(59752)
	PQ_InCombat = false
	
	--Player buff table
	PQ_Buffs = { 
		[PQ_Backdraft]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_Potok]				= {check = true, hasBuff = false, endTime = nil},
		[PQ_Speed]				= {check = true, hasBuff = false, endTime = nil},
		[PQ_Peski]				= {check = true, hasBuff = false, endTime = nil},
		[PQ_Heroism]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_BloodLust]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_TimeWarp]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_Hysteria]			= {check = true, hasBuff = false, endTime = nil}
	}
	
	--List of possible player debuffs
	PQ_PlayerDebuffList = {}

	PQ_PlayerDebuffList.BreakOnDamage = {
		19503--[[Scatter Shot]],
		1499--[[Freezing Trap]],
		6358--[[Seduction]],
		9484--[[Shackle Undead]],
		6770--[[Sap]],
		118--[[Polymorph]],
		51514--[[Hex]],
		2094--[[Blind]],
		2637--[[Hibernate]],
		76780--[[Bind Elemental]]
	}
	PQ_PlayerDebuffList.Fear = {
		5782--[[Fear]],
		5484--[[Howl of Terror]],
		8122--[[Psychic Scream]],
		1513--[[Scare Beast]],
		10326--[[Turn Evil]],
		5246--[[Intimidating Shout]]
	}
	PQ_PlayerDebuffList.Root = {
		339--[[Entangling Roots]],
		122--[[Frost Nova]],
		45524--[[Chains of Ice]],
		16979--[[Feral Charge - Bear]]
	}
	PQ_PlayerDebuffList.Raid = {}
	PQ_PlayerDebuffList.MovementImpairing = {
		5116--[[Concussive Shot]],
		2974--[[Wing Clip]],
		13809--[[Ice Trap]],
		116--[[Frostbolt]],
		120--[[Cone of Cold]],
		11113--[[Blast Wave]],
		31589--[[Slow]],
		15407--[[Mind Flay]],
		3408--[[Crippling Poison]],
		26679--[[Deadly Throw]],
		8056--[[Frost Shock]],
		2484--[[Earthbind Totem]],
		18223--[[Curse of Exhaustion]],
		1715--[[Hamstring]],
		12323--[[Piercing Howl]]
	}

	--Table of player debuffs by type
	PQ_PlayerDebuffs = {
		[&amp;apos;Fear&amp;apos;]				= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.Fear , spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;Root&amp;apos;]				= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.Root , spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;BreakOnDamage&amp;apos;]		= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.BreakOnDamage , spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;MovementImpairing&amp;apos;]	= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.MovementImpairing , spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;Raid&amp;apos;]				= {check = false, playerdebuffList = PQ_PlayerDebuffList.Raid , spellid = nil, hasDebuff = false, endTime = nil}
	}
	
	--List of debuffs by target
	print(PQ_LockVariablesLoaded)
	PQ_UnitDebuffList = {} 
	
	PQ_UnitDebuffList.mouseover = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}	

	PQ_UnitDebuffList.target = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}

	PQ_UnitDebuffList.focus = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}

	PQ_UnitDebuffList.boss1 = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}

	PQ_UnitDebuffList.boss2 = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}

	PQ_UnitDebuffList.boss3 = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}
	
	PQ_UnitDebuffList.boss4 = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}
	
	--List of immunities
	PQ_ImmunityList	= {
		642, 
		45438, 
		31224, 
		23920, 
		33786, 
		19263, 
		97417, 
		97977
	}
	
	--Table of targets
	PQ_Units = {
		[PQ_mouseover]		= {check = true, unitdebufflist = PQ_UnitDebuffList.mouseover, guid = nil, immunity = false, burn = false},	 
		[PQ_target]			= {check = true, unitdebufflist = PQ_UnitDebuffList.target, guid = nil, immunity = false, burn = false},
		[PQ_focus]			= {check = true, unitdebufflist = PQ_UnitDebuffList.focus, guid = nil, immunity = false, burn = false},
		[PQ_boss1]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss1, guid = nil, immunity = false, burn = false},
		[PQ_boss2]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss2, guid = nil, immunity = false, burn = false},
		[PQ_boss3]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss3, guid = nil, immunity = false, burn = false},
		[PQ_boss4]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss3, guid = nil, immunity = false, burn = false}
	}
	
	--List of priorities
	PQ_PriorityList = {}
	
	PQ_PriorityList[1] = PQ_mouseover
	PQ_PriorityList[2] = PQ_target
	PQ_PriorityList[3] = PQ_focus
	PQ_PriorityList[4] = nil
	PQ_PriorityList[5] = nil
	PQ_PriorityList[6] = nil
	
	--List of rotations
	PQ_RotationList = {}
	
	PQ_RotationList[1] = &amp;apos;STANDART&amp;apos;
	PQ_RotationList[2] = &amp;apos;MORCHOK&amp;apos;
	PQ_RotationList[3] = &amp;apos;WARLORD&amp;apos;
	PQ_RotationList[4] = &amp;apos;YORSAHJ&amp;apos;
	PQ_RotationList[5] = &amp;apos;HAGARA&amp;apos;
	PQ_RotationList[6] = &amp;apos;ULTRAXION&amp;apos;
	PQ_RotationList[7] = &amp;apos;WARMASTER&amp;apos;
	PQ_RotationList[8] = &amp;apos;SPINE&amp;apos;
	PQ_RotationList[9] = &amp;apos;MADNESS&amp;apos;
	
	--List of bosses
	PQ_BossList = {}
	
	--List of burnunits
	PQ_BurnUnitsList = {
		56575,
		56341,
		56262,
		56923
	}
	
	--List of skills by target
	PQ_UnitSkillList = {} 

	PQ_UnitSkillList.first = {
		[PQ_CurseOfElements]   	= {check = false},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = true},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = true},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},
		[PQ_Fear] 				= {check = false}			
					
	}

	PQ_UnitSkillList.second = { 
		[PQ_CurseOfElements]   	= {check = true},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = true},
		[PQ_Conflagate]   		= {check = true},
		[PQ_ChaosBolt] 			= {check = true},
		[PQ_Shadowburn] 		= {check = true},
		[PQ_Incinerate]    		= {check = true},
		[PQ_FelFlame] 			= {check = true},
		[PQ_Fear] 				= {check = false}			
	}

	PQ_UnitSkillList.third = { 
		[PQ_CurseOfElements]   	= {check = true},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = true},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = false},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},
		[PQ_Fear] 				= {check = false}			
	}

	PQ_UnitSkillList.forth = { 
		[PQ_CurseOfElements]   	= {check = false},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = false},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = false},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},
		[PQ_Fear] 				= {check = false}			
	}

	PQ_UnitSkillList.fifth = { 
		[PQ_CurseOfElements]   	= {check = false},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = false},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = false},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},
		[PQ_Fear] 				= {check = false}		
	}	
	
	PQ_UnitSkillList.six = { 
		[PQ_CurseOfElements]   	= {check = false},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = false},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = false},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},		
		[PQ_Fear] 				= {check = false}		
	}
	
	--Table of skills
	PQ_Skills = {
		[PQ_CurseOfElements]   	= {castonmove = true, isknown = IsSpellKnown(PQ_CurseOfElements)},
		[PQ_BaneOfHavoc] 		= {castonmove = true, isknown = IsSpellKnown(PQ_BaneOfHavoc)},
		[PQ_Immolate]   		= {castonmove = false, isknown = IsSpellKnown(PQ_Immolate)},
		[PQ_Conflagate]   		= {castonmove = true, isknown = IsSpellKnown(PQ_Conflagate)},
		[PQ_ChaosBolt] 			= {castonmove = false, isknown = IsSpellKnown(PQ_ChaosBolt)},
		[PQ_Shadowburn] 		= {castonmove = true, isknown = IsSpellKnown(PQ_Shadowburn)},
		[PQ_Incinerate]    		= {castonmove = false, isknown = IsSpellKnown(PQ_Incinerate)},
		[PQ_FelFlame] 			= {castonmove = true, isknown = IsSpellKnown(PQ_FelFlame)},
		[PQ_Fear] 				= {castonmove = false, isknown = IsSpellKnown(PQ_Fear)},
		[PQ_DemonSoul] 			= {castonmove = true, isknown = IsSpellKnown(PQ_DemonSoul)}
	}	
	
	PQ_LockVariablesLoaded = true
	if PQ_LockVariablesLoaded then
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;Sucess!!!&amp;apos;)
		end
	else
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;FAIL!!!&amp;apos;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Functions --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQ_LockFunctionsLoaded then
	if PQ_Debug then
		DebugFrame.messageFrame:AddMessage(&amp;apos;Loading WarLock functions ...&amp;apos;)
	end

	function PQ_CheckForAllBuffs()
		for k, v in pairs(PQ_Buffs) do
			
			if PQ_Buffs[k].check == true and UnitBuffID(PQ_player, k) then
				PQ_Buffs[k].hasBuff = true
				PQ_Buffs[k].endTime = (select(7, UnitBuffID(PQ_player, k)))
				if PQ_Debug then
					DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2APlayer has buff &amp;quot; .. GetSpellLink(k))
				end
			end
		end
	end

	function PQ_PlayerBuffHandler(spellID, hasBuffNow)
		if PQ_Buffs[spellID] and PQ_Buffs[spellID].check == true then
			PQ_Buffs[spellID].hasBuff = hasBuffNow   
			if hasBuffNow == true then
				PQ_Buffs[spellID].endTime = (select(7, UnitBuffID(PQ_player, spellID)))
				if PQ_Debug then
					DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AGained buff \124cFFFA652A&amp;quot; .. GetSpellLink(spellID))
				end
				return
			end
			if PQ_Debug then
				DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFFA652ALost buff &amp;quot; .. GetSpellLink(spellID))
			end
		end   
	end

	function PQ_PlayerDebuffHandler(spellID, hasDebuffNow)
		for type, debuffInfo in pairs(PQ_PlayerDebuffs) do  
			if (debuffInfo.check) then            
				for k, debuff in pairs(debuffInfo.playerdebuffList) do
					if (debuff == spellID) then
						PQ_PlayerDebuffs[type].hasDebuff = hasDebuffNow
						if (hasDebuffNow) then --Has debuff spellID of type
							PQ_PlayerDebuffs[type].spellid = spellID
							PQ_PlayerDebuffs[type].endTime = select(7, UnitDebuffID(PQ_player, spellID))
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AGained debuff &amp;quot; .. GetSpellLink(spellID) .. &amp;apos;\124cFFDBFA2A of type: \124cFFFA652A&amp;apos; .. type)
							end
						else
							PQ_PlayerDebuffs[type].spellid = nil
							PQ_PlayerDebuffs[type].endTime = nil
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFFA652ALost debuff &amp;quot; .. GetSpellLink(spellID) .. &amp;apos;\124cFFFA652A of type: \124cFFDBFA2A&amp;apos; .. type)
							end
						end
						return
					end
				end            
			end            
		end    
	end

	function PQ_UnitDebuffHandler(spellID, hasDebuffNow, handlerGUID)
		for target, targetinfo in pairs(PQ_Units) do
			if (targetinfo.check) and (targetinfo.guid == handlerGUID) then
				for debuff, debuffinfo in pairs(targetinfo.unitdebufflist) do
					if (debuff == spellID) and (debuffinfo.check) then
						debuffinfo.hasDebuff = hasDebuffNow
						if hasDebuffNow then
							debuffinfo.endTime = select(7, UnitDebuffID(target, spellID, PQ_player))
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AUnit (&amp;quot; .. target .. &amp;quot;,&amp;quot; .. handlerGUID .. &amp;quot;) \124cFFDBFA2Agained debuff &amp;quot; .. GetSpellLink(spellID))
							end
						else
							debuffinfo.endTime = nil
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AUnit (&amp;quot; .. target .. &amp;quot;,&amp;quot; .. handlerGUID .. &amp;quot;) \124cFFDBFA2Alost debuff &amp;quot; .. GetSpellLink(spellID))
							end
						end
					end
				end	
			end
		end
	end

	function PQ_UnitBuffHandler(spellID, hasBuffNow, handlerGUID)
		for target, targetinfo in pairs(PQ_Units) do
			if (targetinfo.check) and (targetinfo.guid == handlerGUID) then
				for i, buff in pairs(PQ_ImmunityList) do
					if (buff == spellID) then
						targetinfo.immunity = hasBuffNow
						if hasBuffNow then
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AUnit (&amp;quot; .. target .. &amp;quot;,&amp;quot; .. handlerGUID .. &amp;quot;) \124cFFDBFA2Agained immunity buff &amp;quot; .. GetSpellLink(spellID))
							end
						else
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AUnit (&amp;quot; .. target .. &amp;quot;,&amp;quot; .. handlerGUID .. &amp;quot;) \124cFFDBFA2Alost immunity buff &amp;quot; .. GetSpellLink(spellID))
							end
						end
					end
				end	
			end
		end
	end
	
	function PQ_UnitCheckDebuffs(unit)
		PQ_Units[unit].guid = UnitGUID(unit)
		if PQ_Units[unit].check then
			for debuff, debuffinfo in pairs(PQ_Units[unit].unitdebufflist) do
				if debuffinfo.check == true then
					if UnitDebuffID(unit, debuff, PQ_player) then
						debuffinfo.hasDebuff = true
						debuffinfo.endTime = (select(7, UnitDebuffID(unit, debuff, PQ_player)))
						if PQ_Debug then
							DebugFrame.messageFrame:AddMessage(unit .. &amp;quot;\124cFFDBFA2A has debuff &amp;quot; .. GetSpellLink(debuff))
						end
					else
						debuffinfo.hasDebuff = false
						debuffinfo.endTime = nil
						if PQ_Debug then
							DebugFrame.messageFrame:AddMessage(unit .. &amp;quot;\124cFFDBFA2A doesn&amp;apos;t has debuff &amp;quot; .. GetSpellLink(debuff))
						end
					end
				end
			end
		end	
	end

	function PQ_UnitCheckBuffs(unit)
		PQ_Units[unit].guid = UnitGUID(unit)
		if PQ_Units[unit].check then
			for i, buff in pairs(PQ_ImmunityList) do
				if UnitBuffID(unit, buff) then
					PQ_Units[unit].immunity = true
					if PQ_Debug then
						DebugFrame.messageFrame:AddMessage(unit .. &amp;quot;\124cFFDBFA2A has immunity buff &amp;quot; .. GetSpellLink(buff))
					end
				else
					PQ_Units[unit].immunity = false
					if PQ_Debug then
						DebugFrame.messageFrame:AddMessage(unit .. &amp;quot;\124cFFDBFA2A doesn&amp;apos;t has immunity buff &amp;quot; .. GetSpellLink(buff))
					end
				end
			end
		end	
	end

	function PQ_GetTimeLeftPlayerBuff(buff)
		return PQ_Buffs[buff].endTime - GetTime()
	end

	function PQ_GetTimeLeftPlayerDebuff(debuff)
		return select(7,UnitDebuffID(PQ_player,debuff)) - GetTime()
	end

	function PQ_GetTimeLeftUnitDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].endTime - GetTime()
	end
	
	function PQ_IsUseUnitSkill(unit, skill)
		if unit == PQ_PriorityList[1] then
			return PQ_UnitSkillList.first[skill].check
		elseif unit == PQ_PriorityList[2] then
			return PQ_UnitSkillList.second[skill].check
		elseif unit == PQ_PriorityList[3] then
			return PQ_UnitSkillList.third[skill].check
		elseif unit == PQ_PriorityList[4] then
			return PQ_UnitSkillList.forth[skill].check
		elseif unit == PQ_PriorityList[5] then
			return PQ_UnitSkillList.fifth[skill].check
		elseif unit == PQ_PriorityList[6] then
			return PQ_UnitSkillList.six[skill].check
		end								
	end
	
	function PQ_IsCheckUnitDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].check
	end

	function PQ_IsUnitHasDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].hasDebuff
	end

	function PQ_SpellCheck(spell, target)
    	local Cast = true;
	    local SpellName = GetSpellInfo(spell)
    	if 
    		UnitExists(target) == nil or 
    		UnitIsDeadOrGhost(target) or 
    		IsSpellInRange(SpellName, target) == 0 or 
    		UnitChannelInfo(PQ_player) ~= nil or 
    		PQR_IsOutOfSight(target) or
    		(not PQ_Skills[spell].castonmove and PQR_IsMoving(1))
    	then
    		Cast = false
    	end
    	return Cast
	end
	
	function PQ_GetPlayerHP()
		hp,hpmax = UnitHealth(PQ_player),UnitHealthMax(PQ_player)	
		if hp and hpmax then 
			return hp / hpmax * 100
		else 
			return 0
		end
	end

	function PQ_GetPlayerUP()
		up,upmax = UnitPower(PQ_player),UnitPowerMax(PQ_player)
		if up and upmax then 
			return up / upmax * 100
		else 
			return 0
		end
	end

	function PQ_GetTargetHP(target)
		hp,hpmax = UnitHealth(target),UnitHealthMax(target)
		if hp and hpmax then 
			return hp / hpmax * 100
		else 
			return 0
		end
	end
	
	function PQ_NotifyFrame_OnUpdate()
		if (PQ_NotifyFrameTime &amp;lt; GetTime() - 3) then
			local alpha = PQ_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then PQ_NotifyFrame:SetAlpha(alpha - .05) end
			if (aplha == 0) then PQ_NotifyFrame:Hide() end
		end
	end

	function PQ_Notify(message)
		PQ_NotifyFrame.text:SetText(message)
		PQ_NotifyFrame:SetAlpha(1)
		PQ_NotifyFrame:Show()
		PQ_NotifyFrameTime = GetTime()
	end	
	
	function PQ_RotationSwitch(rotationmode)
		PQ_RotationMode = rotationmode
		if rotationmode == PQ_RotationList[1] then
			PQ_PriorityList[1] = PQ_mouseover
			PQ_PriorityList[2] = PQ_target
			PQ_PriorityList[3] = PQ_focus
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil
		
			PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.first[PQ_Immolate].check			= true
			PQ_UnitSkillList.first[PQ_Conflagate].check			= false
			PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
			PQ_UnitSkillList.first[PQ_Incinerate].check			= false
			PQ_UnitSkillList.first[PQ_FelFlame].check			= false
			PQ_UnitSkillList.first[PQ_Fear].check				= false
						
			PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
			PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.second[PQ_Immolate].check			= true
			PQ_UnitSkillList.second[PQ_Conflagate].check		= true
			PQ_UnitSkillList.second[PQ_ChaosBolt].check			= true
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
			PQ_UnitSkillList.second[PQ_Incinerate].check		= true
			PQ_UnitSkillList.second[PQ_FelFlame].check			= true
			PQ_UnitSkillList.second[PQ_Fear].check				= false
			
			PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
			PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= true
			PQ_UnitSkillList.third[PQ_Immolate].check			= true
			PQ_UnitSkillList.third[PQ_Conflagate].check			= false
			PQ_UnitSkillList.third[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.third[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.third[PQ_Incinerate].check			= false
			PQ_UnitSkillList.third[PQ_FelFlame].check			= false
			PQ_UnitSkillList.third[PQ_Fear].check				= false
			
			PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.forth[PQ_Immolate].check			= false
			PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.forth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
			PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.fifth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.six[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.six[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.six[PQ_Immolate].check			= false
			PQ_UnitSkillList.six[PQ_Conflagate].check			= false
			PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.six[PQ_Incinerate].check			= false
			PQ_UnitSkillList.six[PQ_FelFlame].check			= false
			PQ_UnitSkillList.six[PQ_Fear].check				= false
		elseif rotationmode == PQ_RotationList[2] then
			if GetInstanceDifficulty() ~= 3 or GetInstanceDifficulty() ~= 4 then
				PQ_PriorityList[1] = PQ_boss1
				PQ_PriorityList[2] = nil
				PQ_PriorityList[3] = nil
				PQ_PriorityList[4] = nil
				PQ_PriorityList[5] = nil
				PQ_PriorityList[6] = nil

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.first[PQ_Immolate].check			= false
			PQ_UnitSkillList.first[PQ_Conflagate].check			= false
			PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
			PQ_UnitSkillList.first[PQ_Incinerate].check			= false
			PQ_UnitSkillList.first[PQ_FelFlame].check			= false
			PQ_UnitSkillList.first[PQ_Fear].check				= false
						
			PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.second[PQ_Immolate].check			= false
			PQ_UnitSkillList.second[PQ_Conflagate].check		= false
			PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
			PQ_UnitSkillList.second[PQ_Incinerate].check		= false
			PQ_UnitSkillList.second[PQ_FelFlame].check			= false
			PQ_UnitSkillList.second[PQ_Fear].check				= false
			
			PQ_UnitSkillList.third[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.third[PQ_Immolate].check			= false
			PQ_UnitSkillList.third[PQ_Conflagate].check			= false
			PQ_UnitSkillList.third[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.third[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.third[PQ_Incinerate].check			= false
			PQ_UnitSkillList.third[PQ_FelFlame].check			= false
			PQ_UnitSkillList.third[PQ_Fear].check				= false
			
			PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.forth[PQ_Immolate].check			= false
			PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.forth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
			PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.fifth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.six[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.six[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.six[PQ_Immolate].check			= false
			PQ_UnitSkillList.six[PQ_Conflagate].check			= false
			PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.six[PQ_Incinerate].check			= false
			PQ_UnitSkillList.six[PQ_FelFlame].check			= false
			PQ_UnitSkillList.six[PQ_Fear].check				= false
			else
				PQ_PriorityList[1] = PQ_boss1
				PQ_PriorityList[2] = PQ_boss2
				PQ_PriorityList[3] = nil
				PQ_PriorityList[4] = nil
				PQ_PriorityList[5] = nil
				PQ_PriorityList[6] = nil

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.first[PQ_Immolate].check			= false
			PQ_UnitSkillList.first[PQ_Conflagate].check			= false
			PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
			PQ_UnitSkillList.first[PQ_Incinerate].check			= false
			PQ_UnitSkillList.first[PQ_FelFlame].check			= false
			PQ_UnitSkillList.first[PQ_Fear].check				= false
						
			PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.second[PQ_Immolate].check			= false
			PQ_UnitSkillList.second[PQ_Conflagate].check		= false
			PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
			PQ_UnitSkillList.second[PQ_Incinerate].check		= false
			PQ_UnitSkillList.second[PQ_FelFlame].check			= false
			PQ_UnitSkillList.second[PQ_Fear].check				= false
			
			PQ_UnitSkillList.third[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.third[PQ_Immolate].check			= false
			PQ_UnitSkillList.third[PQ_Conflagate].check			= false
			PQ_UnitSkillList.third[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.third[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.third[PQ_Incinerate].check			= false
			PQ_UnitSkillList.third[PQ_FelFlame].check			= false
			PQ_UnitSkillList.third[PQ_Fear].check				= false
			
			PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.forth[PQ_Immolate].check			= false
			PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.forth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
			PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.fifth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.six[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.six[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.six[PQ_Immolate].check			= false
			PQ_UnitSkillList.six[PQ_Conflagate].check			= false
			PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.six[PQ_Incinerate].check			= false
			PQ_UnitSkillList.six[PQ_FelFlame].check			= false
			PQ_UnitSkillList.six[PQ_Fear].check				= false
			end																				
		end
	end
  
	PQ_LockFunctionsLoaded = true
	if PQ_LockFunctionsLoaded then
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;Sucess!!!&amp;apos;)
		end
	else
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;FAIL!!!&amp;apos;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Event Loader --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>---------------------------START--------------------------
--Implement PQR_resumeAttack.. this is used to prevent
--abilities lower in the rotation from being cast.
if PQR_resumeAttack == nil then
    PQR_resumeAttack = 0
elseif PQR_resumeAttack &amp;gt; GetTime() then
    return true
else
    PQR_resumeAttack = 0
end

--IMPORTANT: Change this if you have any cleaves that would do damage to a secondary target
--as part of your single target rotation. Better to be safe than sorry! 
--Used for : Spirit Kings
local cleaveClass = false
local isAOE = strmatch(strupper(PQR_RotationName), &amp;quot;AOE&amp;quot;) --checks if we are in AOE mode.

for i=1,4 do
    local bossCheck = &amp;quot;boss&amp;quot;..i

    if UnitExists(bossCheck) then
        
        --------Wind Lord Checks--------    
		local BossName = UnitName(bossCheck)
		if BossName == &amp;quot;Wind Lord Mel&amp;apos;jarak&amp;quot; then
			if UnitIsDead(bossCheck) then
				focuscast = true
				spearcheck = false
				mortalcoil = true
			else
			    focuscast = false
		    	spearcheck = true
			    mortalcoil = false
			end
		end
		--------Wind Lord Checks--------
              
        local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16)
        local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(bossCheck)
        
        if npcID == 62511 or npcID == 62711 then --Amber-Shaper Un&amp;apos;sok or Amber Monstrosity
            local reshapeName = GetSpellInfo(122370)
            local reshapeLife = UnitDebuff(&amp;quot;player&amp;quot;, reshapeName)
            
            if reshapeLife ~= nil then
                local playerCasting = UnitCastingInfo(&amp;quot;vehicle&amp;quot;)
                local playerCasting2 = UnitCastingInfo(&amp;quot;player&amp;quot;)
                --grab spell names for abilities:
                local amberExplosion = GetSpellInfo(122402)
                
                --interrupt self if casting amber explosion
                if playerCasting == amberExplosion then
                    --Press the 2nd button (Struggle for Control)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
                    return true
                end
                
                --interrupt self if casting amber explosion
                if playerCasting2 == amberExplosion then
                    --Press the 2nd button (Struggle for Control)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
                    return true
                end
                
                --interrupt the target if casting amber explosion
                if bossCasting and bossCasting == amberExplosion then
                    TargetUnit(bossCheck)
                    --Press the 1st button (Amber Strike)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton1&amp;quot;)
                    return true
                end
                
                if UnitExists(&amp;quot;boss2&amp;quot;) then
                    if bossCheck == &amp;quot;boss2&amp;quot; then 
                        return true --prevent the rotation from executing while reshaped
                    end
                else
                    return true
                end

            end
            
        elseif npcID == 60709 then --Spirit Kings: Qiang. (Impervious Shield)
            --Stop all attacks until 0.2 seconds after cast time ends and until buff (Impervious Shield) is gone.
            
            --only continue checking if we are targetting the boss or have no target.
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local impName = GetSpellInfo(117961)
                local impShieldBuff = UnitBuffID(bossCheck, 117961)
                
                if (bossCasting and bossCasting == impName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.2
                    return true
                end
                
                if impShieldBuff then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end
            
        elseif npcID == 60710 then --Spirit Kings: Subetai. (Sleight of Hand)
            --Stop all attacks when casting Sleight of Hand, and until 0.2 seconds after cast time ends.
            --Also stop attacks if not stunned.
            
            --only continue checking if we are targetting the boss or have no target.
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local sleightName = GetSpellInfo(118162)
                local sleightBuff = UnitBuffID(bossCheck, 118162)
                --                  HoJ,   FoJ,  Kidney  
                local stunList = { 853, 105593, 408 }
                local isStunned = nil
                for _,v in ipairs(stunList) do
                    local debuffCheck = UnitDebuffID(bossCheck, v)
                    if debuffCheck then
                        isStunned = true
                    end
                end
                
                if (bossCasting and bossCasting == sleightName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.2
                    return true
                end
                
                if sleightBuff and not isStunned then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end

        elseif npcID == 60701 then --Spirit Kings: Zian. (Shield of Darkness)
            --Stop all attacks until 0.5 seconds after cast time ends and until buff (Shield of Darkness) is gone.
                        
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local sodName = GetSpellInfo(117697)
                local sodBuff = UnitBuffID(bossCheck, 117697)
                
                if (bossCasting and bossCasting == sodName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.5 --0.5 to account for lag... REALLY do not want to set this off.
                    return true
                end
                
                if sodBuff then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end
        end
    end
end

--click button to leave.
--Gara&amp;apos;jal isn&amp;apos;t a boss while in the Spirit Realm.
local returnSoul = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
if returnSoul and returnSoul - GetTime() &amp;lt; 2 then 
    RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end


if not PQ_EventHandlerLoaded then

	local PQ_EventHandlerFrame, events = CreateFrame(&amp;quot;Frame&amp;quot;), {};
	if PQ_Debug then
		DebugFrame.messageFrame:AddMessage(&amp;apos;Loading Event Handlers ...&amp;apos;)
	end

	function events:COMBAT_LOG_EVENT_UNFILTERED(...)
		-- Check for a buff/debuff applied to PLAYER (yourself)
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),true)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),true)
			end
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),true)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),true)
			end
		end
	  
		-- Check for a buff/debuff removed from PLAYER (yourself)
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),false)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),false)
			end	
		end
		
		-- Check for MY debuff applied to UNIT
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),true,select(8, ...))
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),true,select(8, ...))
		end
		
		-- Check for MY debuff removed/faded from UNIT
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),false,select(8, ...))
		end
		
		-- Check for buff applied to UNIT
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),true,select(8, ...))
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),true,select(8, ...))
		end
		
		-- Check for MY debuff removed/faded from UNIT
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),false,select(8, ...))
		end
						  
	end

	function events:PLAYER_REGEN_DISABLED(...)
		PQ_InCombat = true
	end

	function events:PLAYER_REGEN_ENABLED(...)
		PQ_InCombat = false
		PQ_RotationSwitch(PQ_RotationList[1])
		PQ_Notify(PQ_RotationMode)		
	end

	function events:PLAYER_CONTROL_LOST(...)
		if PQ_InCombat then
			PQ_HasLossOfControl = true
		end
	end

	function events:PLAYER_CONTROL_GAINED(...)
		if PQ_HasLossOfControl then
			PQ_HasLossOfControl = false
		end
	end
	
	function CheckSwitch()
		local aoe = &amp;apos;&amp;apos;
		local zeal = &amp;apos;&amp;apos;
		if PQ_Zaslon then
			aoe = &amp;apos;Fire and Brimstone!&amp;apos;
		else
			aoe = &amp;apos;Nuke em from orbit!&amp;apos;
		end
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,aoe..&amp;apos; &amp;apos;..zeal)
	end
	
	function events:MODIFIER_STATE_CHANGED(...)
		local key, state = ...
		if key == &amp;apos;RCTRL&amp;apos; and state == 0 then
			if PQ_Zaslon then 
				PQ_Zaslon = nil 
			else 
				PQ_Zaslon = 1 
			end
		end
		CheckSwitch()
	end

	function events:UNIT_POWER(...)
		local unitID, strResource = ...
		PQ_Shards = strResource
		if unitID == PQ_player and strResource == &amp;apos;BURNING_EMBERS&amp;apos; then
			PQ_SoulShard = UnitPower(PQ_player, 14)	
		end
	end
	
	function events:PLAYER_TARGET_CHANGED(...)
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW TARGET&amp;apos;)
		end
		if UnitExists(PQ_target) then
			PQ_UnitCheckDebuffs(PQ_target)
			PQ_UnitCheckBuffs(PQ_target)
			local npcid = tonumber((UnitGUID(PQ_target)):sub(-12, -9), 16)
			for i, burnid in ipairs(PQ_BurnUnitsList) do
				if npcid == burnid then
					PQ_Units[PQ_target].burn = true
				else
					PQ_Units[PQ_target].burn = false						
				end
			end
		end
	end

	function events:PLAYER_FOCUS_CHANGED(...)
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW FOCUS&amp;apos;)
		end
		if UnitExists(PQ_focus) then
			PQ_UnitCheckDebuffs(PQ_focus)
			PQ_UnitCheckBuffs(PQ_focus)
		end
	end

	function events:UPDATE_MOUSEOVER_UNIT(...)
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW MOUSEOVER&amp;apos;)
		end
		if UnitExists(PQ_mouseover) then
			PQ_UnitCheckDebuffs(PQ_mouseover)
			PQ_UnitCheckBuffs(PQ_mouseover)
			local npcid = tonumber((UnitGUID(PQ_mouseover)):sub(-12, -9), 16)
			DebugFrame.messageFrame:AddMessage(npcid)
			for i, burnid in ipairs(PQ_BurnUnitsList) do
				if npcid == burnid then
					PQ_Units[PQ_mouseover].burn = true
				else
					PQ_Units[PQ_mouseover].burn = false						
				end
			end
		end		
	end
	
	function events:UNIT_NAME_UPDATE(...)
		local unitName = ...
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW UNIT &amp;apos; .. unitName)
		end
	end
	
	function events:INSTANCE_ENCOUNTER_ENGAGE_UNIT(...)
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW BOSS!!! &amp;apos;)
		end
		for i = 1, 4 do
			local target = &amp;apos;boss&amp;apos;..tostring(i)
			if UnitExists(target) then 
				local npcid = tonumber((UnitGUID(target)):sub(-12, -9), 16)
				if npcid == 55265 then
					--PQ_RotationSwitch(PQ_RotationList[2])
					PQ_Notify(PQ_RotationMode)
				end
			end
		end		
	end
		
	function PQ_Init()
		PQ_RotationSwitch(PQ_RotationList[1])
		PQ_Notify(PQ_RotationMode)
		PQ_SoulShard = UnitPower(PQ_player, 14)
		PQ_CheckForAllBuffs()
	end

	--Notify frame
	PQ_NotifyFrame = CreateFrame(&amp;apos;Frame&amp;apos;)
	PQ_NotifyFrame:ClearAllPoints()
	PQ_NotifyFrame:SetHeight(0)
	PQ_NotifyFrame:SetWidth(0)
	PQ_NotifyFrame:SetScript(&amp;apos;OnUpdate&amp;apos;, PQ_NotifyFrame_OnUpdate)
	PQ_NotifyFrame:Hide()
	PQ_NotifyFrame.text = PQ_NotifyFrame:CreateFontString(nil, &amp;apos;BACKGROUND&amp;apos;, &amp;apos;PVPInfoTextFont&amp;apos;)
	PQ_NotifyFrame.text:SetAllPoints()
	PQ_NotifyFrame:SetPoint(&amp;apos;CENTER&amp;apos;, 0, 200)
	PQ_NotifyFrameTime = 0
	PQ_EventHandlerFrame:SetScript(&amp;quot;OnEvent&amp;quot;, function(self, event, ...) events[event](self, ...); end);

	for k, v in pairs(events) do
		PQ_EventHandlerFrame:RegisterEvent(k); -- Register all events for which handlers have been defined
	end

	PQ_Init()
	PQ_EventHandlerLoaded = true
	if PQ_EventHandlerLoaded then
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;Sucess!!!&amp;apos;)
		end
	else
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;FAIL!!!&amp;apos;)
		end
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Curse of Elements - Focus</Name><Default>false</Default><SpellID>1490</SpellID><Actions></Actions><Lua>local IsMagicVulnerable = HaveDebuff(&amp;quot;focus&amp;quot;,{34889,24844,93068,1490})
CoEfocus = true
if not focuscast then
	CoEfocus = false
end

if SpellCheck(1490, &amp;quot;focus&amp;quot;) and CoEfocus then	
	if IsTargetMoPBoss() then
		if not IsMagicVulnerable then
			return true
		end
		if PQR_IsMoving() then
			local Elements, _, _, _, _, _, ElementsEndTime = UnitDebuff(&amp;quot;focus&amp;quot;, 1490)
			if Elements and ElementsEndTime - GetTime() &amp;lt;= 15 then
				return true
			end
		end
	end
end</Lua><RecastDelay>1000</RecastDelay><Target>Focus</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Immolate</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Immolate,_,_,_,_,_,Immolatetimer = UnitDebuffID(&amp;quot;target&amp;quot;,348,&amp;quot;PLAYER&amp;quot;)
local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)

if not IsPlayerSpell(137587) then
	if PQR_IsMoving(0.3) then
		return false
	end
end

if CurrentCast == &amp;quot;Immolate&amp;quot; then
return false
end

if Immolate == nil then
CastSpellByName(tostring(GetSpellInfo(348)))
return true
end

if Immolatetimer - GetTime() &amp;lt; 5 then
CastSpellByName(tostring(GetSpellInfo(348)))
return true
end</Lua><RecastDelay>2000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Conflagrate</Name><Default>false</Default><SpellID>17962</SpellID><Actions></Actions><Lua>local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)
local Backdraft = UnitBuffID(&amp;quot;player&amp;quot;, 117828)

if PQ_Zaslon then
	if not Brimstone and DarkSoul and not Backdraft then
	return true
	end
end

if PQ_Zaslon then
	if not Brimstone and not DarkSoul then
	return true
	end
end

if not PQ_Zaslon then
	if DarkSoul and PQ_SoulShard &amp;lt; 1 then
	return true
	end
end

if not PQ_Zaslon then
	if not DarkSoul then
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Incinerate</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)
local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local Backdraft = UnitBuffID(&amp;quot;player&amp;quot;, 117828)

if not IsPlayerSpell(137587) then
	if PQR_IsMoving(0.3) then
		return false
	end
end

if not Brimstone and DarkSoul == nil then
	CastSpellByName(GetSpellInfo(PQ_Incinerate),nil)
	return true
end

if PQ_Zaslon then
	if DarkSoul and  PQ_SoulShard &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(PQ_Incinerate),nil)
	return true
	end
end

if not PQ_Zaslon then
	if DarkSoul and PQ_SoulShard &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(PQ_Incinerate),nil)
	return true
	end
end

if not PQ_Zaslon then
	if DarkSoul and PQ_SoulShard &amp;gt;= 1  and Backdraft then
	CastSpellByName(GetSpellInfo(PQ_Incinerate),nil)
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Gloves</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>for i, target in ipairs(PQ_PriorityList) do
	if target and UnitExists(target) then	
		if GetInventoryItemCooldown(&amp;quot;player&amp;quot;,10) == 0 then UseInventoryItem(10) end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Rain of Fire</Name><Default>false</Default><SpellID>5740</SpellID><Actions></Actions><Lua>if IsLeftShiftKeyDown() then
	CastSpellByName(GetSpellInfo(5740))
	if SpellIsTargeting() then
		CameraOrSelectOrMoveStart()
		CameraOrSelectOrMoveStop()
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fire and Brimstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)
local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local start, duration, enabled = GetSpellCooldown(113858)
cd_DarkSoul = (start + duration - GetTime())


if PQ_Zaslon then
	if not Brimstone then
		if DarkSoul
		then
		CastSpellByName(tostring(GetSpellInfo(108683)))
		end
	end
	if not Brimstone then
		if PQ_SoulShard &amp;gt; 1
		then
		CastSpellByName(tostring(GetSpellInfo(108683)))
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Incinerate AoE</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)
local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)

if not IsPlayerSpell(137587) then
	if PQR_IsMoving(0.3) then
		return false
	end
end

if CurrentCast == &amp;quot;Immolate&amp;quot;
or CurrentCast == &amp;quot;Incinerate&amp;quot; then
	return false
end

if Brimstone and PQ_SoulShard &amp;lt; 4 then
CastSpellByName(tostring(GetSpellInfo(114654)))
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>False</SkipUnknown></Ability><Ability><Name>Immolate AoE</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)
local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)

if not IsPlayerSpell(137587) then
	if PQR_IsMoving(0.3) then
		return false
	end
end

if CurrentCast == &amp;quot;Immolate&amp;quot; then
return false
end

if Brimstone and PQ_SoulShard &amp;gt;= 3 then
CastSpellByName(tostring(GetSpellInfo(348)))
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Chaos Bolt</Name><Default>false</Default><SpellID>116858</SpellID><Actions></Actions><Lua>local Backdraft = UnitBuffID(&amp;quot;player&amp;quot;, 117828)
local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local start, duration, enabled = GetSpellCooldown(113858)
cd_DarkSoul = (start + duration - GetTime())

if not IsPlayerSpell(137587) then
	if PQR_IsMoving(0.3) then
		return false
	end
end

if not PQ_Zaslon then
	for i, target in ipairs(PQ_PriorityList) do
		if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) then	
			if PQ_IsUseUnitSkill(target,PQ_ChaosBolt) and not PQ_Units[target].immunity and PQ_Skills[PQ_ChaosBolt].isknown then
				
				if (PQ_SpellCheck(PQ_ChaosBolt,target) and not Backdraft and start &amp;gt; 0 and PQ_SoulShard &amp;gt; 3 and cd_DarkSoul &amp;gt; 10) or 
				(PQ_SpellCheck(PQ_ChaosBolt,target) and not Backdraft and DarkSoul) or (PQ_SoulShard &amp;gt; 2.8 and not Backdraft) then
					PQR_CustomTarget = target
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>200</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadowburn</Name><Default>false</Default><SpellID>17877</SpellID><Actions>/stopcasting</Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)

if Targethealth &amp;lt; 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Havoc</Name><Default>false</Default><SpellID>80240</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;focus&amp;quot;) then
	 	return true
	end</Lua><RecastDelay>0</RecastDelay><Target>Focus</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--Data--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--DATA CHECKS

if not PQR_LoadLua(&amp;quot;PQR_Blaythe_DATA.lua&amp;quot;) then
  PQR_WriteToChat(&amp;quot;PQR_Blaythe_DATA.lua is missing. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
  PQR_StopRotation()
  return true
end

-- PQI Checks
if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQI. Its an integral part of this Profile! Please refer to Ownedcore. Rotation stopped.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end

PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)
PQR_ResetMovementTime = 0.3

--if UnitCastingInfo(&amp;quot;player&amp;quot;) == &amp;quot;Impaling Spear&amp;quot; then return true end
--targetLevel = UnitLevel(&amp;quot;target&amp;quot;)
--Soulshards = UnitPower(&amp;quot;player&amp;quot;, 7)
--PlayerMana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)
--TargetHealth = UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;) * 100
--PlayerHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
--targetLevel = -1 

--dotrefresh = true
--if UnitHealth(&amp;quot;target&amp;quot;) &amp;lt; 120000 and not IsTargetMoPBoss() then
--	dotrefresh = false
--end
--if TargetHealth &amp;lt;= 20 and IsTargetMoPBoss() then
--	dotrefresh = false
--end

GroupInfo()
CastClick() 
AssistTank() 
BossTable = {}

------Proc Counters------
--if IntProc == nil then IntProc = 0 end
--if HasteProc == nil then HasteProc = 0 end
--if CritProc == nil then CritProc = 0 end
--if MasteryProc == nil then MasteryProc = 0 end
--print(&amp;quot;int proc counter: &amp;quot;, IntProc)
------Proc Counters------

if WarlockInformation == nil then
	WarlockInformation = true
	print(&amp;quot;â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€&amp;quot;)
	print(&amp;quot; Thanks to Soapbox, Nilrem and many others at Ownedcore!&amp;quot;)
	print(&amp;quot; LShift for Rain of Fire&amp;quot;)
	print(&amp;quot; LAlt to pop Dark Soul and any trinkets&amp;quot;)
	print(&amp;quot; LControl to change to FnB rotation&amp;quot;)
	print(&amp;quot; Middle mouse use mouseover ability&amp;quot;)
	print(&amp;quot; Manually use Doomguard&amp;quot;)
	print(&amp;quot; May your enemies burn!&amp;quot;)
	print(&amp;quot;â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€&amp;quot;)
end

--- Parameters from Boss Checks ---
focuscast = true --- will cast on focus targets unless modified 
spearcheck = false -- default it doesn&amp;apos;t check for spear
mortalcoil = true -- by default it uses Mortal Coil
--- Parameters from Boss Checks ---

--if IsLeftAltKeyDown() 
if IsMounted()
or SpellIsTargeting()
or UnitBuffID(&amp;quot;player&amp;quot;,104934)
--or UnitChannelInfo(&amp;quot;player&amp;quot;) 
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) 
or UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--Pause--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--if not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
if UnitExists(&amp;quot;focus&amp;quot;) and not spearcheck then
	if not UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;)
		or ( not UnitAffectingCombat(&amp;quot;focus&amp;quot;) and not SpecialAggro(&amp;quot;focus&amp;quot;) and not UnitIsPlayer(&amp;quot;focus&amp;quot;) )
		or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
		then
		return true
	end
end

if not UnitExists(&amp;quot;focus&amp;quot;) then
	if UnitIsDead(&amp;quot;target&amp;quot;)
	--	or TargetImmune(&amp;quot;target&amp;quot;)
		or not UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
		or tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(5,5),16) == 4
		or ( not UnitAffectingCombat(&amp;quot;target&amp;quot;) and not SpecialAggro(&amp;quot;target&amp;quot;) and not UnitIsPlayer(&amp;quot;target&amp;quot;) ) 
		or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
	--	or ( not DistanceToTarget or DistanceToTarget &amp;gt; 40 )
		then 
		return true
	end
end
--end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Curse of Elements</Name><Default>false</Default><SpellID>1490</SpellID><Actions></Actions><Lua>local IsMagicVulnerable = HaveDebuff(&amp;quot;target&amp;quot;,{34889,24844,93068,1490})

	if IsTargetMoPBoss() then
		if not IsMagicVulnerable then
			return true
		end
		if PQR_IsMoving() then
			local Elements, _, _, _, _, _, ElementsEndTime = UnitDebuff( &amp;quot;target&amp;quot;, 1490 )
			if Elements and ElementsEndTime - GetTime() &amp;lt;= 15 then
				return true
			end
		end
	end</Lua><RecastDelay>1000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-ooc- Healthstone Create</Name><Default>false</Default><SpellID>6201</SpellID><Actions></Actions><Lua>local countHScharges = GetItemCount(5512, nil, true) 

if not UnitAffectingCombat(&amp;quot;player&amp;quot;) and countHScharges &amp;lt; 3 then
	return true
end</Lua><RecastDelay>5000</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-ooc- Dark Intent</Name><Default>false</Default><SpellID>109773</SpellID><Actions></Actions><Lua>local DarkIntentCD = select(2,GetSpellCooldown(109773))
local AINotExists = true
local NeedsDI = false
	
for i=1,#members do
	if HaveBuff(members[i].Unit,{109773, 1459, 61316, 77747}) then
		if AINotExists then
			if HaveBuff(members[i].Unit,{1459, 61316}) then
				AINotExists = false
			end
		end
	else
		NeedsDI = true
	end
end
	
if AINotExists and NeedsDI then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mortal Coil</Name><Default>false</Default><SpellID>6789</SpellID><Actions></Actions><Lua>local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)


if not UnitDebuffID(&amp;quot;player&amp;quot;, 123184) then
	if IsPlayerSpell(6789) then
		if Playerhealth &amp;lt; 65 and PQR_SpellAvailable(6789) and UnitExists(&amp;quot;target&amp;quot;) then
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Use Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local HealthstoneCD = select(2,GetItemCooldown(5512))
local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

if  Playerhealth &amp;lt;= 55 
and HealthstoneCD == 0 
then
UseItemByName(5512, &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dark Soul</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>DSM = true

if IsLeftAltKeyDown() then
	if HasBloodlust() then
		DSM = false
	end
	if UnitExists(&amp;quot;target&amp;quot;) and DSM then	
		local DarksoulCD = select(2,GetSpellCooldown(113858))
   		if DarksoulCD == 0 then
   			CastSpellByName(GetSpellInfo(113858),nil)
   			RunMacroText(&amp;quot;/use 10&amp;quot;)
   	 		RunMacroText(&amp;quot;/use 13&amp;quot;)
   	 		RunMacroText(&amp;quot;/use 14&amp;quot;)
   	 		return true
   		end
	end
end</Lua><RecastDelay>2000</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--Click--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Change &amp;quot;3&amp;quot; to whatever mouse button you&amp;apos;d like.

if IsMouseButtonDown(3) then
	RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Havoc Chaos</Name><Default>false</Default><SpellID>116858</SpellID><Actions></Actions><Lua>local havoc, _, _, stacks = UnitBuffID( &amp;quot;player&amp;quot;, 80240)
    if havoc~= nil then
        if stacks == 3 then                    
            CastSpellByName(tostring(GetSpellInfo(116858)))
        end
    end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Unending Resolve</Name><Default>false</Default><SpellID>104773</SpellID><Actions></Actions><Lua>local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

	if IsPlayerSpell(6789) then
		if Playerhealth &amp;lt; 60 and PQR_SpellAvailable(104773) and UnitExists(&amp;quot;target&amp;quot;) then
			return true
		end
	end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--Automatic RoF--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not ToggleTimer then ToggleTimer = GetTime() - 1.5 end

if IsRightAltKeyDown()  and GetTime() - ToggleTimer &amp;gt;= 1.5 then
	ToggleTimer = GetTime()

  	if AoE  then 

    	AoE  = false 
		print(&amp;quot;Manual RoF&amp;quot;)

  	else 
    	
		AoE  = true 
		print(&amp;quot;Automatic RoF!&amp;quot;)

  	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--Racials--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local DS = UnitBuffID(&amp;quot;player&amp;quot;,113858)
local Troll = IsSpellKnown(26297)
local Orc = IsSpellKnown(33702)
local Goblin = IsSpellKnown(69041)
local BloodElf = IsSpellKnown(28730)
local TrollStart,TrollDuration = GetSpellCooldown(26297)
local TrollCD = TrollStart + TrollDuration - GetTime()
local OrcStart,OrcDuration = GetSpellCooldown(33702)
local OrcCD = OrcStart + OrcDuration - GetTime()
local BloodElfStart,BloodElfDuration = GetSpellCooldown(28730)
local BloodElfCD = BloodElfStart + BloodElfDuration - GetTime()
local GoblinStart,GoblinDuration = GetSpellCooldown(69041)
local GoblinCD = GoblinStart + GoblinDuration - GetTime()
local Playermana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)


--Troll Berserking--
if Troll == true then 
	if DS and TrollCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
	return true
	end
end

--Orc Blood Fury--
if Orc == true then 
	if DS and OrcCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(33702),&amp;quot;player&amp;quot;)
	return true
	end
end

--Blood Elf Arcane Torrent--
if BloodElf == true then 
	if BloodElfCD &amp;lt; 1 
	and Playermana &amp;lt; 80 then
	CastSpellByName(GetSpellInfo(28730),&amp;quot;player&amp;quot;)
	return true
	end
end

--Goblin Rocket Barrage--
if Goblin == true then 
	if GoblinCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(69041),&amp;quot;target&amp;quot;)
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Ring of Fire Auto</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local RoF = UnitBuffID(&amp;quot;player&amp;quot;, 5740)
local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local Playermana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)

if AoE then
	if not RoF then
	if not DarkSoul then
	if Playermana &amp;gt;= 35 then
	CastSpellByName(GetSpellInfo(5740))
	if SpellIsTargeting() then
		CameraOrSelectOrMoveStart()
		CameraOrSelectOrMoveStop()
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fel Flame</Name><Default>false</Default><SpellID>77799</SpellID><Actions></Actions><Lua>for i, target in ipairs(PQ_PriorityList) do
	if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) then	
		if PQ_IsUseUnitSkill(target,PQ_FelFlame) and not PQ_Units[target].immunity and PQ_Skills[PQ_FelFlame].isknown then
			if PQ_SpellCheck(PQ_FelFlame,target) then
				if PQR_IsMoving(1) then
					PQR_CustomTarget = target
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARLOCK>