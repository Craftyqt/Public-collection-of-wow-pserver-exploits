<?xml version="1.0" encoding="utf-8" ?><WARLOCK><Ability><Name>-- DEBUG --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>
if not PQ_DebugFrameLoaded then
	local frame  = CreateFrame(&amp;apos;Frame&amp;apos;, &amp;apos;DebugFrame&amp;apos;, UIParent)
	frame.width  = 580
	frame.height = 250
	frame:SetFrameStrata(&amp;apos;FULLSCREEN_DIALOG&amp;apos;)
	frame:SetSize(frame.width, frame.height)
	frame:SetPoint(&amp;apos;CENTER&amp;apos;, UIParent, &amp;apos;CENTER&amp;apos;, 0, 0)
	frame:SetBackdrop({
		bgFile   = &amp;apos;Interface\\DialogFrame\\UI-DialogBox-Background&amp;apos;,
		edgeFile = &amp;apos;Interface\\DialogFrame\\UI-DialogBox-Border&amp;apos;,
		tile     = true,
		tileSize = 32,
		edgeSize = 32,
		insets   = { left = 8, right = 8, top = 8, bottom = 8 }
	})
	frame:SetBackdropColor(0, 0, 0, 1)
	frame:EnableMouse(true)
	frame:EnableMouseWheel(true)

	-- Make movable/resizable
	frame:SetMovable(true)
	frame:SetResizable(enable)
	frame:SetMinResize(100, 100)
	frame:RegisterForDrag(&amp;apos;LeftButton&amp;apos;)
	frame:SetScript(&amp;apos;OnDragStart&amp;apos;, frame.StartMoving)
	frame:SetScript(&amp;apos;OnDragStop&amp;apos;, frame.StopMovingOrSizing)

	tinsert(UISpecialFrames, &amp;apos;DebugFrame&amp;apos;)

	-- Close button
	local closeButton = CreateFrame(&amp;apos;Button&amp;apos;, nil, frame, &amp;apos;UIPanelButtonTemplate&amp;apos;)
	closeButton:SetPoint(&amp;apos;BOTTOM&amp;apos;, 0, 10)
	closeButton:SetHeight(25)	
	closeButton:SetWidth(70)
	closeButton:SetText(CLOSE)
	closeButton:SetScript(&amp;apos;OnClick&amp;apos;, function(self)
		HideParentPanel(self)
	end)
	frame.closeButton = closeButton

	-- ScrollingMessageFrame
	local messageFrame = CreateFrame(&amp;apos;ScrollingMessageFrame&amp;apos;, nil, frame)
	messageFrame:SetPoint(&amp;apos;CENTER&amp;apos;, 15, 20)
	messageFrame:SetSize(frame.width - 40, frame.height - 50)
	messageFrame:SetFontObject(GameFontNormal)
	messageFrame:SetTextColor(1, 1, 1, 1) -- default color
	messageFrame:SetJustifyH(&amp;apos;LEFT&amp;apos;)
	messageFrame:SetHyperlinksEnabled(true)
	messageFrame:SetFading(false)
	messageFrame:SetMaxLines(300)
	frame.messageFrame = messageFrame

	--messageFrame:ScrollToBottom()
	--messageFrame:ScrollDown()

	-------------------------------------------------------------------------------
	-- Scroll bar
	-------------------------------------------------------------------------------
	local scrollBar = CreateFrame(&amp;apos;Slider&amp;apos;, nil, frame, &amp;apos;UIPanelScrollBarTemplate&amp;apos;)
	scrollBar:SetPoint(&amp;apos;RIGHT&amp;apos;, frame, &amp;apos;RIGHT&amp;apos;, -10, 10)
	scrollBar:SetSize(30, frame.height - 90)
	scrollBar:SetMinMaxValues(0, 300)
	scrollBar:SetValueStep(1)
	scrollBar.scrollStep = 1
	frame.scrollBar = scrollBar

	scrollBar:SetScript(&amp;apos;OnValueChanged&amp;apos;, function(self, value)
		messageFrame:SetScrollOffset(select(2, scrollBar:GetMinMaxValues()) - value)
	end)

	scrollBar:SetValue(select(2, scrollBar:GetMinMaxValues()))

	frame:SetScript(&amp;apos;OnMouseWheel&amp;apos;, function(self, delta)
		local cur_val = scrollBar:GetValue()
		local min_val, max_val = scrollBar:GetMinMaxValues()

		if delta &amp;lt; 0 and cur_val &amp;lt; max_val then
			cur_val = math.min(max_val, cur_val + 1)
			scrollBar:SetValue(cur_val)
		elseif delta &amp;gt; 0 and cur_val &amp;gt; min_val then
			cur_val = math.max(min_val, cur_val - 1)
			scrollBar:SetValue(cur_val)
		end
	end)

	SLASH_DEBUG1 = &amp;apos;/pqd&amp;apos;
	SlashCmdList.DEBUG = function()
		if DebugFrame:IsShown() then
			DebugFrame:Hide()
		else
			DebugFrame:Show()
		end
	end
	
	DebugFrame:Hide()
	PQ_DebugFrameLoaded = true
	PQ_Debug = true
end
</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--SUMMARY--
--Constants and variables:
--PQ_target;PQ_focus;PQ_mouseover;PQ_boss1;PQ_boss2;PQ_boss3;PQ_boss4;PQ_mainboss;PQ_secondaryboss;PQ_trashboss;PQ_RotationMode
--Buffs IDs:
--PQ_DemonSoul;PQ_BloodFury;PQ_Soulburn;PQ_EmpoweredImp;PQ_ImpruvedSoulFire;PQ_Heroism;PQ_BloodLust;PQ_TimeWarp;PQ_Hysteria
--Skill IDs:
--PQ_Shadowflame;PQ_Corruption;PQ_BaneOfAgony;PQ_CurseOfElements;PQ_Conflagate;PQ_LifeTap;PQ_ChaosBolt;PQ_Shadowburn;PQ_BaneOfHavoc;PQ_Incinerate;PQ_Immolate;PQ_SoulFire;PQ_BaneOfDoom;PQ_FelFlame;PQ_Fear;PQ_Doomguard
--Logic booleans:
--PQ_HasLossOfControl;PQ_HasEveryManSpell;PQ_InCombat
--Tables:
--PQ_Buffs{check,hasBuff,endTime};PQ_PlayerDebuffs{check,playerdebuffList,spellid,hasDebuff,endTime};PQ_Units{check,unitdebuffList,guid,immunity};PQ_Skills{castonmove,isknown}
--Lists:
--PQ_PlayerDebuffList[BreakOnDamage,Fear,Root,MovementImpairing];PQ_UnitDebuffList[mouseover,target,focus,boss1,boss2,boss3,boss4];PQ_UnitSkillList[target,focus,mouseover,mainboss,secondaryboss,trashboss];PQ_ImmunityList;PQ_PriorityList;PQ_RotationList

if not PQ_LockVariablesLoaded then
	if PQ_Debug then
		DebugFrame.messageFrame:AddMessage(&amp;apos;Loading WarLock variables ...&amp;apos;)
	end	
	
	--Targeting constants and variables
	PQ_player			= &amp;apos;player&amp;apos;
	PQ_target			= &amp;apos;target&amp;apos;
	PQ_focus			= &amp;apos;focus&amp;apos;
	PQ_mouseover		= &amp;apos;mouseover&amp;apos;
	PQ_boss1			= &amp;apos;boss1&amp;apos;
	PQ_boss2			= &amp;apos;boss2&amp;apos;
	PQ_boss3			= &amp;apos;boss3&amp;apos;
	PQ_boss4			= &amp;apos;boss4&amp;apos;
	PQ_mainboss			= nil
	PQ_secondaryboss	= nil
	PQ_trashboss		= nil
	PQ_RotationMode		= nil
	
	--Buffs IDs
	PQ_Backdraft		= 117896
	PQ_Potok			= 74241
	PQ_Speed			= 107982
	PQ_Peski			= 107804
	PQ_Heroism			= 32182
	PQ_BloodLust		= 2825
	PQ_TimeWarp			= 80353
	PQ_Hysteria			= 90355

	--Skill IDs
	PQ_Shadowflame		= 47897
	PQ_Corruption		= 172
	PQ_BaneOfAgony		= 980
	PQ_CurseOfElements	= 1490
	PQ_Conflagate		= 17962
	PQ_ChaosBolt		= 116858
	PQ_Shadowburn		= 17877
	PQ_BaneOfHavoc		= 80240
	PQ_Incinerate		= 29722
	PQ_Immolate			= 348
	PQ_BaneOfDoom		= 603
	PQ_FelFlame			= 77799
	PQ_Fear				= 5782
	PQ_DemonSoul		= 113858
	
	--Logic booleans
	PQ_HasLossOfControl = false
	PQ_HasEveryManSpell = IsSpellKnown(59752)
	PQ_InCombat = false
	
	--Player buff table
	PQ_Buffs = { 
		[PQ_Backdraft]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_Potok]				= {check = true, hasBuff = false, endTime = nil},
		[PQ_Speed]				= {check = true, hasBuff = false, endTime = nil},
		[PQ_Peski]				= {check = true, hasBuff = false, endTime = nil},
		[PQ_Heroism]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_BloodLust]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_TimeWarp]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_Hysteria]			= {check = true, hasBuff = false, endTime = nil}
	}
	
	--List of possible player debuffs
	PQ_PlayerDebuffList = {}

	PQ_PlayerDebuffList.BreakOnDamage = {
		19503--[[Scatter Shot]],
		1499--[[Freezing Trap]],
		6358--[[Seduction]],
		9484--[[Shackle Undead]],
		6770--[[Sap]],
		118--[[Polymorph]],
		51514--[[Hex]],
		2094--[[Blind]],
		2637--[[Hibernate]],
		76780--[[Bind Elemental]]
	}
	PQ_PlayerDebuffList.Fear = {
		5782--[[Fear]],
		5484--[[Howl of Terror]],
		8122--[[Psychic Scream]],
		1513--[[Scare Beast]],
		10326--[[Turn Evil]],
		5246--[[Intimidating Shout]]
	}
	PQ_PlayerDebuffList.Root = {
		339--[[Entangling Roots]],
		122--[[Frost Nova]],
		45524--[[Chains of Ice]],
		16979--[[Feral Charge - Bear]]
	}
	PQ_PlayerDebuffList.Raid = {}
	PQ_PlayerDebuffList.MovementImpairing = {
		5116--[[Concussive Shot]],
		2974--[[Wing Clip]],
		13809--[[Ice Trap]],
		116--[[Frostbolt]],
		120--[[Cone of Cold]],
		11113--[[Blast Wave]],
		31589--[[Slow]],
		15407--[[Mind Flay]],
		3408--[[Crippling Poison]],
		26679--[[Deadly Throw]],
		8056--[[Frost Shock]],
		2484--[[Earthbind Totem]],
		18223--[[Curse of Exhaustion]],
		1715--[[Hamstring]],
		12323--[[Piercing Howl]]
	}

	--Table of player debuffs by type
	PQ_PlayerDebuffs = {
		[&amp;apos;Fear&amp;apos;]				= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.Fear , spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;Root&amp;apos;]				= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.Root , spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;BreakOnDamage&amp;apos;]		= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.BreakOnDamage , spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;MovementImpairing&amp;apos;]	= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.MovementImpairing , spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;Raid&amp;apos;]				= {check = false, playerdebuffList = PQ_PlayerDebuffList.Raid , spellid = nil, hasDebuff = false, endTime = nil}
	}
	
	--List of debuffs by target
	print(PQ_LockVariablesLoaded)
	PQ_UnitDebuffList = {} 
	
	PQ_UnitDebuffList.mouseover = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}	

	PQ_UnitDebuffList.target = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}

	PQ_UnitDebuffList.focus = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}

	PQ_UnitDebuffList.boss1 = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}

	PQ_UnitDebuffList.boss2 = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}

	PQ_UnitDebuffList.boss3 = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}
	
	PQ_UnitDebuffList.boss4 = { 
		[PQ_CurseOfElements]	= {check = true, hasDebuff = false, endTime = nil},
		[PQ_BaneOfHavoc]		= {check = true, hasDebuff = false, endTime = nil},
		[PQ_Immolate]			= {check = true, hasDebuff = false, endTime = nil}
	}
	
	--List of immunities
	PQ_ImmunityList	= {
		642, 
		45438, 
		31224, 
		23920, 
		33786, 
		19263, 
		97417, 
		97977
	}
	
	--Table of targets
	PQ_Units = {
		[PQ_mouseover]		= {check = true, unitdebufflist = PQ_UnitDebuffList.mouseover, guid = nil, immunity = false, burn = false},	 
		[PQ_target]			= {check = true, unitdebufflist = PQ_UnitDebuffList.target, guid = nil, immunity = false, burn = false},
		[PQ_focus]			= {check = true, unitdebufflist = PQ_UnitDebuffList.focus, guid = nil, immunity = false, burn = false},
		[PQ_boss1]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss1, guid = nil, immunity = false, burn = false},
		[PQ_boss2]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss2, guid = nil, immunity = false, burn = false},
		[PQ_boss3]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss3, guid = nil, immunity = false, burn = false},
		[PQ_boss4]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss3, guid = nil, immunity = false, burn = false}
	}
	
	--List of priorities
	PQ_PriorityList = {}
	
	PQ_PriorityList[1] = PQ_mouseover
	PQ_PriorityList[2] = PQ_target
	PQ_PriorityList[3] = PQ_focus
	PQ_PriorityList[4] = nil
	PQ_PriorityList[5] = nil
	PQ_PriorityList[6] = nil
	
	--List of rotations
	PQ_RotationList = {}
	
	PQ_RotationList[1] = &amp;apos;STANDART&amp;apos;
	PQ_RotationList[2] = &amp;apos;MORCHOK&amp;apos;
	PQ_RotationList[3] = &amp;apos;WARLORD&amp;apos;
	PQ_RotationList[4] = &amp;apos;YORSAHJ&amp;apos;
	PQ_RotationList[5] = &amp;apos;HAGARA&amp;apos;
	PQ_RotationList[6] = &amp;apos;ULTRAXION&amp;apos;
	PQ_RotationList[7] = &amp;apos;WARMASTER&amp;apos;
	PQ_RotationList[8] = &amp;apos;SPINE&amp;apos;
	PQ_RotationList[9] = &amp;apos;MADNESS&amp;apos;
	
	--List of bosses
	PQ_BossList = {}
	
	--List of burnunits
	PQ_BurnUnitsList = {
		56575,
		56341,
		56262,
		56923
	}
	
	--List of skills by target
	PQ_UnitSkillList = {} 

	PQ_UnitSkillList.first = {
		[PQ_CurseOfElements]   	= {check = false},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = true},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = true},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},
		[PQ_Fear] 				= {check = false}			
					
	}

	PQ_UnitSkillList.second = { 
		[PQ_CurseOfElements]   	= {check = true},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = true},
		[PQ_Conflagate]   		= {check = true},
		[PQ_ChaosBolt] 			= {check = true},
		[PQ_Shadowburn] 		= {check = true},
		[PQ_Incinerate]    		= {check = true},
		[PQ_FelFlame] 			= {check = true},
		[PQ_Fear] 				= {check = false}			
	}

	PQ_UnitSkillList.third = { 
		[PQ_CurseOfElements]   	= {check = true},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = true},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = false},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},
		[PQ_Fear] 				= {check = false}			
	}

	PQ_UnitSkillList.forth = { 
		[PQ_CurseOfElements]   	= {check = false},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = false},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = false},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},
		[PQ_Fear] 				= {check = false}			
	}

	PQ_UnitSkillList.fifth = { 
		[PQ_CurseOfElements]   	= {check = false},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = false},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = false},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},
		[PQ_Fear] 				= {check = false}		
	}	
	
	PQ_UnitSkillList.six = { 
		[PQ_CurseOfElements]   	= {check = false},
		[PQ_BaneOfHavoc] 		= {check = false},
		[PQ_Immolate]   		= {check = false},
		[PQ_Conflagate]   		= {check = false},
		[PQ_ChaosBolt] 			= {check = false},
		[PQ_Shadowburn] 		= {check = false},
		[PQ_Incinerate]    		= {check = false},
		[PQ_FelFlame] 			= {check = false},		
		[PQ_Fear] 				= {check = false}		
	}
	
	--Table of skills
	PQ_Skills = {
		[PQ_CurseOfElements]   	= {castonmove = true, isknown = IsSpellKnown(PQ_CurseOfElements)},
		[PQ_BaneOfHavoc] 		= {castonmove = true, isknown = IsSpellKnown(PQ_BaneOfHavoc)},
		[PQ_Immolate]   		= {castonmove = false, isknown = IsSpellKnown(PQ_Immolate)},
		[PQ_Conflagate]   		= {castonmove = true, isknown = IsSpellKnown(PQ_Conflagate)},
		[PQ_ChaosBolt] 			= {castonmove = false, isknown = IsSpellKnown(PQ_ChaosBolt)},
		[PQ_Shadowburn] 		= {castonmove = true, isknown = IsSpellKnown(PQ_Shadowburn)},
		[PQ_Incinerate]    		= {castonmove = false, isknown = IsSpellKnown(PQ_Incinerate)},
		[PQ_FelFlame] 			= {castonmove = true, isknown = IsSpellKnown(PQ_FelFlame)},
		[PQ_Fear] 				= {castonmove = false, isknown = IsSpellKnown(PQ_Fear)},
		[PQ_DemonSoul] 			= {castonmove = true, isknown = IsSpellKnown(PQ_DemonSoul)}
	}	
	
	PQ_LockVariablesLoaded = true
	if PQ_LockVariablesLoaded then
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;Sucess!!!&amp;apos;)
		end
	else
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;FAIL!!!&amp;apos;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Functions --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQ_LockFunctionsLoaded then
	if PQ_Debug then
		DebugFrame.messageFrame:AddMessage(&amp;apos;Loading WarLock functions ...&amp;apos;)
	end

	function PQ_CheckForAllBuffs()
		for k, v in pairs(PQ_Buffs) do
			
			if PQ_Buffs[k].check == true and UnitBuffID(PQ_player, k) then
				PQ_Buffs[k].hasBuff = true
				PQ_Buffs[k].endTime = (select(7, UnitBuffID(PQ_player, k)))
				if PQ_Debug then
					DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2APlayer has buff &amp;quot; .. GetSpellLink(k))
				end
			end
		end
	end

	function PQ_PlayerBuffHandler(spellID, hasBuffNow)
		if PQ_Buffs[spellID] and PQ_Buffs[spellID].check == true then
			PQ_Buffs[spellID].hasBuff = hasBuffNow   
			if hasBuffNow == true then
				PQ_Buffs[spellID].endTime = (select(7, UnitBuffID(PQ_player, spellID)))
				if PQ_Debug then
					DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AGained buff \124cFFFA652A&amp;quot; .. GetSpellLink(spellID))
				end
				return
			end
			if PQ_Debug then
				DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFFA652ALost buff &amp;quot; .. GetSpellLink(spellID))
			end
		end   
	end

	function PQ_PlayerDebuffHandler(spellID, hasDebuffNow)
		for type, debuffInfo in pairs(PQ_PlayerDebuffs) do  
			if (debuffInfo.check) then            
				for k, debuff in pairs(debuffInfo.playerdebuffList) do
					if (debuff == spellID) then
						PQ_PlayerDebuffs[type].hasDebuff = hasDebuffNow
						if (hasDebuffNow) then --Has debuff spellID of type
							PQ_PlayerDebuffs[type].spellid = spellID
							PQ_PlayerDebuffs[type].endTime = select(7, UnitDebuffID(PQ_player, spellID))
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AGained debuff &amp;quot; .. GetSpellLink(spellID) .. &amp;apos;\124cFFDBFA2A of type: \124cFFFA652A&amp;apos; .. type)
							end
						else
							PQ_PlayerDebuffs[type].spellid = nil
							PQ_PlayerDebuffs[type].endTime = nil
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFFA652ALost debuff &amp;quot; .. GetSpellLink(spellID) .. &amp;apos;\124cFFFA652A of type: \124cFFDBFA2A&amp;apos; .. type)
							end
						end
						return
					end
				end            
			end            
		end    
	end

	function PQ_UnitDebuffHandler(spellID, hasDebuffNow, handlerGUID)
		for target, targetinfo in pairs(PQ_Units) do
			if (targetinfo.check) and (targetinfo.guid == handlerGUID) then
				for debuff, debuffinfo in pairs(targetinfo.unitdebufflist) do
					if (debuff == spellID) and (debuffinfo.check) then
						debuffinfo.hasDebuff = hasDebuffNow
						if hasDebuffNow then
							debuffinfo.endTime = select(7, UnitDebuffID(target, spellID, PQ_player))
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AUnit (&amp;quot; .. target .. &amp;quot;,&amp;quot; .. handlerGUID .. &amp;quot;) \124cFFDBFA2Agained debuff &amp;quot; .. GetSpellLink(spellID))
							end
						else
							debuffinfo.endTime = nil
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AUnit (&amp;quot; .. target .. &amp;quot;,&amp;quot; .. handlerGUID .. &amp;quot;) \124cFFDBFA2Alost debuff &amp;quot; .. GetSpellLink(spellID))
							end
						end
					end
				end	
			end
		end
	end

	function PQ_UnitBuffHandler(spellID, hasBuffNow, handlerGUID)
		for target, targetinfo in pairs(PQ_Units) do
			if (targetinfo.check) and (targetinfo.guid == handlerGUID) then
				for i, buff in pairs(PQ_ImmunityList) do
					if (buff == spellID) then
						targetinfo.immunity = hasBuffNow
						if hasBuffNow then
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AUnit (&amp;quot; .. target .. &amp;quot;,&amp;quot; .. handlerGUID .. &amp;quot;) \124cFFDBFA2Agained immunity buff &amp;quot; .. GetSpellLink(spellID))
							end
						else
							if PQ_Debug then
								DebugFrame.messageFrame:AddMessage(&amp;quot;\124cFFDBFA2AUnit (&amp;quot; .. target .. &amp;quot;,&amp;quot; .. handlerGUID .. &amp;quot;) \124cFFDBFA2Alost immunity buff &amp;quot; .. GetSpellLink(spellID))
							end
						end
					end
				end	
			end
		end
	end
	
	function PQ_UnitCheckDebuffs(unit)
		PQ_Units[unit].guid = UnitGUID(unit)
		if PQ_Units[unit].check then
			for debuff, debuffinfo in pairs(PQ_Units[unit].unitdebufflist) do
				if debuffinfo.check == true then
					if UnitDebuffID(unit, debuff, PQ_player) then
						debuffinfo.hasDebuff = true
						debuffinfo.endTime = (select(7, UnitDebuffID(unit, debuff, PQ_player)))
						if PQ_Debug then
							DebugFrame.messageFrame:AddMessage(unit .. &amp;quot;\124cFFDBFA2A has debuff &amp;quot; .. GetSpellLink(debuff))
						end
					else
						debuffinfo.hasDebuff = false
						debuffinfo.endTime = nil
						if PQ_Debug then
							DebugFrame.messageFrame:AddMessage(unit .. &amp;quot;\124cFFDBFA2A doesn&amp;apos;t has debuff &amp;quot; .. GetSpellLink(debuff))
						end
					end
				end
			end
		end	
	end

	function PQ_UnitCheckBuffs(unit)
		PQ_Units[unit].guid = UnitGUID(unit)
		if PQ_Units[unit].check then
			for i, buff in pairs(PQ_ImmunityList) do
				if UnitBuffID(unit, buff) then
					PQ_Units[unit].immunity = true
					if PQ_Debug then
						DebugFrame.messageFrame:AddMessage(unit .. &amp;quot;\124cFFDBFA2A has immunity buff &amp;quot; .. GetSpellLink(buff))
					end
				else
					PQ_Units[unit].immunity = false
					if PQ_Debug then
						DebugFrame.messageFrame:AddMessage(unit .. &amp;quot;\124cFFDBFA2A doesn&amp;apos;t has immunity buff &amp;quot; .. GetSpellLink(buff))
					end
				end
			end
		end	
	end

	function PQ_GetTimeLeftPlayerBuff(buff)
		return PQ_Buffs[buff].endTime - GetTime()
	end

	function PQ_GetTimeLeftPlayerDebuff(debuff)
		return select(7,UnitDebuffID(PQ_player,debuff)) - GetTime()
	end

	function PQ_GetTimeLeftUnitDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].endTime - GetTime()
	end
	
	function PQ_IsUseUnitSkill(unit, skill)
		if unit == PQ_PriorityList[1] then
			return PQ_UnitSkillList.first[skill].check
		elseif unit == PQ_PriorityList[2] then
			return PQ_UnitSkillList.second[skill].check
		elseif unit == PQ_PriorityList[3] then
			return PQ_UnitSkillList.third[skill].check
		elseif unit == PQ_PriorityList[4] then
			return PQ_UnitSkillList.forth[skill].check
		elseif unit == PQ_PriorityList[5] then
			return PQ_UnitSkillList.fifth[skill].check
		elseif unit == PQ_PriorityList[6] then
			return PQ_UnitSkillList.six[skill].check
		end								
	end
	
	function PQ_IsCheckUnitDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].check
	end

	function PQ_IsUnitHasDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].hasDebuff
	end

	function PQ_SpellCheck(spell, target)
    	local Cast = true;
	    local SpellName = GetSpellInfo(spell)
    	if 
    		UnitExists(target) == nil or 
    		UnitIsDeadOrGhost(target) or 
    		IsSpellInRange(SpellName, target) == 0 or 
    		UnitChannelInfo(PQ_player) ~= nil or 
    		PQR_IsOutOfSight(target) or
    		(not PQ_Skills[spell].castonmove and PQR_IsMoving(1))
    	then
    		Cast = false
    	end
    	return Cast
	end
	
	function PQ_GetPlayerHP()
		hp,hpmax = UnitHealth(PQ_player),UnitHealthMax(PQ_player)	
		if hp and hpmax then 
			return hp / hpmax * 100
		else 
			return 0
		end
	end

	function PQ_GetPlayerUP()
		up,upmax = UnitPower(PQ_player),UnitPowerMax(PQ_player)
		if up and upmax then 
			return up / upmax * 100
		else 
			return 0
		end
	end

	function PQ_GetTargetHP(target)
		hp,hpmax = UnitHealth(target),UnitHealthMax(target)
		if hp and hpmax then 
			return hp / hpmax * 100
		else 
			return 0
		end
	end
	
	function PQ_NotifyFrame_OnUpdate()
		if (PQ_NotifyFrameTime &amp;lt; GetTime() - 3) then
			local alpha = PQ_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then PQ_NotifyFrame:SetAlpha(alpha - .05) end
			if (aplha == 0) then PQ_NotifyFrame:Hide() end
		end
	end

	function PQ_Notify(message)
		PQ_NotifyFrame.text:SetText(message)
		PQ_NotifyFrame:SetAlpha(1)
		PQ_NotifyFrame:Show()
		PQ_NotifyFrameTime = GetTime()
	end	
	
	function PQ_RotationSwitch(rotationmode)
		PQ_RotationMode = rotationmode
		if rotationmode == PQ_RotationList[1] then
			PQ_PriorityList[1] = PQ_mouseover
			PQ_PriorityList[2] = PQ_target
			PQ_PriorityList[3] = PQ_focus
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil
		
			PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.first[PQ_Immolate].check			= true
			PQ_UnitSkillList.first[PQ_Conflagate].check			= false
			PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
			PQ_UnitSkillList.first[PQ_Incinerate].check			= false
			PQ_UnitSkillList.first[PQ_FelFlame].check			= false
			PQ_UnitSkillList.first[PQ_Fear].check				= false
						
			PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
			PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.second[PQ_Immolate].check			= true
			PQ_UnitSkillList.second[PQ_Conflagate].check		= true
			PQ_UnitSkillList.second[PQ_ChaosBolt].check			= true
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
			PQ_UnitSkillList.second[PQ_Incinerate].check		= true
			PQ_UnitSkillList.second[PQ_FelFlame].check			= true
			PQ_UnitSkillList.second[PQ_Fear].check				= false
			
			PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
			PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= true
			PQ_UnitSkillList.third[PQ_Immolate].check			= true
			PQ_UnitSkillList.third[PQ_Conflagate].check			= false
			PQ_UnitSkillList.third[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.third[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.third[PQ_Incinerate].check			= false
			PQ_UnitSkillList.third[PQ_FelFlame].check			= false
			PQ_UnitSkillList.third[PQ_Fear].check				= false
			
			PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.forth[PQ_Immolate].check			= false
			PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.forth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
			PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.fifth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.six[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.six[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.six[PQ_Immolate].check			= false
			PQ_UnitSkillList.six[PQ_Conflagate].check			= false
			PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.six[PQ_Incinerate].check			= false
			PQ_UnitSkillList.six[PQ_FelFlame].check			= false
			PQ_UnitSkillList.six[PQ_Fear].check				= false
		elseif rotationmode == PQ_RotationList[2] then
			if GetInstanceDifficulty() ~= 3 or GetInstanceDifficulty() ~= 4 then
				PQ_PriorityList[1] = PQ_boss1
				PQ_PriorityList[2] = nil
				PQ_PriorityList[3] = nil
				PQ_PriorityList[4] = nil
				PQ_PriorityList[5] = nil
				PQ_PriorityList[6] = nil

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.first[PQ_Immolate].check			= false
			PQ_UnitSkillList.first[PQ_Conflagate].check			= false
			PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
			PQ_UnitSkillList.first[PQ_Incinerate].check			= false
			PQ_UnitSkillList.first[PQ_FelFlame].check			= false
			PQ_UnitSkillList.first[PQ_Fear].check				= false
						
			PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.second[PQ_Immolate].check			= false
			PQ_UnitSkillList.second[PQ_Conflagate].check		= false
			PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
			PQ_UnitSkillList.second[PQ_Incinerate].check		= false
			PQ_UnitSkillList.second[PQ_FelFlame].check			= false
			PQ_UnitSkillList.second[PQ_Fear].check				= false
			
			PQ_UnitSkillList.third[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.third[PQ_Immolate].check			= false
			PQ_UnitSkillList.third[PQ_Conflagate].check			= false
			PQ_UnitSkillList.third[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.third[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.third[PQ_Incinerate].check			= false
			PQ_UnitSkillList.third[PQ_FelFlame].check			= false
			PQ_UnitSkillList.third[PQ_Fear].check				= false
			
			PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.forth[PQ_Immolate].check			= false
			PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.forth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
			PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.fifth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.six[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.six[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.six[PQ_Immolate].check			= false
			PQ_UnitSkillList.six[PQ_Conflagate].check			= false
			PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.six[PQ_Incinerate].check			= false
			PQ_UnitSkillList.six[PQ_FelFlame].check			= false
			PQ_UnitSkillList.six[PQ_Fear].check				= false
			else
				PQ_PriorityList[1] = PQ_boss1
				PQ_PriorityList[2] = PQ_boss2
				PQ_PriorityList[3] = nil
				PQ_PriorityList[4] = nil
				PQ_PriorityList[5] = nil
				PQ_PriorityList[6] = nil

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.first[PQ_Immolate].check			= false
			PQ_UnitSkillList.first[PQ_Conflagate].check			= false
			PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
			PQ_UnitSkillList.first[PQ_Incinerate].check			= false
			PQ_UnitSkillList.first[PQ_FelFlame].check			= false
			PQ_UnitSkillList.first[PQ_Fear].check				= false
						
			PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.second[PQ_Immolate].check			= false
			PQ_UnitSkillList.second[PQ_Conflagate].check		= false
			PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
			PQ_UnitSkillList.second[PQ_Incinerate].check		= false
			PQ_UnitSkillList.second[PQ_FelFlame].check			= false
			PQ_UnitSkillList.second[PQ_Fear].check				= false
			
			PQ_UnitSkillList.third[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.third[PQ_Immolate].check			= false
			PQ_UnitSkillList.third[PQ_Conflagate].check			= false
			PQ_UnitSkillList.third[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.third[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.third[PQ_Incinerate].check			= false
			PQ_UnitSkillList.third[PQ_FelFlame].check			= false
			PQ_UnitSkillList.third[PQ_Fear].check				= false
			
			PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.forth[PQ_Immolate].check			= false
			PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.forth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
			PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
			PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
			PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
			PQ_UnitSkillList.fifth[PQ_Fear].check				= false
			
			PQ_UnitSkillList.six[PQ_CurseOfElements].check	= false
			PQ_UnitSkillList.six[PQ_BaneOfHavoc].check		= false
			PQ_UnitSkillList.six[PQ_Immolate].check			= false
			PQ_UnitSkillList.six[PQ_Conflagate].check			= false
			PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
			PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
			PQ_UnitSkillList.six[PQ_Incinerate].check			= false
			PQ_UnitSkillList.six[PQ_FelFlame].check			= false
			PQ_UnitSkillList.six[PQ_Fear].check				= false
			end																				
		end
	end
  
	PQ_LockFunctionsLoaded = true
	if PQ_LockFunctionsLoaded then
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;Sucess!!!&amp;apos;)
		end
	else
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;FAIL!!!&amp;apos;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Event Loader --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>---------------------------START--------------------------

if not PQ_EventHandlerLoaded then

	local PQ_EventHandlerFrame, events = CreateFrame(&amp;quot;Frame&amp;quot;), {};
	if PQ_Debug then
		DebugFrame.messageFrame:AddMessage(&amp;apos;Loading Event Handlers ...&amp;apos;)
	end

	function events:COMBAT_LOG_EVENT_UNFILTERED(...)
		-- Check for a buff/debuff applied to PLAYER (yourself)
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),true)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),true)
			end
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),true)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),true)
			end
		end
	  
		-- Check for a buff/debuff removed from PLAYER (yourself)
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),false)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),false)
			end	
		end
		
		-- Check for MY debuff applied to UNIT
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),true,select(8, ...))
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),true,select(8, ...))
		end
		
		-- Check for MY debuff removed/faded from UNIT
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),false,select(8, ...))
		end
		
		-- Check for buff applied to UNIT
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),true,select(8, ...))
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),true,select(8, ...))
		end
		
		-- Check for MY debuff removed/faded from UNIT
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),false,select(8, ...))
		end
						  
	end

	function events:PLAYER_REGEN_DISABLED(...)
		PQ_InCombat = true
	end

	function events:PLAYER_REGEN_ENABLED(...)
		PQ_InCombat = false
		PQ_RotationSwitch(PQ_RotationList[1])
		PQ_Notify(PQ_RotationMode)		
	end

	function events:PLAYER_CONTROL_LOST(...)
		if PQ_InCombat then
			PQ_HasLossOfControl = true
		end
	end

	function events:PLAYER_CONTROL_GAINED(...)
		if PQ_HasLossOfControl then
			PQ_HasLossOfControl = false
		end
	end
	
	function CheckSwitch()
		local aoe = &amp;apos;&amp;apos;
		local zeal = &amp;apos;&amp;apos;
		if PQ_Zaslon then
			aoe = &amp;apos;AOE&amp;apos;
		else
			aoe = &amp;apos;Single target&amp;apos;
		end
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,aoe..&amp;apos; &amp;apos;..zeal)
	end
	
	function events:MODIFIER_STATE_CHANGED(...)
		local key, state = ...
		if key == &amp;apos;LCTRL&amp;apos; and state == 0 then
			if PQ_Zaslon then 
				PQ_Zaslon = nil 
			else 
				PQ_Zaslon = 1 
			end
		end
		CheckSwitch()
	end

	function events:UNIT_POWER(...)
		local unitID, strResource = ...
		PQ_Shards = strResource
		if unitID == PQ_player and strResource == &amp;apos;BURNING_EMBERS&amp;apos; then
			PQ_SoulShard = UnitPower(PQ_player, 14)	
		end
	end
	
	function events:PLAYER_TARGET_CHANGED(...)
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW TARGET&amp;apos;)
		end
		if UnitExists(PQ_target) then
			PQ_UnitCheckDebuffs(PQ_target)
			PQ_UnitCheckBuffs(PQ_target)
			local npcid = tonumber((UnitGUID(PQ_target)):sub(-12, -9), 16)
			for i, burnid in ipairs(PQ_BurnUnitsList) do
				if npcid == burnid then
					PQ_Units[PQ_target].burn = true
				else
					PQ_Units[PQ_target].burn = false						
				end
			end
		end
	end

	function events:PLAYER_FOCUS_CHANGED(...)
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW FOCUS&amp;apos;)
		end
		if UnitExists(PQ_focus) then
			PQ_UnitCheckDebuffs(PQ_focus)
			PQ_UnitCheckBuffs(PQ_focus)
		end
	end

	function events:UPDATE_MOUSEOVER_UNIT(...)
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW MOUSEOVER&amp;apos;)
		end
		if UnitExists(PQ_mouseover) then
			PQ_UnitCheckDebuffs(PQ_mouseover)
			PQ_UnitCheckBuffs(PQ_mouseover)
			local npcid = tonumber((UnitGUID(PQ_mouseover)):sub(-12, -9), 16)
			DebugFrame.messageFrame:AddMessage(npcid)
			for i, burnid in ipairs(PQ_BurnUnitsList) do
				if npcid == burnid then
					PQ_Units[PQ_mouseover].burn = true
				else
					PQ_Units[PQ_mouseover].burn = false						
				end
			end
		end		
	end
	
	function events:UNIT_NAME_UPDATE(...)
		local unitName = ...
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW UNIT &amp;apos; .. unitName)
		end
	end
	
	function events:INSTANCE_ENCOUNTER_ENGAGE_UNIT(...)
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;\124cFFDBFA2ANEW BOSS!!! &amp;apos;)
		end
		for i = 1, 4 do
			local target = &amp;apos;boss&amp;apos;..tostring(i)
			if UnitExists(target) then 
				local npcid = tonumber((UnitGUID(target)):sub(-12, -9), 16)
				if npcid == 55265 then
					--PQ_RotationSwitch(PQ_RotationList[2])
					PQ_Notify(PQ_RotationMode)
				end
			end
		end		
	end
		
	function PQ_Init()
		PQ_RotationSwitch(PQ_RotationList[1])
		PQ_Notify(PQ_RotationMode)
		PQ_SoulShard = UnitPower(PQ_player, 14)
		PQ_CheckForAllBuffs()
	end

	--Notify frame
	PQ_NotifyFrame = CreateFrame(&amp;apos;Frame&amp;apos;)
	PQ_NotifyFrame:ClearAllPoints()
	PQ_NotifyFrame:SetHeight(300)
	PQ_NotifyFrame:SetWidth(300)
	PQ_NotifyFrame:SetScript(&amp;apos;OnUpdate&amp;apos;, PQ_NotifyFrame_OnUpdate)
	PQ_NotifyFrame:Hide()
	PQ_NotifyFrame.text = PQ_NotifyFrame:CreateFontString(nil, &amp;apos;BACKGROUND&amp;apos;, &amp;apos;PVPInfoTextFont&amp;apos;)
	PQ_NotifyFrame.text:SetAllPoints()
	PQ_NotifyFrame:SetPoint(&amp;apos;CENTER&amp;apos;, 0, 200)
	PQ_NotifyFrameTime = 0

	PQ_EventHandlerFrame:SetScript(&amp;quot;OnEvent&amp;quot;, function(self, event, ...) events[event](self, ...); end);

	for k, v in pairs(events) do
		PQ_EventHandlerFrame:RegisterEvent(k); -- Register all events for which handlers have been defined
	end

	PQ_Init()
	PQ_EventHandlerLoaded = true
	if PQ_EventHandlerLoaded then
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;Sucess!!!&amp;apos;)
		end
	else
		if PQ_Debug then
			DebugFrame.messageFrame:AddMessage(&amp;apos;FAIL!!!&amp;apos;)
		end
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Autopause --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local unitincombat = false
for i, target in ipairs(PQ_PriorityList) do
	if target then
		if UnitAffectingCombat(target) then unitincombat = true end
	end
end
		
if not PQ_InCombat and unitincombat == false then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Curse of the Elements</Name><Default>false</Default><SpellID>1490</SpellID><Actions></Actions><Lua>for i, target in ipairs(PQ_PriorityList) do

	if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) then	
	
		if PQ_IsUseUnitSkill(target,PQ_CurseOfElements) and not PQ_Units[target].immunity and not PQ_Units[target].burn and PQ_Skills[PQ_CurseOfElements].isknown then
			
			if PQ_IsCheckUnitDebuff(target,PQ_CurseOfElements) then
				
				if PQ_IsUnitHasDebuff(target,PQ_CurseOfElements) then
				
					if PQ_GetTimeLeftUnitDebuff(target,PQ_CurseOfElements) &amp;lt; 4 then
					
						if PQ_SpellCheck(PQ_CurseOfElements,target) then
						
							PQR_CustomTarget = target
							return true
						end
					end
				elseif not UnitDebuffID(target,34889) and 
				not UnitDebuffID(target,24844) and 
				not UnitDebuffID(target,93068) and
				not UnitDebuffID(target,1490) then
					
					if PQ_SpellCheck(PQ_CurseOfElements,target) then
						PQR_CustomTarget = target
						return true
					end
				end
			end
		end
	end
end</Lua><RecastDelay>3000</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Immolate</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Immolate,_,_,_,_,_,Immolatetimer = UnitDebuffID(&amp;quot;target&amp;quot;,348,&amp;quot;PLAYER&amp;quot;)
local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)

if PQR_IsMoving(0.3) then
	return false
end

if CurrentCast == &amp;quot;Immolate&amp;quot; then
return false
end

if Immolate == nil then
CastSpellByName(tostring(GetSpellInfo(348)))
return true
end

if Immolatetimer - GetTime() &amp;lt; 5 then
CastSpellByName(tostring(GetSpellInfo(348)))
return true
end</Lua><RecastDelay>2000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Conflagrate</Name><Default>false</Default><SpellID>17962</SpellID><Actions></Actions><Lua>local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)
local Backdraft = UnitBuffID(&amp;quot;player&amp;quot;, 117828)

if PQ_Zaslon then
	if not Brimstone and DarkSoul and not Backdraft then
	return true
	end
end

if PQ_Zaslon then
	if not Brimstone and not DarkSoul then
	return true
	end
end

if not PQ_Zaslon then
	if DarkSoul and PQ_SoulShard &amp;lt; 1 then
	return true
	end
end

if not PQ_Zaslon then
	if not DarkSoul then
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Incinerate</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)
local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local Backdraft = UnitBuffID(&amp;quot;player&amp;quot;, 117828)

if PQR_IsMoving(0.3) then
	return false
end

if not Brimstone and DarkSoul == nil then
	CastSpellByName(GetSpellInfo(PQ_Incinerate),nil)
	return true
end

if PQ_Zaslon then
	if DarkSoul and  PQ_SoulShard &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(PQ_Incinerate),nil)
	return true
	end
end

if not PQ_Zaslon then
	if DarkSoul and PQ_SoulShard &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(PQ_Incinerate),nil)
	return true
	end
end

if not PQ_Zaslon then
	if DarkSoul and PQ_SoulShard &amp;gt;= 1  and Backdraft then
	CastSpellByName(GetSpellInfo(PQ_Incinerate),nil)
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadowfury</Name><Default>false</Default><SpellID>30283</SpellID><Actions></Actions><Lua>
if IsLeftAltKeyDown() then
	return true
end	
</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Gloves</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>for i, target in ipairs(PQ_PriorityList) do
	if target and UnitExists(target) then	
		if GetInventoryItemCooldown(&amp;quot;player&amp;quot;,10) == 0 then UseInventoryItem(10) end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Delays</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	PQR_RotationStarted = false
	PQR_AddToSpellDelayList(48018, 0, 1) --Sozdanie kruga
	PQR_AddToSpellDelayList(48020, 0, 1) --Teleport
	PQR_AddToSpellDelayList(112927, 0, 1) --Bolshoy
	PQR_AddToSpellDelayList(79476, 58091, 1) --Vulcanic (spellID, itemID, delay)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--Latency--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local minValue = 0.05
local maxValue = 0.3
local curPing = tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

if curPing &amp;lt; minValue then
	curPing = minValue
elseif curPing &amp;gt; maxValue then
	curPing = maxValue
end

PQR_SpellAvailableTime = curPing</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dark Soul: Instability</Name><Default>false</Default><SpellID>113858</SpellID><Actions></Actions><Lua>for i, target in ipairs(PQ_PriorityList) do
	if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) then	
		
		
				if PQ_SoulShard &amp;gt;= 3 then
					CastSpellByName(GetSpellInfo(PQ_DemonSoul),nil)
					return true
				end
			
		
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>False</SkipUnknown></Ability><Ability><Name>Rain of Fire</Name><Default>false</Default><SpellID>5740</SpellID><Actions></Actions><Lua>if IsLeftShiftKeyDown() then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--Init--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted then

	PQ_Zaslon = nil
	
	function GetHealthPercent(unit)
		return UnitHealth(unit) / UnitHealthMax(unit) * 100
	end

	
	function TargetIsBoss()
		targetLevel = UnitLevel(&amp;quot;target&amp;quot;)
		if targetLevel == -1 then
			return true
		end
		return false
	end
	print(PQ_Zaslon)
	CheckSwitch()
	
	PQR_RotationStarted = false
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fel Flame</Name><Default>false</Default><SpellID>77799</SpellID><Actions></Actions><Lua>for i, target in ipairs(PQ_PriorityList) do
	if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) then	
		if PQ_IsUseUnitSkill(target,PQ_FelFlame) and not PQ_Units[target].immunity and PQ_Skills[PQ_FelFlame].isknown then
			if PQ_SpellCheck(PQ_FelFlame,target) then
				if PQR_IsMoving(1) then
					PQR_CustomTarget = target
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fire and Brimstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)
local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local start, duration, enabled = GetSpellCooldown(113858)
cd_DarkSoul = (start + duration - GetTime())


if PQ_Zaslon then
	if not Brimstone then
		if DarkSoul
		then
		CastSpellByName(tostring(GetSpellInfo(108683)))
		end
	end
	if not Brimstone then
		if PQ_SoulShard &amp;gt; 3 and cd_DarkSoul &amp;gt; 15
		then
		CastSpellByName(tostring(GetSpellInfo(108683)))
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Summon Pet</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Sacrafice,_,_,_,_,_,Sacraficetimer = UnitBuffID(&amp;quot;player&amp;quot;,108503)

if IsMounted() then
return false
end

if select(2,GetTalentRowSelectionInfo(5)) == 13
then
	if not UnitExists(&amp;quot;pet&amp;quot;)
	or UnitIsDead(&amp;quot;pet&amp;quot;)
	then
		if not PQR_IsMoving(1)
		then
		CastSpellByName(tostring(GetSpellInfo(112869)))
		end
	end
end

if select(2,GetTalentRowSelectionInfo(5)) == 14
then
	if not UnitExists(&amp;quot;pet&amp;quot;)
	or UnitIsDead(&amp;quot;pet&amp;quot;)
	then
		if not PQR_IsMoving(1)
		then
		CastSpellByName(tostring(GetSpellInfo(691)))
		end
	end
end

if select(2,GetTalentRowSelectionInfo(5)) == 15
and not Sacrafice
then
	if not UnitExists(&amp;quot;pet&amp;quot;)
	or UnitIsDead(&amp;quot;pet&amp;quot;)
	then
		if not PQR_IsMoving(1)
		then
		CastSpellByName(tostring(GetSpellInfo(697)))
		end
	end
end</Lua><RecastDelay>5000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dark Intent</Name><Default>false</Default><SpellID>109773</SpellID><Actions></Actions><Lua>if IsMounted() then
return false
end

if not UnitBuffID(&amp;quot;player&amp;quot;,109773)
and not UnitBuffID(&amp;quot;player&amp;quot;,20217)
and not UnitBuffID(&amp;quot;player&amp;quot;,90363)
and not UnitBuffID(&amp;quot;player&amp;quot;,61316)
then
return true
end</Lua><RecastDelay>5000</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Incinerate AoE</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)
local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)

if PQR_IsMoving(0.3)
or CurrentCast == &amp;quot;Immolate&amp;quot;
or CurrentCast == &amp;quot;Incinerate&amp;quot; then
	return false
end

if Brimstone and PQ_SoulShard &amp;lt; 4 then
CastSpellByName(tostring(GetSpellInfo(114654)))
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>False</SkipUnknown></Ability><Ability><Name>Immolate AoE</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)
local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)

if PQR_IsMoving(0.3) then
	return false
end

if CurrentCast == &amp;quot;Immolate&amp;quot; then
return false
end

if Brimstone and PQ_SoulShard &amp;gt;= 3 then
CastSpellByName(tostring(GetSpellInfo(348)))
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Chaos Bolt Trash</Name><Default>false</Default><SpellID>116858</SpellID><Actions></Actions><Lua>local Backdraft = UnitBuffID(&amp;quot;player&amp;quot;, 117828)

if not PQ_Zaslon then
	for i, target in ipairs(PQ_PriorityList) do
		if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) then	
			if PQ_IsUseUnitSkill(target,PQ_ChaosBolt) and not PQ_Units[target].immunity and PQ_Skills[PQ_ChaosBolt].isknown then
				
				if PQ_SpellCheck(PQ_ChaosBolt,target) and not Backdraft and PQ_SoulShard &amp;gt;= 3 then
					PQR_CustomTarget = target
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Brimstone Trash</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Brimstone = UnitBuffID(&amp;quot;player&amp;quot;, 108683)

if PQ_Zaslon then
	if not Brimstone then
		if PQ_SoulShard &amp;gt;= 3
		then
		CastSpellByName(tostring(GetSpellInfo(108683)))
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Chaos Bolt</Name><Default>false</Default><SpellID>116858</SpellID><Actions></Actions><Lua>local Backdraft = UnitBuffID(&amp;quot;player&amp;quot;, 117828)
local DarkSoul = UnitBuffID(&amp;quot;player&amp;quot;, 113858)
local start, duration, enabled = GetSpellCooldown(113858)
cd_DarkSoul = (start + duration - GetTime())

if not PQ_Zaslon then
	for i, target in ipairs(PQ_PriorityList) do
		if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) then	
			if PQ_IsUseUnitSkill(target,PQ_ChaosBolt) and not PQ_Units[target].immunity and PQ_Skills[PQ_ChaosBolt].isknown then
				
				if (PQ_SpellCheck(PQ_ChaosBolt,target) and not Backdraft and start &amp;gt; 0 and PQ_SoulShard &amp;gt; 3 and cd_DarkSoul &amp;gt; 15) or 
				(PQ_SpellCheck(PQ_ChaosBolt,target) and not Backdraft and DarkSoul) or (PQ_SoulShard &amp;gt; 3 and not Backdraft and cd_DarkSoul &amp;gt; 15) then
					PQR_CustomTarget = target
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>200</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Cancel Summon</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)
local countHScharges = GetItemCount(5512, nil, true) 

if CurrentCast == &amp;quot;Summon Voidwalker&amp;quot; or CurrentCast == &amp;quot;Summon Felhunter&amp;quot; then
	if UnitExists(&amp;quot;pet&amp;quot;) then
	RunMacroText(&amp;quot;/stopcasting&amp;quot;)
	return true
	end
end

if CurrentCast == &amp;quot;Create Healthstone&amp;quot; then
	if countHScharges &amp;gt;= 3 then
	RunMacroText(&amp;quot;/stopcasting&amp;quot;)
	return true
	end
end</Lua><RecastDelay>5000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARLOCK>