<?xml version="1.0" encoding="utf-8" ?><DRUID><Ability><Name>-- Init --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Queue System
SLASH_VQUEUE1 = &amp;quot;/vqueue&amp;quot;
function SlashCmdList.VQUEUE(msg, editbox)		
	local spellid, unit = msg:match(&amp;quot;^(%S*)%s*(.-)$&amp;quot;);
	if tonumber(spellid) ~= nil and unit ~= &amp;quot;&amp;quot; then 			
		if not UnitExists(tostring(unit)) and unit ~= &amp;quot;tank&amp;quot; and unit ~= &amp;quot;low&amp;quot; and unit ~= &amp;quot;aoe5&amp;quot; and unit ~= &amp;quot;aoe10&amp;quot; and unit ~= &amp;quot;aoe15&amp;quot; and unit ~= &amp;quot;aoe20&amp;quot; and unit ~= &amp;quot;aoe25&amp;quot; and unit ~= &amp;quot;aoe30&amp;quot; then			
			PQR_WriteToChat(&amp;quot;unit not exist&amp;quot;);
		elseif not IsSpellKnown(tonumber(spellid)) then
			PQR_WriteToChat(&amp;quot;spell unknown&amp;quot;);
		else
			if not Queue_Spell then
				Queue_Spell = { }	
			end				
			table.insert(Queue_Spell, { Unit = unit, SpellID = spellid, Time = GetTime() } )
		end
	else
		PQR_WriteToChat(&amp;quot;Syntax: /vqueue spellid unit&amp;quot;);
	end
end	

if PQR_RotationStarted == true then
	-- Should be reloaded every time you reload Profile (No more needing to /rl)
 	-- Only takes full effects when we&amp;apos;re 90
 	if UnitLevel(&amp;quot;player&amp;quot;) ~= 90 then
 		PQR_WriteToChat(&amp;quot;\124cFFFF55FFWarning: only takes full effect when we&amp;apos;re 90!&amp;quot;)		
 	end	
	PQR_RotationStarted = false

	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Resto Druid Profile Verion - 2.2.11&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
	PQR_SwapCheckTimer = 0

	--Begin PQI
--	if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
		PQInterfaceLoaded = true
--		PQInterfaceVersion = (2.22)
--		if PQInterfaceVersion &amp;gt;= 2.22 then
			PQInterfaceUpdated = true
--		else 
--			PQInterfaceUpdated = nil 
--			PQR_WriteToChat(&amp;quot;Your PQI is not up to date. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
--			PQR_StopRotation()
--			return true					
--		end
--	else 
--		PQInterfaceLoaded = nil 
--		PQR_WriteToChat(&amp;quot;Please download the latest version of PQI. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
--		PQR_StopRotation()
--		return true				
--	end
		-- Load Data File
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Vachiusa_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_Vachiusa_Data.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == true then
			PQInterfaceDataLoaded = true
		else 
			PQInterfaceDataLoaded = false 
			PQR_WriteToChat(&amp;quot;You are missing PQR_PQI.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true		
		end		
	end	
	
	if not PQI_General_Resto_Druid_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 	
		local config = {
			name	= &amp;apos;General Resto Druid&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {
				-- General --
				{	name = &amp;quot;Auto Open PQI Options&amp;quot;,
					tooltip = &amp;quot;Auto Opens PQI Options for you, will only happen once per login.&amp;quot;,
					enable = true,
				},
				{	name = &amp;quot;54 Events&amp;quot;,
					tooltip = &amp;quot;Enables the use of 5.4 boss specific mechanics&amp;quot;,
					enable = true,
				},				
				{	name = &amp;quot;53 Events&amp;quot;,
					tooltip = &amp;quot;Enables the use of 5.3 boss specific mechanics&amp;quot;,
					enable = false,
				},
				{ 	name = &amp;quot;4x Events&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of 4.x boss specific mechanics&amp;quot;,
				},
				{ 	name = &amp;quot;Special Events&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of special events mechanics (Providing Ground...)&amp;quot;,
				},	
				{ 	name = &amp;quot;Auto Event Dispel&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of dispel on special events mechanics&amp;quot;,
				},								
				{ 	name = &amp;quot;Queue Sys&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of auto dispel for Queue System&amp;quot;,
				},					
				{ 	name = &amp;quot;Auto Target&amp;quot;,
					enable = true,
					tooltip = &amp;quot;If you dont have a target it will target your focus target&amp;quot;,
				},
				{ 	name = &amp;quot;Innervate&amp;quot;,	
					enable = true,
					tooltip = &amp;quot;Enables the use of Innervate&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 80,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of Mana to use Innervate at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Symbiosis&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Symbiosis on friendly target&amp;quot;,
				},				
				{ 	name = &amp;quot;DPS&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables DPS&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 90,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of minimum raid members HP to DPS at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Natures Cure&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Natures Cure&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 50,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Natures Cure at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Low Mana&amp;quot;,	
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The minimum percent of Mana to not use some high mana skills at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Racials&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Racials&amp;quot;,
				},								
				{ 	name = &amp;quot;Target Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Target Heal priority&amp;quot;,
				},											
				{ 	name = &amp;quot;Mouseover Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Mouseover Heal priority&amp;quot;,
				},		
				{ 	name = &amp;quot;NPC Mouseover Heal&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of NPC Mouseover Heal priority&amp;quot;,
				},	
				{ 	name = &amp;quot;Pet Heal&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Pet Heal&amp;quot;,
				},			
				{ 	name = &amp;quot;Stop Casting&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Stop Casting&amp;quot;,
				},												
				{ 	name = &amp;quot;V debug&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Vachiusa debug&amp;quot;,
				},						
			},
			hotkeys = {
			},
		}
		PQI_General_Resto_Druid_GUI_Loaded = PQI:AddRotation(config)
	end		

	if not PQI_CD_Resto_Druid_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 
		local config = {
			name	= &amp;apos;CD Resto Druid&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {									
				-- CD&amp;apos;s --
				{ 	name = &amp;quot;Ironbark&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Ironbark&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Ironbark at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Nature Swiftness&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Nature Swiftness&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 40,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Nature Swiftness at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Spirit Walker Grace&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Spirit Walker Grace&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 40,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Spirit Walker Grace at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Talent 90&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Talent 90&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 60,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Talent 90 at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Talent 90 Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 4,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members to use Talent 90 at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Incarnation&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Incarnation&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 60,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Incarnation at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Incarnation Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 4,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members to use Incarnation at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Force Of Nature&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Force Of Nature&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 80,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Force Of Nature at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Force Of Nature Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 2,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members around healing target to use ForceOfNature at&amp;quot;,
					},
				},		
				{ 	name = &amp;quot;Genesis&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Genesis&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Genesis at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Genesis Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members to use Genesis at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Genesis Count&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members with Reju to use Genesis at&amp;quot;,
					},
				},					
				{ 	name = &amp;quot;Tranquility&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Tranquility&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 60,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Tranquility at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Tranquility Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 4,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members to use Tranquility at&amp;quot;,
					},
				},								
			},
			hotkeys = {
			},
		}
		PQI_CD_Resto_Druid_GUI_Loaded = PQI:AddRotation(config)
	end		

	if not PQI_Healing_Resto_Druid_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 
		local config = {
			name	= &amp;apos;Healing Resto Druid&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {												
				-- Healing --
				{ 	name = &amp;quot;Healing Touch&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Healing Touch&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 60,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Healing Touch at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Omen Healing Touch&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Omen + Healing Touch&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 80,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Omen + Healing Touch at&amp;quot;,
					},
				},
				{ 	name = &amp;quot;Nourish&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Nourish&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 80,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Nourish at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Lifebloom Focus&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables only use Lifebloom on focus target&amp;quot;,
				},					
				{ 	name = &amp;quot;Regrowth&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Regrowth&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 20,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Regrowth at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Omen Regrowth&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Omen + Regrowth&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 75,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Omen + Regrowth at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Rejuvenation&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Rejuvenation&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 90,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Rejuvenation at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Rejuvenation Tank&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Rejuvenation on Tanks&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 99,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Rejuvenation on Tanks at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Regrowth Tank&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Regrowth on Tanks&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 30,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Regrowth on Tanks at&amp;quot;,
					},
				},		
				{ 	name = &amp;quot;Swiftmend&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Swiftmend&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Swiftmend at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Swiftmend Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 2,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members around healing target to use Swiftmend at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Wild Mushroom&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Wild Mushroom (Glyph of Efflorescence)&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Wild Mushroom (Glyph of Efflorescence) at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Wild Mushroom Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 2,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members around healing target to use Wild Mushroom (Glyph of Efflorescence) at&amp;quot;,
					},
				},									
				{ 	name = &amp;quot;Wild Growth&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Wild Growth&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 85,
						step = 1,
						max = 100,
						min = 0,
						tooltip = &amp;quot;The percent of HP to use Wild Growth at&amp;quot;,
					},
				},				
				{ 	name = &amp;quot;Wild Growth Limit&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 3,
						step = 1,
						max = 10,
						min = 0,
						tooltip = &amp;quot;The number of low HP raid members around healing target to use Wild Growth at&amp;quot;,
					},
				},					
			},
			hotkeys = {
				{	name = &amp;quot;Pause Rotation&amp;quot;,			enable = true,	hotkeys = {&amp;apos;ls&amp;apos;},	},
				{	name = &amp;quot;Talent 60&amp;quot;,					enable = true,	hotkeys = {&amp;apos;rs&amp;apos;},	
					tooltip = &amp;quot;Pop Talent 60&amp;quot;, },
				{	name = &amp;quot;Genesis Mod&amp;quot;,					enable = true,	hotkeys = {&amp;apos;lc&amp;apos;},
					tooltip = &amp;quot;Use Genesis&amp;quot;, },
				{	name = &amp;quot;Wild Mushroom Bloom&amp;quot;,		enable = true,	hotkeys = {&amp;apos;ra&amp;apos;},	
					tooltip = &amp;quot;Use Wild Mushroom Bloom&amp;quot;, },
				{	name = &amp;quot;Tranquility&amp;quot;,				enable = true,	hotkeys = {&amp;apos;rc&amp;apos;},	
					tooltip = &amp;quot;Pop Tranquility&amp;quot;, },	
				{	name = &amp;quot;Talent 90&amp;quot;,					enable = true,	hotkeys = {&amp;apos;ls&amp;apos;, &amp;apos;ra&amp;apos;},	
					tooltip = &amp;quot;Pop Talent 90&amp;quot;, },						
				{	name	= &amp;quot;Adding Players CT&amp;quot;,		enable	= true,	hotkeys	= {&amp;apos;ls&amp;apos;, &amp;apos;la&amp;apos;},
					tooltip = &amp;quot;Adding Players to Custom Table&amp;quot;, },	
				{	name	= &amp;quot;Removing Players CT&amp;quot;,	enable	= true,	hotkeys	= {&amp;apos;ls&amp;apos;, &amp;apos;lc&amp;apos;},
					tooltip = &amp;quot;Removing Players from Custom Table&amp;quot;, },						
			},
		}
		PQI_Healing_Resto_Druid_GUI_Loaded = PQI:AddRotation(config)
	end
	--End PQI
		
	--------------------
	-- Slash Commands
	--------------------
	if GetCVar(&amp;quot;PQ_WipeCustomTable&amp;quot;) == nil then RegisterCVar(&amp;quot;PQ_WipeCustomTable&amp;quot;, 0) end
	if GetCVar(&amp;quot;PQ_UseCustomT&amp;quot;) == nil then RegisterCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0) end
	if GetCVar(&amp;quot;Nova_Recording&amp;quot;) == nil then RegisterCVar(&amp;quot;Nova_Recording&amp;quot;, 0) end
	
	SLASH_WIPETABLE1 = &amp;quot;/wipetable&amp;quot;
	SLASH_WIPETABLE2 = &amp;quot;/wipecustomtable&amp;quot;
	SLASH_WIPETABLE3 = &amp;quot;/wt&amp;quot;
	function SlashCmdList.WIPETABLE(msg, editbox)
		Nova_CustomT = { }
		if GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) then 
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0)
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Wiped Custom Table clean, and reverting to Normal Table.&amp;quot;)
			end
		else
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Wiped Custom Table clean.&amp;quot;)
			end
		end
	end
	
	SLASH_USECUSTOMT1 = &amp;quot;/usecustomt&amp;quot;
	SLASH_USECUSTOMT2 = &amp;quot;/uct&amp;quot;
	SLASH_USECUSTOMT3 = &amp;quot;/usecustomtable&amp;quot;
	function SlashCmdList.USECUSTOMT(msg, editbox)
		if not GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) and #Nova_CustomT &amp;gt; 0 then
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Enabling Custom Table&amp;quot;)
			end
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 1)
		else
			if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
				PQR_WriteToChat(&amp;quot;Enabling Normal Table&amp;quot;)
			end
			SetCVar(&amp;quot;PQ_UseCustomT&amp;quot;, 0)
		end
	end	
		
	-- Variables
	PQR_ResetMovementTime = 0.3
	PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)
	PQR_AddToSpellDelayList(18562, 0, 1) -- Swiftmend
	PQR_AddToSpellDelayList(44203, 0, 1) -- Tranquility	
	
	PQR_Spec = GetSpecialization()
	if PQR_Spec ~= 4 then
		PQR_WriteToChat(&amp;quot;You must be in Resto Spec. Please switch then try again.&amp;quot;, &amp;quot;Warning&amp;quot;)
		PQR_StopRotation()
		return true
	end
end

if PQR_IsMoving() then
	Nova_Moving = true
else
	Nova_Moving = false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Healing Engine --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Healing Engine --
if Nova_54EventsCheck then
	if not UnitDebuffID(&amp;quot;player&amp;quot;,144850) --Test of Reliance
	and not UnitDebuffID(&amp;quot;player&amp;quot;,142861) then --Ancient Miasma
		SheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_SpecialEvents, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true
	end
else
	SheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_SpecialEvents, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true	
end

if GetCVarBool(&amp;quot;PQ_UseCustomT&amp;quot;) then
	members = Nova_CustomT
	lowhpmembers = 0
	for i=1, #Nova_CustomT do
		if Nova_CustomT[i].HP &amp;lt; 80 then
			lowhpmembers = lowhpmembers + 1
		end
	end
	
	table.sort(members, function(x,y) return x.HP &amp;lt; y.HP end)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Stop Casting</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Stop Casting
if PQI_VachiusaGeneralRestoDruid_StopCasting_enable then
	local boss,bossid = bossid()
	
	if SpellIsTargeting() then
		SpellStopCasting()
	elseif UnitBuffID(&amp;quot;player&amp;quot;, 100977) --Harmony
	and ((UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(50464)) --Nourish 
	or (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(5176))) --Wrath
	and (CalStop(members[1].Unit) &amp;lt; 40 or (lowhpmembers &amp;gt; 3 and CalStop(members[1].Unit) &amp;lt; 70)) 
	and IsUsableSpell(8936) --prevent stop loop
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 12
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			SpellStopCasting() 
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting Nourish/Wrath - HP: &amp;quot; ..members[1].HP) 		
			return true 
	elseif (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(50464)) --Nourish
	and UnitBuffID(&amp;quot;player&amp;quot;, 100977) --Harmony
	and IsSpellInRange(GetSpellInfo(50464),members[1].Unit) == 1
	and CalStop(members[1].Unit) &amp;gt; Nova_Nourish and CalStop(members[1].Unit) &amp;gt; 95 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if (select(7, UnitBuffID(&amp;quot;player&amp;quot;, 100977)) - GetTime() &amp;gt; 2) then
			SpellStopCasting() 	
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Cast Nourish - Name: &amp;quot; ..UnitName(members[1].Unit)..&amp;quot; - Current HP: &amp;quot;..CalStop(members[1].Unit)..&amp;quot; - overheal: &amp;quot;..select(2, CalStop(members[1].Unit)))	
			return true 
		end
	elseif UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(5185)) --HealingTouch
	and IsSpellInRange(GetSpellInfo(5185),members[1].Unit) == 1
	and bossid ~= 62442 --Tsulong 
	and bossid ~= nil
	and CalStop(members[1].Unit) &amp;gt; Nova_HealingTouch and CalStop(members[1].Unit) &amp;gt; Nova_DPS then 
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting HealingTouch - HP: &amp;quot; ..members[1].HP..&amp;quot; - npcid :&amp;quot;..bossid) 		
		return true 
	elseif UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(8936)) --Regrowth 
	and IsSpellInRange(GetSpellInfo(8936),members[1].Unit) == 1
	and bossid ~= 62442 --Tsulong 
	and bossid ~= nil
	and CalStop(members[1].Unit) &amp;gt; Nova_Regrowth and CalStop(members[1].Unit) &amp;gt; Nova_DPS then 
		SpellStopCasting() 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStop Casting Regrowth - HP: &amp;quot; ..members[1].HP..&amp;quot; - npcid :&amp;quot;..bossid)	
		return true 	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AutoTarget</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--AutoTarget
if Nova_AutoTargetCheck then
	if (not UnitExists(&amp;quot;focus&amp;quot;)
		or UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
		or not UnitInRange(&amp;quot;focus&amp;quot;) 
		or not UnitIsConnected(&amp;quot;focus&amp;quot;)
		or not UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;))
	and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
		or not UnitExists(&amp;quot;target&amp;quot;))	
	and #Nova_Tanks &amp;gt; 0 then
		for i=1, #Nova_Tanks do
			if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			
			and UnitAffectingCombat(&amp;quot;player&amp;quot;)		 
			then			
	   			TargetUnit(Nova_Tanks[i].Unit)           		
	    		RunMacroText(&amp;quot;/focus&amp;quot;)			
	            RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)			
			end
		end
	end
	
	if UnitExists(&amp;quot;focus&amp;quot;)
	and (UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
		or not UnitExists(&amp;quot;target&amp;quot;))
	and not UnitIsDeadOrGhost(&amp;quot;focustarget&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
	and UnitExists(&amp;quot;focustarget&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;focustarget&amp;quot;)
	and IsSpellInRange(GetSpellInfo(8921),&amp;quot;focustarget&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;focustarget&amp;quot;)
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		TargetUnit(&amp;quot;focustarget&amp;quot;)
		return false 	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Trinket spirit 2</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;lt; 80
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
then UseInventoryItem(14)
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- SelfSurvival</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 20 
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if GetItemCount(5512,false,true) &amp;gt; 0	
	and PQR_SpellAvailable(5512) --Healthstone		
	and GetItemCooldown(5512) == 0 then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end	
		UseItemByName(5512)
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFHealthstone - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
		return true
	--elseif GetInventoryItemCooldown(6)==0 --Grounded Plasma Shield 	
	--then 
		--UseInventoryItem(6) 
		--return true
	elseif PQR_SpellAvailable(22812)	
	--and select(2,GetTalentRowSelectionInfo(5)) == 14
	--and IsUsableSpell(22812) 	
	and select(2,GetSpellCooldown(22812)) &amp;lt; 2 then
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end			
		CastSpellByName(tostring(GetSpellInfo(22812),nil))	 			
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFBarkskin - My HP: &amp;quot;..Nova_UnitInfo(&amp;quot;player&amp;quot;))		
		return true		
	elseif PQR_SpellAvailable(106922)	
	and select(2,GetSpellCooldown(106922)) &amp;lt; 2 
	--and IsUsableSpell(115203) 	
	and not UnitBuffID(&amp;quot;player&amp;quot;,22812) then --Barkskin
		if UnitCastingInfo(&amp;quot;player&amp;quot;) then
			SpellStopCasting()
		end			
		CastSpellByName(tostring(GetSpellInfo(106922),nil))	 	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMight of Ursoc - My HP: &amp;quot;..Nova_UnitInfo(&amp;quot;player&amp;quot;))	
		return true		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Custom Table --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--------------------------------------
-- Adding Players to Custom Table
--------------------------------------
if Nova_AddingPlayersCTCheck then
	if VachiusaRestoDruid_AddingPlayersCT_key
	and not GetCurrentKeyBoardFocus()
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and ( CanHeal(&amp;quot;mouseover&amp;quot;) 
	or UnitIsUnit(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) ) then  
		for i=1, #Nova_CustomT do
			if Nova_CustomT[i].GUID and Nova_CustomT[i].GUID == UnitGUID(&amp;quot;mouseover&amp;quot;) then
				return false
			end
		end
		
		table.insert(Nova_CustomT, { GUID = UnitGUID(&amp;quot;mouseover&amp;quot;) } )
		
		if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
			PQR_WriteToChat(&amp;quot;We just added &amp;quot;..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; to the Custom Healing Table.&amp;quot;, &amp;quot;Alert&amp;quot;)
		end
		return true
	
	end
end

--------------------------------------
-- Removing Players from Custom Table
--------------------------------------
if Nova_RemovingPlayersCTCheck then
	if VachiusaRestoDruid_RemovingPlayersCT_key
	and not GetCurrentKeyBoardFocus() 
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and ( CanHeal(&amp;quot;mouseover&amp;quot;) 
	or UnitIsUnit(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) )then
		for i=1, #Nova_CustomT do
			if Nova_CustomT[i].GUID and Nova_CustomT[i].GUID == UnitGUID(&amp;quot;mouseover&amp;quot;) then
				if not GetCVarBool(&amp;quot;Nova_Recording&amp;quot;) then
					PQR_WriteToChat(&amp;quot;We just removed &amp;quot;..UnitName(Nova_CustomT[i].Unit)..&amp;quot; from the Custom Healing Table.&amp;quot;, &amp;quot;Alert&amp;quot;)
				end
				table.remove(Nova_CustomT, i)
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>TsulongHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--TsulongHeal 
if Nova_53EventsCheck then	
	local bossCheck = &amp;quot;boss1&amp;quot; 
	local tsulongboss = false
	if UnitExists(bossCheck) then 
		local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16) 	        
		if npcID == 62442 
		and UnitAffectingCombat(&amp;quot;player&amp;quot;) then --Tsulong	
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDebug NPCID: &amp;quot; ..npcID) 
			tsulongboss = true
		end
	end	
	
	if tsulongboss
	and PQR_SpellAvailable(5185)
	and IsUsableSpell(5185) 
	and IsSpellInRange(GetSpellInfo(5185),&amp;quot;boss1&amp;quot;) == 1
	and not Nova_Moving then
		if Nova_UnitInfo(&amp;quot;boss1&amp;quot;) &amp;lt; 99 then
			--if GetInventoryItemCooldown(10)==0 then
			--if select(2,GetInventoryItemCooldown(10)) &amp;lt; 2 then
				--UseInventoryItem(10)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFGloves Engineer buff!&amp;quot;)			
			--end	 			

			if PQR_SpellAvailable(33763)  
			and IsUsableSpell(33763) 
			and UnitBuffID(&amp;quot;boss1&amp;quot;, 33763, &amp;quot;PLAYER&amp;quot;) then	
				if select(7, UnitBuffID(&amp;quot;boss1&amp;quot;, 33763, &amp;quot;PLAYER&amp;quot;)) - GetTime() &amp;lt;= 2 
				and select(4, UnitBuffID(&amp;quot;boss1&amp;quot;, 33763, &amp;quot;PLAYER&amp;quot;)) &amp;lt; 3	
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			 		CastSpellByName(tostring(GetSpellInfo(33763)),&amp;quot;boss1&amp;quot;)	 
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Lifebloom Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 	
			 		return true			 	
			 	end
			elseif PQR_SpellAvailable(33763)  
			and IsUsableSpell(33763) 
			and not UnitBuffID(&amp;quot;boss1&amp;quot;, 33763, &amp;quot;PLAYER&amp;quot;) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(33763)),&amp;quot;boss1&amp;quot;)	 
			 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Lifebloom Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 	
			 	return true			 				 				
			end
			
		 	if PQR_SpellAvailable(774) 
		 	and IsUsableSpell(774) 	 		 	
		 	and not UnitBuffID(&amp;quot;boss1&amp;quot;, 774, &amp;quot;PLAYER&amp;quot;) 
		 	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	 		
		 		CastSpellByName(tostring(GetSpellInfo(774)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Rejuvenation Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 
		 		return true						 			 	
		 	end
		 	
			if PQR_SpellAvailable(18562) 
			and IsUsableSpell(18562)		
			and select(2,GetSpellCooldown(18562)) &amp;lt; 2 
			and UnitBuffID(&amp;quot;boss1&amp;quot;, 774)
			and (select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 70 or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;ÐžÐ¼Ð¾Ð²ÐµÐ½Ð¸Ðµ ÑÐ²ÐµÑ‚Ð¾Ð¼&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;In Licht gebadet&amp;quot;)) --Bathed in Light buff		
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(18562)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Swiftmend Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 
		 		return true			
			end	 	

			--NatureSwiftness 
			if not UnitBuffID(&amp;quot;player&amp;quot;,132158)
			and PQR_SpellAvailable(132158)
			and select(2,GetTalentRowSelectionInfo(2)) == 4
			and select(2,GetSpellCooldown(132158)) &amp;lt; 2
			and (UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;ÐžÐ¼Ð¾Ð²ÐµÐ½Ð¸Ðµ ÑÐ²ÐµÑ‚Ð¾Ð¼&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;In Licht gebadet&amp;quot;)) --Bathed in Light buff		
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(132158)),&amp;quot;player&amp;quot;)
				CastSpellByName(tostring(GetSpellInfo(5185)),&amp;quot;boss1&amp;quot;)	 			
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HealingTouch with NatureSwiftness on Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;))	 		
		 		return true									
			end	
			
		 	if PQR_SpellAvailable(8936) 		 
			 and IsUsableSpell(8936) 
			 and not UnitBuffID(&amp;quot;player&amp;quot;, 132158) --NatureSwiftness
			 and (select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 70 or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;Bathed in Light&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;ÐžÐ¼Ð¾Ð²ÐµÐ½Ð¸Ðµ ÑÐ²ÐµÑ‚Ð¾Ð¼&amp;quot;) or UnitDebuff(&amp;quot;player&amp;quot;,&amp;quot;In Licht gebadet&amp;quot;)) --Bathed in Light buff		
			 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(8936)),&amp;quot;boss1&amp;quot;)	 
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Regrowth Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;)) 
		 		return true
			end
			
			if members[1].HP &amp;gt; 30 --Prevent raid wipe
			and lowhpmembers &amp;lt; 10 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 					
				CastSpellByName(tostring(GetSpellInfo(5185)),&amp;quot;boss1&amp;quot;)	 			
		 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HealingTouch Tsulong - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;boss1&amp;quot;))	 		
		 		return true
			end		
	
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Ironbark</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Ironbark
if Nova_IronbarkCheck then
	if PQR_SpellAvailable(102342) 	  	 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 and select(2,GetSpellCooldown(102342)) &amp;lt; 2
	 and UnitThreatSituation(members[1].Unit) == 3
	 and IsUsableSpell(102342)
	 and IsSpellInRange(GetSpellInfo(102342),members[1].Unit) == 1 then
		if members[1].HP &amp;lt; Nova_Ironbark
		and UnitIsPlayer(members[1].Unit)
		then 
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFIronbark - HP: &amp;quot; ..members[1].HP) 	
		 	CastSpellByName(tostring(GetSpellInfo(102342)),members[1].Unit)	
		 	return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (VachiusaRestoDruid_PauseRotation_key and not GetCurrentKeyBoardFocus())
 or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) 
 or IsMounted() 
 or (UnitBuffID(&amp;quot;player&amp;quot;,768) and Nova_Moving) --Cat Form
 or (UnitBuffID(&amp;quot;player&amp;quot;,783) and Nova_Moving) --Travel Form 96562?
 or (UnitChannelInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(740)) --Tranquility
 or UnitBuffID(&amp;quot;player&amp;quot;, 104269) then --drink
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Rejuvenation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_RejuvenationTankCheck then
	if PQR_SpellAvailable(774) 	
	and IsUsableSpell(774) 
	and Nova_CheckLastCast(774, 2.0) then
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit)
				 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 15
				 and Nova_Tanks[i].HP &amp;lt;= Nova_RejuvenationTank
				 and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
				 and IsSpellInRange(GetSpellInfo(774),Nova_Tanks[i].Unit) == 1 then
					if UnitBuffID(Nova_Tanks[i].Unit, 774, &amp;quot;PLAYER&amp;quot;) then
						if (select(7, UnitBuffID(Nova_Tanks[i].Unit, 774, &amp;quot;PLAYER&amp;quot;)) - GetTime() &amp;lt;= 2) 						
						then
							CastSpellByName(tostring(GetSpellInfo(774)),Nova_Tanks[i].Unit)					
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRejuvenation soon expired on tank!&amp;quot;)	
							return true
						end
					else
						CastSpellByName(tostring(GetSpellInfo(774)),Nova_Tanks[i].Unit)
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRejuvenation tank!&amp;quot;)	
						return true
					end				
				end
			end
		end
			
		if select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 20
		and not UnitBuffID(members[1].Unit, 774)
		and members[1].HP &amp;lt; Nova_Rejuvenation
		and IsSpellInRange(GetSpellInfo(774),members[1].Unit) == 1 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		 	CastSpellByName(tostring(GetSpellInfo(774)),members[1].Unit)
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRejuvenation high threat member!&amp;quot;)	
		 	return true
		end	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tranquility</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Tranquility (TC)
if Nova_MTranquilityCheck then	
	if (VachiusaRestoDruid_Tranquility_key and not GetCurrentKeyBoardFocus()) then
		if PQR_SpellAvailable(740)	
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)		
		and IsUsableSpell(740)		
		and select(2,GetSpellCooldown(740)) &amp;lt; 2 then
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end
			CastSpellByName(tostring(GetSpellInfo(740),nil))		   
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Alt Key Down - Tranquility!&amp;quot;)
			return true
		end
	end		
end
--Tranquility 
if Nova_TranquilityCheck then
	if PQR_SpellAvailable(740)	
	and select(2,GetSpellCooldown(740)) &amp;lt; 2
	and not UnitBuffID(&amp;quot;player&amp;quot;, 108288)
	and IsUsableSpell(740) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;) 
	and not stopcasting 
	and not LLdebuff then
		if UnitBuffID(&amp;quot;player&amp;quot;, 106731) --Incarnation: Tree of Life		
		or (AverageHealth(Nova_TranquilityLimit) &amp;lt;= Nova_Tranquility and not UnitBuffID(&amp;quot;player&amp;quot;, 124974) and not UnitBuffID(&amp;quot;player&amp;quot;, 108288)) then --Nature&amp;apos;s Vigil, HoTW
			if UnitCastingInfo(&amp;quot;player&amp;quot;) then
				SpellStopCasting()
			end
			
			if Nova_SpiritWalkerGraceCheck then
				if IsUsableSpell(110806) --druid spell id 79206
				and PQR_SpellAvailable(110806) then 
					CastSpellByName(tostring(GetSpellInfo(110806)),&amp;quot;player&amp;quot;)	
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSpirit walker grace then Tranquility&amp;quot;)
				end
			end		
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFTranquility - Raid HP: &amp;quot;..AverageHealth(Nova_TranquilityLimit))		
			CastSpellByName(tostring(GetSpellInfo(740)),&amp;quot;player&amp;quot;)	
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>MarkOfTheWild</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--MarkOfTheWild
if not UnitBuffID(&amp;quot;player&amp;quot;,1126)
and not UnitBuffID(&amp;quot;player&amp;quot;,20217)
and not UnitBuffID(&amp;quot;player&amp;quot;,90363)
and not UnitBuffID(&amp;quot;player&amp;quot;,115921) 
and PQR_SpellAvailable(1126)
and IsUsableSpell(1126) 
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
then
	CastSpellByName(tostring(GetSpellInfo(1126)),&amp;quot;player&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>SpiritWalkerGrace</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Symn SpiritWalker&amp;apos;s Grace from Shaman (work good with Tranquility) or Cleanse from Pally
if Nova_SpiritWalkerGraceCheck then
	if members[1].HP &amp;lt; Nova_SpiritWalkerGrace 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)	
	and IsUsableSpell(110806) --druid spell id 79206
	and PQR_IsMoving(1) 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and PQR_SpellAvailable(110806)
	then 
		CastSpellByName(tostring(GetSpellInfo(110806),nil))
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFSpirit walker grace - HP: &amp;quot;..members[1].HP)
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Lifebloom</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Lifebloom - ToL support
if Nova_LifebloomFocusCheck then
	if PQR_SpellAvailable(33763) 
	and IsUsableSpell(33763)
	and UnitExists(&amp;quot;focus&amp;quot;) 	
	and CanHeal(&amp;quot;focus&amp;quot;) 
	and IsSpellInRange(GetSpellInfo(33763),&amp;quot;focus&amp;quot;) == 1 then 	
		if UnitBuffID(&amp;quot;focus&amp;quot;, 33763, &amp;quot;PLAYER&amp;quot;)
		and (select(7, UnitBuffID(&amp;quot;focus&amp;quot;, 33763, &amp;quot;PLAYER&amp;quot;)) - GetTime() &amp;lt; 2 
		or select(4, UnitBuffID(&amp;quot;focus&amp;quot;, 33763, &amp;quot;PLAYER&amp;quot;)) &amp;lt; 3)
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(33763)),&amp;quot;focus&amp;quot;)	
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLifebloom focus 1!&amp;quot;)						
			return true				
		elseif not UnitBuffID(&amp;quot;focus&amp;quot;, 33763, &amp;quot;PLAYER&amp;quot;) 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(33763)),&amp;quot;focus&amp;quot;)	
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLifebloom focus 2!&amp;quot;)						
			return true									
		end
	end	
else
	local CLifebloom = false
	
	if not UnitBuffID(&amp;quot;player&amp;quot;, 106731) then --Tree of Life
		for i=1, #members do	
			if ((UnitBuffID(members[i].Unit, 33763, &amp;quot;PLAYER&amp;quot;)
			and select(7, UnitBuffID(members[i].Unit, 33763, &amp;quot;PLAYER&amp;quot;)) - GetTime() &amp;gt; 2 
			and select(4, UnitBuffID(members[i].Unit, 33763, &amp;quot;PLAYER&amp;quot;)) &amp;gt;= 3
			and UnitThreatSituation(members[i].Unit) == 3)
			or UnitBuffID(&amp;quot;boss1&amp;quot;, 33763))		
			then
				CLifebloom = true
				break
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLifebloom on: &amp;quot;..UnitName(members[i].Unit))
			end
		end	
	end
	
	if not CLifebloom 
	and PQR_SpellAvailable(33763) 
	and IsUsableSpell(33763) then
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit) == 3			 
				 and IsSpellInRange(GetSpellInfo(33763),Nova_Tanks[i].Unit) == 1 then
					if UnitBuffID(Nova_Tanks[i].Unit, 33763, &amp;quot;PLAYER&amp;quot;)
					and (select(7, UnitBuffID(Nova_Tanks[i].Unit, 33763, &amp;quot;PLAYER&amp;quot;)) - GetTime() &amp;lt; 2 
					or select(4, UnitBuffID(Nova_Tanks[i].Unit, 33763, &amp;quot;PLAYER&amp;quot;)) &amp;lt; 3)
					and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
						CastSpellByName(tostring(GetSpellInfo(33763)),Nova_Tanks[i].Unit)	
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLifebloom tank!&amp;quot;)						
						return true				
					elseif not UnitBuffID(Nova_Tanks[i].Unit, 33763, &amp;quot;PLAYER&amp;quot;) 
					and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
						CastSpellByName(tostring(GetSpellInfo(33763)),Nova_Tanks[i].Unit)	
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLifebloom tank!&amp;quot;)						
						return true									
					end
				end
			end
		end
		
		if UnitThreatSituation(members[1].Unit) == 3	 
		 and members[1].HP &amp;lt; 30 
		 and IsSpellInRange(GetSpellInfo(33763),members[1].Unit) == 1 then
			if UnitBuffID(members[1].Unit, 33763, &amp;quot;PLAYER&amp;quot;)
			and (select(7, UnitBuffID(members[1].Unit, 33763, &amp;quot;PLAYER&amp;quot;)) - GetTime() &amp;lt; 2 
			or select(4, UnitBuffID(members[1].Unit, 33763, &amp;quot;PLAYER&amp;quot;)) &amp;lt; 3)
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	 			CastSpellByName(tostring(GetSpellInfo(33763)),members[1].Unit)	
	 			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLifebloom high threat member!&amp;quot;)		 			
	 			return true				
			elseif not UnitBuffID(members[1].Unit, 33763, &amp;quot;PLAYER&amp;quot;) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
	 			CastSpellByName(tostring(GetSpellInfo(33763)),members[1].Unit)	
	 			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFLifebloom high threat member!&amp;quot;)		 			
	 			return true							
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nourish</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_NourishCheck then
	if PQR_SpellAvailable(50464) 	 
	 and IsUsableSpell(50464) 
	 and not Nova_Moving 	 
	 and (UnitBuffID(members[1].Unit, 774, &amp;quot;PLAYER&amp;quot;) --Rejuvenation
	 or UnitBuffID(members[1].Unit, 8936, &amp;quot;PLAYER&amp;quot;) --Regrowth
	 or UnitBuffID(members[1].Unit, 33763, &amp;quot;PLAYER&amp;quot;) --Lifebloom
	 or UnitBuffID(members[1].Unit, 48438, &amp;quot;PLAYER&amp;quot;)) --Wild Growth
	 and IsSpellInRange(GetSpellInfo(50464),members[1].Unit) == 1 
	 and not stopcasting then				
		if members[1].HP &amp;lt;= Nova_Nourish
		and lowhpmembers &amp;lt; 3 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(50464)),members[1].Unit)									
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting Nourish - HP: &amp;quot; ..members[1].HP) 
			return true
		elseif not UnitBuffID(&amp;quot;player&amp;quot;, 100977) --Harmony 77495
		and (members[1].HP &amp;lt; (Nova_Nourish+10)) 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(50464)),members[1].Unit)									
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting Nourish for Harmony - HP: &amp;quot; ..members[1].HP) 
			return true				
		elseif UnitBuffID(&amp;quot;player&amp;quot;, 100977) --Harmony 77495
		and (members[1].HP &amp;lt; (Nova_Nourish+10)) then
			if (select(7, UnitBuffID(&amp;quot;player&amp;quot;, 100977)) - GetTime() &amp;lt;= 2) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(50464)),members[1].Unit)					
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting Nourish for Harmony - HP: &amp;quot; ..members[1].HP) 
				return true							
			end		
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>WildMushroomBloom</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--WildMushroom (TC)
if Nova_WildMushroomBloomCheck then	
	local wmbloom = GetTotemInfo(1)
	if wmbloom then
		if (VachiusaRestoDruid_WildMushroomBloom_key and not GetCurrentKeyBoardFocus()) then
			if not UnitChannelInfo(&amp;quot;player&amp;quot;) 
			and PQR_SpellAvailable(102791)		
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			and GetSpellCooldown(102791) == 0		
			then
			  CastSpellByName(tostring(GetSpellInfo(102791),nil))		   
			  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFLeft Alt Key Down - WildMushroomBloom!&amp;quot;)
			  return true
			end
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HealingTouch</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--HealingTouch
if Nova_HealingTouchCheck then
	if PQR_SpellAvailable(5185) 
	and IsSpellInRange(GetSpellInfo(5185),members[1].Unit) == 1
	and IsUsableSpell(5185) 	 
	and not Nova_Moving 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and not stopcasting then
		if members[1].HP &amp;lt; Nova_HealingTouch 
		and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 20 then	
			--NatureSwiftness 
			if not UnitBuffID(&amp;quot;player&amp;quot;,132158)
			and PQR_SpellAvailable(132158)
			and select(2,GetTalentRowSelectionInfo(2)) == 4
			and select(2,GetSpellCooldown(132158)) &amp;lt; 2
			then				
				CastSpellByName(tostring(GetSpellInfo(132158)),&amp;quot;player&amp;quot;)					
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast NatureSwiftness. HP: &amp;quot;..members[1].HP)
			end				
			CastSpellByName(tostring(GetSpellInfo(5185)),members[1].Unit)	
		 	return true
		elseif UnitBuffID(&amp;quot;player&amp;quot;, 16870) and members[1].HP &amp;lt;= Nova_OmenHealingTouch then --Omen of Clarity buff cost no mana
			CastSpellByName(tostring(GetSpellInfo(5185)),members[1].Unit)	
		 	return true			
		end
		local SMName, _, _, SMcount, _, _, SMexpirationTime = UnitBuffID(&amp;quot;player&amp;quot;, 144871) --Sage Mender - 2p bonus tier 16
		if SMName and SMcount and SMexpirationTime then --SM stack
			if (tonumber(SMexpirationTime) and ((tonumber(SMexpirationTime) - GetTime()) &amp;lt;= 2))
			or (tonumber(SMcount) and tonumber(SMcount) &amp;gt;= 5 and members[1].Unit &amp;lt;= Nova_OmenHealingTouch) then
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HealingTouch before Sage Mender expired - Name: &amp;quot; ..UnitName(members[1].Unit))
				CastSpellByName(tostring(GetSpellInfo(5185)),members[1].Unit)	
				return true
			end
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Regrowth</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Regrowth - duration automatically refreshes to 6 sec each time Regrowth heals targets at or below 50% health.
--ToL support
if Nova_RegrowthCheck then	
	if PQR_SpellAvailable(8936) 
	 and IsSpellInRange(GetSpellInfo(8936),members[1].Unit) == 1
	 and IsUsableSpell(8936)	 
	 and not Nova_Moving 
	 and not stopcasting then	 	
		if members[1].HP &amp;lt; Nova_Regrowth and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 20 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
			--NatureSwiftness 
			if not UnitBuffID(&amp;quot;player&amp;quot;,132158)
			and PQR_SpellAvailable(132158)
			and select(2,GetTalentRowSelectionInfo(2)) == 4
			and select(2,GetSpellCooldown(132158)) &amp;lt; 2
			then
				CastSpellByName(tostring(GetSpellInfo(132158)),&amp;quot;player&amp;quot;)	
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast NatureSwiftness. HP: &amp;quot;..members[1].HP)			
			end		
			CastSpellByName(tostring(GetSpellInfo(8936)),members[1].Unit)					
		 	return true
		elseif UnitBuffID(&amp;quot;player&amp;quot;, 16870) 
		and Nova_CheckLastCast(8936, 0.5)
		and members[1].HP &amp;lt;= Nova_OmenRegrowth 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then --Omen of Clarity buff cost no mana		
			CastSpellByName(tostring(GetSpellInfo(8936)),members[1].Unit)					
		 	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast OmenRegrowth. HP: &amp;quot;..members[1].HP)			
		 	return true		
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>WildMushroom</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--WildMushroom (TC)
if Nova_WildMushroomCheck then
	if not UnitChannelInfo(&amp;quot;player&amp;quot;) 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and PQR_SpellAvailable(88747)
	and GetSpellCooldown(88747) == 0 then
		local wmbloom = GetTotemInfo(1)
		if not WildMushroomTable then
			WildMushroomTable = { }
		end			
		if AverageHealth(Nova_WildMushroomLimit) &amp;lt;= Nova_WildMushroom then
			PRGetDistanceTable((Nova_WildMushroom+10), 10, (Nova_WildMushroomLimit-1))	
			PRGetDistanceTablebyHP(Nova_WildMushroom,(Nova_WildMushroomLimit-1))					
												
			if IsSpellInRange(GetSpellInfo(88747),prdistancebyhp[1].Unit) 
			and (prdistancebyhp[1].PD &amp;gt;= (Nova_WildMushroomLimit-1))
			and prdistancebyhp[1].HP &amp;lt;= Nova_WildMushroom 			
			then				
				if wmbloom then
					if #WildMushroomTable &amp;lt; 1 
					or (#WildMushroomTable &amp;gt; 0
					and WildMushroom_UnitDistance(prdistancebyhp[1].Unit, WildMushroomTable[1].x, WildMushroomTable[1].y)
					and WildMushroom_UnitDistance(prdistancebyhp[1].Unit, WildMushroomTable[1].x, WildMushroomTable[1].y) &amp;gt; 10)
					then
						CastSpellByName(tostring(GetSpellInfo(88747)),prdistancebyhp[1].Unit)
						WildMushroomUnitLocTable(prdistancebyhp[1].Unit)
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast WildMushroom 1 - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 		
						return true						
					else
						if IsUsableSpell(102791) 
						and PQR_SpellAvailable(102791) then
							CastSpellByName(tostring(GetSpellInfo(102791),nil))
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast WildMushroomBloom&amp;quot;)							
							return true											
						end
					end
				else
					CastSpellByName(tostring(GetSpellInfo(88747)),prdistancebyhp[1].Unit)
					WildMushroomUnitLocTable(prdistancebyhp[1].Unit)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast WildMushroom 2 - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 					
					return true
				end
			end		
		elseif (not wmbloom 
		or #WildMushroomTable &amp;lt; 1
		or (#WildMushroomTable &amp;gt; 0
		and (GetTime() &amp;gt; WildMushroomTable[1].WMTime + 30)))
		and UnitAffectingCombat(&amp;quot;player&amp;quot;)
		then			
			if #Nova_Tanks &amp;gt; 0 then
				for i=1, #Nova_Tanks do
					if (UnitThreatSituation(Nova_Tanks[i].Unit) 						 		 
					or Nova_Tanks[i].HP &amp;lt; 100)
					and IsSpellInRange(GetSpellInfo(88747),Nova_Tanks[i].Unit) == 1 then						
						CastSpellByName(tostring(GetSpellInfo(88747)),Nova_Tanks[i].Unit)
						WildMushroomUnitLocTable(Nova_Tanks[i].Unit)						
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast WildMushroom on Tanks&amp;quot;)			
					end
				end
			elseif members[1].HP &amp;lt; 100
			and IsSpellInRange(GetSpellInfo(88747),members[1].Unit) == 1 then
				CastSpellByName(tostring(GetSpellInfo(88747)),nil)
				WildMushroomUnitLocTable(members[1].Unit)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast WildMushroom on low member&amp;quot;)				
			else
				CastSpellByName(tostring(GetSpellInfo(88747)),nil)
				WildMushroomUnitLocTable(&amp;quot;player&amp;quot;)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast WildMushroom on myself&amp;quot;)				
			end		
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- DruidForm</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if UnitBuffID(&amp;quot;player&amp;quot;,5487) 
	and UnitThreatSituation(&amp;quot;player&amp;quot;) == 3 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		return true		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Innervate</Name><Default>false</Default><SpellID>29166</SpellID><Actions></Actions><Lua>--Innervate
if Nova_InnervateCheck then
	if select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= Nova_Innervate
	and GetSpellCooldown(29166) == 0
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and not UnitBuffID(&amp;quot;player&amp;quot;,768) --cat form
	and not UnitBuffID(&amp;quot;player&amp;quot;,5487) --bear form
	and PQR_SpellAvailable(29166) then	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Control Key Down - Innervate!&amp;quot;)	
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>WildGrowth</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--WildGrowth - ToL support
	if Nova_WildGrowthCheck then
		if PQR_SpellAvailable(48438) 
		and IsUsableSpell(48438)			
		and select(2,GetSpellCooldown(48438)) &amp;lt; 2 
		and not LLdebuff then
			if AverageHealth(Nova_WildGrowthLimit) &amp;lt;= Nova_WildGrowth then
				PRGetDistanceTable((Nova_WildGrowth+5), 30, (Nova_WildGrowthLimit-1))	
				PRGetDistanceTablebyHP(Nova_WildGrowth,(Nova_WildGrowthLimit-1))					
													
				if IsSpellInRange(GetSpellInfo(48438),prdistancebyhp[1].Unit) 
				and (prdistancebyhp[1].PD &amp;gt;= (Nova_WildGrowthLimit-1))
				and prdistancebyhp[1].HP &amp;lt;= Nova_WildGrowth 
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then					 	
					CastSpellByName(tostring(GetSpellInfo(48438)),prdistancebyhp[1].Unit)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast WildGrowth - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - PD: &amp;quot;..prdistancebyhp[1].PD) 					
					return true
				end
										
			end		
		end
	end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Incarnation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Incarnation (TC)
if (VachiusaRestoDruid_Talent60_key and not GetCurrentKeyBoardFocus() and Nova_Talent60Check)
or (Nova_IncarnationCheck and AverageHealth(Nova_IncarnationLimit) &amp;lt;= Nova_Incarnation and not UnitBuffID(&amp;quot;player&amp;quot;, 124974) and not UnitBuffID(&amp;quot;player&amp;quot;, 108288)) then
	if not UnitChannelInfo(&amp;quot;player&amp;quot;) 
	and PQR_SpellAvailable(106731)	
	and select(2,GetTalentRowSelectionInfo(4)) == 11
	and not UnitBuffID(&amp;quot;player&amp;quot;, 106731)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 	
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and GetSpellCooldown(106731) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(106731),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Shift Key Down - Incarnation!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HeartOfTheWild</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--HeartOfTheWild (TC)
if (VachiusaRestoDruid_Talent90_key and not GetCurrentKeyBoardFocus())
or (Nova_Talent90Check and AverageHealth(Nova_Talent90Limit) &amp;lt;= Nova_Talent90 and not UnitBuffID(&amp;quot;player&amp;quot;, 106731)) then
	if not UnitChannelInfo(&amp;quot;player&amp;quot;) 
	and PQR_SpellAvailable(108288)		
	and select(2,GetTalentRowSelectionInfo(6)) == 16
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and GetSpellCooldown(108288) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(108288),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Control Key Down - HeartOfTheWild!&amp;quot;)
	  return true
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>NatureSwiftness</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--NatureSwiftness 
if Nova_NatureSwiftnessCheck then	
	if not UnitBuffID(&amp;quot;player&amp;quot;,132158)
	and PQR_SpellAvailable(132158)
	and select(2,GetTalentRowSelectionInfo(2)) == 4
	and select(2,GetSpellCooldown(132158)) &amp;lt; 2
	then
		if members[1].HP &amp;lt;= Nova_NatureSwiftness 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(132158)),&amp;quot;player&amp;quot;)
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>NatureVigil</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--NatureVigil (TC)
if (VachiusaRestoDruid_Talent90_key and not GetCurrentKeyBoardFocus())
or (Nova_Talent90Check and AverageHealth(Nova_Talent90Limit) &amp;lt;= Nova_Talent90 and not UnitBuffID(&amp;quot;player&amp;quot;, 106731)) then
	if not UnitChannelInfo(&amp;quot;player&amp;quot;) 
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and PQR_SpellAvailable(124974)		
	and select(2,GetTalentRowSelectionInfo(6)) == 18
	and GetSpellCooldown(124974) == 0 then
	  CastSpellByName(tostring(GetSpellInfo(124974),nil))		   
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Control Key Down - NatureVigil!&amp;quot;)
	  return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Moonfire</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Moonfire
if (Nova_DPSCheck and members[1].HP &amp;gt;= Nova_DPS)
or UnitBuffID(&amp;quot;player&amp;quot;, 124974) --Nature&amp;apos;s Vigil
or UnitBuffID(&amp;quot;player&amp;quot;, 108288) then --HoTW
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)		
	and not stopdps
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 80
	and PQR_SpellAvailable(8921) 
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(8921),&amp;quot;target&amp;quot;) == 1
	and GetSpellCooldown(8921) == 0
	and IsUsableSpell(8921)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)	
	and not LineOfSight(&amp;quot;target&amp;quot;)	
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
		local MF,_,_,_,_,_,MFtimer = UnitDebuffID(&amp;quot;target&amp;quot;,8921,&amp;quot;PLAYER&amp;quot;)
		if MF == nil 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(8921)),&amp;quot;target&amp;quot;)	
			return true 
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wrath</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Moonfire
if Nova_DPSCheck 
and (members[1].HP &amp;gt;= Nova_DPS
or UnitBuffID(&amp;quot;player&amp;quot;, 124974) --Nature&amp;apos;s Vigil
or UnitBuffID(&amp;quot;player&amp;quot;, 108288)) then --HoTW
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)	
	and not stopdps
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 80
	and PQR_SpellAvailable(5176) 
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(5176),&amp;quot;target&amp;quot;) == 1
	and GetSpellCooldown(5176) == 0
	and IsUsableSpell(5176)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;)
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not LineOfSight(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) 
	and not stopcasting then
		CastSpellByName(tostring(GetSpellInfo(5176)),&amp;quot;target&amp;quot;)
		return true 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Symbiosis</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Symbiosis
if Nova_SymbiosisCheck then
	if PQR_SpellAvailable(110309)
	and select(2,GetSpellCooldown(110309)) &amp;lt; 2
	and IsUsableSpell(110309) 	
	and not UnitBuffID(&amp;quot;player&amp;quot;, 110309)
	and not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
												
	    for i=1,40 do
			local unitCheck = &amp;quot;raid&amp;quot;..i
		    if UnitExists(unitCheck) and UnitIsPlayer(unitCheck) then
		    	local _, unitClass = UnitClass(unitCheck)
		        if unitClass == &amp;quot;SHAMAN&amp;quot; and not UnitBuffID(unitCheck, 110309) then		        	
		        	SymSHAMAN = unitCheck
		            break
		        end
		        
		        if unitClass == &amp;quot;PALADIN&amp;quot; and not UnitBuffID(unitCheck, 110309) then		        	
		        	SymPALADIN = unitCheck
		        end
		        
		        if unitClass == &amp;quot;DEATHKNIGHT&amp;quot; and not UnitBuffID(unitCheck, 110309) then		        	
		        	SymDEATHKNIGHT = unitCheck
		        end
		        
		        if unitClass == &amp;quot;HUNTER&amp;quot; and not UnitBuffID(unitCheck, 110309) then		        	
		        	SymHUNTER = unitCheck
		        end
		        
		        if unitClass == &amp;quot;MAGE&amp;quot; and not UnitBuffID(unitCheck, 110309) then		        	
		        	SymMAGE = unitCheck		           
		        end		        
		    end
		end
		
		if Nova_CheckLastCast(110309, 5) then		
			if UnitExists(SymSHAMAN) then			
				if IsSpellInRange(GetSpellInfo(110309),SymSHAMAN) == 1
		 		and CanHeal(SymSHAMAN) 
		 		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
		 			TargetUnit(SymSHAMAN)
		            CastSpellByName(tostring(GetSpellInfo(110309)),SymSHAMAN)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting SymSHAMAN - Name: &amp;quot; ..UnitName(SymSHAMAN)) 
					return true
				end
			elseif UnitExists(SymPALADIN) and not SymSHAMAN then
				if IsSpellInRange(GetSpellInfo(110309),SymPALADIN) == 1
		 		and CanHeal(SymPALADIN) 
		 		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
		 			TargetUnit(SymPALADIN)
					CastSpellByName(tostring(GetSpellInfo(110309)),SymPALADIN)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting SymPALADIN - Name: &amp;quot; ..UnitName(SymPALADIN)) 
					return true		
				end
			elseif UnitExists(SymDEATHKNIGHT) and not SymSHAMAN then
				if IsSpellInRange(GetSpellInfo(110309),SymDEATHKNIGHT) == 1
		 		and CanHeal(SymDEATHKNIGHT) 
		 		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
		 			TargetUnit(SymDEATHKNIGHT)
					CastSpellByName(tostring(GetSpellInfo(110309)),SymDEATHKNIGHT)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting SymDEATHKNIGHT - Name: &amp;quot; ..UnitName(SymDEATHKNIGHT)) 
					return true		
				end
			elseif UnitExists(SymHUNTER) and not SymSHAMAN then
				if IsSpellInRange(GetSpellInfo(110309),SymHUNTER) == 1
		 		and CanHeal(SymHUNTER)	
		 		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
		 			TargetUnit(SymHUNTER)
					CastSpellByName(tostring(GetSpellInfo(110309)),SymHUNTER)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting SymHUNTER - Name: &amp;quot; ..UnitName(SymHUNTER)) 
					return true		
				end
			elseif UnitExists(SymMAGE) and not SymSHAMAN then
				if IsSpellInRange(GetSpellInfo(110309),SymMAGE) == 1
		 		and CanHeal(SymMAGE) 
		 		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then		
		 			TargetUnit(SymMAGE)
					CastSpellByName(tostring(GetSpellInfo(110309)),SymMAGE)
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCasting SymMAGE - Name: &amp;quot; ..UnitName(SymMAGE)) 
					return true
				end
			end		
		end
		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>SwiftmendSmart</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--SwiftmendSmart
if Nova_SwiftmendCheck 
and not LLdebuff then	
	if #RejuSM &amp;gt; 0 then			
		if GetSpellCooldown(18562) == 0 then					
			if UnitBuffID(RejuSM[1].RSMUnit, 8936)
			or UnitBuffID(RejuSM[1].RSMUnit, 774) then				
				if IsSpellInRange(GetSpellInfo(18562),RejuSM[1].RSMUnit) 
				then
					if (UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(50464)) --Nourish					
					then
						SpellStopCasting()
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFStopCast Nourish for RejuSM &amp;quot;)
					end
					CastSpellByName(tostring(GetSpellInfo(18562)),RejuSM[1].RSMUnit) 						
					--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast SwiftmendSmart - Name: &amp;quot; ..UnitName(RejuSM[1].RSMUnit))						
					return true						
				end	
			end
		end
			
		if ((GetTime() - RejuSM[1].RSMCastTime) &amp;gt;= 7) then							
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFClear RejuSM 2&amp;quot;)							
			table.wipe(RejuSM)
			RejuSM = { }
			return true				
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>RejuSwiftmendSmart</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--RejuSwiftmendSmart
if Nova_SwiftmendCheck then	
	if not RejuSM then
		RejuSM = { }
	end
	
	if PQR_SpellAvailable(774) 									
	and IsUsableSpell(774)					
	and select(2,GetSpellCooldown(774)) &amp;lt; 2 then		
		if #RejuSM &amp;lt; 1 then
			if AverageHealth(Nova_SwiftmendLimit) &amp;lt;= Nova_Swiftmend then	
				PRGetDistanceTable((Nova_Swiftmend+10), 10, (Nova_SwiftmendLimit-1))	
				PRGetDistanceTablebyHP(Nova_Swiftmend,(Nova_SwiftmendLimit-1))		
				if IsSpellInRange(GetSpellInfo(774),prdistancebyhp[1].Unit) 
				and (prdistancebyhp[1].PD &amp;gt;= (Nova_SwiftmendLimit-1))
				and prdistancebyhp[1].HP &amp;lt;= Nova_Swiftmend 
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
					if UnitBuffID(prdistancebyhp[1].Unit, 8936)
					and not UnitBuffID(prdistancebyhp[1].Unit, 774) 					
					then						
						table.insert(RejuSM, { RSMUnit = prdistancebyhp[1].Unit, RSMCastTime = GetTime(), RSMHP = prdistancebyhp[1].HP, RSMPD = prdistancebyhp[1].PD  } )					
						CastSpellByName(tostring(GetSpellInfo(774)),prdistancebyhp[1].Unit)
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Reju then SM - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - total around: &amp;quot;..prdistancebyhp[1].PD) 																	
						return true
					else
						table.insert(RejuSM, { RSMUnit = prdistancebyhp[1].Unit, RSMCastTime = GetTime(), RSMHP = prdistancebyhp[1].HP, RSMPD = prdistancebyhp[1].PD  } )					
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFInsert member to SM - Name: &amp;quot; ..UnitName(prdistancebyhp[1].Unit)..&amp;quot; - HP: &amp;quot;..prdistancebyhp[1].HP..&amp;quot; - total around: &amp;quot;..prdistancebyhp[1].PD) 																	
						return true								
					end	
				end
			end
		else
			if Nova_UnitInfo(RejuSM[1].RSMUnit) &amp;gt; 95 and ((GetTime() - RejuSM[1].RSMCastTime) &amp;gt;= 3) then
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFClear RejuSM 1&amp;quot;)							
				table.wipe(RejuSM)
				RejuSM = { }					
				return true	
			end
			
			if not UnitBuffID(RejuSM[1].RSMUnit, 8936)
			and not UnitBuffID(RejuSM[1].RSMUnit, 774)
			and IsSpellInRange(GetSpellInfo(774),RejuSM[1].RSMUnit) 
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
				CastSpellByName(tostring(GetSpellInfo(774)),RejuSM[1].RSMUnit)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFRenew Reju then SM - Name: &amp;quot; ..UnitName(RejuSM[1].RSMUnit))				
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>BresOrRes</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--BresOrRes
if UnitExists(&amp;quot;mouseover&amp;quot;) 
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
and UnitCanCooperate(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;)    
and IsSpellInRange(GetSpellInfo(20484),&amp;quot;mouseover&amp;quot;) == 1
and GetSpellCooldown(20484) == 0 
and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;)
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
and UnitChannelInfo(&amp;quot;player&amp;quot;) == nil then
	CastSpellByName(tostring(GetSpellInfo(20484)),&amp;quot;mouseover&amp;quot;)	
	return true
elseif not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
and UnitIsConnected(&amp;quot;mouseover&amp;quot;)
and UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) 	
and UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) 
and not UnitHasIncomingResurrection(&amp;quot;mouseover&amp;quot;) then		
	if PQR_SpellAvailable(83968) 		
	and not UnitDebuff(&amp;quot;mouseover&amp;quot;, GetSpellInfo(95223)) ----Mass Resurrection debuff
	and Nova_CheckLastCast(83968, 2.0)		
	then
		if IsInRaid() then
				group = &amp;quot;raid&amp;quot;
		elseif IsInGroup() then
				group = &amp;quot;party&amp;quot;
		end
		local deadnum = 0
		if group then
			for i = 1, GetNumGroupMembers() do 
				local member = group..i
				if UnitIsDeadOrGhost(member) then
					if not UnitDebuff(member, GetSpellInfo(95223)) then ----Mass Resurrection debuff 
						deadnum = deadnum + 1
					end
				end
			end
		end		
		if deadnum &amp;gt;= 2 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
			CastSpellByName(tostring(GetSpellInfo(83968),nil)) --Mass Resurrection	 
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto MasRes!&amp;quot;)
			return true		
		end
	end
	
	if PQR_SpellAvailable(115178)
	and IsUsableSpell(115178) 		
	and (IsSpellInRange(GetSpellInfo(115178),&amp;quot;mouseover&amp;quot;) == 1) 
	and Nova_CheckLastCast(115178, 2.0)		
	and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;) 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 
		CastSpellByName(tostring(GetSpellInfo(115178)),&amp;quot;mouseover&amp;quot;) --Resurrection	 
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMouseover - Auto Res!&amp;quot;)
		return true			
	end			
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Drink</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) &amp;lt;= 50
and not UnitCastingInfo(&amp;quot;player&amp;quot;)
and not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
and PQR_SpellAvailable(80618) --Mage cookies	
and not UnitBuffID(&amp;quot;player&amp;quot;, 104269)
and not Nova_Moving 
and GetItemCooldown(80618) == 0 then
	UseItemByName(80618)
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFMage cookies - HP: &amp;quot; ..Nova_UnitInfo(&amp;quot;player&amp;quot;)) 
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 53Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_53EventsCheck then
	local boss,bossid = bossid()
	local dispelid = 88423		
	local buff = { }
	stopcasting = false
	stopdps = false
	LLdebuff = false
	LLdebuffunit = false	
	if UnitExists(boss) then
		local _, _, rdifficulty = GetInstanceInfo()
		--TFT raid		
		if bossid == 69465 and (rdifficulty == 5 or rdifficulty ==6) then --Jin&amp;apos;rokh the Breaker
			local buff = { 138732 } --Ionization 
			local fluiditydebuff  = 138002 --Fluidity
			RaidJBDispel(dispelid,buff,fluiditydebuff,5)
		elseif bossid == 68905 or bossid == 68904 then --Lu&amp;apos;lin 68905, Suen 68904 - Twin Consorts
			local buff  = { 137360 } --Corrupted Healing
			LLdebuff,LLdebuffunit = RaidLLDispel(buff) 
			if LLdebuff
			and UnitBuffID(LLdebuffunit, 33763, &amp;quot;PLAYER&amp;quot;) 
			and PQR_SpellAvailable(33763) 
			and IsUsableSpell(33763) then
				CastSpellByName(tostring(GetSpellInfo(33763)),&amp;quot;player&amp;quot;)	
				return true
			end
		elseif bossid == 69134 or bossid == 69131 or bossid == 69078 or bossid == 69132 then --Council of Elders
			local buff  = { 136878, 136857 } 	
			RaidDispel(dispelid,buff) 	
		elseif bossid == 68476 then --Horridon
			local buff  = { 136708, 136719, 136587, 136512 }
			RaidDispel(dispelid,buff) 
		elseif bossid == 68065 or bossid == 70212 or bossid == 70235 or bossid == 70247 then --Flaming Head 		
			local buff  = { 139822 } 	
			RaidRangeDispel(dispelid,buff,10) 		
		elseif bossid == 69427 then --Dark Animus
			local buff  = { 138609 } 	
			RaidDispelDelay(dispelid,buff,5)
			local InterruptingJolt = GetSpellInfo(138763) --139867 
			local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(boss) 
			if (bossCasting == InterruptingJolt) then
				stopcasting = true
			end
		--DS raid
		elseif bossid == 53879 then --Blood Corruption: Death
			local buff  = { 106199 } 
			RaidDispel(dispelid,buff)	
		--TeS raid
		elseif bossid == 60585 or bossid == 60583 or bossid == 60586 then 
			local buff  = { 117436 } 
			RaidDispel(dispelid,buff) --Protectors of the Endless, Lightning Prison
		elseif bossid == 62442 then --Terrorize
			local buff  = { 123011 } 
			SBossDispel(123011,dispelid)
			--RaidDispel(dispelid,buff)			
		--MSV raid
		elseif bossid == 60051 or bossid == 60047 or bossid == 60043 or bossid == 59915 then --Cobalt Mine Blast
			local buff  = { 116281 } 
			RaidDispel(dispelid,buff)	
		elseif bossid == 60708 then --Meng the Demented
			for i=1, #members do	
				if UnitDebuffID(members[i].Unit, 117708) then --Maddening Shout
					stopdps = true
					break
				end
			end			
		elseif bossid == 60410 then --Closed Circuit
			local buff  = { 117949 } 
			RaidDispel(dispelid,buff)	
		--HoF raid
		elseif bossid == 62837 then --Visions of Demise
			local buff  = { 124863 } 
			RaidDispel(dispelid,buff)		
		end		
		
		if bossid == 62442 then		
			BossDispel(123011,dispelid,boss) --Tsulong, Terrorize 
		end
		
		--MSV raid
		if bossid == 60143 then --not test
			-- Gara&amp;apos;jal the Spiritbinder
			if UnitDebuffID(&amp;quot;player&amp;quot;,116161) then
				local timer = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
				if timer and timer - GetTime() &amp;lt; 1.5 then
					SpellStopCasting()
					RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end		
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 4xEvents</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_4xEventsCheck then --Old raid
	local boss,bossid = bossid()
	if UnitExists(boss) then					
		if bossid == 55294 then
			local PQ_SN = PQ_Shrapnel
			local PQ_FL = PQ_FadingLight
			local PQ_HOT = PQ_HourOfTwilight				
		
			-- Fading Light Debuff
			for i=1,#PQ_FL do
				if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i]))
					and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i])) - GetTime() &amp;lt; 0.7 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end
			
			-- Hour of Twilight
			if false then
				if PQR_SpellAvailable(115176)
				and select(2,GetSpellCooldown(115176)) &amp;lt; 2
				then SpellStopCasting() CastSpellByName(tostring(GetSpellInfo(115176)),&amp;quot;player&amp;quot;) return true end
			else
				local HourOfTwilight,_,_,_,_,endTime = UnitCastingInfo(boss) 
				for i=1,#PQ_HOT do
					if HourOfTwilight == GetSpellInfo(PQ_HOT[i]) and endTime/1000 - GetTime() &amp;lt; 0.7 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
					end
				end
			end
		end
		
		if bossid == 56173 then
			-- Target for Shrapnel
			for i=1,#PQ_SN do
				if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i]))
					and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i])) - GetTime() &amp;lt; 2 then
						SpellStopCasting()
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
				end
			end
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_RacialsCheck
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then

	local PQ_Class = select(2, UnitClass(&amp;quot;player&amp;quot;)) 
	
	--Draenei 
	local GiftOfTheNaaru = 59542	
	--Blood Elf
	local ArcaneTorrent = 28730 --mana regen
	
	if PQ_Class == &amp;quot;PALADIN&amp;quot; then
		GiftOfTheNaaru = 59542	
	elseif PQ_Class == &amp;quot;MONK&amp;quot; then 
		GiftOfTheNaaru = 121093
		ArcaneTorrent = 129597 --chi regen
	elseif PQ_Class == &amp;quot;PRIEST&amp;quot; then  
		GiftOfTheNaaru = 59544
	elseif PQ_Class == &amp;quot;SHAMAN&amp;quot; then 
		GiftOfTheNaaru = 59547
	end

	--Troll 
	local Berserking = 26297 
	--Undead
	local WillOfTheForsaken = 7744  
	--Dwarven 
	local Stoneform = 20594 
	--Human 
	local EveryManForHimself = 59752
	--Undead 
	--local Cannibalize = 20577 --not much helpful
	--Orc 
	local BloodFury = 33702
	--Gloves Engineer
	local _, GECooldown, GEReady = GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 10)
			
	--HP
	if IsSpellKnown(GiftOfTheNaaru) 
	and GetSpellCooldown(GiftOfTheNaaru) == 0 
	and PQR_SpellAvailable(GiftOfTheNaaru)
	and Nova_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt;= 30	
	then		
		CastSpellByName(tostring(GetSpellInfo(GiftOfTheNaaru),nil))	 
		return true 
	end
	
	--Mana
	if IsSpellKnown(ArcaneTorrent) 
	and PQ_Class ~= &amp;quot;MONK&amp;quot;
	and GetSpellCooldown(ArcaneTorrent) == 0 
	and PQR_SpellAvailable(ArcaneTorrent)
	and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 80	
	then		
		CastSpellByName(tostring(GetSpellInfo(ArcaneTorrent),nil))	 
		return true 
	end	
  	
  	--CDs
  	if not racialcds then
	  	function racialcds()
			if IsSpellKnown(BloodFury) 
			and GetSpellCooldown(BloodFury) == 0 
			and PQR_SpellAvailable(BloodFury)	
			then		
				CastSpellByName(tostring(GetSpellInfo(BloodFury),nil))	 
				return true 
			elseif IsSpellKnown(Berserking) 
			and GetSpellCooldown(Berserking) == 0 
			and PQR_SpellAvailable(Berserking)	
			then		
				CastSpellByName(tostring(GetSpellInfo(Berserking),nil))	 
				return true 
			elseif GECooldown == 0 
			and GEReady == 1 then
				UseInventoryItem(10)
			end
		end
	end
  	
  	if lowhpmembers &amp;gt;=5 then
  		racialcds()
  	end
  	
  	--Removes any Charm, Fear and Sleep effect
	if not GotFear then
		function GotFear(t) 
			local debuff = { 10326, 8122, 2094, 5782, 5484, 6358, 5246 }
			for i=1, #debuff do if UnitDebuffID(t,debuff[i]) then return true end end
		end
	end
	if IsSpellKnown(WillOfTheForsaken) 
	and GetSpellCooldown(WillOfTheForsaken) == 0 
	and PQR_SpellAvailable(WillOfTheForsaken)	
	and GotFear(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(WillOfTheForsaken),nil))	 
		return true 
	end  
	
	--Removes all poison, disease and bleed effects and reduces all damage taken by 10% for 8 sec
	if not GotPoison then
		function GotPoison(t)
			local i, debuff = 1, select(5,UnitDebuff(t, 1)) 
			while debuff do
				if debuff == &amp;quot;Poison&amp;quot; or debuff == &amp;quot;Disease&amp;quot; then return true end
				i = i + 1 debuff = select(5,UnitDebuff(t, i)) 
			end
		end
	end	
	if IsSpellKnown(Stoneform) 
	and GetSpellCooldown(Stoneform) == 0 
	and PQR_SpellAvailable(Stoneform)	
	and GotPoison(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(Stoneform),nil))	 
		return true 
	end    	
	
	--Removes all movement impairing effects and all effects which cause loss of control of your character
	if not LostControl then
		function LostControl(t) 
			local debuff = { 122, 10326, 8122, 2094, 5782, 5484, 6358, 5246, 408 }
			for i=1, #debuff do if UnitDebuffID(t,debuff[i]) then return true end end
		end
	end  
	if IsSpellKnown(EveryManForHimself) 
	and GetSpellCooldown(EveryManForHimself) == 0 
	and PQR_SpellAvailable(EveryManForHimself)	
	and LostControl(&amp;quot;player&amp;quot;)
	then		
		CastSpellByName(tostring(GetSpellInfo(EveryManForHimself),nil))	 
		return true 
	end		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PQI Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Variables
if PQInterfaceLoaded and PQInterfaceUpdated and PQInterfaceDataLoaded then
	--They have PQI and its up-to-date use PQI
	
	PQI_Variables_Loaded = PQI_VachiusaGeneralRestoDruid_AutoOpenPQIOptions_enable
	VachiusaRestoDruid_AutoOpenPQIOptions_enable = PQI_VachiusaGeneralRestoDruid_AutoOpenPQIOptions_enable

	Nova_HealingTouchCheck = PQI_VachiusaHealingRestoDruid_HealingTouch_enable
	Nova_HealingTouch = PQI_VachiusaHealingRestoDruid_HealingTouch_value
	Nova_OmenHealingTouchCheck = PQI_VachiusaHealingRestoDruid_OmenHealingTouch_enable
	Nova_OmenHealingTouch = PQI_VachiusaHealingRestoDruid_OmenHealingTouch_value
	Nova_NourishCheck = PQI_VachiusaHealingRestoDruid_Nourish_enable
	Nova_Nourish = PQI_VachiusaHealingRestoDruid_Nourish_value
	Nova_LifebloomFocusCheck = PQI_VachiusaHealingRestoDruid_LifebloomFocus_enable
	Nova_RegrowthCheck = PQI_VachiusaHealingRestoDruid_Regrowth_enable
	Nova_Regrowth = PQI_VachiusaHealingRestoDruid_Regrowth_value
	Nova_OmenRegrowthCheck = PQI_VachiusaHealingRestoDruid_OmenRegrowth_enable
	Nova_OmenRegrowth = PQI_VachiusaHealingRestoDruid_OmenRegrowth_value
	Nova_RejuvenationCheck = PQI_VachiusaHealingRestoDruid_Rejuvenation_enable
	Nova_Rejuvenation = PQI_VachiusaHealingRestoDruid_Rejuvenation_value
	Nova_RejuvenationTankCheck = PQI_VachiusaHealingRestoDruid_RejuvenationTank_enable
	Nova_RejuvenationTank = PQI_VachiusaHealingRestoDruid_RejuvenationTank_value
	Nova_SwiftmendCheck = PQI_VachiusaHealingRestoDruid_Swiftmend_enable
	Nova_Swiftmend = PQI_VachiusaHealingRestoDruid_Swiftmend_value
	Nova_SwiftmendLimitCheck = PQI_VachiusaHealingRestoDruid_SwiftmendLimit_enable
	Nova_SwiftmendLimit = PQI_VachiusaHealingRestoDruid_SwiftmendLimit_value
	Nova_WildMushroomCheck = PQI_VachiusaHealingRestoDruid_WildMushroom_enable
	Nova_WildMushroom = PQI_VachiusaHealingRestoDruid_WildMushroom_value
	Nova_WildMushroomLimitCheck = PQI_VachiusaHealingRestoDruid_WildMushroomLimit_enable
	Nova_WildMushroomLimit = PQI_VachiusaHealingRestoDruid_WildMushroomLimit_value	
	Nova_WildGrowthCheck = PQI_VachiusaHealingRestoDruid_WildGrowth_enable
	Nova_WildGrowth = PQI_VachiusaHealingRestoDruid_WildGrowth_value
	Nova_WildGrowthLimitCheck = PQI_VachiusaHealingRestoDruid_WildGrowthLimit_enable
	Nova_WildGrowthLimit = PQI_VachiusaHealingRestoDruid_WildGrowthLimit_value
	Nova_RegrowthTankCheck = PQI_VachiusaHealingRestoDruid_RegrowthTank_enable
	Nova_RegrowthTank = PQI_VachiusaHealingRestoDruid_RegrowthTank_value
	
	Nova_IronbarkCheck = PQI_VachiusaCDRestoDruid_Ironbark_enable
	Nova_Ironbark = PQI_VachiusaCDRestoDruid_Ironbark_value
	Nova_NatureSwiftnessCheck = PQI_VachiusaCDRestoDruid_NatureSwiftness_enable
	Nova_NatureSwiftness = PQI_VachiusaCDRestoDruid_NatureSwiftness_value
	Nova_SpiritWalkerGraceCheck = PQI_VachiusaCDRestoDruid_SpiritWalkerGrace_enable
	Nova_SpiritWalkerGrace = PQI_VachiusaCDRestoDruid_SpiritWalkerGrace_value
	Nova_Talent90Check = PQI_VachiusaCDRestoDruid_Talent90_enable
	Nova_Talent90 = PQI_VachiusaCDRestoDruid_Talent90_value
	Nova_Talent90LimitCheck = PQI_VachiusaCDRestoDruid_Talent90Limit_enable
	Nova_Talent90Limit = PQI_VachiusaCDRestoDruid_Talent90Limit_value
	Nova_IncarnationCheck = PQI_VachiusaCDRestoDruid_Incarnation_enable
	Nova_Incarnation = PQI_VachiusaCDRestoDruid_Incarnation_value
	Nova_IncarnationLimitCheck = PQI_VachiusaCDRestoDruid_IncarnationLimit_enable
	Nova_IncarnationLimit = PQI_VachiusaCDRestoDruid_IncarnationLimit_value	
	Nova_ForceOfNatureCheck = PQI_VachiusaCDRestoDruid_ForceOfNature_enable
	Nova_ForceOfNature = PQI_VachiusaCDRestoDruid_ForceOfNature_value
	Nova_ForceOfNatureLimitCheck = PQI_VachiusaCDRestoDruid_ForceOfNatureLimit_enable
	Nova_ForceOfNatureLimit = PQI_VachiusaCDRestoDruid_ForceOfNatureLimit_value	
	Nova_GenesisCheck = PQI_VachiusaCDRestoDruid_Genesis_enable
	Nova_Genesis = PQI_VachiusaCDRestoDruid_Genesis_value
	Nova_GenesisLimitCheck = PQI_VachiusaCDRestoDruid_GenesisLimit_enable
	Nova_GenesisLimit = PQI_VachiusaCDRestoDruid_GenesisLimit_value		
	Nova_GenesisCountCheck = PQI_VachiusaCDRestoDruid_GenesisCount_enable
	Nova_GenesisCount = PQI_VachiusaCDRestoDruid_GenesisCount_value		
	Nova_TranquilityCheck = PQI_VachiusaCDRestoDruid_Tranquility_enable
	Nova_Tranquility = PQI_VachiusaCDRestoDruid_Tranquility_value
	Nova_TranquilityLimitCheck = PQI_VachiusaCDRestoDruid_TranquilityLimit_enable
	Nova_TranquilityLimit = PQI_VachiusaCDRestoDruid_TranquilityLimit_value
				
	Nova_AutoTargetCheck = PQI_VachiusaGeneralRestoDruid_AutoTarget_enable
	Nova_AutoTarget = PQI_VachiusaGeneralRestoDruid_AutoTarget_value
	Nova_InnervateCheck = PQI_VachiusaGeneralRestoDruid_Innervate_enable
	Nova_Innervate = PQI_VachiusaGeneralRestoDruid_Innervate_value
	Nova_SymbiosisCheck = PQI_VachiusaGeneralRestoDruid_Symbiosis_enable
	Nova_Symbiosis = PQI_VachiusaGeneralRestoDruid_Symbiosis_value
	Nova_DPSCheck = PQI_VachiusaGeneralRestoDruid_DPS_enable
	Nova_DPS = PQI_VachiusaGeneralRestoDruid_DPS_value
	Nova_NaturesCureCheck = PQI_VachiusaGeneralRestoDruid_NaturesCure_enable
	Nova_NaturesCure = PQI_VachiusaGeneralRestoDruid_NaturesCure_value
	Nova_LowManaCheck = PQI_VachiusaGeneralRestoDruid_LowMana_enable
	Nova_LowMana = PQI_VachiusaGeneralRestoDruid_LowMana_value
	Nova_RacialsCheck = PQI_VachiusaGeneralRestoDruid_Racials_enable
	Nova_Racials = PQI_VachiusaGeneralRestoDruid_Racials_value
	Nova_4xEventsCheck = PQI_VachiusaGeneralRestoDruid_4xEvents_enable
	Nova_4xEvents = PQI_VachiusaGeneralRestoDruid_4xEvents_value
	Nova_53EventsCheck = PQI_VachiusaGeneralRestoDruid_53Events_enable
	Nova_53Events = PQI_VachiusaGeneralRestoDruid_53Events_value
	Nova_54EventsCheck = PQI_VachiusaGeneralRestoDruid_54Events_enable
	Nova_54Events = PQI_VachiusaGeneralRestoDruid_54Events_value	
	Nova_SpecialEvents = PQI_VachiusaGeneralRestoDruid_SpecialEvents_enable	
	Nova_AutoEventDispel = PQI_VachiusaGeneralRestoDruid_AutoEventDispel_enable
	Nova_QueueSysCheck = PQI_VachiusaGeneralRestoDruid_QueueSys_enable
	Nova_QueueSys = PQI_VachiusaGeneralRestoDruid_QueueSys_value	
	Nova_Mouseover = PQI_VachiusaGeneralRestoDruid_MouseoverHeal_enable
	Nova_TargetHeal = PQI_VachiusaGeneralRestoDruid_TargetHeal_enable
	Nova_NPCMouseoverHeal = PQI_VachiusaGeneralRestoDruid_NPCMouseoverHeal_enable
	Nova_PetHeal = PQI_VachiusaGeneralRestoDruid_PetHeal_enable
	Vdebug = PQI_VachiusaGeneralRestoDruid_Vdebug_enable
	
	if Nova_LowHP == nil then Nova_LowHP = 80 end
	if Nova_ActualHP == nil or Nova_ActualHP then Nova_ActualHP = false end
	
	-- Hotkeys
	if not PQI_Hotkeys_Functions_Set then
		function PQI_PauseRotation()
			if PQI_VachiusaHealingRestoDruid_PauseRotation_enable and PQI:IsHotkeys(PQI_VachiusaHealingRestoDruid_PauseRotation_key) then
			return true else return false 
		end	end
		function PQI_Talent60()
			if PQI_VachiusaHealingRestoDruid_Talent60_enable and PQI:IsHotkeys(PQI_VachiusaHealingRestoDruid_Talent60_key) then
			return true else return false
		end	end		
		function PQI_GenesisMod()
			if PQI_VachiusaHealingRestoDruid_GenesisMod_enable and PQI:IsHotkeys(PQI_VachiusaHealingRestoDruid_GenesisMod_key) then
			return true else return false
		end	end			
		function PQI_WildMushroomBloom()
			if PQI_VachiusaHealingRestoDruid_WildMushroomBloom_enable and PQI:IsHotkeys(PQI_VachiusaHealingRestoDruid_WildMushroomBloom_key) then
			return true else return false
		end	end	
		function PQI_Tranquility()
			if PQI_VachiusaHealingRestoDruid_Tranquility_enable and PQI:IsHotkeys(PQI_VachiusaHealingRestoDruid_Tranquility_key) then
			return true else return false
		end	end
		function PQI_Talent90()
			if PQI_VachiusaHealingRestoDruid_Talent90_enable and PQI:IsHotkeys(PQI_VachiusaHealingRestoDruid_Talent90_key) then
			return true else return false
		end	end		
		function PQI_AddingPlayersCT()
			if PQI_VachiusaHealingRestoDruid_AddingPlayersCT_enable and PQI:IsHotkeys(PQI_VachiusaHealingRestoDruid_AddingPlayersCT_key) then
			return true else return false
		end	end	
		function PQI_RemovingPlayersCT()
			if PQI_VachiusaHealingRestoDruid_RemovingPlayersCT_enable and PQI:IsHotkeys(PQI_VachiusaHealingRestoDruid_RemovingPlayersCT_key) then
			return true else return false
		end	end			
	end	
	
	Nova_PauseRotationCheck = PQI_VachiusaHealingRestoDruid_PauseRotation_enable
	Nova_Talent60Check = PQI_VachiusaHealingRestoDruid_Talent60_enable
	Nova_GenesisModCheck = PQI_VachiusaHealingRestoDruid_GenesisMod_enable
	Nova_WildMushroomBloomCheck = PQI_VachiusaHealingRestoDruid_WildMushroomBloom_enable
	Nova_MTranquilityCheck = PQI_VachiusaHealingRestoDruid_Tranquility_enable
	Nova_Talent90Check = PQI_VachiusaHealingRestoDruid_Talent90_enable
	Nova_AddingPlayersCTCheck = PQI_VachiusaHealingRestoDruid_AddingPlayersCT_enable
	Nova_RemovingPlayersCTCheck = PQI_VachiusaHealingRestoDruid_RemovingPlayersCT_enable
	
	VachiusaRestoDruid_PauseRotation_key = PQI_PauseRotation()
	VachiusaRestoDruid_Talent60_key = PQI_Talent60()
	VachiusaRestoDruid_GenesisMod_key = PQI_GenesisMod()
	VachiusaRestoDruid_WildMushroomBloom_key = PQI_WildMushroomBloom()
	VachiusaRestoDruid_Tranquility_key = PQI_Tranquility()
	VachiusaRestoDruid_Talent90_key = PQI_Talent90()
	VachiusaRestoDruid_AddingPlayersCT_key = PQI_AddingPlayersCT()
	VachiusaRestoDruid_RemovingPlayersCT_key = PQI_RemovingPlayersCT()	

	--Set PQI
	if not PQI_VachiusaRestoDruid_Set and VachiusaRestoDruid_AutoOpenPQIOptions_enable ~= nil then
		RunMacroText(&amp;quot;/PQI show&amp;quot;)
		RunMacroText(&amp;quot;/PQI config show&amp;quot;)
		RunMacroText(&amp;quot;/PQI config width 220&amp;quot;)
		if not VachiusaRestoDruid_AutoOpenPQIOptions_enable then
		RunMacroText(&amp;quot;/PQI config hide&amp;quot;) end
		PQI_VachiusaRestoDruid_Set = true
	end
end

--PQI is not loading variables instantly any more ?_? need to delay till they are loaded to avoid errors!
if PQI_Variables_Loaded == nil then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ForceOfNature</Name><Default>false</Default><SpellID>106737</SpellID><Actions></Actions><Lua>--ForceOfNature (TC)
if (VachiusaRestoDruid_Talent60_key and not GetCurrentKeyBoardFocus() and Nova_Talent60Check)
and select(2,GetTalentRowSelectionInfo(4)) == 12
then	
	if not UnitChannelInfo(&amp;quot;player&amp;quot;) 
	and PQR_SpellAvailable(106737)		
	and IsSpellInRange(GetSpellInfo(106737),members[1].Unit) 
	and not UnitCastingInfo(&amp;quot;player&amp;quot;)
	and GetSpellCharges(106737) &amp;gt; 0 
	and Nova_CheckLastCast(106737, 2) 
	then
 	  PQR_CustomTarget = members[1].Unit
	  --PQR_WriteToChat(&amp;quot;\124cFFFF55FFRight Shift Key Down - ForceOfNature!&amp;quot;)
	  return true
	end
end

if Nova_ForceOfNatureCheck 
and select(2,GetTalentRowSelectionInfo(4)) == 12 then
	if ((AverageHealth(Nova_ForceOfNatureLimit) &amp;lt;= Nova_ForceOfNature) and GetSpellCharges(106737) &amp;gt; 0)
	or GetSpellCharges(106737) == 3 then	
		if GetSpellCharges(106737) == 3 then
			local Nova_ForceOfNature = 99
			local Nova_ForceOfNatureLimit = 1
		end
		PRGetDistanceTable((Nova_ForceOfNature+10), 10, Nova_ForceOfNatureLimit)	
		PRGetDistanceTablebyHP(Nova_ForceOfNature,Nova_ForceOfNatureLimit)		
		if IsSpellInRange(GetSpellInfo(106737),prdistancebyhp[1].Unit) 
		and prdistancebyhp[1].PD &amp;gt;= Nova_ForceOfNatureLimit
		and prdistancebyhp[1].HP &amp;lt;= Nova_ForceOfNature 
		and Nova_CheckLastCast(106737, 3) 
		and not UnitCastingInfo(&amp;quot;player&amp;quot;) then	
			PQR_CustomTarget = prdistancebyhp[1].Unit
			return true			
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>RegrowthTank</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--RegrowthTank
if Nova_RegrowthTankCheck then
	if PQR_SpellAvailable(8936) 
	 and UnitAffectingCombat(&amp;quot;player&amp;quot;)	 
	 and IsUsableSpell(8936)
	 and not Nova_Moving 
	 and not UnitChannelInfo(&amp;quot;player&amp;quot;)
	 and not UnitCastingInfo(&amp;quot;player&amp;quot;)	 
	 and not stopcasting then	 
		if #Nova_Tanks &amp;gt; 0 then
			for i=1, #Nova_Tanks do
				if UnitThreatSituation(Nova_Tanks[i].Unit) 	
				 and Nova_Tanks[i].HP &amp;lt;= Nova_RegrowthTank 
				 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 10 		 
				 and IsSpellInRange(GetSpellInfo(8936),Nova_Tanks[i].Unit) == 1 then
					--NatureSwiftness 
					if not UnitBuffID(&amp;quot;player&amp;quot;,132158)
					and PQR_SpellAvailable(132158)
					and select(2,GetTalentRowSelectionInfo(2)) == 4
					and select(2,GetSpellCooldown(132158)) &amp;lt; 2
					then
						CastSpellByName(tostring(GetSpellInfo(132158)),&amp;quot;player&amp;quot;)	
						--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast NatureSwiftness + RegrowthTank. HP: &amp;quot;..Nova_Tanks[i].HP)			
					end		
					CastSpellByName(tostring(GetSpellInfo(8936)),Nova_Tanks[i].Unit)					
					return true				
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- 54Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_54EventsCheck 
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	local boss,bossid = bossid()
	local dispelid = 88423	
	local rangecheckid = 50464		
	local buff = { }
	stopcasting = false
	stopdps = false
	LLdebuff = false
	LLdebuffunit = false	
	if UnitExists(boss) then
		--local _, _, rdifficulty = GetInstanceInfo()
		if bossid == 71515 then --General Nazgrim
			if UnitBuffID(&amp;quot;boss1&amp;quot;, 143593) then --Defensive Stance
				stopdps = true				
			else
				stopdps = false
			end
		elseif bossid == 71995 or bossid == 71996 or bossid == 72000 then --Amalgam of Corruption - Norushen
			if UnitDebuffID(&amp;quot;player&amp;quot;,144850) --Test of Reliance
			then 
				BossSheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, 3, true, rangecheckid)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true
				local buff  = { 144514 } --Lingering Corruption
				RaidDispel(dispelid,buff) 	
			end
		elseif bossid == 71475 or bossid == 71479 or bossid == 71480 then --The Fallen Protectors
			local buff  = { 143434 } --Shadow Word: Bane
			RaidDispel(dispelid,buff) 	
		elseif bossid == 71734 then --Sha of Pride
			if UnitDebuffID(&amp;quot;player&amp;quot;,144359) then
				local buff  = { 144351 } --Mark of Arrogance
				RaidDispel(dispelid,buff) 			
			end	
		elseif bossid == 71454 then --Malkorok	
			local buff  = { 142913 } 	
			RaidRangeDispel(dispelid,buff,8) 	
			if UnitDebuffID(&amp;quot;player&amp;quot;,142861) then --Ancient Miasma - 143983 or 142906
				ShieldSheuronEngine(Nova_Mouseover, Nova_LowHP, Nova_ActualHP, Nova_TargetHeal, Nova_PetHeal)  -- Deactivate Mouseover  ||   At what % Health do we consider someone LowHP  ||  Sort by Actual Health = true					
			end
		elseif bossid == 71161 then --Kil&amp;apos;ruk the Wind-Reaver - Paragons of the Klaxxi
			if UnitDebuffID(&amp;quot;player&amp;quot;,141858) then --Ingenious			
				if not tIngenious or (#tIngenious &amp;gt; 0 and (GetTime() &amp;gt; tIngenious[1].Time + 30)) then
					tIngenious = { }						
					local qTime = GetTime() 
					local lastmax = 0
					local maxunit = &amp;quot;player&amp;quot;		
					local lasttype = &amp;quot;notype&amp;quot;						
					local ClassList = { {&amp;apos;WARRIOR&amp;apos;, 0 }, {&amp;apos;PALADIN&amp;apos;, 0 }, {&amp;apos;HUNTER&amp;apos;, 0 }, {&amp;apos;ROGUE&amp;apos;, 0 }, {&amp;apos;PRIEST&amp;apos;, 0 }, {&amp;apos;DEATHKNIGHT&amp;apos;, 0 }, {&amp;apos;SHAMAN&amp;apos;, 0 }, {&amp;apos;MAGE&amp;apos;, 0 }, {&amp;apos;WARLOCK&amp;apos;, 0 }, {&amp;apos;MONK&amp;apos;, 0 }, {&amp;apos;DRUID&amp;apos;, 0 } }				
					local RaceList = { {&amp;apos;Draenei&amp;apos;, 0 }, {&amp;apos;Gnome&amp;apos;, 0 }, {&amp;apos;Human&amp;apos;, 0 }, {&amp;apos;NightElf&amp;apos;, 0 }, {&amp;apos;Worgen&amp;apos;, 0 }, {&amp;apos;Pandaren&amp;apos;, 0 }, {&amp;apos;BloodElf&amp;apos;, 0 }, {&amp;apos;Goblin&amp;apos;, 0 }, {&amp;apos;Orc&amp;apos;, 0 }, {&amp;apos;Tauren&amp;apos;, 0 }, {&amp;apos;Troll&amp;apos;, 0 }, {&amp;apos;Scourge&amp;apos;, 0 } }
					for i=1,25 do
						local unitCheck = &amp;quot;raid&amp;quot;..i
					    if UnitExists(unitCheck) and UnitIsPlayer(unitCheck) then
					    	local _, unitClass = UnitClass(unitCheck)				    	
					    	local _, unitRace = UnitRace(unitCheck)				    	
					        if unitClass and UnitRace then	
								--Class
								for j=1, #ClassList do
									if unitClass == ClassList[j][1] then
										--PQR_WriteToChat(&amp;quot;Debug1 - Num: &amp;quot; ..ClassList[j][2]..&amp;quot; - Class: &amp;quot; ..ClassList[j][1])
										ClassList[j][2] = ClassList[j][2] + 1
										if ClassList[j][2] &amp;gt; lastmax then
											lastmax = ClassList[j][2]
											maxunit = unitCheck
											lasttype = ClassList[j][1]
										end												
									end		
								end
								--Race
								for j=1, #RaceList do
									if unitRace == RaceList[j][1] then
										--PQR_WriteToChat(&amp;quot;Debug1 - Num: &amp;quot; ..RaceList[j][2]..&amp;quot; - Race: &amp;quot; ..RaceList[j][1])
										RaceList[j][2] = RaceList[j][2] + 1
										if RaceList[j][2] &amp;gt; lastmax then
											lastmax = RaceList[j][2]
											maxunit = unitCheck
											lasttype = RaceList[j][1]
										end												
									end		
								end
					        end			               	
					    end
					end				
					--PQR_WriteToChat(&amp;quot;Debug1 - Unit: &amp;quot; ..maxunit..&amp;quot; - Type: &amp;quot; ..lasttype..&amp;quot; - Total: &amp;quot; ..lastmax..&amp;quot; - Time: &amp;quot; ..qTime)		
					table.insert(tIngenious, { Unit = maxunit, Type = lasttype, Total = lastmax, Time = qTime } )			
					return true								
				else
					if #tIngenious &amp;gt; 0 then			
						if UnitExists(tIngenious[1].Unit) 
						and IsSpellInRange(GetSpellInfo(rangecheckid),tIngenious[1].Unit) == 1
						and CanHeal(tIngenious[1].Unit) then	
			    			TargetUnit(tIngenious[1].Unit) 
			                --Press the ExtraActionButton 
			                RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)                     
			                RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
			                --PQR_WriteToChat(&amp;quot;Ingenious Name: &amp;quot;..UnitName(tIngenious[1].Unit)..&amp;quot; - Type: &amp;quot;..tIngenious[1].Type..&amp;quot; - Total: &amp;quot;..tIngenious[1].Total..&amp;quot; - Time: &amp;quot;..tIngenious[1].Time)						        					        	   	
						end
					end				
				end   				
			else
				tIngenious = false
			end
		elseif bossid == 71529 then --Thok the Bloodthirsty
			local buff  = { 143791 } --Corrosive Blood
			RaidDispel(dispelid,buff) 
			local DeafeningScreech = GetSpellInfo(143343) --Deafening Screech
			local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(boss) 
			if (bossCasting == DeafeningScreech) then
				stopcasting = true
			end							
		end	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- NPCMouseoverHeal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--NPCMouseoverHeal
if Nova_NPCMouseoverHeal
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
then
	local dispelid = 88423	
	local rangecheckid = 50464	
	if UnitExists(&amp;quot;mouseover&amp;quot;)				
	and not UnitIsPlayer(&amp;quot;mouseover&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;mouseover&amp;quot;):sub(6,10), 16) 				
		if npcID == 71604 --Contaminated Puddle - Immerseus - SoO
		or npcID == 71995 or npcID == 71996 or npcID == 72000 --Norushen
		or npcID == 71357 --Wrathion 
		then				
			if IsSpellInRange(GetSpellInfo(rangecheckid),&amp;quot;mouseover&amp;quot;)
			and Nova_UnitInfo(&amp;quot;mouseover&amp;quot;) &amp;lt; 100 then	
			 	if PQR_SpellAvailable(8936) 		 
				 and IsUsableSpell(8936) 
				 and select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 70
				 and not UnitCastingInfo(&amp;quot;player&amp;quot;) then
					CastSpellByName(tostring(GetSpellInfo(8936)),&amp;quot;mouseover&amp;quot;)	 			 		
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Regrowth - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 			
			 		return true
				end
				
				if PQR_SpellAvailable(5185) 		 
				and IsUsableSpell(5185) 
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) then 					
					CastSpellByName(tostring(GetSpellInfo(5185)),&amp;quot;mouseover&amp;quot;)	 						 		
			 		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast HealingTouch - Name: &amp;quot; ..UnitName(&amp;quot;mouseover&amp;quot;)..&amp;quot; - HP: &amp;quot;..Nova_UnitInfo(&amp;quot;mouseover&amp;quot;)..&amp;quot; - NPCID: &amp;quot;..npcID) 					
			 		return true				
				end	
			end
		end		
	elseif UnitExists(&amp;quot;focus&amp;quot;)				
	and not UnitIsPlayer(&amp;quot;focus&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;focus&amp;quot;):sub(6,10), 16) 				
		if npcID == 71604 --Contaminated Puddle - Immerseus - SoO
		or npcID == 71995 or npcID == 71996 or npcID == 72000 --Norushen
		or npcID == 71357 --Wrathion 
		then
			if IsSpellInRange(GetSpellInfo(rangecheckid),&amp;quot;focus&amp;quot;) --FlashHeal
			then		
				local focushp = CalculateHP(&amp;quot;focus&amp;quot;)
				if focushp ~= nil and select(2, CalculateHP(&amp;quot;focus&amp;quot;)) ~= nil then
					table.insert(members, { Unit = &amp;quot;focus&amp;quot;, HP = focushp, AHP = select(2, CalculateHP(&amp;quot;focus&amp;quot;)), IsNPC = true } )
				end
				if #members &amp;gt; 0 then
					table.sort(members, function(x,y) return x.HP &amp;lt; y.HP end)
				end				
			end
		end	
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Genesis</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Genesis
if not UnitChannelInfo(&amp;quot;player&amp;quot;) 
and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
then
	if Nova_GenesisCheck 
	and GetSpellCooldown(18562) &amp;gt; 0 --only use when Swiftmend on cd
	and AverageHealth(Nova_GenesisLimit) &amp;lt;= Nova_Genesis then
		if PQR_SpellAvailable(145518)
		and IsUsableSpell(145518) 
		then
			local GenCount=0
			local RejCount=0
			for i=1, #members do
				if UnitBuffID(members[i].Unit,774,&amp;quot;player&amp;quot;)				
				then 	
					RejCount = RejCount + 1	
					if members[i].HP &amp;lt;= Nova_Genesis then
						GenCount = GenCount + 1
					else
						break --warning, it breaks GenCount also
					end
				end
			end		
			if GenCount &amp;gt;= Nova_GenesisCount then							
				CastSpellByName(tostring(GetSpellInfo(145518),nil))	 
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Genesis - GenCount: &amp;quot; ..GenCount..&amp;quot; - RejCount: &amp;quot;..RejCount) 		
				return true
			end			
		end
	end
end

if PQR_SpellAvailable(145518)
and IsUsableSpell(145518)
and Nova_GenesisModCheck 
and VachiusaRestoDruid_GenesisMod_key and not GetCurrentKeyBoardFocus() then
	CastSpellByName(tostring(GetSpellInfo(145518),nil))	 
	--PQR_WriteToChat(&amp;quot;\124cFFFF55FFCast Genesis&amp;quot;) 
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- QueueSys</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- QueueSys
if Nova_QueueSysCheck 
then
	local dispelid = 88423	
	local rangecheckid = 50464		
	if #Queue_Sys &amp;gt; 0 then	
		if PQR_SpellAvailable(dispelid) 
		and select(2,GetSpellCooldown(dispelid)) &amp;lt; 2
		and UnitExists(Queue_Sys[1].Unit)
		and IsUsableSpell(dispelid)
		and IsSpellInRange(GetSpellInfo(dispelid),Queue_Sys[1].Unit) == 1
		and CanHeal(Queue_Sys[1].Unit)
		and not PQR_IsOutOfSight(Queue_Sys[1].Unit) then
			if not UnitChannelInfo(&amp;quot;player&amp;quot;)
			and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
			then	
				CastSpellByName(tostring(GetSpellInfo(dispelid)),Queue_Sys[1].Unit)	
				return true	
			end
		end
	end
	
	if Queue_Spell then
		if #Queue_Spell &amp;gt; 0 then	
			if GetTime() - Queue_Spell[1].Time &amp;gt;= 10 then
				--PQR_WriteToChat(&amp;quot;Removed expired queue &amp;quot;..Queue_Spell[1].SpellID)
				Queue_Spell = { }				
				return true
			end			
			if #Queue_Spell &amp;gt; 1 then			
				if Queue_Spell[1].SpellID == Queue_Spell[2].SpellID and Queue_Spell[1].Unit == Queue_Spell[2].Unit then
					--PQR_WriteToChat(&amp;quot;Removed dup queue &amp;quot;..Queue_Spell[1].SpellID)
					table.remove(Queue_Spell,2)	
					return true	
				end
			end
			
			local qunit = &amp;quot;player&amp;quot;
			if Queue_Spell[1].Unit == &amp;quot;low&amp;quot; then
				qunit = members[1].Unit
			elseif Queue_Spell[1].Unit == &amp;quot;tank&amp;quot; then
				if #Nova_Tanks &amp;gt; 0 then
					for i=1, #Nova_Tanks do
						if UnitThreatSituation(Nova_Tanks[i].Unit) then
							qunit = Nova_Tanks[i].Unit
							break
						end
					end
				end
				if UnitThreatSituation(members[1].Unit)	== 3 then
				 	qunit = members[1].Unit
				end			
			else
				qunit = Queue_Spell[1].Unit
			end
			
			if PQR_SpellAvailable(tonumber(Queue_Spell[1].SpellID)) 
			and select(2,GetSpellCooldown(tonumber(Queue_Spell[1].SpellID))) &amp;lt; 2
			and UnitExists(qunit)
			then
				if not UnitChannelInfo(&amp;quot;player&amp;quot;)
				and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
				then					
					local qmembers = members
					table.sort(qmembers, function(x) return UnitIsUnit(qunit,x.Unit) end)
					if UnitIsUnit(qmembers[1].Unit,qunit) then
						qunit = qmembers[1].Unit	
					else
						if IsSpellInRange(GetSpellInfo(Queue_Spell[1].SpellID),Queue_Spell[1].Unit) then
							qunit = Queue_Spell[1].Unit	
						else
							qunit = &amp;quot;player&amp;quot;			
						end
					end
					
					SpellSUCCEEDED(Queue_Spell[1].SpellID,qunit)
					CastSpellByName(tostring(GetSpellInfo(Queue_Spell[1].SpellID)),qunit)									
					return true						
				end
			end						
		end
	end	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></DRUID>