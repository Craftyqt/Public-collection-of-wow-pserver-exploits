<?xml version="1.0" encoding="utf-8" ?><DRUID><Ability><Name>Starsurge</Name><Default>false</Default><SpellID>78674</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(78674) then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Starfall</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(48505) then
	if not UnitBuffID(&amp;quot;player&amp;quot;, 48505) then
		CastSpellByName(tostring(GetSpellInfo(48505)))
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Moonfire</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local MF,_,_,_,_,_,MFtimer = UnitDebuffID(&amp;quot;target&amp;quot;,8921,&amp;quot;PLAYER&amp;quot;)
local MFF,_,_,_,_,_,MFFtimer = UnitDebuffID(&amp;quot;focus&amp;quot;,8921,&amp;quot;PLAYER&amp;quot;)

if MF == nil or PQR_IsMoving() then
	CastSpellByName(GetSpellInfo(8921), &amp;quot;target&amp;quot;)
elseif MF ~= nil and MFtimer - GetTime() &amp;lt; 2.5 then
	CastSpellByName(GetSpellInfo(8921), &amp;quot;target&amp;quot;)
end

if MFF == nil then
	CastSpellByName(GetSpellInfo(8921), &amp;quot;focus&amp;quot;)
elseif MFF ~= nil and MFFtimer - GetTime() &amp;lt; 2.5 then
	CastSpellByName(GetSpellInfo(8921), &amp;quot;focus&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Sunfire</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SF,_,_,_,_,_,SFtimer = UnitDebuffID(&amp;quot;target&amp;quot;,93402,&amp;quot;PLAYER&amp;quot;)
local SFF,_,_,_,_,_,SFFtimer = UnitDebuffID(&amp;quot;focus&amp;quot;, 93402, &amp;quot;PLAYER&amp;quot;)

if not UnitBuffID(&amp;quot;player&amp;quot;, 112071) then
	if SF == nil then
		CastSpellByName(GetSpellInfo(93402), &amp;quot;target&amp;quot;)
	elseif SF ~= nil and SFtimer - GetTime() &amp;lt; 2.5 then
		CastSpellByName(GetSpellInfo(93402), &amp;quot;target&amp;quot;)
	end

	if UnitExists(&amp;quot;focus&amp;quot;) and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;focus&amp;quot;) then
		if SFF == nil then
			CastSpellByName(GetSpellInfo(93402), &amp;quot;focus&amp;quot;)
		elseif SFF ~= nil and SFFtimer - GetTime() &amp;lt; 2.5 then
			CastSpellByName(GetSpellInfo(93402), &amp;quot;focus&amp;quot;)
		end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Starfire</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local EclipseDirection = GetEclipseDirection(&amp;quot;player&amp;quot;)

if EclipseDirection == &amp;quot;sun&amp;quot; then
    local EclipsePower = UnitPower(&amp;quot;player&amp;quot;, 8)
    local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)
	if EclipsePower &amp;gt; 60 and CurrentCast == &amp;quot;Starfire&amp;quot; then
		--CastSpellByName(tostring(GetSpellInfo(5176)))
		return false
	else
	    CastSpellByName(tostring(GetSpellInfo(2912)))
	    return true
	end
end

if EclipseDirection == &amp;quot;none&amp;quot; then
	local EclipsePower = UnitPower(&amp;quot;player&amp;quot;, 8)
	if  EclipsePower &amp;gt;= 80 then
		CastSpellByName(tostring(GetSpellInfo(2912)))
		return true
	end
elseif UnitBuffID(&amp;quot;player&amp;quot;, 112071) then
	CastSpellByName(tostring(GetSpellInfo(2912)))
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wrath</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local EclipseDirection = GetEclipseDirection(&amp;quot;player&amp;quot;)

if not UnitBuffID(&amp;quot;player&amp;quot;, 112071) then
	if EclipseDirection == &amp;quot;moon&amp;quot; then
		local EclipsePower = UnitPower(&amp;quot;player&amp;quot;, 8)
		local CurrentCast = UnitCastingInfo(&amp;quot;player&amp;quot;)
		if EclipsePower &amp;lt; -70 and CurrentCast == &amp;quot;Wrath&amp;quot; then
			--CastSpellByName(tostring(GetSpellInfo(2912)))
			return false
		else
		    CastSpellByName(tostring(GetSpellInfo(5176)))
		    return true
		end    
	end

	if EclipseDirection == &amp;quot;none&amp;quot; then
		local EclipsePower = UnitPower(&amp;quot;player&amp;quot;, 8)
		if  EclipsePower &amp;lt;= 80 then
			CastSpellByName(tostring(GetSpellInfo(5176)))
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Incarnation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if inc ~= 1 then
	return false
end

if select(2,GetTalentRowSelectionInfo(4)) == 11
	and IsUsableSpell(102560)
	and select(2,GetSpellCooldown(102560)) &amp;lt; 2 then
	if UnitBuffID(&amp;quot;player&amp;quot;, 48518) or UnitBuffID(&amp;quot;player&amp;quot;, 48517) then	
		CastSpellByName(tostring(GetSpellInfo(102560)))
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Celestial Alignment</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CA ~= 1 then
	return false
end

if PQR_SpellAvailable(112071) then
	if UnitBuffID(&amp;quot;player&amp;quot;, 102560) then
		if (select(7, UnitBuffID(&amp;quot;player&amp;quot;, 102560)) - GetTime()) &amp;lt;= 15 then
			CastSpellByName(GetSpellInfo(112071))
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Rebirth</Name><Default>false</Default><SpellID>20484</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;mouseover&amp;quot;) and
   UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) and
   UnitCanCooperate(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) and
   GetSpellCooldown(20484) == 0 and
   UnitChannelInfo(&amp;quot;player&amp;quot;) == nil then
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Barkskin</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if bsenabled ~= 1 then
	return false
end

if (100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)) &amp;lt; bsHealth then
	if PQR_SpellAvailable(22812) then
		CastSpellByName(GetSpellInfo(22812))
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Moonkin</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GetShapeshiftForm(&amp;quot;player&amp;quot;) ~= 5 then
	CastShapeshiftForm(5)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Renewal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if renewal ~= 1 then
	return false
end

if 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) &amp;lt; renewalHealth
	and select(2,GetTalentRowSelectionInfo(2)) == 5
	and IsUsableSpell(108238)
	and GetSpellCooldown(108238) == 0 then
	CastSpellByName(GetSpellInfo(108238))
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nature&amp;apos;s Vigil</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if NV ~= 1 then
	return false
end

if PQR_SpellAvailable(124974) then
	if UnitBuffID(&amp;quot;player&amp;quot;, 102560) then
		CastSpellByName(tostring(GetSpellInfo(124974)))
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mark of the Wild</Name><Default>false</Default><SpellID>1126</SpellID><Actions></Actions><Lua>if not UnitBuffID(&amp;quot;player&amp;quot;,1126)
	and not UnitBuffID(&amp;quot;player&amp;quot;,20217)
	and not UnitBuffID(&amp;quot;player&amp;quot;,90363)
	and not UnitBuffID(&amp;quot;player&amp;quot;,115921)	then
	return true
end</Lua><RecastDelay>5000</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wild Mushroom</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Mod() == WMTog
 and WMTogCheck
 and GetSpellCooldown(88747) == 0 then 
  CastSpellByName(GetSpellInfo(88747)) 
  if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end 
  return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Moonfire (Mouseover)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if MOTogCheck ~= 1 then
	return false
end

local moon,_,_,_,_,_,moonTimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,8921,&amp;quot;PLAYER&amp;quot;)

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(8921)
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;)
	and not UnitIsDead(&amp;quot;mouseover&amp;quot;) then
	if moon then
		if moonTimer - GetTime() &amp;lt;= 3 then
			CastSpellByName(GetSpellInfo(8921),&amp;quot;mouseover&amp;quot;)
			return true
		end
	else
		CastSpellByName(GetSpellInfo(8921),&amp;quot;mouseover&amp;quot;)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Sunfire (Mouseover)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if MOTogCheck ~= 1 then
	return false
end

local sunfire,_,_,_,_,_,sunfireTimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,93402,&amp;quot;PLAYER&amp;quot;)

if not UnitBuffID(&amp;quot;player&amp;quot;, 112071) then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and PQR_SpellAvailable(93402)
		and UnitExists(&amp;quot;mouseover&amp;quot;)
		and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;)
		and not UnitIsDead(&amp;quot;mouseover&amp;quot;) then
		if sunfire then
			if sunfireTimer - GetTime() &amp;lt;= 3 then
				CastSpellByName(GetSpellInfo(93402), &amp;quot;mouseover&amp;quot;)
				return true
			end
		else CastSpellByName(GetSpellInfo(93402), &amp;quot;mouseover&amp;quot;)
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Sunfire closing Celestial</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, 112071, &amp;quot;player&amp;quot;) then
	if (select(7, UnitBuffID(&amp;quot;player&amp;quot;, 112071)) - GetTime()) &amp;lt;= 2 then
		CastSpellByName(tostring(GetSpellInfo(93402)))
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tranquility</Name><Default>false</Default><SpellID>740</SpellID><Actions></Actions><Lua>if Nova_Mod() == Tranq
 and TranqCheck then
-- and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Rejuvenation - SOLO</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if rejuv ~= 1 then
	return false
end

if 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) &amp;lt;= rejuvHealth
 and not UnitBuffID(&amp;quot;player&amp;quot;, 774) then
 	CastSpellByName(GetSpellInfo(774), &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Starsurge (proc)</Name><Default>false</Default><SpellID>78674</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;,93400) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Pause []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if pauseCheck == 1 then
	if Nova_Mod() == pause
	or GetShapeShiftForm == 6
	or IsMounted()
	or SpellIsTargeting()
	or UnitBuffID(&amp;quot;player&amp;quot;,80169)
	or UnitInVehicle(&amp;quot;player&amp;quot;)
	or UnitIsDead(&amp;quot;target&amp;quot;) 
	or UnitIsDead(&amp;quot;player&amp;quot;)
	or UnitBuffID(&amp;quot;player&amp;quot;, 87959)
	or not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		return true
	end
elseif pauseCheck ~= 1 then
	return false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Astral Communion</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AC ~= 1 then
	return false
end

local EclipseDirection = GetEclipseDirection(&amp;quot;player&amp;quot;)
local EclipsePower = UnitPower(&amp;quot;player&amp;quot;, 8)
local channel = UnitChannelInfo(&amp;quot;player&amp;quot;)

if not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if channel ~= &amp;quot;Astral Communion&amp;quot; then
		if EclipseDirection == &amp;quot;moon&amp;quot; then
			if EclipsePower &amp;gt; -75 then
				CastSpellByName(GetSpellInfo(127663))
			end
		elseif EclipseDirection ~= &amp;quot;moon&amp;quot; then
			CastSpellByName(GetSpellInfo(127663))
		end
	elseif channel == &amp;quot;Astral Communion&amp;quot; then
		if EclipseDirection == &amp;quot;moon&amp;quot; and EclipsePower &amp;lt;= -75 then
			SpellStopCasting()
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Nova Frame []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-------------------------------------------------------------------------------
-- Variables &amp; Sanity checks
-------------------------------------------------------------------------------
-- Load LUA data files.
if PQR_RotationStarted == true then
	PQR_RotationStarted = false
	
	-- Tables
	Nova_ValueCheck = {
		[1] =	{ Var1 = nil,	Text = &amp;quot;Survivability&amp;quot;,				Var2 = nil },
		[2] =	{ Var1 = 35,	Text = &amp;quot;Healthstone&amp;quot;,				Var2 = 0 },
		[3] =	{ Var1 = 40,	Text = &amp;quot;Barkskin&amp;quot;,					Var2 = 0 },
		[4] =	{ Var1 = 20,	Text = &amp;quot;Renewal&amp;quot;,					Var2 = 0 },
		[5] =	{ Var1 = 80,	Text = &amp;quot;Rejuvenation&amp;quot;,				Var2 = 0 },
		[6] =	{ Var1 = nil,	Text = &amp;quot;Cooldowns&amp;quot;,					Var2 = nil },
		[7] =	{ Var1 = nil,	Text = &amp;quot;Natures Vigil&amp;quot;,				Var2 = 1 },
		[8] =	{ Var1 = nil,	Text = &amp;quot;Incarnation&amp;quot;,				Var2 = 1 },
		[9] =	{ Var1 = nil,	Text = &amp;quot;Celestial Alignment&amp;quot;,		Var2 = 1 },
		[10] =	{ Var1 = nil,	Text = &amp;quot;Other&amp;quot;,						Var2 = nil },
		[11] =	{ Var1 = nil,	Text = &amp;quot;Trinket 1&amp;quot;,					Var2 = 0 },
		[12] =	{ Var1 = nil,	Text = &amp;quot;Trinket 2&amp;quot;,					Var2 = 0 },
		[13] =	{ Var1 = nil,	Text = &amp;quot;Tinkered Gloves&amp;quot;,			Var2 = 0 },
		[14] =	{ Var1 = nil,	Text = &amp;quot;Astral Communion&amp;quot;,			Var2 = 0 },
		[15] =	{ Var1 = nil,	Text = &amp;quot;Mouseover Toggle&amp;quot;,			Var2 = 1 }
	}
	Nova_CooldownCheck = {
		[1]	=	{ Mod = 16,		Text = &amp;quot;Tranquility&amp;quot;,			Var1 = 1},
		[2] =	{ Mod = 2,		Text = &amp;quot;Solar Beam&amp;quot;,			Var1 = 1},
		[3]	=	{ Mod =	1,		Text = &amp;quot;Hurricane&amp;quot;,				Var1 = 1},
		[4]	=	{ Mod =	4,		Text = &amp;quot;Pause Rotation&amp;quot;,		Var1 = 1},
		[5] =	{ Mod = 32,		Text = &amp;quot;Wild Mushrooms&amp;quot;,		Var1 = 1}
	}
	
	-- Load LUA files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nova_Frame.lua&amp;quot;) == true then
			MiniMapCreation()
	
			-- Slash Commands
			SLASH_NOVAFRAME1 = &amp;quot;/novaframe&amp;quot;
			SLASH_NOVAFRAME2 = &amp;quot;/nova&amp;quot;
			function SlashCmdList.NOVAFRAME(msg, editbox)
				if Setup == nil then
					Setup = true
					FrameCreation(Nova_ValueCheck, Nova_CooldownCheck, &amp;quot;Boomkin Options&amp;quot;, &amp;quot;Boomkin CD Settings&amp;quot;)
				end
				if not Nova_Frame:IsShown() then
					Nova_Frame:Show() else Nova_Frame:Hide()
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Testing frame</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-------------------------------------------------------------------------------
-- Variables &amp; Sanity checks
-------------------------------------------------------------------------------
-- Load LUA data files.
if PQR_RotationStarted == true then
	PQR_RotationStarted = false
	
	-- Tables
	Nova_ValueCheck = {
		[1] =	{ Var1 = nil,	Text = &amp;quot;Survivability functions&amp;quot;,	Var2 = nil, }
	}
	Nova_CooldownCheck = {}
	
	-- CVar Registration
	for i=1,#Nova_ValueCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1)
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_ValueCheck[i].Var2)
		end
	end
	for i=1,#Nova_CooldownCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_CooldownCheck[i].Mod)
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_CooldownCheck[i].Var1)
		end
	end

	-- CVar Translations
	-- Healing functions
	HSenabled 		= GetCVarBool(&amp;quot;Nova_Healthstone_Enabled&amp;quot;)
	BSenabled		= GetCVarBool(&amp;quot;Nova_Barkskin_Enabled&amp;quot;)
	RNWLenabled		= GetCVarBool(&amp;quot;Nova_Renewal_Enabled&amp;quot;)
	REJenabled		= GetCVarBool(&amp;quot;Nova_Rejuvenation_Enabled&amp;quot;)
	-- Health thresholds
	HShealth 		= tonumber(GetCVar(&amp;quot;Nova_Healthstone&amp;quot;))
	BShealth		= tonumber(GetCVar(&amp;quot;Nova_Barkskin&amp;quot;))
	RNWLhealth		= tonumber(GetCVar(&amp;quot;Nova_Renewal&amp;quot;)
	REJhealth		= tonunber(GetCVar(&amp;quot;Nova_Rejuvenation&amp;quot;)
	-- Cooldowns	
	NVenabled		= GetCVarBool(&amp;quot;Nova_Natures_Vigil_Enabled&amp;quot;)
	INCenabled		= GetCVarBool(&amp;quot;Nova_Incarnation_Enabled&amp;quot;)
	CAenabled		= GetCVarBool(&amp;quot;Nova_Celestial_Alignment_Enabled&amp;quot;)
	-- Inventory items
	T1enabled		= GetCVarBool(&amp;quot;Nova_Trinket_1_Enabled&amp;quot;)
	T2enabled		= GetCVarBool(&amp;quot;Nova_Trinket_2_Enabled&amp;quot;)
	GLOenabled		= GetCVarBool(&amp;quot;Nova_Tinkered_Gloves_Enabled&amp;quot;)
	-- Toggles
	useCD			= tonumber(GetCVar(&amp;quot;Nova_Cooldown_Toggle&amp;quot;)
	useHeal			= tonumber(GetCVar(&amp;quot;Nova_Healing_Toggle&amp;quot;)
	useTranq		= tonumber(GetCVar(&amp;quot;Nova_Tranquility&amp;quot;)
	moToggle		= tonumber(GetCVar(&amp;quot;Nova_Mouseover_Toggle&amp;quot;)
	pauseRotation	= tonumber(GetCVar(&amp;quot;Nova_Pause_Rotation&amp;quot;)
	hurricane		= tonumber(GetCVar(&amp;quot;Nova_Hurricane&amp;quot;)
	-- Toggle Checks	
	useCDCheck			= GetCVarBool(&amp;quot;Nova_Cooldown_Toggle_Enabled&amp;quot;)
	useHealCheck		= GetCVarBool(&amp;quot;Nova_Healing_Toggle_Enabled&amp;quot;)
	useTranqCheck		= GetCVarBool(&amp;quot;Nova_Tranquility_Enabled&amp;quot;)
	moToggleCheck		= GetCVarBool(&amp;quot;Nova_Mouseover_Toggle_Enabled&amp;quot;)
	pauseRotationCheck	= GetCVarBool(&amp;quot;Nova_Pause_Rotation_Enabled&amp;quot;)
	hurricaneCheck		= GetCVarBool(&amp;quot;Nova_Hurricane_Enabled&amp;quot;)
		
		
	-- Load LUA files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_Nova_Data.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_Nova_Frame.lua&amp;quot;) == true then
			MiniMapCreation()
	
			-- Slash Commands
			SLASH_NOVAFRAME1 = &amp;quot;/novaframe&amp;quot;
			SLASH_NOVAFRAME2 = &amp;quot;/nova&amp;quot;
			function SlashCmdList.NOVAFRAME(msg, editbox)
				if Setup == nil then
					Setup = true
					FrameCreation(Nova_ValueCheck, Nova_CooldownCheck, &amp;quot;Boomkin Options&amp;quot;, &amp;quot;Boomkin CD Settings&amp;quot;)
				end
				if not Nova_Frame:IsShown() then
					Nova_Frame:Show() else Nova_Frame:Hide()
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if hsenabled ~= 1 then
	return false
end

if 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) &amp;lt; hsHealth
	and select(3,GetItemCooldown(5512)) == 1 then
	UseItemByName(5512)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hurricane</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Mod() == hurricane
 and hurricaneCheck then
	CastSpellByName(GetSpellInfo(16914))
	if SpellIsTargeting() then
		CameraOrSelectOrMoveStart()
		CameraOrSelectOrMoveStop()
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] CVars []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- CVar Registration
	for i=1,#Nova_ValueCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1)
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_ValueCheck[i].Var2)
		end
	end
	for i=1,#Nova_CooldownCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_CooldownCheck[i].Mod)
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_CooldownCheck[i].Var1)
		end
	end

	--Cvar Translations
	--Enabled/Disabled
	hsenabled		= GetCVarBool(&amp;quot;Nova_Healthstone_Enabled&amp;quot;)
	bsenabled		= GetCVarBool(&amp;quot;Nova_Barkskin_Enabled&amp;quot;)
	renewal			= GetCVarBool(&amp;quot;Nova_Renewal_Enabled&amp;quot;)
	rejuv			= GetCVarBool(&amp;quot;Nova_Rejuvenation_Enabled&amp;quot;)
	NV				= GetCVarBool(&amp;quot;Nova_Natures_Vigil_Enabled&amp;quot;)
	inc				= GetCVarBool(&amp;quot;Nova_Incarnation_Enabled&amp;quot;)
	CA				= GetCVarBool(&amp;quot;Nova_Celestial_Alignment_Enabled&amp;quot;)
	tr1				= GetCVarBool(&amp;quot;Nova_Trinket_1_Enabled&amp;quot;)
	tr2				= GetCVarBool(&amp;quot;Nova_Trinket_2_Enabled&amp;quot;)
	glove			= GetCVarBool(&amp;quot;Nova_Tinkered_Gloves_Enabled&amp;quot;)
	AC				= GetCVarBool(&amp;quot;Nova_Astral_Communion_Enabled&amp;quot;)
	MOTogCheck		= GetCVarBool(&amp;quot;Nova_Mouseover_Toggle_Enabled&amp;quot;)
	--Thresholds
	hsHealth		= tonumber(GetCVar(&amp;quot;Nova_Healthstone_Health&amp;quot;))
	bsHealth		= tonumber(GetCVar(&amp;quot;Nova_Barkskin&amp;quot;))
	renewalHealth	= tonumber(GetCVar(&amp;quot;Nova_Renewal&amp;quot;))
	rejuvHealth		= tonumber(GetCVar(&amp;quot;Nova_Rejuvenation&amp;quot;))
	-- Cooldowns
	Tranq			= tonumber(GetCVar(&amp;quot;Nova_Tranquility&amp;quot;))
	hurricane		= tonumber(GetCVar(&amp;quot;Nova_Hurricane&amp;quot;))
	solarb			= tonumber(GetCVar(&amp;quot;Nova_Solar_Beam&amp;quot;))
	WMTog			= tonumber(GetCVar(&amp;quot;Nova_Wild_Mushrooms&amp;quot;))
	pause			= tonumber(GetCVar(&amp;quot;Nova_Pause_Rotation&amp;quot;))
	-- Cooldown Checks
	TranqCheck		= GetCVarBool(&amp;quot;Nova_Tranquility_Enabled&amp;quot;)
	hurricaneCheck	= GetCVarBool(&amp;quot;Nova_Hurricane_Enabled&amp;quot;)
	solarbCheck		= GetCVarBool(&amp;quot;Nova_Solar_Beam_Enabled&amp;quot;)
	WMTogCheck		= GetCVarBool(&amp;quot;Nova_Wild_Mushrooms_Enabled&amp;quot;)
	pauseCheck		= GetCVarBool(&amp;quot;Nova_Pause_Rotation_Enabled&amp;quot;)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Solar Beam</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Mod() == solarb
 and solarbCheck then
	CastSpellByName(GetSpellInfo(78675), &amp;quot;mouseover&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Keys []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>Nova_Mod = nil
function Nova_Mod()
	total = 0
	if IsLeftShiftKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 1
	end
	if IsLeftControlKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 2
	end
	if IsLeftAltKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 4
	end
	if IsRightShiftKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 8
	end
	if IsRightControlKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 16
	end
	if IsRightAltKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 32
	end
	return total
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Gloves</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if glove ~= 1 then
	return false
end

local _, Cooldown, Ready = GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 10)

if Cooldown == 0 and
 Ready == 1 and
 UnitChannelInfo(&amp;quot;player&amp;quot;) == nil and
 UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil then
	UseInventoryItem(10)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Trinket 1</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if tr1 ~= 1 then
	return false
end

local _, Cooldown, Ready = GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 13)

if Cooldown == 0 and
 Ready == 1 and
 UnitChannelInfo(&amp;quot;player&amp;quot;) == nil and
 UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil then
	UseInventoryItem(13)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Trinket 2</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if tr2 ~= 1 then
	return false
end

local _, Cooldown, Ready = GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 14)

if Cooldown == 0 and
 Ready == 1 and
 UnitChannelInfo(&amp;quot;player&amp;quot;) == nil and
 UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil then
	UseInventoryItem(14)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></DRUID>