<?xml version="1.0" encoding="utf-8" ?><INTERRUPT><Ability><Name>Alpha Mill</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not Alpha_Mill_Enable then return false end
if LootFrame:IsVisible() or UnitCastingInfo(&amp;quot;player&amp;quot;) then return false end	
if PQR_PauseRotation == nil then PQR_PauseRotation = 0
elseif PQR_PauseRotation &amp;gt; GetTime() then return true
else PQR_PauseRotation = 0 end

if IsSpellKnown(51005) and (Alpha_Mill_Mop
or Alpha_Mill_Cata
or Alpha_Mill_WotLK
or Alpha_Mill_BC
or Alpha_Mill_PreBC) then
	for bag = 0,4 do
		for slot = 1,GetContainerNumSlots(bag) do
			if GetContainerItemLink(bag,slot) then
				local itemId = GetContainerItemID(bag, slot)
				local _,itemCount = GetContainerItemInfo(bag,slot)
				local Alpha_Mill = {
					MoP   = { 79011, 79010, 72235, 72237, 72234, 89639  },
					Cata  = { 52984, 52986, 52983, 52985, 52988, 52987  },
					WotLK = { 36903, 36906, 36905, 37921, 39970, 36901, 36907, 36904 },
					BC    = { 22785, 22786, 22787, 22789, 22790, 22791, 22792, 22793 },
					PreBC = { 2447,  765,   2449,  785,   2452,  22710,         -- Apprentice
							  2450,  3820,  2453,  3355,  3369,  3356,          -- Journeyman
							  3357,  3818,  3821,  3358,  3819,  4625,  8831,   -- Expert
							  8836,  8838,  8839,  8845,  8846,    		    	-- Artisan part 1
							  13464, 13463, 13465, 13466, 13467  } }		   	-- Artisan part 2
				if Alpha_Mill_Mop then
					for i = 1, #Alpha_Mill.MoP do
						if itemId == Alpha_Mill.MoP[i] and itemCount &amp;gt;= 5  then
							CastSpellByID(51005)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Mill_Cata then
					for i = 1, #Alpha_Mill.Cata do
						if itemId == Alpha_Mill.Cata[i] and itemCount &amp;gt;= 5  then
							CastSpellByID(51005)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Mill_WotLK then
					for i = 1, #Alpha_Mill.WotLK do
						if itemId == Alpha_Mill.WotLK[i] and itemCount &amp;gt;= 5  then
							CastSpellByID(51005)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Mill_BC then
					for i = 1, #Alpha_Mill.BC do
						if itemId == Alpha_Mill.BC[i] and itemCount &amp;gt;= 5  then
							CastSpellByID(51005)
							UseContainerItem(bag,slot)
   							return true
				end	end	end			
				if Alpha_Mill_PreBC then
					for i = 1, #Alpha_Mill.PreBC do
						if itemId == Alpha_Mill.PreBC[i] and itemCount &amp;gt;= 5  then
							CastSpellByID(51005)
							UseContainerItem(bag,slot)
   							return true
				end	end	end				
end end end end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alpha Disenchant</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not Alpha_Disenchant_Enable then return false end
if LootFrame:IsVisible() or UnitCastingInfo(&amp;quot;player&amp;quot;) then return false end	
if PQR_PauseRotation == nil then PQR_PauseRotation = 0
elseif PQR_PauseRotation &amp;gt; GetTime() then return true
else PQR_PauseRotation = 0 end

if IsSpellKnown(13262) and (Alpha_Disenchant_Blue
or Alpha_Disenchant_Green
or Alpha_Disenchant_Wrist
or Alpha_Disenchant_Custom_List) then
	for bag = 0, 4 do
		for slot = 1, GetContainerNumSlots(bag) do
			if GetContainerItemLink(bag,slot) then
				local itemId = GetContainerItemID(bag, slot)
				local itemName = GetItemInfo(GetContainerItemLink(bag,slot))
				local Alpha_DE = {
					Blue  = { 90905, 90904 },
					Green = { 83794, 83793 },
					Wrist = { 82434, 82426, 82402 }	}
				if Alpha_Disenchant_Blue then
					for i = 1, #Alpha_DE.Blue do
						if itemId == Alpha_DE.Blue[i] then
							CastSpellByID(13262)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Disenchant_Green then
					for i = 1, #Alpha_DE.Green do
						if itemId == Alpha_DE.Green[i] then
							CastSpellByID(13262)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Disenchant_Wrist then
					for i = 1, #Alpha_DE.Wrist do
						if itemId == Alpha_DE.Wrist[i] then
							CastSpellByID(13262)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
			if Alpha_Disenchant_Custom then
					for i = 1, #Alpha_Disenchant_Custom_List do
						if type(Alpha_Disenchant_Custom_List[i]) == &amp;quot;string&amp;quot; then
							if itemName == Alpha_Disenchant_Custom_List[i] then
								CastSpellByID(13262)
								UseContainerItem(bag,slot)
   								return true	end
						elseif type(Alpha_Disenchant_Custom_List[i]) == &amp;quot;number&amp;quot; then
							if itemId == Alpha_Disenchant_Custom_List[i] then
								CastSpellByID(13262)
								UseContainerItem(bag,slot)
   								return true	
   				end end end	end
end end	end	end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ Global Variables ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Rotation Settings --
	Alpha_Grab_PVP_Flags_Enable 	 = true		
	Alpha_TradeChat_Enable  		 = false
	Alpha_BagsFull_Enable 			 = false 	-- Caution will force quit WoW when your bags are full!
	Alpha_Mill_Enable 				 = true
	Alpha_Disenchant_Enable 		 = true
	Alpha_Prospect_Enable 			 = true
	Alpha_BundleGroceries_Enable	 = true
	Alpha_Farm_Enable 				 = true
	Alpha_Frame_First 				 = false 	-- set true to disable the WIP UI
-- Rotation Settings --	
	
-- Trade Chat Settings --
	Alpha_TradeChat_Message			 = &amp;quot;your message here&amp;quot;
	Alpha_TradeChat_Channel			 = { 1, 2, &amp;quot;g&amp;quot;, &amp;quot;s&amp;quot; }	-- The syntax used after / in a macro. For example â€œw playerNameâ€ would whisper the player â€œplayerNameâ€ your message. There is no limit for this!
	Alpha_TradeChat_Delay			 = 60		-- The time in seconds before posting again.
	Alpha_TradeChat_ForceSend		 = true
	Alpha_TradeChat_ForceSend_key	 = 32 		-- Right Alt, Look at HotKey info to get values
	Alpha_TradeChat_PrintWihsper	 = true
	Alpha_TradeChat_PrintWihsper_key = 24		-- Right Control &amp; Right Shift, Look at HotKey info to get values
-- Trade Chat Settings --
	
-- Milling Settings --
	Alpha_Mill_Mop					 = true
	Alpha_Mill_Cata					 = true
	Alpha_Mill_WotLK				 = true
	Alpha_Mill_BC					 = true
	Alpha_Mill_PreBC				 = true
-- Milling Settings --

-- Disenchanting Settings --
	Alpha_Disenchant_Blue			 = true
	Alpha_Disenchant_Green			 = true
	Alpha_Disenchant_Wrist			 = true
	Alpha_Disenchant_Custom			 = false
		Alpha_Disenchant_Custom_List  =
		--Put item names or itemIDs in this table. 
		--Item names must be enclosed in quotation marks, everything in the list must be separated by a comma.
		{ 		}
-- Disenchanting Settings --

-- Prospecting Settings --
	Alpha_Prospect_MoP				 = true
	Alpha_Prospect_Trill			 = false
	Alpha_Prospect_Cata				 = true
	Alpha_Prospect_WotLK			 = true
	Alpha_Prospect_BC				 = true
	Alpha_Prospect_PreBC			 = true
	Alpha_Prospect_Convert_Shards	 = true
-- Prospecting Settings --

-- Farming Settings --
	Alpha_Farm_PlantSeed			 = true 	-- Target Tilled Soil to plant selected seed, alternatively you can use Force Target Tilled Soil for a hotkey
	Alpha_Farm_Seed 				 = 12  		-- Look at Seed info to get values 
	Alpha_Farm_DestroyPlant_Enable	 = true		-- Destroys Targeted Plant, Requires Dented Shovel		
	Alpha_Farm_DestroyPlant_key		 = 5		-- left shift &amp; left alt, Look at HotKey info to get values
	Alpha_Farm_TargetTilledSoil		 = true		-- Targeting Tilled Soil with a HotKey to plant seeds
	Alpha_Farm_TargetTilledSoil_key	 = 1		-- Left Shift, Look at HotKey info to get values
	Alpha_Farm_TillSoil				 = false	-- Use this if you dont have a Master Plow
	Alpha_Farm_UseWateringCan		 = false	-- Use this if you dont have &amp;quot;Jinyu Princess&amp;quot; Irrigation System
	Alpha_Farm_UseBugSpray			 = false	-- Use this if you dont have &amp;quot;Thunder King&amp;quot; Pest Repellers
	Alpha_Farm_HarvestPlant			 = true		-- Used to Harvest Plants in range without needing to target them
	Alpha_Farm_HarvestPlant_key		 = 4		-- Left Alt, Look at HotKey info to get values
-- Farming Settings --

-- HotKey info --
	--[[
	To have multiple keys just add them up!
		Left Shift	  = 1
		Left Control  = 2
		Left Alt	  = 4
		Right Shift	  = 8
		Right Control = 16
		Right Alt 	  = 32
	]]--
-- HotKey info --

-- Seed info --
	--[[
	1  = Enigma Seed
	2  = Green Cabbage Seed
	3  = Jade Squash Seed
	4  = Juicycrunch Carrot Seed
	5  = Magebulb Seed
	6  = Mogu Pumpkin Seed
	7  = Pink Turnip Seed
	8  = Raptorleaf Seed
	9  = Red Blossom Leek Seed
	10 = Scallion Seed
	11 = Snakeroot Seed
	12 = Songbell Seed
	13 = Striped Melon Seed
	14 = White Turnip Seed
	15 = Windshear Cactus Seed
	16 = Witchberry Seed
	]]--	
-- Seed info --

-- Initialize --
	if PQR_InterruptStarted then
		PQR_LoadLua(&amp;quot;PQR_Data_Alpha_Utilities.lua&amp;quot;)
		PQR_InterruptStarted = false
		getRunty = true
		Alpha_HotKeys = nil
		function Alpha_HotKeys(keyNum)
			local total = 0
			if not GetCurrentKeyBoardFocus() then
			if IsLeftShiftKeyDown()		then total = total + 1	end
			if IsLeftControlKeyDown()	then total = total + 2	end
			if IsLeftAltKeyDown()		then total = total + 4	end
			if IsRightShiftKeyDown()	then total = total + 8	end
			if IsRightControlKeyDown()	then total = total + 16	end
			if IsRightAltKeyDown()		then total = total + 32 end end
			if keyNum == total then return true else return false end
		end	
	end
-- Initialize --</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alpha Prospect</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not Alpha_Prospect_Enable then return false end
if LootFrame:IsVisible() or UnitCastingInfo(&amp;quot;player&amp;quot;) then return false end	
if PQR_PauseRotation == nil then PQR_PauseRotation = 0
elseif PQR_PauseRotation &amp;gt; GetTime() then return true
else PQR_PauseRotation = 0 end

if IsSpellKnown(31252) and (Alpha_Prospect_MoP
or Alpha_Prospect_Trill
or Alpha_Prospect_Cata
or Alpha_Prospect_WotLK
or Alpha_Prospect_BC
or Alpha_Prospect_PreBC
or Alpha_Prospect_Convert) then
	for bag = 0, 4 do
		for slot = 1, GetContainerNumSlots(bag) do
			if GetContainerItemLink(bag,slot) then
				local itemId = GetContainerItemID(bag, slot)
				local _,itemCount = GetContainerItemInfo(bag,slot)
				local Alpha_Prospect = {
					MoP	  = { 72092, 72093  },
					Trill = { 72094, 72103  },
					Cata  = { 52183, 52185, 53038 },
					WotLK = { 36909, 36912, 36910 },
					BC    = { 23424, 23425  },
					PreBC = { 2770,  2771,  2772, 3858, 10620, 11370 } }
				if Alpha_Prospect_MoP then
					for i = 1, #Alpha_Prospect.MoP do
						if itemId == Alpha_Prospect.MoP[i] and itemCount &amp;gt;= 5 then
							CastSpellByID(31252)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Prospect_Trill then
					for i = 1, #Alpha_Prospect.Trill do
						if itemId == Alpha_Prospect.Trill[i] and itemCount &amp;gt;= 5 then
							CastSpellByID(31252)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Prospect_Cata then
					for i = 1, #Alpha_Prospect.Cata do
						if itemId == Alpha_Prospect.Cata[i] and itemCount &amp;gt;= 5 then
							CastSpellByID(31252)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Prospect_WotLK then
					for i = 1, #Alpha_Prospect.WotLK do
						if itemId == Alpha_Prospect.WotLK[i] and itemCount &amp;gt;= 5 then
							CastSpellByID(31252)
							UseContainerItem(bag,slot)
   							return true
				end	end	end	
				if Alpha_Prospect_BC then
					for i = 1, #Alpha_Prospect.BC do
						if itemId == Alpha_Prospect.BC[i] and itemCount &amp;gt;= 5 then
							CastSpellByID(31252)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Prospect_PreBC then
					for i = 1, #Alpha_Prospect.PreBC do
						if itemId == Alpha_Prospect.PreBC[i] and itemCount &amp;gt;= 5 then
							CastSpellByID(31252)
							UseContainerItem(bag,slot)
   							return true
				end	end	end
				if Alpha_Prospect_Convert then
					if itemId == 90407 and itemCount &amp;gt;= 10 then
						UseContainerItem(bag,slot)
						return true
				end end
end end end end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alpha Bundle Groceries</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not Alpha_BundleGroceries_Enable then return false end
if LootFrame:IsVisible() or UnitCastingInfo(&amp;quot;player&amp;quot;)
or QuestFrame:IsVisible() or GossipFrame:IsVisible() then return false end	
if PQR_PauseRotation == nil then PQR_PauseRotation = 0
elseif PQR_PauseRotation &amp;gt; GetTime() then return true
else PQR_PauseRotation = 0 end

--  Auto complete quest Replenishing the Party and Bundle Groceries
local BundleGroceries = {
	{ Container = 87658, Reagent = 74833, Quantity = 20  }, -- Raw Tiger Steak Container
	{ Container = 87659, Reagent = 74834, Quantity = 20  }, -- Mushan Ribs Container
	{ Container = 87660, Reagent = 74837, Quantity = 20  }, -- Raw Turtle Meat Container
	{ Container = 87661, Reagent = 74838, Quantity = 20  }, -- Raw Crab Meat Container
	{ Container = 87662, Reagent = 74839, Quantity = 20  }, -- Wildfowl Breast Container
	{ Container = 87663, Reagent = 74840, Quantity = 100 }, -- Green Cabbage Container
	{ Container = 87664, Reagent = 74841, Quantity = 100 }, -- Juicycrunch Carrot Container
	{ Container = 87665, Reagent = 74842, Quantity = 100 }, -- Mogu Pumpkin Container
	{ Container = 87666, Reagent = 74843, Quantity = 100 }, -- Scallions Container
	{ Container = 87667, Reagent = 74844, Quantity = 100 }, -- Red Blossom Leek Container
	{ Container = 87669, Reagent = 74846, Quantity = 100 }, -- Witchberries Container
	{ Container = 87670, Reagent = 74847, Quantity = 100 }, -- Jade Squash Container
	{ Container = 87671, Reagent = 74848, Quantity = 100 }, -- Striped Melon Container
	{ Container = 87672, Reagent = 74849, Quantity = 100 }, -- Pink Turnip Container
	{ Container = 87673, Reagent = 74850, Quantity = 100 }, -- White Turnip Container
	{ Container = 87678, Reagent = 74856, Quantity = 20  }, -- Jade Lungfish Container
	{ Container = 87679, Reagent = 74857, Quantity = 20  }, -- Giant Mantis Shrimp Container
	{ Container = 87680, Reagent = 74859, Quantity = 20  }, -- Emperor Salmon Container
	{ Container = 87681, Reagent = 74860, Quantity = 20  }, -- Redbelly Mandarin Container
	{ Container = 87682, Reagent = 74861, Quantity = 20  }, -- Tiger Gourami Container
	{ Container = 87683, Reagent = 74863, Quantity = 20  }, -- Jewel Danio Container
	{ Container = 87684, Reagent = 74864, Quantity = 20  }, -- Reef Octopus Container
	{ Container = 87685, Reagent = 74865, Quantity = 20  }, -- Krasarang Paddlefish Container
	{ Container = 87686, Reagent = 74866, Quantity = 60  }, -- Golden Carp Container
	{ Container = 87687, Reagent = 75014, Quantity = 20  }, -- Crocolisk Belly Container
}
for i = 1, #BundleGroceries do
	if GetItemCount(BundleGroceries[i].Container) &amp;gt;= 1 
	and GetItemCount(BundleGroceries[i].Reagent) &amp;gt;= BundleGroceries[i].Quantity then
		UseItemByName(BundleGroceries[i].Container)
		return true
end end

if UnitExists(&amp;quot;target&amp;quot;) then
	local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
	if GetItemCount(87557,false,false) &amp;gt;= 1
	and npcID == 64395 then --Nam Ironpaw
		if not GossipFrame:IsVisible() and not QuestFrame:IsVisible() then
			InteractUnit(&amp;quot;target&amp;quot;)
			PQR_PauseRotation = GetTime() + 1
		end
		SelectGossipAvailableQuest(1)
		CompleteQuest()
		GetQuestReward()
end	end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alpha Farming Seeds</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not Alpha_Farm_Enable or not Alpha_Farm_PlantSeed then return false end
if LootFrame:IsVisible() or UnitCastingInfo(&amp;quot;player&amp;quot;) then return false end	
if PQR_PauseRotation == nil then PQR_PauseRotation = 0
elseif PQR_PauseRotation &amp;gt; GetTime() then return true
else PQR_PauseRotation = 0 end

local AlphaUtilities_PlantSeed = {
	[1]  = 85216, -- Enigma Seed
	[2]  = 79102, -- Green Cabbage Seed
	[3]  = 89328, -- Jade Squash Seed
	[4]  = 80590, -- Juicycrunch Carrot Seed
	[5]  = 85217, -- Magebulb Seed
	[6]  = 80592, -- Mogu Pumpkin Seed
	[7]  = 80594, -- Pink Turnip Seed
	[8]  = 89202, -- Raptorleaf Seed
	[9]  = 80593, -- Red Blossom Leek Seed
	[10] = 80591, -- Scallion Seed
	[11] = 85215, -- Snakeroot Seed
	[12] = 89233, -- Songbell Seed
	[13] = 89329, -- Striped Melon Seed
	[14] = 80595, -- White Turnip Seed
	[15] = 89197, -- Windshear Cactus Seed
	[16] = 89326  -- Witchberry Seed
}
for i = 1, #AlphaUtilities_PlantSeed do
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Tilled Soil&amp;quot;
	and Alpha_Farm_PlantSeed == true
	and Alpha_Farm_Seed == i then
		UseItemByName(AlphaUtilities_PlantSeed[i])
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alpha Farming</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Alpha_Farm_Enable then
	local dontAscendStop = true
	local weed = {&amp;quot;Encroaching Weed&amp;quot;, &amp;quot;Stubborn Weed&amp;quot;}
	local runty = {
	&amp;quot;Runty Enigma Seed&amp;quot;, &amp;quot;Runty Green Cabbage&amp;quot;, &amp;quot;Runty Jade Squash&amp;quot;, &amp;quot;Runty Juicycrunch Carrot&amp;quot;, &amp;quot;Runty Magebulb&amp;quot;, &amp;quot;Runty Mogu Pumpkin&amp;quot;, &amp;quot;Runty Pink Turnip&amp;quot;, &amp;quot;Runty Raptorleaf&amp;quot;, &amp;quot;Runty Red Blossom Leek&amp;quot;, &amp;quot;Runty Scallions&amp;quot;,
	&amp;quot;Runty Snakeroot&amp;quot;, &amp;quot;Runty Songbell&amp;quot;, &amp;quot;Runty Striped Melon&amp;quot;, &amp;quot;Runty White Turnip&amp;quot;, &amp;quot;Runty Windshear Cactus&amp;quot;, &amp;quot;Runty Witchberries&amp;quot; }
	local wild = {
	&amp;quot;Wild Enigma Seed&amp;quot;, &amp;quot;Wild Green Cabbage&amp;quot;, &amp;quot;Wild Jade Squash&amp;quot;, &amp;quot;Wild Juicycrunch Carrot&amp;quot;, &amp;quot;Wild Magebulb&amp;quot;, &amp;quot;Wild Mogu Pumpkin&amp;quot;, &amp;quot;Wild Pink Turnip&amp;quot;, &amp;quot;Wild Raptorleaf&amp;quot;, &amp;quot;Wild Red Blossom Leek&amp;quot;, &amp;quot;Wild Scallions&amp;quot;, 
	&amp;quot;Wild Snakeroot&amp;quot;, &amp;quot;Wild Songbell&amp;quot;, &amp;quot;Wild Striped Melon&amp;quot;, &amp;quot;Wild White Turnip&amp;quot;, &amp;quot;Wild Windshear Cactus&amp;quot;, &amp;quot;Wild Witchberries&amp;quot; }
	local Alluring = {
	&amp;quot;Alluring Enigma Seed&amp;quot;, &amp;quot;Alluring Green Cabbage&amp;quot;, &amp;quot;Alluring Jade Squash&amp;quot;, &amp;quot;Alluring Juicycrunch Carrot&amp;quot;, &amp;quot;Alluring Magebulb&amp;quot;, &amp;quot;Alluring Mogu Pumpkin&amp;quot;, &amp;quot;Alluring Pink Turnip&amp;quot;, &amp;quot;Alluring Raptorleaf&amp;quot;, 
	&amp;quot;Alluring Red Blossom Leek&amp;quot;, &amp;quot;Alluring Scallions&amp;quot;, &amp;quot;Alluring Snakeroot&amp;quot;, &amp;quot;Alluring Songbell&amp;quot;, &amp;quot;Alluring Striped Melon&amp;quot;, &amp;quot;Alluring White Turnip&amp;quot;, &amp;quot;Alluring Windshear Cactus&amp;quot;, &amp;quot;Alluring Witchberries&amp;quot; }
	local Wiggling = {
	&amp;quot;Wiggling Enigma Seed&amp;quot;, &amp;quot;Wiggling Green Cabbage&amp;quot;, &amp;quot;Wiggling Jade Squash&amp;quot;, &amp;quot;Wiggling Juicycrunch Carrot&amp;quot;, &amp;quot;Wiggling Magebulb&amp;quot;, &amp;quot;Wiggling Mogu Pumpkin&amp;quot;, &amp;quot;Wiggling Pink Turnip&amp;quot;, &amp;quot;Wiggling Raptorleaf&amp;quot;, 
	&amp;quot;Wiggling Red Blossom Leek&amp;quot;, &amp;quot;Wiggling Scallions&amp;quot;, &amp;quot;Wiggling Snakeroot&amp;quot;, &amp;quot;Wiggling Songbell&amp;quot;, &amp;quot;Wiggling Striped Melon&amp;quot;, &amp;quot;Wiggling White Turnip&amp;quot;, &amp;quot;Wiggling Windshear Cactus&amp;quot;, &amp;quot;Wiggling Witchberries&amp;quot; }
	local Bursting = {
	&amp;quot;Bursting Enigma Seed&amp;quot;, &amp;quot;Bursting Green Cabbage&amp;quot;, &amp;quot;Bursting Jade Squash&amp;quot;, &amp;quot;Bursting Juicycrunch Carrot&amp;quot;, &amp;quot;Bursting Magebulb&amp;quot;, &amp;quot;Bursting Mogu Pumpkin&amp;quot;, &amp;quot;Bursting Pink Turnip&amp;quot;, &amp;quot;Bursting Raptorleaf&amp;quot;, 
	&amp;quot;Bursting Red Blossom Leek&amp;quot;, &amp;quot;Bursting Scallions&amp;quot;, &amp;quot;Bursting Snakeroot&amp;quot;, &amp;quot;Bursting Songbell&amp;quot;, &amp;quot;Bursting Striped Melon&amp;quot;, &amp;quot;Bursting White Turnip&amp;quot;, &amp;quot;Bursting Windshear Cactus&amp;quot;, &amp;quot;Bursting Witchberries&amp;quot; }
	local Ripe = {
	&amp;quot;Ripe Enigma Seed&amp;quot;, &amp;quot;Ripe Green Cabbage&amp;quot;, &amp;quot;Ripe Jade Squash&amp;quot;, &amp;quot;Ripe Juicycrunch Carrot&amp;quot;, &amp;quot;Ripe Magebulb&amp;quot;, &amp;quot;Ripe Mogu Pumpkin&amp;quot;, &amp;quot;Ripe Pink Turnip&amp;quot;, &amp;quot;Ripe Raptorleaf&amp;quot;, &amp;quot;Ripe Red Blossom Leek&amp;quot;, 
	&amp;quot;Ripe Scallions&amp;quot;, &amp;quot;Ripe Snakeroot&amp;quot;, &amp;quot;Songbell&amp;quot;, &amp;quot;Ripe Striped Melon&amp;quot;, &amp;quot;Ripe White Turnip&amp;quot;, &amp;quot;Ripe Windshear Cactus&amp;quot;, &amp;quot;Ripe Witchberries&amp;quot;, &amp;quot;Green Tea Leaf&amp;quot;, &amp;quot;Silkweed&amp;quot;, &amp;quot;Rain Poppy&amp;quot;, &amp;quot;Snow Lily&amp;quot;, 
	&amp;quot;Fool&amp;apos;s Cap&amp;quot;, &amp;quot;Golden Lotus&amp;quot;, &amp;quot;Magebulb&amp;quot;, &amp;quot;Raptorleaf&amp;quot;, &amp;quot;snakeroot&amp;quot;, &amp;quot;Windshear Cactus&amp;quot; }
	local Plump = {
	&amp;quot;Plump Enigma Seed&amp;quot;, &amp;quot;Plump Green Cabbage&amp;quot;, &amp;quot;Plump Jade Squash&amp;quot;, &amp;quot;Plump Juicycrunch Carrot&amp;quot;, &amp;quot;Plump Magebulb&amp;quot;, &amp;quot;Plump Mogu Pumpkin&amp;quot;, &amp;quot;Plump Pink Turnip&amp;quot;, &amp;quot;Plump Raptorleaf&amp;quot;, &amp;quot;Plump Red Blossom Leek&amp;quot;, 
	&amp;quot;Plump Scallions&amp;quot;, &amp;quot;Plump Snakeroot&amp;quot;, &amp;quot;Plump Songbell&amp;quot;, &amp;quot;Plump Striped Melon&amp;quot;, &amp;quot;Plump White Turnip&amp;quot;, &amp;quot;Plump Windshear Cactus&amp;quot;, &amp;quot;Plump Witchberries&amp;quot; }
	local Tangled = {
	&amp;quot;Tangled Enigma Seed&amp;quot;, &amp;quot;Tangled Green Cabbage&amp;quot;, &amp;quot;Tangled Jade Squash&amp;quot;, &amp;quot;Tangled Juicycrunch Carrot&amp;quot;, &amp;quot;Tangled Magebulb&amp;quot;, &amp;quot;Tangled Mogu Pumpkin&amp;quot;, &amp;quot;Tangled Pink Turnip&amp;quot;, &amp;quot;Tangled Raptorleaf&amp;quot;, 
	&amp;quot;Tangled Red Blossom Leek&amp;quot;, &amp;quot;Tangled Scallions&amp;quot;, &amp;quot;Tangled Snakeroot&amp;quot;, &amp;quot;Tangled Songbell&amp;quot;, &amp;quot;Tangled StTangledd Melon&amp;quot;, &amp;quot;Tangled White Turnip&amp;quot;, &amp;quot;Tangled Windshear Cactus&amp;quot;, &amp;quot;Tangled Witchberries&amp;quot; }
	local Infested = {
	&amp;quot;Infested Enigma Seed&amp;quot;, &amp;quot;Infested Green Cabbage&amp;quot;, &amp;quot;Infested Jade Squash&amp;quot;, &amp;quot;Infested Juicycrunch Carrot&amp;quot;, &amp;quot;Infested Magebulb&amp;quot;, &amp;quot;Infested Mogu Pumpkin&amp;quot;, &amp;quot;Infested Pink Turnip&amp;quot;, &amp;quot;Infested Raptorleaf&amp;quot;, 
	&amp;quot;Infested Red Blossom Leek&amp;quot;, &amp;quot;Infested Scallions&amp;quot;, &amp;quot;Infested Snakeroot&amp;quot;, &amp;quot;Infested Songbell&amp;quot;, &amp;quot;Infested StInfestedd Melon&amp;quot;, &amp;quot;Infested White Turnip&amp;quot;, &amp;quot;Infested Windshear Cactus&amp;quot;, &amp;quot;Infested Witchberries&amp;quot; }
	local Parched = {
	&amp;quot;Parched Enigma Seed&amp;quot;, &amp;quot;Parched Green Cabbage&amp;quot;, &amp;quot;Parched Jade Squash&amp;quot;, &amp;quot;Parched Juicycrunch Carrot&amp;quot;, &amp;quot;Parched Magebulb&amp;quot;, &amp;quot;Parched Mogu Pumpkin&amp;quot;, &amp;quot;Parched Pink Turnip&amp;quot;, &amp;quot;Parched Raptorleaf&amp;quot;, 
	&amp;quot;Parched Red Blossom Leek&amp;quot;, &amp;quot;Parched Scallions&amp;quot;, &amp;quot;Parched Snakeroot&amp;quot;, &amp;quot;Parched Songbell&amp;quot;, &amp;quot;Parched StParchedd Melon&amp;quot;, &amp;quot;Parched White Turnip&amp;quot;, &amp;quot;Parched Windshear Cactus&amp;quot;, &amp;quot;Parched Witchberries&amp;quot; }
	local Growing = {
	&amp;quot;Growing Enigma Seed&amp;quot;, &amp;quot;Growing Green Cabbage&amp;quot;, &amp;quot;Growing Jade Squash&amp;quot;, &amp;quot;Growing Juicycrunch Carrot&amp;quot;, &amp;quot;Growing Magebulb&amp;quot;, &amp;quot;Growing Mogu Pumpkin&amp;quot;, &amp;quot;Growing Pink Turnip&amp;quot;, &amp;quot;Growing Raptorleaf&amp;quot;, 
	&amp;quot;Growing Red Blossom Leek&amp;quot;,	&amp;quot;Growing Scallions&amp;quot;, &amp;quot;Growing Snakeroot&amp;quot;, &amp;quot;Growing Songbell&amp;quot;, &amp;quot;Growing Striped Melon&amp;quot;, &amp;quot;Growing White Turnip&amp;quot;, &amp;quot;Growing Windshear Cactus&amp;quot;, &amp;quot;Growing Witchberries&amp;quot; }
	
	if PQR_PauseRotation == nil then PQR_PauseRotation = 0
	elseif PQR_PauseRotation &amp;gt; GetTime() then return true
	else PQR_PauseRotation = 0 end
	
	-- will destroy any targeted plant if Left Shift and Alt key is down and you have a Dented Shovel
	if Alpha_Farm_DestroyPlant_Enable
	and GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;
	and GetItemCount(89880,false,false) &amp;gt; 0
	and Alpha_HotKeys(Alpha_Farm_DestroyPlant_key) then
		for i = 1, #Growing do
			if UnitName(&amp;quot;target&amp;quot;) == Growing[i] then
				UseItemByName(89880)
				return true
	end	end	end
	
	-- will force target tilled soil
	if Alpha_Farm_TargetTilledSoil
	and GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;
	and Alpha_HotKeys(Alpha_Farm_TargetTilledSoil_key) then
		TargetUnit(&amp;quot;Tilled Soil&amp;quot;)
		return true
	end
	
	-- If you are in Sunsong Ranch and dont have Master Plow it will till the soil
	if Alpha_Farm_TillSoil
	and GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then 
		InteractUnit(&amp;quot;Untilled Soil&amp;quot;) 
	end
	
	-- If you are in Sunsong Ranch it will activate the Occupied Soil allows main rotation to kill.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then	 
		InteractUnit(&amp;quot;Occupied Soil&amp;quot;)
		TargetUnit(&amp;quot;Squatting Virmen&amp;quot;)
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Squatting Virmen&amp;quot; then
			TargetUnit(&amp;quot;Squatting Virmen&amp;quot;)
	end	end
	
	-- If you are in Sunsong Ranch it will eliminate all Parched Plants in range if you have a watering can.
	if Alpha_Farm_UseWateringCan
	and GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;
	and GetItemCount(79104,false,false) &amp;gt; 0 then
		for i=1,#Parched do 
			TargetUnit(Parched[i]) 
		end
		if GetItemCount(79104,false,false) &amp;gt; 0 then 
			for i=1, #Parched do
				if UnitName(&amp;quot;target&amp;quot;) == Parched[i] then 
					UseItemByName(79104)
	end	end	end	end
	
	-- If you are in Sunsong Ranch it will eliminate all Infested Plants in range if you have a bug spryer.
	if Alpha_Farm_UseBugSpray
	and GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;
	and GetItemCount(80513,false,false) &amp;gt; 0 then
		for i=1,#Infested do 
			TargetUnit(Infested[i]) 
		end
		if GetItemCount(80513,false,false) &amp;gt; 0 then 
			for i=1, #Infested do
				if UnitName(&amp;quot;target&amp;quot;) == Infested[i] then
					UseItemByName(80513)
	end	end	end	end
	
	-- If you are in Sunsong Ranch it will eliminate all Encroaching Weed plants in range.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#weed do 
			InteractUnit(weed[i]) 
		end
		if PQR_SpellAvailable(115857) then
			CastSpellByID(115857)
	end end
	
	-- If you are in Sunsong Ranch it will eliminate all Runted Plants in range.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#runty do 
			TargetUnit(runty[i]) 
		end
		for i=1,#runty do 
			if UnitName(&amp;quot;target&amp;quot;) == runty[i] then
				if getRunty then
					getRunty = false
					jumpRunty = true
					InteractUnit(runty[i])
					PQR_PauseRotation = GetTime() + 1.25
					return true
				elseif jumpRunty then
					PQR_PauseRotation = GetTime() + 1
					jumpRunty = false
					getRunty = true
					JumpOrAscendStart()
					dontAscendStop = false
					return true
				end				
			elseif dontAscendStop == false then
				AscendStop()
				dontAscendStop = true
	end end	end
	
	-- If you are in Sunsong Ranch it will eliminate all wild Plants in range.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#wild do 
			InteractUnit(wild[i]) 
		end
		if UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(116084) and PQR_SpellAvailable(116069) then
			CastSpellByID(116069)
		elseif PQR_SpellAvailable(116073) then
			CastSpellByID(116073)
	end	end
	
	-- If you are in Sunsong Ranch it will activate the Alluring Plants allows main rotation to kill.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then	
		for i=1,#Alluring do 
			InteractUnit(Alluring[i])
		end
		TargetUnit(&amp;quot;Swooping Plainshawk&amp;quot;)
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Swooping Plainshawk&amp;quot; then
			TargetUnit(&amp;quot;Swooping Plainshawk&amp;quot;)
	end	end
	
	-- If you are in Sunsong Ranch it will activate the Wiggling Plants allows main rotation to kill.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#Wiggling do 
			InteractUnit(Wiggling[i])
		end
		TargetUnit(&amp;quot;Voracious Virmen&amp;quot;)
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Voracious Virmen&amp;quot; then
			TargetUnit(&amp;quot;Voracious Virmen&amp;quot;)
	end	end
	
	-- If you are in Sunsong Ranch it will collect the Bursting Plants for you.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#Bursting do 
			InteractUnit(Bursting[i])
	end	end
	
	-- If you are in Sunsong Ranch it will collect the Ripe Plants for you.
	if Alpha_Farm_HarvestPlant
	and GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;
	and Alpha_HotKeys(Alpha_Farm_HarvestPlant_key) then
		for i=1,#Ripe do 
			InteractUnit(Ripe[i])
	end	end
	
	-- If you are in Sunsong Ranch it will collect the Plump Plants for you.
	if Alpha_Farm_HarvestPlant
	and GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;
	and Alpha_HotKeys(Alpha_Farm_HarvestPlant_key) then
		for i=1,#Plump do 
			InteractUnit(Plump[i])
	end	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alpha Trade Chat</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not Alpha_TradeChat_Enable then return false end
if AlphaTrade_SpamProtect == nil then AlphaTrade_SpamProtect = 0 end
if AlphaTrade_PostsSent == nil then AlphaTrade_PostsSent = 0 end
if AlphaTrade_LastNextPost == nil then AlphaTrade_LastNextPost = 0 end
if AlphaTrade_PrintTime == nil then AlphaTrade_PrintTime = 0 end
if not AlphaTrade_Frame_Set then
	AlphaTrade_WhispersReceived = 0
	AlphaTrade_Whispers = {}
	AlphaTrade_Frame = CreateFrame(&amp;apos;Frame&amp;apos;)
	AlphaTrade_Frame:RegisterEvent(&amp;quot;CHAT_MSG_WHISPER&amp;quot;)
	function AlphaTrade_Frame_OnEvent(self, event, ...)
		if (event==&amp;quot;CHAT_MSG_WHISPER&amp;quot;) then
		local arg1,arg2 = ...
			AlphaTrade_WhispersReceived = AlphaTrade_WhispersReceived + 1
			table.insert(AlphaTrade_Whispers, {Msg = arg1, Author = arg2})
	end	end
	AlphaTrade_Frame:SetScript(&amp;quot;OnEvent&amp;quot;, AlphaTrade_Frame_OnEvent)
	AlphaTrade_Frame_Set = true
end

if AlphaTrade_SpamProtect &amp;lt; GetTime() or (Alpha_TradeChat_ForceSend and Alpha_HotKeys(Alpha_TradeChat_ForceSend_key)) then
	AlphaTrade_SpamProtect = GetTime() + Alpha_TradeChat_Delay
	AlphaTrade_PostsSent = AlphaTrade_PostsSent + 1
	for i = 1, #Alpha_TradeChat_Channel do
		RunMacroText(&amp;quot;/&amp;quot;..Alpha_TradeChat_Channel[i]..&amp;quot; &amp;quot;..Alpha_TradeChat_Message)
end end

if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
	local AlphaTrade_NextPost = AlphaTrade_SpamProtect - GetTime()
	local AlphaTrade_NextPost1, AlphaTrade_NextPost2 = strsplit(&amp;quot;.&amp;quot;, AlphaTrade_NextPost)
	if AlphaTrade_NextPost1 ~= AlphaTrade_LastNextPost then
		AlphaTrade_LastNextPost = AlphaTrade_NextPost1
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Next Post in: &amp;quot;..AlphaTrade_NextPost1..&amp;quot;s, Posts Sent: &amp;quot;..AlphaTrade_PostsSent..&amp;quot;, Whispers Received: &amp;quot;..AlphaTrade_WhispersReceived, nil, &amp;quot;79BAEC&amp;quot;)
end end

if Alpha_TradeChat_PrintWihsper and Alpha_HotKeys(Alpha_TradeChat_PrintWihsper_key) and GetTime() - AlphaTrade_PrintTime &amp;gt; 5 then
	AlphaTrade_PrintTime = GetTime()
	print(&amp;quot;Number of Whispers: &amp;quot;..AlphaTrade_WhispersReceived)
	print(&amp;quot;---- ---- ---- ----&amp;quot;)
	for i=1, #AlphaTrade_Whispers do
		print(&amp;quot;~~ Wihsper Number: &amp;quot;..i..&amp;quot; ~~&amp;quot;)
		print(&amp;quot;Author: &amp;quot;..AlphaTrade_Whispers[i].Author)
		print(&amp;quot;Message: &amp;quot;..AlphaTrade_Whispers[i].Msg)
	end
	print(&amp;quot;---- ---- ---- ----&amp;quot;)
	print(&amp;quot;End of Whisper&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alpha Bag Counter</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not Alpha_BagsFull_Enable then return false end
if PQR_Sleep == nil then PQR_Sleep = 0 end
if PQR_Sleep &amp;gt;= GetTime() then return false end
local PQR_bagsFull = 0
local PQR_freeSlots = 0
local PQR_totalBags = 0
for bag = 0, 4 do
	PQR_freeSlots = PQR_freeSlots + GetContainerNumFreeSlots(bag)
	if GetContainerNumSlots(bag) ~= 0 then
		PQR_totalBags = PQR_totalBags + 1
	end
	local PQR_slotsFull = 0
	for slot = 1, GetContainerNumSlots(bag) do
		local itemLink = GetContainerItemLink(bag,slot) or 0
		local _,itemCount = GetContainerItemInfo(bag,slot)
		local _,_,_,_,_,_,subclass, maxStack = GetItemInfo(itemLink)
		if itemLink ~= 0 and subclass == &amp;quot;Cooking&amp;quot; then
			if maxStack == itemCount then
				PQR_slotsFull = PQR_slotsFull + 1
			end
		elseif itemLink ~= 0 then
			PQR_slotsFull = PQR_slotsFull + 1
	end end
	if PQR_slotsFull == GetContainerNumSlots(bag) then
		PQR_bagsFull = PQR_bagsFull + 1
end end
if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Bag Slots left: &amp;quot;..PQR_freeSlots..&amp;quot;, Bags Full: &amp;quot;..PQR_bagsFull, nil, &amp;quot;79BAEC&amp;quot;)
end
if PQR_bagsFull == PQR_totalBags then
	print(&amp;quot;Bags are full&amp;quot;)
	ForceQuit()
end
PQR_Sleep = GetTime() + .5</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alpha PVP Flags</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not Alpha_Grab_PVP_Flags_Enable then return false end
local objects = { &amp;quot;Alliance Flag&amp;quot;, &amp;quot;Horde Flag&amp;quot;, &amp;quot;Netherstorm Flag&amp;quot;, &amp;quot;Fizzy Bubble&amp;quot; }
for i=1,#objects do 
	InteractUnit(objects[i])
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ Frame ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- 	NOT USED 
-- 	Moved to: PQR_Data_Alpha_Utilities.lua




if Alpha_Frame_First then return false end 
Alpha_Frame_First = true
--ChatFrame1:SetBackdrop({bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, tile = true, tileSize = 300})

Alpha_Colors = {
   blue        = &amp;quot;|cff&amp;quot;..&amp;quot;00aaff&amp;quot;,
   lightBlue   = &amp;quot;|cff&amp;quot;..&amp;quot;00ffff&amp;quot;,
   purple      = &amp;quot;|cff&amp;quot;..&amp;quot;00ffff&amp;quot;,
   white       = &amp;quot;|cff&amp;quot;..&amp;quot;B7B7B7&amp;quot;,
}

local ButtonValue = {
   [1] =     { Text = &amp;quot;|cffb048f8General|cffffffff&amp;quot;,       Icon = &amp;apos;nil&amp;apos;               },
   [2] =     { Text = &amp;quot;|cffb048f8Farming|cffffffff&amp;quot;,       Icon = &amp;quot;FarmingIcon&amp;quot;     },
   [3] =     { Text = &amp;quot;|cffb048f8Milling|cffffffff&amp;quot;,       Icon = &amp;quot;MillingIcon&amp;quot;     },
   [4] =     { Text = &amp;quot;|cffb048f8Prospecting|cffffffff&amp;quot;,   Icon = &amp;quot;ProspectingIcon&amp;quot; },
   [5] =     { Text = &amp;quot;|cffb048f8Disenchanting|cffffffff&amp;quot;, Icon = &amp;quot;DisenchantIcon&amp;quot;  },
   [6] =     { Text = &amp;quot;|cffb048f8Information|cffffffff&amp;quot;,   Icon = &amp;apos;nil&amp;apos;               },
   [7] =     { Text = &amp;quot;|cffb048f8Change log|cffffffff&amp;quot;,    Icon = &amp;apos;nil&amp;apos;               },
   [8] =     { Text = &amp;quot;|cffb048f8Help|cffffffff&amp;quot;,          Icon = &amp;apos;nil&amp;apos;               },
}
local IconsTable = {
   [1] = { FrameName = &amp;quot;FarmingIcon&amp;quot;,      Frame = &amp;quot;SettingFrame2&amp;quot;, IconTexture = &amp;quot;Interface/ICONS/INV_Misc_Shovel_01&amp;quot;      },
   [2] = { FrameName = &amp;quot;MillingIcon&amp;quot;,      Frame = &amp;quot;SettingFrame3&amp;quot;, IconTexture = &amp;quot;Interface/ICONS/Ability_Miling&amp;quot;             },
   [3] = { FrameName = &amp;quot;ProspectingIcon&amp;quot;,  Frame = &amp;quot;SettingFrame4&amp;quot;, IconTexture = &amp;quot;Interface/ICONS/INV_Misc_Gem_BloodGem_01&amp;quot;},
   [4] = { FrameName = &amp;quot;DisenchantIcon&amp;quot;,   Frame = &amp;quot;SettingFrame5&amp;quot;, IconTexture = &amp;quot;Interface/ICONS/INV_Enchant_Disenchant&amp;quot;  },
}
local ScrollValue = {
   [1] =     { Text = &amp;quot;|cFFFF6060   --All Previous Changes Plus Some|cffffffff&amp;quot;                                             },
   [2] =     { Text = &amp;quot;|cFFFFFAFAVersion 2.0.1 - Initial Release|cffffffff&amp;quot;                                                 },
   [3] =     { Text = &amp;quot;|cFFFF6060    --PQR_UnitFacing is checked by default.|cffffffff&amp;quot;                                      },
   [4] =     { Text = &amp;quot;|cFFFF6060    --Added checkboxes to select what form of Mangle/Shred to use.|cffffffff&amp;quot;            },
   [5] =     { Text = &amp;quot;|cFFFF6060   --Cooldown frame updated extensively with more functions.|cffffffff&amp;quot;                  },
   [6] =     { Text = &amp;quot;|cFFFF6060    --Look here for change logs of what has changed from the version before.|cffffffff&amp;quot;  },
   [7] =     { Text = &amp;quot;|cFFFF6060   --Information Frame coded into Nova Frame|cffffffff&amp;quot;                                   },
   [8] =     { Text = &amp;quot;|cFFFF6060    --Main frame not connected to anything and CD Checks not working.|cffffffff&amp;quot;          },
   [9] =     { Text = &amp;quot;|cFFFF6060    --Not Fully Functional As of yet.|cffffffff&amp;quot;                                           },
   [10] =    { Text = &amp;quot;|cFFFF6060   --Nova Frame Incorperated into profile|cffffffff&amp;quot;                                       },
   [11] =    { Text = &amp;quot;|cFFFFFAFAVersion 2.1&amp;quot;                                                                              },
   [12] =    { Text = &amp;quot;|cFFFF6060   --All Current Coded Working Changes moved over.|cffffffff&amp;quot;                              },
   [13] =    { Text = &amp;quot;|cFFFF6060   --Changed from Nova Frame to Custom Frame.|cffffffff&amp;quot;                                 },
   [14] =    { Text = &amp;quot;|cFFFFFAFAVersion 2.1.1&amp;quot;               }--[[,
    [15] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [16] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [17] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [18] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [19] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [20] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [21] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [22] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [23] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [24] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [25] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [26] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [27] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [28] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [29] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [30] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [31] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [32] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [33] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [34] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [35] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [36] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     },
    [37] =     { Text = &amp;quot;|cFFFFFAFAAbilities|cffffffff&amp;quot;     }]]--
}

local FarmingSettingsList = {
   [1]    =    {    text = Alpha_Colors.white..&amp;quot;Enable Farming&amp;quot;,            Enable = true    },
   [2]    =    {    text = Alpha_Colors.white..&amp;quot;Plant Seed&amp;quot;,                Enable = true    },
   [3]    =    {    text = Alpha_Colors.white..&amp;quot;Till Soil&amp;quot;,                 Enable = false   },
   [4]    =    {    text = Alpha_Colors.white..&amp;quot;Use Bug Spray&amp;quot;,             Enable = false   },
   [5]    =    {    text = Alpha_Colors.white..&amp;quot;Use Watering Can&amp;quot;,          Enable = false   },
   [6]    =    {    text = Alpha_Colors.white..&amp;quot;Force Target Tilled Soil&amp;quot;,  Enable = true    },
   [7]    =    {    text = Alpha_Colors.white..&amp;quot;Harvest Plant&amp;quot;,             Enable = true    },
   [8]    =    {    text = Alpha_Colors.white..&amp;quot;Destroy Targeted Plant&amp;quot;,    Enable = true    },
}

local PlantSeedMenu = {
   { text = &amp;quot;Select an Seed&amp;quot;,          isTitle = true},
   { text = &amp;quot;Enigma Seed&amp;quot;,             func = function() Alpha_Farm_Seed = 1;  SetPlantSeed(1)  end },
   { text = &amp;quot;Green Cabbage Seed&amp;quot;,      func = function() Alpha_Farm_Seed = 2;  SetPlantSeed(2)  end },
   { text = &amp;quot;Jade Squash Seed&amp;quot;,        func = function() Alpha_Farm_Seed = 3;  SetPlantSeed(3)  end },
   { text = &amp;quot;Juicycrunch Carrot Seed&amp;quot;, func = function() Alpha_Farm_Seed = 4;  SetPlantSeed(4)  end },
   { text = &amp;quot;Magebulb Seed&amp;quot;,           func = function() Alpha_Farm_Seed = 5;  SetPlantSeed(5)  end },
   { text = &amp;quot;Mogu Pumpkin Seed&amp;quot;,       func = function() Alpha_Farm_Seed = 6;  SetPlantSeed(6)  end },
   { text = &amp;quot;Pink Turnip Seed&amp;quot;,        func = function() Alpha_Farm_Seed = 7;  SetPlantSeed(7)  end },
   { text = &amp;quot;Raptorleaf Seed&amp;quot;,         func = function() Alpha_Farm_Seed = 8;  SetPlantSeed(8)  end },
   { text = &amp;quot;Red Blossom Leek Seed&amp;quot;,   func = function() Alpha_Farm_Seed = 9;  SetPlantSeed(9)  end },
   { text = &amp;quot;Scallion Seed&amp;quot;,           func = function() Alpha_Farm_Seed = 10; SetPlantSeed(10) end },
   { text = &amp;quot;Snakeroot Seed&amp;quot;,          func = function() Alpha_Farm_Seed = 11; SetPlantSeed(11) end },
   { text = &amp;quot;Songbell Seed&amp;quot;,           func = function() Alpha_Farm_Seed = 12; SetPlantSeed(12) end },
   { text = &amp;quot;Striped Melon Seed&amp;quot;,      func = function() Alpha_Farm_Seed = 13; SetPlantSeed(13) end },
   { text = &amp;quot;White Turnip Seed&amp;quot;,       func = function() Alpha_Farm_Seed = 14; SetPlantSeed(14) end },
   { text = &amp;quot;Windshear Cactus Seed&amp;quot;,   func = function() Alpha_Farm_Seed = 15; SetPlantSeed(15) end },
   { text = &amp;quot;Witchberry Seed&amp;quot;,         func = function() Alpha_Farm_Seed = 16; SetPlantSeed(16) end },
}

local MillingSettingsList = {
   [1]    =    {    text = Alpha_Colors.white..&amp;quot;Enable Milling&amp;quot;,        Enable = true    },
   [2]    =    {    text = Alpha_Colors.white..&amp;quot;Mill MoP Herbs&amp;quot;,        Enable = true    },
   [3]    =    {    text = Alpha_Colors.white..&amp;quot;Mill Cata Herbs&amp;quot;,       Enable = true    },
   [4]    =    {    text = Alpha_Colors.white..&amp;quot;Mill WotLK Herbs&amp;quot;,      Enable = true    },
   [5]    =    {    text = Alpha_Colors.white..&amp;quot;Mill BC Herbs&amp;quot;,         Enable = true    },
   [6]    =    {    text = Alpha_Colors.white..&amp;quot;Mill Vanilla Herbs&amp;quot;,    Enable = true    },
   [7]    =    {    text = Alpha_Colors.white..&amp;quot;Pause Milling&amp;quot;,         Enable = true    },
}

local ProspectingSettingsList = {
   [1]    =    {    text = Alpha_Colors.white..&amp;quot;Enable Prospecting&amp;quot;,        Enable = true    },
   [2]    =    {    text = Alpha_Colors.white..&amp;quot;Prospect MoP Herbs&amp;quot;,        Enable = true    },
   [3]    =    {    text = Alpha_Colors.white..&amp;quot;Prospect Cata Herbs&amp;quot;,       Enable = true    },
   [4]    =    {    text = Alpha_Colors.white..&amp;quot;Prospect WotLK Herbs&amp;quot;,      Enable = true    },
   [5]    =    {    text = Alpha_Colors.white..&amp;quot;Prospect BC Herbs&amp;quot;,         Enable = true    },
   [6]    =    {    text = Alpha_Colors.white..&amp;quot;Prospect Vanilla Herbs&amp;quot;,    Enable = true    },
   [7]    =    {    text = Alpha_Colors.white..&amp;quot;Pause Prospecting&amp;quot;,         Enable = true    },
}

local DisenchantingSettingsList = {
   [1]    =    {    text = Alpha_Colors.white..&amp;quot;Enable Disenchanting&amp;quot;,        Enable = true    },
   [2]    =    {    text = Alpha_Colors.white..&amp;quot;J.C. Neck &amp; Ring (|cff0080ffBlues|cffffffff)&amp;quot;,        Enable = true    },
   [3]    =    {    text = Alpha_Colors.white..&amp;quot;J.C. Neck &amp; Ring (|cff1eff00Greens|cffffffff)&amp;quot;,       Enable = true    },
   [4]    =    {    text = Alpha_Colors.white..&amp;quot;Tailor Wrists&amp;quot;,                  Enable = true    },
   [5]    =    {    text = Alpha_Colors.white..&amp;quot;Custom Disenchant&amp;quot;,           Enable = false   },
   [6]    =    {    text = Alpha_Colors.white..&amp;quot;Test Custom Disenchant&amp;quot;,      Enable = true    },
   [7]    =    {    text = Alpha_Colors.white..&amp;quot;Pause Disenchanting&amp;quot;,         Enable = true    },
}

local HotKeyTable = {
   [1]    =    { text = Alpha_Colors.white..&amp;quot;Left Shift&amp;quot;,      value = 1    },
   [2]    =    { text = Alpha_Colors.white..&amp;quot;Left Control&amp;quot;,    value = 2    },
   [3]    =    { text = Alpha_Colors.white..&amp;quot;Left Alt&amp;quot;,        value = 4    },
   [4]    =    { text = Alpha_Colors.white..&amp;quot;Right Shift&amp;quot;,     value = 8    },
   [5]    =    { text = Alpha_Colors.white..&amp;quot;Right Control&amp;quot;,   value = 16   },
   [6]    =    { text = Alpha_Colors.white..&amp;quot;Right Alt&amp;quot;,       value = 32   },
}

------------------------------------------------------------------
--                   Settings Button Creation                   --
------------------------------------------------------------------
Frame = CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;Frame&amp;apos;, UIParent, &amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
Frame:SetSize(300,30)
Frame:SetPoint(&amp;quot;TOP&amp;quot;, 0, 6)
Frame.text = Frame:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
Frame.text:SetText(&amp;quot;|cff00aaffAlpha Utilitie Settings&amp;quot;)
Frame.text:SetPoint(&amp;quot;CENTER&amp;quot;)
Frame:RegisterForClicks(&amp;quot;LeftButtonDown&amp;quot;)
Frame:SetScript(&amp;apos;OnClick&amp;apos;,
   function() 
      if Frame.Settings:IsVisible() then
         Frame.Settings:Hide()
      else
         Frame.Settings:Show()
      end 
end )
Frame:Show()

------------------------------------------------------------------
--                     Main Frame Creation                      --
------------------------------------------------------------------
Frame.Settings = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;apos;Frame.Settings&amp;apos;, Frame)
Frame.Settings:SetSize(305,400)
Frame.Settings:SetPoint(&amp;quot;TOP&amp;quot;, Frame, 0, -25)
Frame.Settings:SetBackdrop({
      bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, 
      edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;, 
      tile = true, tileSize = 300, edgeSize = 16, 
      insets = { left = 4, right = 4, top = 4, bottom = 4 }
});
Frame.Settings:SetBackdropColor(0,0,0,.93)
Frame.Settings:EnableMouse(true)
Frame.Settings:Hide()

Frame.Settings.BackButton =  CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;Frame.Settings.BackButton&amp;apos;, Frame.Settings,&amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
Frame.Settings.BackButton:SetSize(75,20)
Frame.Settings.BackButton:SetPoint(&amp;quot;BOTTOMRIGHT&amp;quot;, -7, 6)
Frame.Settings.BackButton:RegisterForClicks(&amp;quot;LeftButtonDown&amp;quot;)
Frame.Settings.BackButton:SetScript(&amp;apos;OnClick&amp;apos;, 
   function(self) 
      Frame.Settings.BackButton:Hide()
      Frame.ButtonFrame:Show()
      for i=1, #ButtonValue do
         _G[&amp;quot;SettingFrame&amp;quot;..i]:Hide()
      end
      for i=1, #IconsTable do
         _G[IconsTable[i].FrameName..&amp;quot;Icon&amp;quot;]:UnlockHighlight() 
      end
end)
Frame.Settings.BackButton.text = Frame.Settings.BackButton:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
Frame.Settings.BackButton.text:SetText(&amp;quot;|cffB7B7B7Back&amp;quot;)
Frame.Settings.BackButton.text:SetPoint(&amp;quot;CENTER&amp;quot;)
Frame.Settings.BackButton:Hide()

Frame.ButtonFrame = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;Frame.ButtonFrame&amp;quot;, Frame.Settings)
Frame.ButtonFrame:SetSize(300,400)
Frame.ButtonFrame:SetPoint(&amp;quot;TOP&amp;quot;, Frame, 0, -25)
Frame.ButtonFrame:Show()

HotKeyFrame = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;HotKeyFrame&amp;quot;, Frame.Settings)

local ButtonOffSet =  25
for i=1, #ButtonValue do
   local OptionsName = &amp;quot;SettingFrame&amp;quot;..tonumber(i)
   Frame.Options = CreateFrame(&amp;quot;Frame&amp;quot;, OptionsName, Frame.Settings)
   Frame.Options:SetSize(300,370)
   Frame.Options:SetPoint(&amp;quot;TOP&amp;quot;, Frame, 0, -25)
   Frame.Options:SetID(i)
   Frame.Options:SetBackdrop({
         bgFile = &amp;quot;Interface/Tooltips/UI-Tooltip-Background&amp;quot;, 
         edgeFile = &amp;quot;Interface/Tooltips/UI-Tooltip-Border&amp;quot;, 
         tile = true, tileSize = 16, edgeSize = 16, 
         insets = { left = 4, right = 4, top = 4, bottom = 4 }
   });
   Frame.Options:SetBackdropColor(0,0,0,0)
   Frame.Options:SetBackdropBorderColor(0,0,0,0)  
   Frame.Options:Hide()
   
   local ButtonName = &amp;quot;SettingButtonFrame.Button&amp;quot;..tonumber(i)
   ButtonOffSet = ButtonOffSet - 45
   Frame.ButtonFrame.Button = CreateFrame(&amp;quot;Button&amp;quot;, ButtonName, Frame.ButtonFrame)
   Frame.ButtonFrame.Button:SetSize(275,40)
   Frame.ButtonFrame.Button:SetID(i)
   Frame.ButtonFrame.Button:SetHighlightTexture(&amp;quot;Interface/\WorldStateFrame/WORLDSTATEFINALSCORE-HIGHLIGHT&amp;quot;, &amp;apos;ADD&amp;apos;)
   Frame.ButtonFrame.Button:SetPoint(&amp;quot;TOP&amp;quot;, 0, ButtonOffSet)
   Frame.ButtonFrame.Button.text = Frame.ButtonFrame.Button:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;PVPInfoTextFont&amp;quot;)
   Frame.ButtonFrame.Button.text:SetText(ButtonValue[i].Text)
   Frame.ButtonFrame.Button.text:SetPoint(&amp;quot;CENTER&amp;quot;)
   Frame.ButtonFrame.Button:Show()
   Frame.ButtonFrame.Button:RegisterForClicks(&amp;quot;LeftButtonDown&amp;quot;)
   Frame.ButtonFrame.Button:SetScript(&amp;apos;OnClick&amp;apos;,
      function(self)
         Frame.ButtonFrame:Hide()
         Frame.Settings.BackButton:Show()
         Frame.Settings.BackButton:Hide()
         Frame.Settings.BackButton:Show()
         _G[&amp;quot;SettingFrame&amp;quot;..self:GetID()]:Show()
         for i=1, #IconsTable do
            _G[IconsTable[i].FrameName..&amp;quot;Icon&amp;quot;]:UnlockHighlight() 
         end
		-- if _G[ButtonValue[i].Icon..&amp;quot;Icon&amp;quot;] ~= nil then
		--	_G[ButtonValue[i].Icon..&amp;quot;Icon&amp;quot;]:LockHighlight()
		--end
   end )
end 

local IconFrameOffSet = 100
for i=1, #IconsTable do 
   IconFrameOffSet = IconFrameOffSet - 100
   IconFrame = CreateFrame(&amp;quot;Frame&amp;quot;, IconsTable[i].FrameName, Frame.Settings)
   IconFrame:SetFrameLevel(15)
   IconFrame:SetSize(100,100)
   IconFrame:SetPoint(&amp;quot;TOPLEFT&amp;quot;, Frame.Settings, &amp;quot;TOPLEFT&amp;quot;, -80, IconFrameOffSet )
   IconFrame:SetBackdrop({
         bgFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Dragon&amp;quot;,
   });
   local iconName = IconsTable[i].FrameName..&amp;quot;Icon&amp;quot;
   IconFrame_icon = CreateFrame(&amp;quot;Button&amp;quot;, iconName, _G[IconsTable[i].FrameName])
   IconFrame_icon:SetFrameLevel(1)
   IconFrame_icon:SetSize(65,65)
   IconFrame_icon:SetPoint(&amp;quot;CENTER&amp;quot;, _G[IconsTable[i].FrameName], &amp;quot;CENTER&amp;quot;, 6, 2)
   --IconFrame_icon:SetHighlightTexture(&amp;quot;Interface/CHATFRAME/UI-ChatIcon-BlinkHilight&amp;quot;)
   --IconFrame_icon:SetHighlightTexture(&amp;quot;Interface/BUTTONS/ButtonHilight-SquareQuickslot&amp;quot;)
   IconFrame_icon:SetHighlightTexture(&amp;quot;Interface/BUTTONS/CheckButtonHilight&amp;quot;) 
   IconFrame_icon:SetBackdrop({
         bgFile = IconsTable[i].IconTexture,
         edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;, 
         edgeSize = 20, sets = { left = 2, right = 2, top = 2, bottom = 2 }
   })
   IconFrame_icon:RegisterForClicks(&amp;quot;LeftButtonDown&amp;quot;)
   IconFrame_icon:SetScript(&amp;apos;OnClick&amp;apos;, 
      function(self) 
         for i=1, #IconsTable do
            _G[IconsTable[i].FrameName..&amp;quot;Icon&amp;quot;]:UnlockHighlight() 
         end
         if _G[IconsTable[i].Frame]:IsVisible() then
            for i=1, #ButtonValue do
               _G[&amp;quot;SettingFrame&amp;quot;..i]:Hide()
            end
            Frame.Settings.BackButton:Hide()
            Frame.ButtonFrame:Show()
            self:UnlockHighlight() 
         else
            for i=1, #ButtonValue do
               _G[&amp;quot;SettingFrame&amp;quot;..i]:Hide()
            end
            self:LockHighlight() 
            Frame.ButtonFrame:Hide()
            Frame.Settings.BackButton:Show()
            Frame.Settings.BackButton:Hide()
            Frame.Settings.BackButton:Show()
            _G[IconsTable[i].Frame]:Show()
         end
   end)
end

------------------------------------------------------------------
--                      Change Log Frame                        --
------------------------------------------------------------------
InfoFrame = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;InfoFrame&amp;quot;, SettingFrame7)
InfoFrame.width     = 260
InfoFrame.height    = 370

InfoFrame:SetSize(InfoFrame.width, InfoFrame.height)    
InfoFrame:SetPoint(&amp;quot;TOP&amp;quot;, SettingFrame7, -10, -20)
InfoFrame:SetBackdrop({
      tile         = true,
      tileSize     = 32,
      edgeSize     = 32,
      insets         = { left = 8, right = 8, top = 8, bottom = 8 }
}) 

InfoFrame.text = InfoFrame:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;PVPInfoTextFont&amp;quot;)
InfoFrame.text:SetText(&amp;quot;|cffb048f8Change log|cffffffff&amp;quot;)
InfoFrame.text:SetPoint(&amp;quot;TOP&amp;quot;, 0, 0)

--InfoFrame:SetBackdropColor(0, 0, 0, 1)
InfoFrame:EnableMouse(true)
InfoFrame:EnableMouseWheel(true)
InfoFrame:Show()

if type(ScrollValue) ~= &amp;quot;nil&amp;quot; then
   -- ScrollingMessageFrame
   local InfoMessage = CreateFrame(&amp;quot;ScrollingMessageFrame&amp;quot;, InfoMessage, InfoFrame)
   InfoMessage:SetPoint(&amp;quot;CENTER&amp;quot;, 0, 0 )
   InfoMessage:SetSize(InfoFrame.width, InfoFrame.height - 60)
   InfoMessage:SetFontObject(GameFontWhite)
   InfoMessage:SetJustifyH(&amp;quot;LEFT&amp;quot;)
   InfoMessage:SetHyperlinksEnabled(true)
   InfoMessage:SetIndentedWordWrap(true)
   InfoMessage:SetFading(false)
   InfoMessage:SetInsertMode(&amp;quot;TOP&amp;quot;)
   InfoMessage:SetMaxLines(#(ScrollValue))
   
   InfoMessage:Clear()
   for i=1, #ScrollValue do
      InfoMessage:AddMessage(ScrollValue[i].Text)
   end
   -------------------------------------------------------------------------------
   -- Scroll bar
   -------------------------------------------------------------------------------
   local ScrollBar = CreateFrame(&amp;quot;Slider&amp;quot;, &amp;quot;ScrollBar&amp;quot;, InfoFrame, &amp;quot;UIPanelScrollBarTemplate&amp;quot;)
   
   ScrollBar:ClearAllPoints()    
   ScrollBar:SetPoint(&amp;quot;RIGHT&amp;quot;, SettingFrame7, &amp;quot;RIGHT&amp;quot;, 0, -25)    
   ScrollBar:SetSize(30, InfoFrame.height - 75)    
   ScrollBar:SetMinMaxValues(0, #(ScrollValue) - 1)
   ScrollBar:SetValueStep(1)
   ScrollBar:SetScript(&amp;quot;OnValueChanged&amp;quot;, function(self, value)        
         InfoMessage:SetScrollOffset(value)
   end)
   
   ScrollBar:SetValue(0)
   
   InfoFrame:SetScript(&amp;quot;OnMouseWheel&amp;quot;, function(self, delta)
         
         local cur_val = ScrollBar:GetValue()
         local min_val, max_val = ScrollBar:GetMinMaxValues()
         
         if delta &amp;lt; 0 and cur_val &amp;lt; max_val then
            cur_val = math.min(max_val, cur_val + 1)
            ScrollBar:SetValue(cur_val)            
         elseif delta &amp;gt; 0 and cur_val &amp;gt; min_val then
            cur_val = math.max(min_val, cur_val - 1)
            ScrollBar:SetValue(cur_val)        
         end    
   end)
end

------------------------------------------------------------------
--                        Farming Frame                         --
------------------------------------------------------------------    
FarmFrame = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;FarmFrame&amp;quot;, SettingFrame2)
FarmFrame:ClearAllPoints()
FarmFrame:SetSize(300,400)
FarmFrame:SetPoint(&amp;quot;TOPLEFT&amp;quot;, SettingFrame2, 0, -20)
FarmFrame.text = FarmFrame:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;PVPInfoTextFont&amp;quot;)
FarmFrame.text:SetAllPoints()
FarmFrame.text:SetJustifyV(&amp;quot;TOP&amp;quot;)
FarmFrame.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
FarmFrame.text:SetText(&amp;quot;|cffb048f8Farming Settings|cffffffff&amp;quot;)

local SettingNamePoint = -40
for i=1, #FarmingSettingsList do
   local frameName = &amp;apos;FarmSetting&amp;apos;..tonumber(i)
   SettingNamePoint = SettingNamePoint - 25
   if i == 3 or i == 7 or i == 8 then
      SettingNamePoint = SettingNamePoint - 25
   end
   FarmSetting = CreateFrame(&amp;quot;Frame&amp;quot;, frameName, SettingFrame2)
   FarmSetting:ClearAllPoints()
   FarmSetting:SetHeight(20)
   FarmSetting:SetWidth(200)
   FarmSetting:SetPoint(&amp;quot;TOP&amp;quot;, -30,SettingNamePoint)
   FarmSetting:SetID(i)
   FarmSetting.text = FarmSetting:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   FarmSetting.text:SetAllPoints()
   FarmSetting.text:SetJustifyV(&amp;quot;LEFT&amp;quot;)
   FarmSetting.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   FarmSetting.text:SetText(FarmingSettingsList[i].text)        
   
   local ButtonName = &amp;quot;FarmButon&amp;quot;..tonumber(i)
   FarmSetting.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, SettingFrame2, &amp;quot;UICheckButtonTemplate&amp;quot;)
   FarmSetting.button:ClearAllPoints()
   FarmSetting.button:SetPoint(&amp;quot;TOP&amp;quot;, 90, SettingNamePoint)
   FarmSetting.button:SetHeight(20)
   FarmSetting.button:SetWidth(20)
   FarmSetting.button:SetID(i)
   FarmSetting.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   FarmSetting.button:SetChecked(FarmingSettingsList[i].Enable)
   FarmSetting.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
            print(tostring(self)..&amp;quot;: &amp;quot;..tostring(self:GetChecked()))
         else
            self:SetChecked(true)
            print(tostring(self)..&amp;quot;: &amp;quot;..tostring(self:GetChecked()))
         end
   end)
   FarmSetting.button:Show()
end
function SetPlantSeed(num)
   FarmSetting.button2.text:SetText(Alpha_Colors.white..&amp;quot;Planting Seed: &amp;quot;..PlantSeedMenu[num+1].text)
   Alpha_Farm_Seed = num + 1
   print(Alpha_Colors.lightBlue..Alpha_Farm_Seed)
end
FarmSetting.Menu = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;FarmSetting.Menu&amp;quot;, SettingFrame2, &amp;quot;UIDropDownMenuTemplate&amp;quot;)
DropDownList1MenuBackdrop:SetBackdropColor(0,0,0,1)
DropDownList1MenuBackdrop:SetBackdropBorderColor(0,0,0,20)
FarmSetting.button2 = CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;FarmSetting.button2&amp;apos;, SettingFrame2, &amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
FarmSetting.button2:SetSize(260,20) --160
FarmSetting.button2:SetPoint(&amp;quot;TOP&amp;quot;, FarmFrame, 0, -95 )
FarmSetting.button2:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
FarmSetting.button2.text = FarmSetting.button2:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
if Alpha_Farm_Seed ~= nil then SetPlantSeed(Alpha_Farm_Seed) else FarmSetting.button2.text:SetText(Alpha_Colors.white..&amp;quot;Select a Seed to Plant!&amp;quot;) end
FarmSetting.button2.text:SetPoint(&amp;quot;CENTER&amp;quot;)    
FarmSetting.button2:SetScript(&amp;quot;OnClick&amp;quot;,
   function()
      if DropDownList1:IsVisible() then
         DropDownList1MenuBackdrop:Hide()
         DropDownList1:Hide()
      else
         EasyMenu(PlantSeedMenu, FarmSetting.Menu,FarmSetting.button2, 0 , 0, &amp;quot;MENU&amp;quot;)
      end
      HotKeyFrame.FarmB3:Hide()
      HotKeyFrame.FarmB4:Hide()
      HotKeyFrame.FarmB5:Hide()
end)
FarmSetting.button2:Show()

FarmSetting.button3 = CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;FarmSetting.button3&amp;apos;, SettingFrame2, &amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
FarmSetting.button3:SetSize(130,20)
FarmSetting.button3:SetPoint(&amp;quot;TOP&amp;quot;, FarmSetting6, 0, -25 )
FarmSetting.button3:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
FarmSetting.button3.text = FarmSetting.button3:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
FarmSetting.button3.text:SetText(Alpha_Colors.white..&amp;quot;^ Set HotKeys ^&amp;quot;)
FarmSetting.button3.text:SetPoint(&amp;quot;CENTER&amp;quot;)
FarmSetting.button3:Show()
FarmSetting.button3:SetScript(&amp;quot;OnClick&amp;quot;, 
   function() 
      if HotKeyFrame.FarmB3:IsVisible() then
         HotKeyFrame.FarmB3:Hide()
      else 
         HotKeyFrame.FarmB3:Show() 
      end
      HotKeyFrame.FarmB4:Hide()
      HotKeyFrame.FarmB5:Hide()
end)

HotKeyFrame.FarmB3 = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;apos;HotKeyFrame.FarmB3&amp;apos;, FarmSetting.button3)
HotKeyFrame.FarmB3:SetFrameLevel(15)
HotKeyFrame.FarmB3:SetSize(135,165)
HotKeyFrame.FarmB3:SetPoint(&amp;quot;TOP&amp;quot;, FarmSetting.button3, &amp;quot;CENTER&amp;quot;, 0, -7)
HotKeyFrame.FarmB3:SetBackdrop({
      bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, 
      edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;, 
      tile = true, tileSize = 300, edgeSize = 16, 
      insets = { left = 4, right = 4, top = 4, bottom = 4 }
});
HotKeyFrame.FarmB3:SetBackdropColor(0,0,0,1)
HotKeyFrame.FarmB3:Hide()

local HotKey_FarmB3F_SetPoint = 15
local HotKey_FarmB3B_SetPoint = 0
for i=1, #HotKeyTable do
   local frameName = &amp;apos;HotKeyFarmB3&amp;apos;..tonumber(i)
   HotKey_FarmB3F_SetPoint = HotKey_FarmB3F_SetPoint - 25
   HotKey_FarmB3B_SetPoint = HotKey_FarmB3B_SetPoint - 25
   HotKeyFrame.FarmB3.HotKey = CreateFrame(&amp;quot;Button&amp;quot;, frameName, HotKeyFrame.FarmB3)
   HotKeyFrame.FarmB3.HotKey:ClearAllPoints()
   HotKeyFrame.FarmB3.HotKey:SetHeight(20)
   HotKeyFrame.FarmB3.HotKey:SetWidth(110)
   HotKeyFrame.FarmB3.HotKey:SetPoint(&amp;quot;TOP&amp;quot;, -10, HotKey_FarmB3F_SetPoint)
   HotKeyFrame.FarmB3.HotKey:SetID(i)
   HotKeyFrame.FarmB3.HotKey:SetHighlightTexture(&amp;quot;Interface/PaperDollInfoFrame/UI-Character-Tab-Highlight&amp;quot;)
   HotKeyFrame.FarmB3.HotKey.text = HotKeyFrame.FarmB3.HotKey:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   HotKeyFrame.FarmB3.HotKey.text:SetAllPoints()
   HotKeyFrame.FarmB3.HotKey.text:SetJustifyV(&amp;quot;MIDDLE&amp;quot;)
   HotKeyFrame.FarmB3.HotKey.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   HotKeyFrame.FarmB3.HotKey.text:SetText(HotKeyTable[i].text)
   HotKeyFrame.FarmB3.HotKey:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.FarmB3.HotKey:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         local frame = _G[&amp;quot;FarmB3_HotKey_button&amp;quot;..self:GetID()]
         if frame:GetChecked() then
            frame:SetChecked(false)
         else
            frame:SetChecked(true)
         end
   end)
   
   local ButtonName = &amp;quot;FarmB3_HotKey_button&amp;quot;..tonumber(i)
   HotKeyFrame.FarmB3.HotKey.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, HotKeyFrame.FarmB3, &amp;quot;UICheckButtonTemplate&amp;quot;)
   HotKeyFrame.FarmB3.HotKey.button:ClearAllPoints()
   HotKeyFrame.FarmB3.HotKey.button:SetPoint(&amp;quot;TOPRIGHT&amp;quot;, -10, HotKey_FarmB3B_SetPoint + 15)
   HotKeyFrame.FarmB3.HotKey.button:SetHeight(20)
   HotKeyFrame.FarmB3.HotKey.button:SetWidth(20)
   HotKeyFrame.FarmB3.HotKey.button:SetID(i)
   HotKeyFrame.FarmB3.HotKey.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.FarmB3.HotKey.button:SetChecked(HotKeyTable[i].Enable)
   HotKeyFrame.FarmB3.HotKey.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
         else
            self:SetChecked(true)
         end
   end)
   HotKeyFrame.FarmB3.HotKey.button:Show()
end

FarmSetting.button4 = CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;FarmSetting.button4&amp;apos;, SettingFrame2, &amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
FarmSetting.button4:SetSize(130,20)
FarmSetting.button4:SetPoint(&amp;quot;TOP&amp;quot;, FarmSetting7, 0, -25 )
FarmSetting.button4:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
FarmSetting.button4.text = FarmSetting.button4:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
FarmSetting.button4.text:SetText(Alpha_Colors.white..&amp;quot;^ Set HotKeys ^&amp;quot;)
FarmSetting.button4.text:SetPoint(&amp;quot;CENTER&amp;quot;)  
FarmSetting.button4:Show()
FarmSetting.button4:SetScript(&amp;quot;OnClick&amp;quot;, 
   function() 
      if HotKeyFrame.FarmB4:IsVisible() then
         HotKeyFrame.FarmB4:Hide()
      else 
         HotKeyFrame.FarmB4:Show() 
      end
      HotKeyFrame.FarmB3:Hide()
      HotKeyFrame.FarmB5:Hide()
end)

HotKeyFrame.FarmB4 = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;apos;HotKeyFrame.FarmB4&amp;apos;, FarmSetting.button4)
HotKeyFrame.FarmB4:SetFrameLevel(15)
HotKeyFrame.FarmB4:SetSize(135,165)
HotKeyFrame.FarmB4:SetPoint(&amp;quot;TOP&amp;quot;, FarmSetting.button4, &amp;quot;CENTER&amp;quot;, 0, -7)
HotKeyFrame.FarmB4:SetBackdrop({
      bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, 
      edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;,
      tile = true, tileSize = 300, edgeSize = 16, 
      insets = { left = 4, right = 4, top = 4, bottom = 4 }
});
HotKeyFrame.FarmB4:SetBackdropColor(0,0,0,1)
HotKeyFrame.FarmB4:Hide()

local HotKey_FarmB4F_SetPoint = 15
local HotKey_FarmB4B_SetPoint = 0
for i=1, #HotKeyTable do
   local frameName = &amp;apos;HotKeyFarmB4&amp;apos;..tonumber(i)
   HotKey_FarmB4F_SetPoint = HotKey_FarmB4F_SetPoint - 25
   HotKey_FarmB4B_SetPoint = HotKey_FarmB4B_SetPoint - 25
   HotKeyFrame.FarmB4.HotKey = CreateFrame(&amp;quot;Button&amp;quot;, frameName, HotKeyFrame.FarmB4)
   HotKeyFrame.FarmB4.HotKey:ClearAllPoints()
   HotKeyFrame.FarmB4.HotKey:SetHeight(20)
   HotKeyFrame.FarmB4.HotKey:SetWidth(110)
   HotKeyFrame.FarmB4.HotKey:SetPoint(&amp;quot;TOP&amp;quot;, -10, HotKey_FarmB4F_SetPoint)
   HotKeyFrame.FarmB4.HotKey:SetID(i)
   HotKeyFrame.FarmB4.HotKey:SetHighlightTexture(&amp;quot;Interface/PaperDollInfoFrame/UI-Character-Tab-Highlight&amp;quot;)
   HotKeyFrame.FarmB4.HotKey.text = HotKeyFrame.FarmB4.HotKey:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   HotKeyFrame.FarmB4.HotKey.text:SetAllPoints()
   HotKeyFrame.FarmB4.HotKey.text:SetJustifyV(&amp;quot;MIDDLE&amp;quot;)
   HotKeyFrame.FarmB4.HotKey.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   HotKeyFrame.FarmB4.HotKey.text:SetText(HotKeyTable[i].text)
   HotKeyFrame.FarmB4.HotKey:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.FarmB4.HotKey:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         local frame = _G[&amp;quot;FarmB4_HotKey_button&amp;quot;..self:GetID()]
         if frame:GetChecked() then
            frame:SetChecked(false)
         else
            frame:SetChecked(true)
         end
   end)
   
   local ButtonName = &amp;quot;FarmB4_HotKey_button&amp;quot;..tonumber(i)
   HotKeyFrame.FarmB4.HotKey.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, HotKeyFrame.FarmB4, &amp;quot;UICheckButtonTemplate&amp;quot;)
   HotKeyFrame.FarmB4.HotKey.button:ClearAllPoints()
   HotKeyFrame.FarmB4.HotKey.button:SetPoint(&amp;quot;TOPRIGHT&amp;quot;, -10, HotKey_FarmB4B_SetPoint + 15)
   HotKeyFrame.FarmB4.HotKey.button:SetHeight(20)
   HotKeyFrame.FarmB4.HotKey.button:SetWidth(20)
   HotKeyFrame.FarmB4.HotKey.button:SetID(i)
   HotKeyFrame.FarmB4.HotKey.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.FarmB4.HotKey.button:SetChecked(HotKeyTable[i].Enable)
   HotKeyFrame.FarmB4.HotKey.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
         else
            self:SetChecked(true)
         end
   end)
   HotKeyFrame.FarmB4.HotKey.button:Show()
end

FarmSetting.button5 = CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;FarmSetting.button5&amp;apos;, SettingFrame2, &amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
FarmSetting.button5:SetSize(130,20)
FarmSetting.button5:SetPoint(&amp;quot;TOP&amp;quot;, FarmSetting8, 0, -25 )
FarmSetting.button5:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
FarmSetting.button5.text = FarmSetting.button5:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
FarmSetting.button5.text:SetText(Alpha_Colors.white..&amp;quot;^ Set HotKeys ^&amp;quot;)
FarmSetting.button5.text:SetPoint(&amp;quot;CENTER&amp;quot;)
FarmSetting.button5:Show()
FarmSetting.button5:SetScript(&amp;quot;OnClick&amp;quot;, 
   function() 
      if HotKeyFrame.FarmB5:IsVisible() then
         HotKeyFrame.FarmB5:Hide()
      else 
         HotKeyFrame.FarmB5:Show() 
      end
      HotKeyFrame.FarmB4:Hide()
      HotKeyFrame.FarmB3:Hide()
end)

HotKeyFrame.FarmB5 = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;apos;HotKeyFrame.FarmB5&amp;apos;, FarmSetting.button5)
HotKeyFrame.FarmB5:SetFrameLevel(15)
HotKeyFrame.FarmB5:SetSize(135,165)
HotKeyFrame.FarmB5:SetPoint(&amp;quot;TOP&amp;quot;, FarmSetting.button5, &amp;quot;CENTER&amp;quot;, 0, -7)
HotKeyFrame.FarmB5:SetBackdrop({
      bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, 
      edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;, 
      tile = true, tileSize = 300, edgeSize = 16, 
      insets = { left = 4, right = 4, top = 4, bottom = 4 }
});
HotKeyFrame.FarmB5:SetBackdropColor(0,0,0,1)
HotKeyFrame.FarmB5:Hide()

local HotKey_FarmB5F_SetPoint = 15
local HotKey_FarmB5B_SetPoint = 0
for i=1, #HotKeyTable do
   local frameName = &amp;apos;HotKeyFarmB5&amp;apos;..tonumber(i)
   HotKey_FarmB5F_SetPoint = HotKey_FarmB5F_SetPoint - 25
   HotKey_FarmB5B_SetPoint = HotKey_FarmB5B_SetPoint - 25
   HotKeyFrame.FarmB5.HotKey = CreateFrame(&amp;quot;Button&amp;quot;, frameName, HotKeyFrame.FarmB5)
   HotKeyFrame.FarmB5.HotKey:ClearAllPoints()
   HotKeyFrame.FarmB5.HotKey:SetHeight(20)
   HotKeyFrame.FarmB5.HotKey:SetWidth(110)
   HotKeyFrame.FarmB5.HotKey:SetPoint(&amp;quot;TOP&amp;quot;, -10, HotKey_FarmB5F_SetPoint)
   HotKeyFrame.FarmB5.HotKey:SetID(i)
   HotKeyFrame.FarmB5.HotKey:SetHighlightTexture(&amp;quot;Interface/PaperDollInfoFrame/UI-Character-Tab-Highlight&amp;quot;)
   HotKeyFrame.FarmB5.HotKey.text = HotKeyFrame.FarmB5.HotKey:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   HotKeyFrame.FarmB5.HotKey.text:SetAllPoints()
   HotKeyFrame.FarmB5.HotKey.text:SetJustifyV(&amp;quot;MIDDLE&amp;quot;)
   HotKeyFrame.FarmB5.HotKey.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   HotKeyFrame.FarmB5.HotKey.text:SetText(HotKeyTable[i].text)
   HotKeyFrame.FarmB5.HotKey:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.FarmB5.HotKey:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         local frame = _G[&amp;quot;FarmB5_HotKey_button&amp;quot;..self:GetID()]
         if frame:GetChecked() then
            frame:SetChecked(false)
         else
            frame:SetChecked(true)
         end
   end)
   
   local ButtonName = &amp;quot;FarmB5_HotKey_button&amp;quot;..tonumber(i)
   HotKeyFrame.FarmB5.HotKey.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, HotKeyFrame.FarmB5, &amp;quot;UICheckButtonTemplate&amp;quot;)
   HotKeyFrame.FarmB5.HotKey.button:ClearAllPoints()
   HotKeyFrame.FarmB5.HotKey.button:SetPoint(&amp;quot;TOPRIGHT&amp;quot;, -10, HotKey_FarmB5B_SetPoint + 15)
   HotKeyFrame.FarmB5.HotKey.button:SetHeight(20)
   HotKeyFrame.FarmB5.HotKey.button:SetWidth(20)
   HotKeyFrame.FarmB5.HotKey.button:SetID(i)
   HotKeyFrame.FarmB5.HotKey.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.FarmB5.HotKey.button:SetChecked(HotKeyTable[i].Enable)
   HotKeyFrame.FarmB5.HotKey.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
         else
            self:SetChecked(true)
         end
   end)
   HotKeyFrame.FarmB5.HotKey.button:Show()
end

------------------------------------------------------------------
--                        Milling Frame                         --
------------------------------------------------------------------  

MilFrame = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;MilFrame&amp;quot;, SettingFrame3)
MilFrame:ClearAllPoints()
MilFrame:SetSize(300,400)
MilFrame:SetPoint(&amp;quot;TOPLEFT&amp;quot;, SettingFrame2, 0, -20)
MilFrame.text = MilFrame:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;PVPInfoTextFont&amp;quot;)
MilFrame.text:SetAllPoints()
MilFrame.text:SetJustifyV(&amp;quot;TOP&amp;quot;)
MilFrame.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
MilFrame.text:SetText(&amp;quot;|cffb048f8Milling Settings|cffffffff&amp;quot;)

local SettingNamePoint = -40
for i=1, #MillingSettingsList do
   local frameName = &amp;apos;MilSetting&amp;apos;..tonumber(i)
   SettingNamePoint = SettingNamePoint - 30
   --if i == 3 or i == 7 or i == 8 then
   --   SettingNamePoint = SettingNamePoint - 20
   --end
   MilSetting = CreateFrame(&amp;quot;Frame&amp;quot;, frameName, SettingFrame3)
   MilSetting:ClearAllPoints()
   MilSetting:SetHeight(20)
   MilSetting:SetWidth(200)
   MilSetting:SetPoint(&amp;quot;TOP&amp;quot;, -30, SettingNamePoint)
   MilSetting:SetID(i)
   MilSetting.text = MilSetting:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   MilSetting.text:SetAllPoints()
   MilSetting.text:SetJustifyV(&amp;quot;LEFT&amp;quot;)
   MilSetting.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   MilSetting.text:SetText(MillingSettingsList[i].text)        
   
   local ButtonName = &amp;quot;MilButon&amp;quot;..tonumber(i)
   MilSetting.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, SettingFrame3, &amp;quot;UICheckButtonTemplate&amp;quot;)
   MilSetting.button:ClearAllPoints()
   MilSetting.button:SetPoint(&amp;quot;TOP&amp;quot;, 90, SettingNamePoint)
   MilSetting.button:SetHeight(20)
   MilSetting.button:SetWidth(20)
   MilSetting.button:SetID(i)
   MilSetting.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   MilSetting.button:SetChecked(MillingSettingsList[i].Enable)
   MilSetting.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
            print(tostring(self)..&amp;quot;: &amp;quot;..tostring(self:GetChecked()))
         else
            self:SetChecked(true)
            print(tostring(self)..&amp;quot;: &amp;quot;..tostring(self:GetChecked()))
         end
   end)
   MilSetting.button:Show()
end

MilSetting.button1 = CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;MilSetting.button1&amp;apos;, SettingFrame3, &amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
MilSetting.button1:SetSize(130,20)
MilSetting.button1:SetPoint(&amp;quot;TOP&amp;quot;, MilSetting7, 0, -25 )
MilSetting.button1:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
MilSetting.button1.text = MilSetting.button1:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
MilSetting.button1.text:SetText(Alpha_Colors.white..&amp;quot;^ Set HotKeys ^&amp;quot;)
MilSetting.button1.text:SetPoint(&amp;quot;CENTER&amp;quot;)
MilSetting.button1:Show()
MilSetting.button1:SetScript(&amp;quot;OnClick&amp;quot;, 
   function() 
      if HotKeyFrame.MilB1:IsVisible() then
         HotKeyFrame.MilB1:Hide()
      else 
         HotKeyFrame.MilB1:Show() 
      end
end)

HotKeyFrame.MilB1 = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;apos;HotKeyFrame.MilB1&amp;apos;, MilSetting.button1)
HotKeyFrame.MilB1:SetFrameLevel(15)
HotKeyFrame.MilB1:SetSize(135,165)
HotKeyFrame.MilB1:SetPoint(&amp;quot;TOP&amp;quot;, MilSetting.button1, &amp;quot;CENTER&amp;quot;, 0, -7)
HotKeyFrame.MilB1:SetBackdrop({
      bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, 
      edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;, 
      tile = true, tileSize = 300, edgeSize = 16, 
      insets = { left = 4, right = 4, top = 4, bottom = 4 }
});
HotKeyFrame.MilB1:SetBackdropColor(0,0,0,1)
HotKeyFrame.MilB1:Hide()

local HotKey_MilB1F_SetPoint = 15
local HotKey_MilB1B_SetPoint = 0
for i=1, #HotKeyTable do
   local frameName = &amp;apos;HotKeyMilB1&amp;apos;..tonumber(i)
   HotKey_MilB1F_SetPoint = HotKey_MilB1F_SetPoint - 25
   HotKey_MilB1B_SetPoint = HotKey_MilB1B_SetPoint - 25
   HotKeyFrame.MilB1.HotKey = CreateFrame(&amp;quot;Button&amp;quot;, frameName, HotKeyFrame.MilB1)
   HotKeyFrame.MilB1.HotKey:ClearAllPoints()
   HotKeyFrame.MilB1.HotKey:SetHeight(20)
   HotKeyFrame.MilB1.HotKey:SetWidth(110)
   HotKeyFrame.MilB1.HotKey:SetPoint(&amp;quot;TOP&amp;quot;, -10, HotKey_MilB1F_SetPoint)
   HotKeyFrame.MilB1.HotKey:SetID(i)
   HotKeyFrame.MilB1.HotKey:SetHighlightTexture(&amp;quot;Interface/PaperDollInfoFrame/UI-Character-Tab-Highlight&amp;quot;)
   HotKeyFrame.MilB1.HotKey.text = HotKeyFrame.MilB1.HotKey:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   HotKeyFrame.MilB1.HotKey.text:SetAllPoints()
   HotKeyFrame.MilB1.HotKey.text:SetJustifyV(&amp;quot;MIDDLE&amp;quot;)
   HotKeyFrame.MilB1.HotKey.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   HotKeyFrame.MilB1.HotKey.text:SetText(HotKeyTable[i].text)
   HotKeyFrame.MilB1.HotKey:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.MilB1.HotKey:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         local frame = _G[&amp;quot;MilB1_HotKey_button&amp;quot;..self:GetID()]
         if frame:GetChecked() then
            frame:SetChecked(false)
         else
            frame:SetChecked(true)
         end
   end)
   
   local ButtonName = &amp;quot;MilB1_HotKey_button&amp;quot;..tonumber(i)
   HotKeyFrame.MilB1.HotKey.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, HotKeyFrame.MilB1, &amp;quot;UICheckButtonTemplate&amp;quot;)
   HotKeyFrame.MilB1.HotKey.button:ClearAllPoints()
   HotKeyFrame.MilB1.HotKey.button:SetPoint(&amp;quot;TOPRIGHT&amp;quot;, -10, HotKey_MilB1B_SetPoint + 15)
   HotKeyFrame.MilB1.HotKey.button:SetHeight(20)
   HotKeyFrame.MilB1.HotKey.button:SetWidth(20)
   HotKeyFrame.MilB1.HotKey.button:SetID(i)
   HotKeyFrame.MilB1.HotKey.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.MilB1.HotKey.button:SetChecked(HotKeyTable[i].Enable)
   HotKeyFrame.MilB1.HotKey.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
         else
            self:SetChecked(true)
         end
   end)
   HotKeyFrame.MilB1.HotKey.button:Show()
end

------------------------------------------------------------------
--                      Prospecting Frame                       --
------------------------------------------------------------------  

ProspectFrame = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;ProspectFrame&amp;quot;, SettingFrame4)
ProspectFrame:ClearAllPoints()
ProspectFrame:SetSize(300,400)
ProspectFrame:SetPoint(&amp;quot;TOPLEFT&amp;quot;, SettingFrame4, 0, -20)
ProspectFrame.text = ProspectFrame:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;PVPInfoTextFont&amp;quot;)
ProspectFrame.text:SetAllPoints()
ProspectFrame.text:SetJustifyV(&amp;quot;TOP&amp;quot;)
ProspectFrame.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
ProspectFrame.text:SetText(&amp;quot;|cffb048f8Prospecting Settings|cffffffff&amp;quot;)

local SettingNamePoint = -40
for i=1, #ProspectingSettingsList do
   local frameName = &amp;apos;ProspectSetting&amp;apos;..tonumber(i)
   SettingNamePoint = SettingNamePoint - 30
   --if i == 3 or i == 7 or i == 8 then
   --   SettingNamePoint = SettingNamePoint - 20
   --end
   ProspectSetting = CreateFrame(&amp;quot;Frame&amp;quot;, frameName, SettingFrame4)
   ProspectSetting:ClearAllPoints()
   ProspectSetting:SetHeight(20)
   ProspectSetting:SetWidth(200)
   ProspectSetting:SetPoint(&amp;quot;TOP&amp;quot;, -30, SettingNamePoint)
   ProspectSetting:SetID(i)
   ProspectSetting.text = ProspectSetting:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   ProspectSetting.text:SetAllPoints()
   ProspectSetting.text:SetJustifyV(&amp;quot;LEFT&amp;quot;)
   ProspectSetting.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   ProspectSetting.text:SetText(ProspectingSettingsList[i].text)        
   
   local ButtonName = &amp;quot;ProspectButon&amp;quot;..tonumber(i)
   ProspectSetting.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, SettingFrame4, &amp;quot;UICheckButtonTemplate&amp;quot;)
   ProspectSetting.button:ClearAllPoints()
   ProspectSetting.button:SetPoint(&amp;quot;TOP&amp;quot;, 90, SettingNamePoint)
   ProspectSetting.button:SetHeight(20)
   ProspectSetting.button:SetWidth(20)
   ProspectSetting.button:SetID(i)
   ProspectSetting.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   ProspectSetting.button:SetChecked(ProspectingSettingsList[i].Enable)
   ProspectSetting.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
            print(tostring(self)..&amp;quot;: &amp;quot;..tostring(self:GetChecked()))
         else
            self:SetChecked(true)
            print(tostring(self)..&amp;quot;: &amp;quot;..tostring(self:GetChecked()))
         end
   end)
   ProspectSetting.button:Show()
end

ProspectSetting.button1 = CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;ProspectSetting.button1&amp;apos;, SettingFrame4, &amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
ProspectSetting.button1:SetSize(130,20)
ProspectSetting.button1:SetPoint(&amp;quot;TOP&amp;quot;, ProspectSetting7, 0, -25 )
ProspectSetting.button1:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
ProspectSetting.button1.text = ProspectSetting.button1:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
ProspectSetting.button1.text:SetText(Alpha_Colors.white..&amp;quot;^ Set HotKeys ^&amp;quot;)
ProspectSetting.button1.text:SetPoint(&amp;quot;CENTER&amp;quot;)
ProspectSetting.button1:Show()
ProspectSetting.button1:SetScript(&amp;quot;OnClick&amp;quot;, 
   function() 
      if HotKeyFrame.ProsB1:IsVisible() then
         HotKeyFrame.ProsB1:Hide()
      else 
         HotKeyFrame.ProsB1:Show() 
      end
end)

HotKeyFrame.ProsB1 = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;apos;HotKeyFrame.ProsB1&amp;apos;, ProspectSetting.button1)
HotKeyFrame.ProsB1:SetFrameLevel(15)
HotKeyFrame.ProsB1:SetSize(135,165)
HotKeyFrame.ProsB1:SetPoint(&amp;quot;TOP&amp;quot;, ProspectSetting.button1, &amp;quot;CENTER&amp;quot;, 0, -7)
HotKeyFrame.ProsB1:SetBackdrop({
      bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, 
      edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;, 
      tile = true, tileSize = 300, edgeSize = 16, 
      insets = { left = 4, right = 4, top = 4, bottom = 4 }
});
HotKeyFrame.ProsB1:SetBackdropColor(0,0,0,1)
HotKeyFrame.ProsB1:Hide()

local HotKey_ProsB1F_SetPoint = 15
local HotKey_ProsB1B_SetPoint = 0
for i=1, #HotKeyTable do
   local frameName = &amp;apos;HotKeyProsB1&amp;apos;..tonumber(i)
   HotKey_ProsB1F_SetPoint = HotKey_ProsB1F_SetPoint - 25
   HotKey_ProsB1B_SetPoint = HotKey_ProsB1B_SetPoint - 25
   HotKeyFrame.ProsB1.HotKey = CreateFrame(&amp;quot;Button&amp;quot;, frameName, HotKeyFrame.ProsB1)
   HotKeyFrame.ProsB1.HotKey:ClearAllPoints()
   HotKeyFrame.ProsB1.HotKey:SetHeight(20)
   HotKeyFrame.ProsB1.HotKey:SetWidth(110)
   HotKeyFrame.ProsB1.HotKey:SetPoint(&amp;quot;TOP&amp;quot;, -10, HotKey_ProsB1F_SetPoint)
   HotKeyFrame.ProsB1.HotKey:SetID(i)
   HotKeyFrame.ProsB1.HotKey:SetHighlightTexture(&amp;quot;Interface/PaperDollInfoFrame/UI-Character-Tab-Highlight&amp;quot;)
   HotKeyFrame.ProsB1.HotKey.text = HotKeyFrame.ProsB1.HotKey:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   HotKeyFrame.ProsB1.HotKey.text:SetAllPoints()
   HotKeyFrame.ProsB1.HotKey.text:SetJustifyV(&amp;quot;MIDDLE&amp;quot;)
   HotKeyFrame.ProsB1.HotKey.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   HotKeyFrame.ProsB1.HotKey.text:SetText(HotKeyTable[i].text)
   HotKeyFrame.ProsB1.HotKey:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.ProsB1.HotKey:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         local frame = _G[&amp;quot;ProsB1_HotKey_button&amp;quot;..self:GetID()]
         if frame:GetChecked() then
            frame:SetChecked(false)
         else
            frame:SetChecked(true)
         end
   end)
   
   local ButtonName = &amp;quot;ProsB1_HotKey_button&amp;quot;..tonumber(i)
   HotKeyFrame.ProsB1.HotKey.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, HotKeyFrame.ProsB1, &amp;quot;UICheckButtonTemplate&amp;quot;)
   HotKeyFrame.ProsB1.HotKey.button:ClearAllPoints()
   HotKeyFrame.ProsB1.HotKey.button:SetPoint(&amp;quot;TOPRIGHT&amp;quot;, -10, HotKey_ProsB1B_SetPoint + 15)
   HotKeyFrame.ProsB1.HotKey.button:SetHeight(20)
   HotKeyFrame.ProsB1.HotKey.button:SetWidth(20)
   HotKeyFrame.ProsB1.HotKey.button:SetID(i)
   HotKeyFrame.ProsB1.HotKey.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.ProsB1.HotKey.button:SetChecked(HotKeyTable[i].Enable)
   HotKeyFrame.ProsB1.HotKey.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
         else
            self:SetChecked(true)
         end
   end)
   HotKeyFrame.ProsB1.HotKey.button:Show()
end

------------------------------------------------------------------
--                      Disenchanting Frame                       --
------------------------------------------------------------------  

DisenchantFrame = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;DisenchantFrame&amp;quot;, SettingFrame5)
DisenchantFrame:ClearAllPoints()
DisenchantFrame:SetSize(300,400)
DisenchantFrame:SetPoint(&amp;quot;TOPLEFT&amp;quot;, SettingFrame5, 0, -20)
DisenchantFrame.text = DisenchantFrame:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;PVPInfoTextFont&amp;quot;)
DisenchantFrame.text:SetAllPoints()
DisenchantFrame.text:SetJustifyV(&amp;quot;TOP&amp;quot;)
DisenchantFrame.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
DisenchantFrame.text:SetText(&amp;quot;|cffb048f8Disenchanting Settings|cffffffff&amp;quot;)

local SettingNamePoint = -40
for i=1, #DisenchantingSettingsList do
   local frameName = &amp;apos;DisenchantSetting&amp;apos;..tonumber(i)
   SettingNamePoint = SettingNamePoint - 30
   if i == 6 then
      SettingNamePoint = SettingNamePoint - 60
   end
   DisenchantSetting = CreateFrame(&amp;quot;Frame&amp;quot;, frameName, SettingFrame5)
   DisenchantSetting:ClearAllPoints()
   DisenchantSetting:SetHeight(20)
   DisenchantSetting:SetWidth(200)
   DisenchantSetting:SetPoint(&amp;quot;TOP&amp;quot;, -30, SettingNamePoint)
   DisenchantSetting:SetID(i)
   DisenchantSetting.text = DisenchantSetting:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   DisenchantSetting.text:SetAllPoints()
   DisenchantSetting.text:SetJustifyV(&amp;quot;LEFT&amp;quot;)
   DisenchantSetting.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   DisenchantSetting.text:SetText(DisenchantingSettingsList[i].text)        
   
   local ButtonName = &amp;quot;DisenchantButon&amp;quot;..tonumber(i)
   DisenchantSetting.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, SettingFrame5, &amp;quot;UICheckButtonTemplate&amp;quot;)
   DisenchantSetting.button:ClearAllPoints()
   DisenchantSetting.button:SetPoint(&amp;quot;TOP&amp;quot;, 90, SettingNamePoint)
   DisenchantSetting.button:SetHeight(20)
   DisenchantSetting.button:SetWidth(20)
   DisenchantSetting.button:SetID(i)
   DisenchantSetting.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   DisenchantSetting.button:SetChecked(DisenchantingSettingsList[i].Enable)
   DisenchantSetting.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
            print(tostring(self)..&amp;quot;: &amp;quot;..tostring(self:GetChecked()))
         else
            self:SetChecked(true)
            print(tostring(self)..&amp;quot;: &amp;quot;..tostring(self:GetChecked()))
         end
   end)
   DisenchantSetting.button:Show()
end

DisenchantSetting.button1 = CreateFrame(&amp;quot;Button&amp;quot;, &amp;apos;DisenchantSetting.button1&amp;apos;, SettingFrame5, &amp;quot;UIGoldBorderButtonTemplate&amp;quot;)
DisenchantSetting.button1:SetSize(130,20)
DisenchantSetting.button1:SetPoint(&amp;quot;TOP&amp;quot;, DisenchantSetting7, 0, -25 )
DisenchantSetting.button1:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
DisenchantSetting.button1.text = DisenchantSetting.button1:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
DisenchantSetting.button1.text:SetText(Alpha_Colors.white..&amp;quot;^ Set HotKeys ^&amp;quot;)
DisenchantSetting.button1.text:SetPoint(&amp;quot;CENTER&amp;quot;)
DisenchantSetting.button1:Show()
DisenchantSetting.button1:SetScript(&amp;quot;OnClick&amp;quot;, 
   function() 
      if HotKeyFrame.DisB1:IsVisible() then
         HotKeyFrame.DisB1:Hide()
      else 
         HotKeyFrame.DisB1:Show() 
      end
end)

HotKeyFrame.DisB1 = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;apos;HotKeyFrame.DisB1&amp;apos;, DisenchantSetting.button1)
HotKeyFrame.DisB1:SetFrameLevel(15)
HotKeyFrame.DisB1:SetSize(135,165)
HotKeyFrame.DisB1:SetPoint(&amp;quot;TOP&amp;quot;, DisenchantSetting.button1, &amp;quot;CENTER&amp;quot;, 0, -7)
HotKeyFrame.DisB1:SetBackdrop({
      bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, 
      edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;, 
      tile = true, tileSize = 300, edgeSize = 16, 
      insets = { left = 4, right = 4, top = 4, bottom = 4 }
});
HotKeyFrame.DisB1:SetBackdropColor(0,0,0,1)
HotKeyFrame.DisB1:Hide()

local HotKey_DisB1F_SetPoint = 15
local HotKey_DisB1B_SetPoint = 0
for i=1, #HotKeyTable do
   local frameName = &amp;apos;HotKeyDisB1&amp;apos;..tonumber(i)
   HotKey_DisB1F_SetPoint = HotKey_DisB1F_SetPoint - 25
   HotKey_DisB1B_SetPoint = HotKey_DisB1B_SetPoint - 25
   HotKeyFrame.DisB1.HotKey = CreateFrame(&amp;quot;Button&amp;quot;, frameName, HotKeyFrame.DisB1)
   HotKeyFrame.DisB1.HotKey:ClearAllPoints()
   HotKeyFrame.DisB1.HotKey:SetHeight(20)
   HotKeyFrame.DisB1.HotKey:SetWidth(110)
   HotKeyFrame.DisB1.HotKey:SetPoint(&amp;quot;TOP&amp;quot;, -10, HotKey_DisB1F_SetPoint)
   HotKeyFrame.DisB1.HotKey:SetID(i)
   HotKeyFrame.DisB1.HotKey:SetHighlightTexture(&amp;quot;Interface/PaperDollInfoFrame/UI-Character-Tab-Highlight&amp;quot;)
   HotKeyFrame.DisB1.HotKey.text = HotKeyFrame.DisB1.HotKey:CreateFontString(nil, &amp;quot;BACKGROUND&amp;quot;, &amp;quot;GameFontNormal&amp;quot;)
   HotKeyFrame.DisB1.HotKey.text:SetAllPoints()
   HotKeyFrame.DisB1.HotKey.text:SetJustifyV(&amp;quot;MIDDLE&amp;quot;)
   HotKeyFrame.DisB1.HotKey.text:SetJustifyH(&amp;quot;CENTER&amp;quot;)
   HotKeyFrame.DisB1.HotKey.text:SetText(HotKeyTable[i].text)
   HotKeyFrame.DisB1.HotKey:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.DisB1.HotKey:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         local frame = _G[&amp;quot;DisB1_HotKey_button&amp;quot;..self:GetID()]
         if frame:GetChecked() then
            frame:SetChecked(false)
         else
            frame:SetChecked(true)
         end
   end)
   
   local ButtonName = &amp;quot;DisB1_HotKey_button&amp;quot;..tonumber(i)
   HotKeyFrame.DisB1.HotKey.button = CreateFrame(&amp;apos;Checkbutton&amp;apos;, ButtonName, HotKeyFrame.DisB1, &amp;quot;UICheckButtonTemplate&amp;quot;)
   HotKeyFrame.DisB1.HotKey.button:ClearAllPoints()
   HotKeyFrame.DisB1.HotKey.button:SetPoint(&amp;quot;TOPRIGHT&amp;quot;, -10, HotKey_DisB1B_SetPoint + 15)
   HotKeyFrame.DisB1.HotKey.button:SetHeight(20)
   HotKeyFrame.DisB1.HotKey.button:SetWidth(20)
   HotKeyFrame.DisB1.HotKey.button:SetID(i)
   HotKeyFrame.DisB1.HotKey.button:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
   HotKeyFrame.DisB1.HotKey.button:SetChecked(HotKeyTable[i].Enable)
   HotKeyFrame.DisB1.HotKey.button:SetScript(&amp;quot;PostClick&amp;quot;,
      function(self)
         if not self:GetChecked() then
            self:SetChecked(false)
         else
            self:SetChecked(true)
         end
   end)
   HotKeyFrame.DisB1.HotKey.button:Show()
end

DisCustomDE_Backdrop = CreateFrame(&amp;quot;Frame&amp;quot;, &amp;quot;DisCustomDE_Backdrop&amp;quot;, SettingFrame5)
DisCustomDE_Backdrop:SetHeight(60)
DisCustomDE_Backdrop:SetWidth(260)
DisCustomDE_Backdrop:SetPoint(&amp;quot;TOP&amp;quot;, 0, -215)
DisCustomDE_Backdrop:SetBackdrop({
      bgFile = &amp;quot;Interface/RAIDFRAME/UI-RaidFrame-GroupBg&amp;quot;, 
      edgeFile = &amp;quot;Interface/DialogFrame/UI-DialogBox-Gold-Border&amp;quot;, 
      tile = true, tileSize = 300, edgeSize = 16, 
      insets = { left = 4, right = 4, top = 4, bottom = 4 }
});
DisCustomDE_Backdrop:SetBackdropColor(0,0,0,1)

DisCustomDE_Scroll = CreateFrame(&amp;quot;ScrollFrame&amp;quot;, &amp;quot;DisCustomDE_Scroll&amp;quot;, SettingFrame5)
DisCustomDE_Scroll:SetPoint(&amp;quot;TOP&amp;quot;, 0, -225)
DisCustomDE_Scroll:SetHeight(40)
DisCustomDE_Scroll:SetWidth(250)
DisCustomDE_Scroll:SetScript(&amp;quot;OnMouseWheel&amp;quot;, 
   function(self, delta)
      local cur_val = DisCustomDE_Scroll:GetVerticalScroll()
      local min_val, max_val = 0, DisCustomDE_Scroll:GetVerticalScrollRange()
      if delta &amp;lt; 0 and cur_val &amp;lt; max_val then
         cur_val = math.min(max_val, cur_val + 12)
         DisCustomDE_Scroll:SetVerticalScroll(cur_val)            
      elseif delta &amp;gt; 0 and cur_val &amp;gt; min_val then
         cur_val = math.max(min_val, cur_val - 12)
         DisCustomDE_Scroll:SetVerticalScroll(cur_val)        
      end
end)
--DisCustomDE_Scroll:RegisterForClicks(&amp;apos;LeftButtonDown&amp;apos;)
DisCustomDE_Scroll:SetScript(&amp;quot;OnMouseDown&amp;quot;, 
   function()
      DisCustomDE:SetFocus()
end)
DisCustomDE = CreateFrame(&amp;quot;EditBox&amp;quot;, &amp;quot;DisCustomDE&amp;quot;, DisCustomDE_Scroll)
DisCustomDE:SetHeight(40)
DisCustomDE:SetWidth(250)
DisCustomDE:SetPoint(&amp;quot;CENTER&amp;quot;, DisCustomDE_Scroll, 0, 150)
DisCustomDE:SetMaxLetters(255)
DisCustomDE:SetFont(&amp;quot;Fonts\\ARIALN.TTF&amp;quot;, 12)
DisCustomDE:SetTextInsets(10, 10, 0, 0)
DisCustomDE:SetMaxLetters(255)
DisCustomDE:SetMultiLine(true)
DisCustomDE:SetAutoFocus(false)
DisCustomDE:SetScript(&amp;quot;OnEscapePressed&amp;quot;, 
   function(self)
      self:ClearFocus()
end)
DisCustomDE_Scroll:SetScrollChild(DisCustomDE)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></INTERRUPT>