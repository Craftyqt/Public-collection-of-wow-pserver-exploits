<?xml version="1.0" encoding="utf-8" ?><INTERRUPT><Ability><Name>FollowTanks</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_VachiusaGeneralUtility_FollowTanks_enable then
	if not HaveTank then
		function HaveTank()
			if IsInRaid() then
					group = &amp;quot;raid&amp;quot;
			elseif IsInGroup() then
					group = &amp;quot;party&amp;quot;
			end		
			if not UnitExists(&amp;quot;focus&amp;quot;) 
			and group then
				for i = 1, GetNumGroupMembers() do 
					local member = group..i
					if not UnitIsDeadOrGhost(member) then
						if UnitGroupRolesAssigned(member) == &amp;quot;TANK&amp;quot; 
						--and not UnitIsCharmed(member) 
						and UnitInRange(member) 
						and UnitIsConnected(member)
						and UnitCanCooperate(&amp;quot;player&amp;quot;,member) 
						and not PQR_IsOutOfSight(member) then    				
	    					return member 											
						end
					end
				end
			else
				if UnitExists(&amp;quot;focus&amp;quot;)			
				and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)							
				--and not UnitIsCharmed(&amp;quot;focus&amp;quot;) 
				and UnitInRange(&amp;quot;focus&amp;quot;) 
				and UnitIsConnected(&amp;quot;focus&amp;quot;)
				and UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;)			
				and not PQR_IsOutOfSight(&amp;quot;focus&amp;quot;) then
					member = &amp;quot;focus&amp;quot;
					return member
				end		
			end	   			
		end
	end
	
	if HaveTank() then		
		local px,py = GetPlayerMapPosition(&amp;quot;player&amp;quot;)
		local tx,ty = GetPlayerMapPosition(HaveTank())
		local angle = floor ( ( math.pi - math.atan2(px-tx,ty-py) - GetPlayerFacing() ) / (math.pi*2) * 32 + 0.5 ) % 32
		local dwt = PQR_UnitDistance2(HaveTank(),&amp;quot;player&amp;quot;)
		--local dwt = CheckInteractDistance(HaveTank(), 4) 	
		
	    if dwt   
	    and not IsMouselooking()   
	    then    	
			if dwt &amp;lt; PQI_VachiusaGeneralUtility_FollowTanks_value then     
	        	MoveForwardStop()
	        end
	    end
	    		
		if not IsMouselooking() 
		and px ~= 0 
		and tx ~= 0 then		
			if angle &amp;gt; 0 
			and angle &amp;lt; 16 then 
				TurnLeftStart() 				
			end
			if angle &amp;gt; 15 
			and angle &amp;lt; 31 then 
				TurnRightStart() 				
			end
	    	if angle == 31 
	    	or angle == 0 then 
	      		TurnRightStop() TurnLeftStop() 	      		
	      		if dwt 
	      		and not UnitChannelInfo(&amp;quot;player&amp;quot;) 
	      		and not UnitCastingInfo(&amp;quot;player&amp;quot;) 
	      		then
	      			if dwt &amp;gt;= PQI_VachiusaGeneralUtility_FollowTanks_value then       				
						if GetNumCompanions(&amp;quot;MOUNT&amp;quot;) &amp;gt; 0 then
							local isFlyable = IsFlyableArea()
							--local isFlying = IsFlying()
							--local isSwimming = IsSwimming()   
							local mounted = IsMounted()						   				
	      					local speed, groundSpeed, flightSpeed, swimSpeed = GetUnitSpeed(HaveTank())	      				  		
		      				local m,t,f=&amp;quot;mount&amp;quot;,{{},{}} 			
		      				for i=2,GetNumCompanions(m) do 
		      					tinsert(t[bit.band(2,select(6,GetCompanionInfo(m,i)))==0 and 1 or 2],i) 
							end
							local f=isFlyable and 2 or 1 	      				
		      				local mountid = t[f][random(#t[f])]
		      				if not UnitAffectingCombat(&amp;quot;player&amp;quot;) 
		      				and not UnitAffectingCombat(HaveTank()) then
			      				if speed 
			      				--and DelayCast(99995, 1.0) 		      		
			      				--and PQR_SpellAvailable(mountid) 		
			      				and not mounted	then 		      				
			      					if speed &amp;gt; 7 then --Normal Running: 7
			      						--random mount
			      						--CastSpellByName(tostring(GetSpellInfo(mountid),nil))	
			      						CallCompanion(m, mountid) 
			      					end
			      				end
			      			else
								--Dismount()
								DismissCompanion(m)
			      			end
			      		end      				
	      				MoveForwardStart() 	  
	      			end    			
	      		else 
	      			MoveForwardStop() 
	      		end
	    	end
	    	manualcontrol = false
		end
	end
		
	if not manualcontrol 
	and IsMouselooking() then
		manualcontrol = true 
		MoveForwardStop() 
		TurnRightStop() 
		TurnLeftStop() 
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ReadyCheck</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_VachiusaGeneralUtility_ReadyCheck_enable then
	if ReadyCheckFrame:IsVisible() 
	then
		if DelayCast(99993, PQI_VachiusaGeneralUtility_DelayAcceptTime_value) then
			RunMacroText(&amp;quot;/run ConfirmReadyCheck(1);ReadyCheckFrame:Hide()&amp;quot;)				
			PQR_WriteToChat(&amp;quot;\124cFFFF55FFAuto-accepted a Ready Check at &amp;quot; .. date(&amp;quot;%H:%M:%S (%I:%M:%S %p) Local Time&amp;quot;))							 
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>JoinQueue</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_VachiusaGeneralUtility_JoinQueue_enable then
	if LFGDungeonReadyPopup:IsVisible() 
	--or StaticPopup1:IsVisible() 
	then
		if DelayCast(99991, PQI_VachiusaGeneralUtility_DelayAcceptTime_value) then
			PQR_WriteToChat(&amp;quot;\124cFFFF55FFAuto-accepted a JoinQueue at &amp;quot; .. date(&amp;quot;%H:%M:%S (%I:%M:%S %p) Local Time&amp;quot;))							
			AcceptProposal() 
			RunMacroText(&amp;quot;/run LFGDungeonReadyPopup:Hide()&amp;quot;)	
			--RunMacroText(&amp;quot;/run StaticPopup1:Hide()&amp;quot;)	
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>RoleQueue</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_VachiusaGeneralUtility_RoleQueue_enable then
	local checkvisible = LFDRoleCheckPopup:IsVisible()
	local tank = LFDQueueFrameRoleButtonTank.checkButton:GetChecked()
	local healer = LFDQueueFrameRoleButtonHealer.checkButton:GetChecked()
	local dps = LFDQueueFrameRoleButtonDPS.checkButton:GetChecked()
	--RolePollPopup:IsVisible()
	
	if checkvisible 
	and (tank or healer or dps) 
	then
		if DelayCast(99992, PQI_VachiusaGeneralUtility_DelayAcceptTime_value) then
			LFDRoleCheckPopupAccept_OnClick()
			RunMacroText(&amp;quot;/run LFDRoleCheckPopup:Hide()&amp;quot;)
			PQR_WriteToChat(&amp;quot;\124cFFFF55FFAuto-accepted a RoleQueue at &amp;quot; .. date(&amp;quot;%H:%M:%S (%I:%M:%S %p) Local Time&amp;quot;))			
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>RolePoll</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_VachiusaGeneralUtility_RolePoll_enable then
	local rollcheckvisible = RolePollPopup:IsVisible()
	local specIndex = GetSpecialization()
	if specIndex then
		local _, _, _, _, _, specRole = GetSpecializationInfo(specIndex)
	end
	
	if rollcheckvisible 
	and specRole
	then
		if DelayCast(99994, PQI_VachiusaGeneralUtility_DelayAcceptTime_value) then
			UnitSetRole(&amp;quot;player&amp;quot;, specRole)
			RunMacroText(&amp;quot;/run RolePollPopup:Hide()&amp;quot;)
			PQR_WriteToChat(&amp;quot;\124cFFFF55FFAuto-accepted a RolePoll at &amp;quot; .. date(&amp;quot;%H:%M:%S (%I:%M:%S %p) Local Time&amp;quot;))			
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Resurect</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_VachiusaGeneralUtility_Resurect_enable then
	local bres = true 
	
	if RESURRECT:IsVisible() 
	or RESURRECT_NO_TIMER:IsVisible() 
	or RESURRECT_NO_SICKNESS:IsVisible() 
	then
		if (GetCorpseRecoveryDelay() == 0) then
			if ((UnitAffectingCombat(&amp;quot;target&amp;quot;)) and bres) or not (UnitAffectingCombat(&amp;quot;target&amp;quot;)) then
				if DelayCast(99995, PQI_VachiusaGeneralUtility_DelayAcceptTime_value) then
					PQR_WriteToChat(&amp;quot;\124cFFFF55FFAuto-accepted a Resurect at &amp;quot; .. date(&amp;quot;%H:%M:%S (%I:%M:%S %p) Local Time&amp;quot;))							
					AcceptResurrect();
					--StaticPopup_Hide(&amp;quot;RESURRECT_NO_TIMER&amp;quot;);
					RunMacroText(&amp;quot;/run RESURRECT:Hide();RESURRECT_NO_TIMER:Hide();RESURRECT_NO_SICKNESS:Hide()&amp;quot;)
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Summon</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_VachiusaGeneralUtility_Summon_enable then
	if CONFIRM_SUMMON:IsVisible() 
	and not UnitAffectingCombat(&amp;quot;player&amp;quot;)
	then
		if DelayCast(99996, PQI_VachiusaGeneralUtility_DelayAcceptTime_value) then
			PQR_WriteToChat(&amp;quot;\124cFFFF55FFAuto-accepted a Summon at &amp;quot; .. date(&amp;quot;%H:%M:%S (%I:%M:%S %p) Local Time&amp;quot;))							
			ConfirmSummon()
			RunMacroText(&amp;quot;/run CONFIRM_SUMMON:Hide()&amp;quot;)	
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PQI Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Variables
if PQInterfaceLoaded and PQInterfaceUpdated and PQInterfaceDataLoaded then
	--They have PQI and its up-to-date use PQI
	
	PQI_Variables_Loaded = PQI_VachiusaGeneralUtility_AutoOpenPQIOptions_enable
	VachiusaUtility_AutoOpenPQIOptions_enable = PQI_VachiusaGeneralUtility_AutoOpenPQIOptions_enable

	--Set PQI
	if not PQI_VachiusaUtility_Set and VachiusaUtility_AutoOpenPQIOptions_enable ~= nil then
		RunMacroText(&amp;quot;/PQI show&amp;quot;)
		RunMacroText(&amp;quot;/PQI config show&amp;quot;)
		RunMacroText(&amp;quot;/PQI config width 220&amp;quot;)
		if not VachiusaUtility_AutoOpenPQIOptions_enable then
		RunMacroText(&amp;quot;/PQI config hide&amp;quot;) end
		PQI_VachiusaUtility_Set = true
	end
end

--PQI is not loading variables instantly any more ?_? need to delay till they are loaded to avoid errors!
if PQI_Variables_Loaded == nil then
	--PQR_WriteToChat(&amp;quot;Error: &amp;quot;.PQI_VachiusaGeneralUtility_AutoOpenPQIOptions_enable, &amp;quot;Error&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Init --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	PQR_RotationStarted = false

	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Utilities Profile Verion - 2.1.02&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
	PQR_SwapCheckTimer = 0
end

	--Begin PQI
	if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
		PQInterfaceLoaded = true
		PQInterfaceVersion = (tonumber(GetAddOnMetadata(&amp;quot;PQInterface&amp;quot;, &amp;quot;Version&amp;quot;)))
		if PQInterfaceVersion &amp;gt;= 2.22 then
			PQInterfaceUpdated = true
		else 
			PQInterfaceUpdated = nil 
			PQR_WriteToChat(&amp;quot;Your PQI is not up to date. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true					
		end
	else 
		PQInterfaceLoaded = nil 
		PQR_WriteToChat(&amp;quot;Please download the latest version of PQI. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
		PQR_StopRotation()
		return true				
	end
		-- Load Data File
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == true then
			PQInterfaceDataLoaded = true
		else 
			PQInterfaceDataLoaded = false 
			PQR_WriteToChat(&amp;quot;You are missing PQR_PQI.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true		
		end		
	end	
	
	if not PQI_General_Utility_GUI_Loaded 
	and PQInterfaceLoaded 
	and PQInterfaceUpdated 
	and PQInterfaceDataLoaded then 	
		local config = {
			name	= &amp;apos;General Utility&amp;apos;,
			author	= &amp;apos;Vachiusa&amp;apos;,
			abilities = {
				-- General --
				{	name = &amp;quot;Auto Open PQI Options&amp;quot;,
					tooltip = &amp;quot;Auto Opens PQI Options for you, will only happen once per login.&amp;quot;,
					enable = true,
				},
				{ 	name = &amp;quot;Join Queue&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Join Queue&amp;quot;,
				},
				{ 	name = &amp;quot;Ready Check&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Ready Check&amp;quot;,
				},
				{ 	name = &amp;quot;Role Poll&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Role Poll&amp;quot;,
				},
				{ 	name = &amp;quot;Role Queue&amp;quot;,
					enable = true,
					tooltip = &amp;quot;Enables the use of Role Queue&amp;quot;,
				},								
				{ 	name = &amp;quot;Resurect&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Resurect&amp;quot;,
				},	
				{ 	name = &amp;quot;Summon&amp;quot;,
					enable = false,
					tooltip = &amp;quot;Enables the use of Summon&amp;quot;,
				},									
				{ 	name = &amp;quot;Follow Tanks&amp;quot;,	
					enable = true,
					tooltip = &amp;quot;Enables the use of Follow Tanks&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 10,
						step = 1,
						max = 40,
						min = 0,
						tooltip = &amp;quot;The distance between you and tank to follow at&amp;quot;,
					},
				},	
				{ 	name = &amp;quot;Delay Accept Time&amp;quot;,	
					enable = true,
					tooltip = &amp;quot;not work&amp;quot;,
					widget = { type = &amp;apos;numBox&amp;apos;,
						value = 5,
						step = 1,
						max = 20,
						min = 0,
						tooltip = &amp;quot;The delay time before accept pop at&amp;quot;,
					},
				},					
			},
			hotkeys = {
			},
		}
		PQI_General_Utility_GUI_Loaded = PQI:AddRotation(config)
	end		
	--End PQI

	--Functions
	function PQR_UnitDistance3(var1, var2)
		local a,b,c,d,e,f,g,h,i,j = GetAreaMapInfo(GetCurrentMapAreaID())
		local x1 , y1 = PQR_UnitInfo(var1)
		local x2 , y2 = PQR_UnitInfo(var2)
		if x1 and x2 and y1 and y2 and a and b and c and d and e and f and g and h and i and j then
			local w = (d - e)
			local h = (f - g)	
			local distance = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2)
			--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDistance: &amp;quot;..distance) 
			return distance
		else
			return PQR_UnitDistance(var1, var2)
		end
	end

	function PQR_UnitDistance2(var1, var2)
		local distance = false
		local a,b,c,d,e,f,g,h,i,j = GetAreaMapInfo(GetCurrentMapAreaID())
		--if a and b and c and d and e and f and g and h and i and j then		
		if a ~= nil and b ~= nil and c ~= nil and d ~= nil and e ~= nil and f ~= nil and g ~= nil and h ~= nil and i ~= nil and j ~= nil then
			local x1 , y1 = PQR_UnitInfo(var1)
			local x2 , y2 = PQR_UnitInfo(var2)
			--if x1 and x2 and y1 and y2 then
			if x1 ~= nil and x2 ~= nil and y1 ~= nil and y2 ~= nil then
				local w = (d - e)
				local h = (f - g)	
				local distance = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2)
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFDistance: &amp;quot;..distance) 
				return distance		
			end
		end
		return distance
	end

	if not CheckCastTime then
		CheckCastTime = {}
	end

	function DelayCast(spellid, dtime) -- SpellID of Spell To Check, delay time
		local mtime = dtime + 5 --max expire time
		local spellexist = false
		if dtime &amp;gt; 0 then
			if #CheckCastTime &amp;gt; 0 then
				for i=1, #CheckCastTime do
					if CheckCastTime[i].SpellID == spellid then
						spellexist = true
						if ((GetTime() - CheckCastTime[i].CastTime) &amp;gt; mtime) then
							--tremove(CheckCastTime, i)
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFTime: &amp;quot;..(GetTime() - CheckCastTime[i].CastTime)) 
							CheckCastTime[i].CastTime = GetTime()
							return false
						elseif ((GetTime() - CheckCastTime[i].CastTime) &amp;gt; dtime) then
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFTime2: &amp;quot;..(GetTime() - CheckCastTime[i].CastTime)) 
							CheckCastTime[i].CastTime = GetTime()
							return true
						else
							--PQR_WriteToChat(&amp;quot;\124cFFFF55FFTime3: &amp;quot;..(GetTime() - CheckCastTime[i].CastTime)) 
							return false
						end
					end
				end
				if not spellexist then
					table.insert(CheckCastTime, { SpellID = spellid, CastTime = GetTime() } )	
					return false	
				end
			else
				--PQR_WriteToChat(&amp;quot;\124cFFFF55FFTime4&amp;quot;) 
				table.insert(CheckCastTime, { SpellID = spellid, CastTime = GetTime() } )	
				return false	
			end
		else
			return true
		end
	end

	--if DelayCast(99987, 5) then	
		--PQR_WriteToChat(&amp;quot;\124cFFFF55FFAuto-accepted a test at &amp;quot; .. date(&amp;quot;%H:%M:%S (%I:%M:%S %p) Local Time&amp;quot;))			
	--end
		
	if not CheckCastTime2 then
		CheckCastTime2 = {}
	end

	function Nova_CheckLastCast(spellid, ytime) -- SpellID of Spell To Check, How long of a gap are you looking for?
		if ytime &amp;gt; 0 then
			if #CheckCastTime2 &amp;gt; 0 then
				for i=1, #CheckCastTime2 do
					if CheckCastTime2[i].SpellID == spellid then
						if GetTime() - CheckCastTime2[i].CastTime &amp;gt; ytime then
							CheckCastTime2[i].CastTime = GetTime()
							return true
						else
							return false
						end
					end
				end
			end
			table.insert(CheckCastTime2, { SpellID = spellid, CastTime = GetTime() } )
			return true
		elseif ytime &amp;lt;= 0 then
			return true
		end
		return false
	end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></INTERRUPT>