<?xml version="1.0" encoding="utf-8" ?><INTERRUPT><Ability><Name>-- Initialize --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Alpha_Interrupt_Init == nil then
	--TestComment
	Alpha_Interrupt_Init = true
	function PQR_InterruptSpell()
		local _, playerClass = UnitClass(&amp;quot;player&amp;quot;)
		
		if playerClass == &amp;quot;DEATHKNIGHT&amp;quot; then
            local mfStart, mfDuration = GetSpellCooldown(47528)
            local sStart, sDuration = GetSpellCooldown(47476)

            if ( GetSpellCooldown(47528) == 0 and GetSpellCooldown(47476) == 0 ) then --If both arent on CD then choose mind freeze
                return 47528
            elseif ( sStart &amp;gt; 0 and sDuration &amp;gt; 1.5 ) then --if Strangulate is on CD then choose mind freeze
                return 47528
            elseif ( mfStart &amp;gt; 0 and mfDuration &amp;gt; 1.5 ) then -- if mindfreeze is on cd then choose strangulate
                return 47476
            end
		elseif playerClass == &amp;quot;DRUID&amp;quot; then
			local catForm = UnitBuffID(&amp;quot;player&amp;quot;, 768)
			if IsPlayerSpell(106839) and IsSpellKnown(106839) and PQR_SpellAvailable(106839) then
				return 106839
			elseif catForm ~= nil then
				return 80965
			else
				return 80964
			end
		elseif playerClass == &amp;quot;HUNTER&amp;quot; then
			return 34490
		elseif playerClass == &amp;quot;MAGE&amp;quot; then
			return 2139
		elseif playerClass == &amp;quot;PALADIN&amp;quot; then
			return 96231
		elseif playerClass == &amp;quot;PRIEST&amp;quot; then
			return 15487
		elseif playerClass == &amp;quot;ROGUE&amp;quot; then
			return 1766
		elseif playerClass == &amp;quot;SHAMAN&amp;quot; then
			return 57994
		elseif playerClass == &amp;quot;WARLOCK&amp;quot; then
			if IsSpellKnown(115781, true) and PQR_SpellAvailable(115781) then
				return 115781
			else
				return 19647
			end
		elseif playerClass == &amp;quot;WARRIOR&amp;quot; then
			return 6552
		elseif playerClass == &amp;quot;MONK&amp;quot; then
			return 116705
		else
			return 0
		end
			--  --  PQI Settings   --  --
		if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
			RunMacroText(&amp;quot;/PQI show&amp;quot;)
			RunMacroText(&amp;quot;/PQI config show&amp;quot;)
			RunMacroText(&amp;quot;/PQI config width 250&amp;quot;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Variables: Interrupt --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- PQI is not loading variables instantly any more ?_? need to delay till they are loaded to avoid errors!
if PQInterfaceLoaded and PQInterfaceUpdated and PQInterfaceDataLoaded then
	PQI_AlphaInterrupt_Variables_Loaded = PQI_AlphaInterrupt_AlphaTargetInterrupt_enable else PQI_AlphaInterrupt_Variables_Loaded = true end
if PQI_AlphaInterrupt_Variables_Loaded == nil then return true end

if PQInterfaceLoaded and PQInterfaceUpdated and PQInterfaceDataLoaded then
-- PQI Variables
	AlphaInterrupt_AlphaTargetInterrupt_enable = PQI_AlphaInterrupt_AlphaTargetInterrupt_enable
	AlphaInterrupt_AlphaFocusInterrupt_enable = PQI_AlphaInterrupt_AlphaFocusInterrupt_enable
	AlphaInterrupt_AlphaMouseoverInterrupt_enable = PQI_AlphaInterrupt_AlphaMouseoverInterrupt_enable
	AlphaInterrupt_AlphaBossInterrupt_enable = PQI_AlphaInterrupt_AlphaBossInterrupt_enable
	AlphaInterrupt_AlphaArenaInterrupt_enable = PQI_AlphaInterrupt_AlphaArenaInterrupt_enable
	AlphaInterrupt_AlphaBattleGroundInterrupt_enable = PQI_AlphaInterrupt_AlphaBattleGroundInterrupt_enable
	AlphaInterrupt_RandomPercentage_enable = PQI_AlphaInterrupt_RandomPercentage_enable
	AlphaInterrupt_MinimumCastPercentage_enable = PQI_AlphaInterrupt_MinimumCastPercentage_enable
	if AlphaInterrupt_MinimumCastPercentage_enable then
		AlphaInterrupt_MinimumCastPercentage_value = PQI_AlphaInterrupt_MinimumCastPercentage_value
	else AlphaInterrupt_MaximumCastPercentage_enable = 30 end
	AlphaInterrupt_MaximumCastPercentage_enable = PQI_AlphaInterrupt_MaximumCastPercentage_enable
	if AlphaInterrupt_MaximumCastPercentage_enable then
	AlphaInterrupt_MaximumCastPercentage_value = PQI_AlphaInterrupt_MaximumCastPercentage_value
	else AlphaInterrupt_MaximumCastPercentage_value = 50 end
	AlphaInterrupt_RandomDelay_enable = PQI_AlphaInterrupt_RandomDelay_enable
	AlphaInterrupt_Minimumdelaytime_enable = PQI_AlphaInterrupt_MinimumDelaytime_enable
	if AlphaInterrupt_Minimumdelaytime_enable then
		AlphaInterrupt_Minimumdelaytime_value = PQI_AlphaInterrupt_MinimumDelaytime_value
	else AlphaInterrupt_Minimumdelaytime_value = 0.1 end
	AlphaInterrupt_Maximumdelaytime_enable = PQI_AlphaInterrupt_MaximumDelaytime_enable
	if AlphaInterrupt_Maximumdelaytime_enable then
		AlphaInterrupt_Maximumdelaytime_value = PQI_AlphaInterrupt_MaximumDelaytime_value
	else AlphaInterrupt_Maximumdelaytime_value = 0.8 end
	AlphaInterrupt_Ignorelist_enable = PQI_AlphaInterrupt_Ignorelist_enable
	AlphaInterrupt_Ignorelist_value = PQI_AlphaInterrupt_Ignorelist_value
	AlphaInterrupt_Ignorelist = &amp;quot;toIgnore = {&amp;quot;..AlphaInterrupt_Ignorelist_value..&amp;quot;}&amp;quot;
	AlphaInterrupt_TestIgnorelist_enable = PQI_AlphaInterrupt_TestIgnorelist_enable
	AlphaInterrupt_Instant_InterruptDelay = PQI_AlphaInterrupt_InstantDelaytime_value
	AlphaInterrupt_Instant_InterruptPercent = PQI_AlphaInterrupt_InstantCastPercentage_value
	AlphaInterrupt_InstantInterruptlist_enable = PQI_AlphaInterrupt_InstantInterruptlist_enable
	AlphaInterrupt_InstantInterruptlist_value = PQI_AlphaInterrupt_InstantInterruptlist_value
	AlphaInterrupt_Instantlist = &amp;quot;toInstantInterrupt = {&amp;quot;..AlphaInterrupt_InstantInterruptlist_value..&amp;quot;}&amp;quot;
	AlphaInterrupt_TestInstantInterruptlist_enable = PQI_AlphaInterrupt_TestInstantInterruptlist_enable
else
-- Default Variables (Change this if you dont want to use PQI)
-- true = enabled, false = disabled
	AlphaInterrupt_AlphaTargetInterrupt_enable = true
	AlphaInterrupt_AlphaFocusInterrupt_enable = true
	AlphaInterrupt_AlphaMouseoverInterrupt_enable = true
	AlphaInterrupt_AlphaBossInterrupt_enable = true
	AlphaInterrupt_AlphaArenaInterrupt_enable = true
	AlphaInterrupt_AlphaBattleGroundInterrupt_enable = false
		-- ~~BETA~~ Enables interrupting in battlegrounds by shuffling around your focus to the opposing team and 
		-- trying to keep it on targets that are within range to be interrupted. Take caution when using this as 
		-- if someone notices that you are changing your focus that much they may start to suspect things!
	AlphaInterrupt_RandomPercentage_enable = true
	AlphaInterrupt_MinimumCastPercentage_enable = true
	AlphaInterrupt_MinimumCastPercentage_value = 30
	AlphaInterrupt_MaximumCastPercentage_enable = true
	AlphaInterrupt_MaximumCastPercentage_value = 50
	AlphaInterrupt_RandomDelay_enable = true 
	AlphaInterrupt_Minimumdelaytime_enable = true
	AlphaInterrupt_Minimumdelaytime_value = 0.1
	AlphaInterrupt_Maximumdelaytime_enable = true
	AlphaInterrupt_Maximumdelaytime_value = 0.8
	AlphaInterrupt_Ignorelist_enable = false
	AlphaInterrupt_Ignorelist_value = &amp;apos;&amp;quot;Spell Name&amp;quot;, SpellID, &amp;quot;Spell Name&amp;quot;&amp;apos; -- Your ignore list
	AlphaInterrupt_Ignorelist = &amp;quot;toIgnore = {&amp;quot;..AlphaInterrupt_Ignorelist_value..&amp;quot;}&amp;quot; -- DO NOT change!
	AlphaInterrupt_TestIgnorelist_enable = false
	AlphaInterrupt_Instant_InterruptDelay = 0.05
	AlphaInterrupt_Instant_InterruptPercent = 10
	AlphaInterrupt_InstantInterruptlist_enable = false
	AlphaInterrupt_InstantInterruptlist_value = &amp;apos;&amp;quot;Spell Name&amp;quot;, SpellID, &amp;quot;Spell Name&amp;quot;&amp;apos; -- Your Instant Interrupt list
	AlphaInterrupt_Instantlist = &amp;quot;toInstantInterrupt = {&amp;quot;..AlphaInterrupt_InstantInterruptlist_value..&amp;quot;}&amp;quot; -- DO NOT change!
	AlphaInterrupt_TestInstantInterruptlist_enable = false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (Target)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AlphaInterrupt_stop()
or not AlphaInterrupt_AlphaTargetInterrupt_enable
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
or not PQR_SpellAvailable(PQR_InterruptSpell())
or UnitExists(&amp;quot;target&amp;quot;) == nil
then return false end

local customTarget = &amp;quot;target&amp;quot;
local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
local divineshield = UnitBuffID(customTarget,642)
local Inner_Focus = UnitBuffID(customTarget,89485)

if channelName ~= nil then
	--target is channeling a spell that is interruptable
	--load the channel variables into the cast variables to make logic a little easier.
	castName = channelName
	castStartTime = channelStartTime
	castEndTime = channelEndTime
	castInterruptable = channelInterruptable
end

--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
if castInterruptable == false then
	castInterruptable = true
else
	castInterruptable = false
end
	
--we can&amp;apos;t attack the target.
if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
	return false
end
	
--we can&amp;apos;t Interrupt when target has immunity.
if divineshield or Inner_Focus then
	return false
end
	
if castInterruptable then
	--target is casting something that is interruptable.
	--the following 2 variables are named logically... value is in seconds.
	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
	local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
	local castTime = castEndTime - castStartTime
	local currentPercent = timeSinceStart / castTime * 100000
	
	--make sure the interrupt spell is available
	local interruptSpell = PQR_InterruptSpell()
	if interruptSpell ~= 0 then
		local interruptName = GetSpellInfo(interruptSpell)
		if not PQR_SpellAvailable(interruptSpell) or IsSpellInRange(interruptName, customTarget) ~= 1 or SpellIsTargeting() then
			return false
		end
	else
		return false
	end
	
	--Ignore spells on Ignore list
	if AlphaInterrupt_Ignorelist_enable then
		Alpha_Deserialize(AlphaInterrupt_Ignorelist, &amp;quot;Ignore&amp;quot;)
		local unitname = GetUnitName(customTarget)
		local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
		for i = 1, #toIgnore do
			if type(toIgnore[i]) == &amp;quot;string&amp;quot; then
				if toIgnore[i] == castName then
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
					return false
				end
			elseif type(toIgnore[i]) == &amp;quot;number&amp;quot; then
				if (GetSpellInfo(toIgnore[i])) == castName then
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
					return false
				end
			end		
		end
	end
	
	--should we use InstantInterrupt delays or normal?
	if AlphaInterrupt_InstantInterruptlist_enable then
		Alpha_Deserialize(AlphaInterrupt_Instantlist, &amp;quot;Instant Interrupt&amp;quot;)
		local OnInstantlist = false
		for i = 1, #toInstantInterrupt do
			if type(toInstantInterrupt[i]) == &amp;quot;string&amp;quot; then
				if toInstantInterrupt[i] == castName then OnInstantlist = true end
			elseif type(toInstantInterrupt[i]) == &amp;quot;number&amp;quot; then
				if (GetSpellInfo(toInstantInterrupt[i]))== castName then OnInstantlist = true end
		end	end
		if OnInstantlist then
			if timeSinceStart - AlphaInterrupt_Instant_InterruptDelay &amp;lt; 0 then return false end
			if currentPercent &amp;lt; AlphaInterrupt_Instant_InterruptPercent then return false end		
		else
			--interrupt percentage check
			if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
			if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
				AlphaInterrupt_Protect1 = (GetTime()) + 1.5
				PQR_InterruptPercent = randompercentage()
			end
			if currentPercent &amp;lt; PQR_InterruptPercent then
				return false
			end
		
			--minimum interrupt time
			if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
			if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
				AlphaInterrupt_Protect2 = (GetTime()) + 1.5
				PQR_InterruptDelay = randomdelay()
			end
			if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
				return false
			end
		end	
	else
		--interrupt percentage check
		if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
		if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
			AlphaInterrupt_Protect1 = (GetTime()) + 1.5
			PQR_InterruptPercent = randompercentage()
		end
		if currentPercent &amp;lt; PQR_InterruptPercent then
			return false
		end
	
		--minimum interrupt time
		if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
		if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
			AlphaInterrupt_Protect2 = (GetTime()) + 1.5
			PQR_InterruptDelay = randomdelay()
		end
		if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
			return false
		end
	end

	--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
	if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
		if UnitClass(&amp;quot;player&amp;quot;) == &amp;quot;DEATHKNIGHT&amp;quot; then
			local name, _, _, count = UnitBuffID(&amp;quot;player&amp;quot;,114851)
			
			if PQR_InterruptSpell() ~= 47528 then
			 	for i = 1, 2 do
					if GetRuneType(i) == 1
					 and ( select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;gt; 0 ) then
						if (name ~= nil and count &amp;gt;= 5) then
							local unitname = GetUnitName(customTarget)
							local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
							PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname..&amp;quot; - Used: &amp;quot;..GetSpellInfo(45529), 20, &amp;quot;DC143C&amp;quot;)						
							CastSpellByName(GetSpellInfo(45529), &amp;quot;player&amp;quot;)
							CastSpellByID(interruptSpell, customTarget)
							return true
						end
					else
						return false
					end
				end
			elseif PQR_InterruptSpell() == 47528 then
				local unitname = GetUnitName(customTarget)
				local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
				PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
				CastSpellID(interruptSpell, customTarget)
				return true
			end
		else
			local unitname = GetUnitName(customTarget)
			local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
			PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
			CastSpellByID(interruptSpell, customTarget)
			return true
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (Focus)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AlphaInterrupt_stop()
or not AlphaInterrupt_AlphaFocusInterrupt_enable
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
or not PQR_SpellAvailable(PQR_InterruptSpell())
or UnitExists(&amp;quot;focus&amp;quot;) == nil
then return false end

local customTarget = &amp;quot;focus&amp;quot;
local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
local divineshield = UnitBuffID(customTarget,642)
local Inner_Focus = UnitBuffID(customTarget,89485)

if channelName ~= nil then
	--target is channeling a spell that is interruptable
	--load the channel variables into the cast variables to make logic a little easier.
	castName = channelName
	castStartTime = channelStartTime
	castEndTime = channelEndTime
	castInterruptable = channelInterruptable
end

--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
if castInterruptable == false then
	castInterruptable = true
else
	castInterruptable = false
end

--we can&amp;apos;t attack the target.
if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
	return false
end
	
--we can&amp;apos;t Interrupt when target has immunity.
if divineshield or Inner_Focus then
	return false
end
	
if castInterruptable then
	--target is casting something that is interruptable.
	--the following 2 variables are named logically... value is in seconds.
	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
	local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
	local castTime = castEndTime - castStartTime
	local currentPercent = timeSinceStart / castTime * 100000
	
	--make sure the interrupt spell is available
	local interruptSpell = PQR_InterruptSpell()
	if interruptSpell ~= 0 then
		
		local interruptName = GetSpellInfo(interruptSpell)
		if not PQR_SpellAvailable(interruptSpell) or IsSpellInRange(interruptName, customTarget) ~= 1 or SpellIsTargeting() then
			return false
		end
	else
		return false
	end
	
	--Ignore spells on Ignore list
	if AlphaInterrupt_Ignorelist_enable then
		Alpha_Deserialize(AlphaInterrupt_Ignorelist, &amp;quot;Ignore&amp;quot;)
		local unitname = GetUnitName(customTarget)
		local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
		for i = 1, #toIgnore do
			if type(toIgnore[i]) == &amp;quot;string&amp;quot; then
				if toIgnore[i] == castName then
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
					return false
				end
			elseif type(toIgnore[i]) == &amp;quot;number&amp;quot; then
				if (GetSpellInfo(toIgnore[i])) == castName then
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
					return false
				end
			end		
		end
	end
	
	--should we use InstantInterrupt delays or normal?
	if AlphaInterrupt_InstantInterruptlist_enable then
		Alpha_Deserialize(AlphaInterrupt_Instantlist, &amp;quot;Instant Interrupt&amp;quot;)
		local OnInstantlist = false
		for i = 1, #toInstantInterrupt do
			if type(toInstantInterrupt[i]) == &amp;quot;string&amp;quot; then
				if toInstantInterrupt[i] == castName then OnInstantlist = true end
			elseif type(toInstantInterrupt[i]) == &amp;quot;number&amp;quot; then
				if (GetSpellInfo(toInstantInterrupt[i]))== castName then OnInstantlist = true end
		end	end
		if OnInstantlist then
			if timeSinceStart - AlphaInterrupt_Instant_InterruptDelay &amp;lt; 0 then return false end
			if currentPercent &amp;lt; AlphaInterrupt_Instant_InterruptPercent then return false end		
		else
			--interrupt percentage check
			if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
			if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
				AlphaInterrupt_Protect1 = (GetTime()) + 1.5
				PQR_InterruptPercent = randompercentage()
			end
			if currentPercent &amp;lt; PQR_InterruptPercent then
				return false
			end
		
			--minimum interrupt time
			if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
			if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
				AlphaInterrupt_Protect2 = (GetTime()) + 1.5
				PQR_InterruptDelay = randomdelay()
			end
			if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
				return false
			end
		end	
	else
		--interrupt percentage check
		if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
		if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
			AlphaInterrupt_Protect1 = (GetTime()) + 1.5
			PQR_InterruptPercent = randompercentage()
		end
		if currentPercent &amp;lt; PQR_InterruptPercent then
			return false
		end
	
		--minimum interrupt time
		if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
		if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
			AlphaInterrupt_Protect2 = (GetTime()) + 1.5
			PQR_InterruptDelay = randomdelay()
		end
		if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
			return false
		end
	end

	--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
	--Nerder&amp;apos;s DK priority
	if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
		if UnitClass(&amp;quot;player&amp;quot;) == &amp;quot;DEATHKNIGHT&amp;quot; then
			local name, _, _, count = UnitBuffID(&amp;quot;player&amp;quot;,114851)
			
			if PQR_InterruptSpell() ~= 47528 then
			 	for i = 1, 2 do
					if GetRuneType(i) == 1
					 and ( select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;gt; 0 ) then
						if (name ~= nil and count &amp;gt;= 5) then
							local unitname = GetUnitName(customTarget)
							local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
							PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname..&amp;quot; - Used: &amp;quot;..GetSpellInfo(45529), 20, &amp;quot;DC143C&amp;quot;)						
							CastSpellByName(GetSpellInfo(45529), &amp;quot;player&amp;quot;)
							CastSpellByID(interruptSpell, customTarget)
							return true
						end
					else
						return false
					end
				end
			elseif PQR_InterruptSpell() == 47528 then
				local unitname = GetUnitName(customTarget)
				local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
				PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
				CastSpellID(interruptSpell, customTarget)
				return true
			end
		else
			local unitname = GetUnitName(customTarget)
			local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
			PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
			CastSpellByID(interruptSpell, customTarget)
			return true
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Focus</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (Arena)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AlphaInterrupt_stop()
or not AlphaInterrupt_AlphaArenaInterrupt_enable
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
or not PQR_SpellAvailable(PQR_InterruptSpell())
or IsActiveBattlefieldArena() == nil
then return false end

for i=1,5 do
	local customTarget = &amp;quot;arena&amp;quot;..i
	local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
	local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
	local divineshield = UnitBuffID(customTarget,642)
	local Inner_Focus = UnitBuffID(customTarget,89485)
	
	if UnitExists(customTarget) == nil then return false end
	
	if channelName ~= nil then
		--target is channeling a spell that is interruptable
		--load the channel variables into the cast variables to make logic a little easier.
		castName = channelName
		castStartTime = channelStartTime
		castEndTime = channelEndTime
		castInterruptable = channelInterruptable
	end
	
	--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
	if castInterruptable == false then
		castInterruptable = true
	else
		castInterruptable = false
	end
		
	--we can&amp;apos;t attack the target.
	if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
		return false
	end
		
	--we can&amp;apos;t Interrupt when target has immunity.
	if divineshield or Inner_Focus then
		return false
	end
		
	if castInterruptable then
		--target is casting something that is interruptable.
		--the following 2 variables are named logically... value is in seconds.
		local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
		local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
		local castTime = castEndTime - castStartTime
		local currentPercent = timeSinceStart / castTime * 100000
		
		--make sure the interrupt spell is available
		local interruptSpell = PQR_InterruptSpell()
		if interruptSpell ~= 0 then
			local interruptName = GetSpellInfo(interruptSpell)
			if not PQR_SpellAvailable(interruptSpell) or IsSpellInRange(interruptName, customTarget) ~= 1 or SpellIsTargeting() then
				return false
			end
		else
			return false
		end		
		
		--Ignore spells on Ignore list
		if AlphaInterrupt_Ignorelist_enable then
			Alpha_Deserialize(AlphaInterrupt_Ignorelist, &amp;quot;Ignore&amp;quot;)
			local unitname = GetUnitName(customTarget)
			local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
			for i = 1, #toIgnore do
				if type(toIgnore[i]) == &amp;quot;string&amp;quot; then
					if toIgnore[i] == castName then
						PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
						return false
					end
				elseif type(toIgnore[i]) == &amp;quot;number&amp;quot; then
					if (GetSpellInfo(toIgnore[i])) == castName then
						PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
						return false
					end
				end		
			end
		end
		
		--should we use InstantInterrupt delays or normal?
		if AlphaInterrupt_InstantInterruptlist_enable then
			Alpha_Deserialize(AlphaInterrupt_Instantlist, &amp;quot;Instant Interrupt&amp;quot;)
			local OnInstantlist = false
			for i = 1, #toInstantInterrupt do
				if type(toInstantInterrupt[i]) == &amp;quot;string&amp;quot; then
					if toInstantInterrupt[i] == castName then OnInstantlist = true end
				elseif type(toInstantInterrupt[i]) == &amp;quot;number&amp;quot; then
					if (GetSpellInfo(toInstantInterrupt[i]))== castName then OnInstantlist = true end
			end	end
			if OnInstantlist then
				if timeSinceStart - AlphaInterrupt_Instant_InterruptDelay &amp;lt; 0 then return false end
				if currentPercent &amp;lt; AlphaInterrupt_Instant_InterruptPercent then return false end		
			else
				--interrupt percentage check
				if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
				if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
					AlphaInterrupt_Protect1 = (GetTime()) + 1.5
					PQR_InterruptPercent = randompercentage()
				end
				if currentPercent &amp;lt; PQR_InterruptPercent then
					return false
				end
			
				--minimum interrupt time
				if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
				if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
					AlphaInterrupt_Protect2 = (GetTime()) + 1.5
					PQR_InterruptDelay = randomdelay()
				end
				if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
					return false
				end
			end	
		else
			--interrupt percentage check
			if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
			if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
				AlphaInterrupt_Protect1 = (GetTime()) + 1.5
				PQR_InterruptPercent = randompercentage()
			end
			if currentPercent &amp;lt; PQR_InterruptPercent then
				return false
			end
		
			--minimum interrupt time
			if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
			if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
				AlphaInterrupt_Protect2 = (GetTime()) + 1.5
				PQR_InterruptDelay = randomdelay()
			end
			if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
				return false
			end
		end
	
		--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
		--Nerder&amp;apos;s DK priority
		if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
			if UnitClass(&amp;quot;player&amp;quot;) == &amp;quot;DEATHKNIGHT&amp;quot; then
				local name, _, _, count = UnitBuffID(&amp;quot;player&amp;quot;,114851)
				
				if PQR_InterruptSpell() ~= 47528 then
				 	for i = 1, 2 do
						if GetRuneType(i) == 1
						 and ( select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;gt; 0 ) then
							if (name ~= nil and count &amp;gt;= 5) then
								local unitname = GetUnitName(customTarget)
								local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
								PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname..&amp;quot; - Used: &amp;quot;..GetSpellInfo(45529), 20, &amp;quot;DC143C&amp;quot;)						
								CastSpellByName(GetSpellInfo(45529), &amp;quot;player&amp;quot;)
								CastSpellByID(interruptSpell, customTarget)
								return true
							end
						else
							return false
						end
					end
				elseif PQR_InterruptSpell() == 47528 then
					local unitname = GetUnitName(customTarget)
					local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
					CastSpellID(interruptSpell, customTarget)
					return true
				end
			else
				local unitname = GetUnitName(customTarget)
				local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
				PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
				PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
				CastSpellByID(interruptSpell, customTarget)
				return true
			end
		end
		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (BattleGround)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AlphaInterrupt_stop()
or not AlphaInterrupt_AlphaBattleGroundInterrupt_enable
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
or ((GetBattlefieldInstanceRunTime()/1000) &amp;lt; 120)
or not PQR_SpellAvailable(PQR_InterruptSpell())
or IsActiveBattlefieldArena() == 1
then return false end

local name, realm = UnitName(&amp;quot;target&amp;quot;)
if realm == nil then
	if name == nil then
		lasttargetname = nil
	else lasttargetname = name end
else
	lasttargetname = name..&amp;quot;-&amp;quot;..realm
end

if AlphaInterrupt_targetProtect == nil then AlphaInterrupt_targetProtect = 0 end
if AlphaInterrupt_targetProtect &amp;lt; GetTime() then
	AlphaInterrupt_targetProtect = (GetTime()) + 1
	
	RequestBattlefieldScoreData()
	if BGnum == nil then BGnum = 0 end
	if BGnum &amp;gt;= GetNumBattlefieldScores() then BGnum = 0 end
	BGnum = BGnum + 1
	local BG_PlayerInfo, _, _, _, _, BG_PlayerFaction = GetBattlefieldScore(BGnum)
	local BG_PlayerName, BG_PlayerServer = strsplit(&amp;quot;-&amp;quot;, BG_PlayerInfo)

	if     UnitFactionGroup(&amp;quot;player&amp;quot;) == &amp;quot;Horde&amp;quot;			 then CheckMyFaction = 0
	elseif UnitFactionGroup(&amp;quot;player&amp;quot;) == &amp;quot;Horde Horde&amp;quot;		 then CheckMyFaction = 0
	elseif UnitFactionGroup(&amp;quot;player&amp;quot;) == &amp;quot;Alliance&amp;quot;			 then CheckMyFaction = 1
	elseif UnitFactionGroup(&amp;quot;player&amp;quot;) == &amp;quot;Alliance Alliance&amp;quot; then CheckMyFaction = 1 end

	if CheckMyFaction == BG_PlayerFaction then
		--They are on my team dont need to focus
		AlphaInterrupt_targetProtect = (GetTime()) - 0.2
		return false
	end
	if UnitName(&amp;quot;target&amp;quot;) == BG_PlayerInfo then
		AlphaInterrupt_targetProtect = (GetTime()) - 0.2
		return false
	end
	if BG_PlayerInfo ~= nil then
		RunMacroText(&amp;quot;/targetexact &amp;quot;..BG_PlayerInfo)
		RunMacroText(&amp;quot;/focus [@target, exists]&amp;quot;)
		if lasttargetname == nil then
			ClearTarget() 
		else
			RunMacroText(&amp;quot;/targetexact &amp;quot;..lasttargetname)
		end
	end
	if UnitFactionGroup(&amp;quot;player&amp;quot;) == UnitFactionGroup(&amp;quot;focus&amp;quot;) then
		--They are on my team need to re focus (should not happen)
		AlphaInterrupt_targetProtect = (GetTime()) - 2
		return false
	end
	if IsSpellInRange(GetSpellInfo(PQR_InterruptSpell()), &amp;quot;focus&amp;quot;) ~= 1 then
		AlphaInterrupt_targetProtect = (GetTime()) - 2
		return false
	end
	if UnitName(&amp;quot;target&amp;quot;) == UnitName(&amp;quot;focus&amp;quot;) then
		AlphaInterrupt_targetProtect = (GetTime()) - 2
		return false
	end
end

local customTarget = &amp;quot;focus&amp;quot;
local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
local divineshield = UnitBuffID(customTarget,642)
local Inner_Focus = UnitBuffID(customTarget,89485)

if channelName ~= nil then
	--target is channeling a spell that is interruptable
	--load the channel variables into the cast variables to make logic a little easier.
	castName = channelName
	castStartTime = channelStartTime
	castEndTime = channelEndTime
	castInterruptable = channelInterruptable
end


--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
if castInterruptable == false then
	castInterruptable = true
else
	castInterruptable = false
end

--we can&amp;apos;t attack the target.
if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
	return false
end
	
--we can&amp;apos;t Interrupt when target has immunity.
if divineshield or Inner_Focus then
	AlphaInterrupt_targetProtect = (GetTime()) + 0.2
	return false
end
	
if castInterruptable then
	--target is casting something that is interruptable.
	--the following 2 variables are named logically... value is in seconds.
	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
	local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
	local castTime = castEndTime - castStartTime
	local currentPercent = timeSinceStart / castTime * 100000
	
	AlphaInterrupt_targetProtect = (GetTime()) + 0.5
	
	--make sure the interrupt spell is available
	local interruptSpell = PQR_InterruptSpell()
	if interruptSpell ~= 0 then
		local interruptName = GetSpellInfo(interruptSpell)
		if not PQR_SpellAvailable(interruptSpell) or IsSpellInRange(interruptName, customTarget) ~= 1 or SpellIsTargeting() then
			return false
		end
	else
		return false
	end	
	
	--Ignore spells on Ignore list
	if AlphaInterrupt_Ignorelist_enable then
		Alpha_Deserialize(AlphaInterrupt_Ignorelist, &amp;quot;Ignore&amp;quot;)
		local unitname = GetUnitName(customTarget)
		local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
		for i = 1, #toIgnore do
			if type(toIgnore[i]) == &amp;quot;string&amp;quot; then
				if toIgnore[i] == castName then
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
					return false
				end
			elseif type(toIgnore[i]) == &amp;quot;number&amp;quot; then
				if (GetSpellInfo(toIgnore[i])) == castName then
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
					return false
				end
			end		
		end
	end
	
	--should we use InstantInterrupt delays or normal?
	if AlphaInterrupt_InstantInterruptlist_enable then
		Alpha_Deserialize(AlphaInterrupt_Instantlist, &amp;quot;Instant Interrupt&amp;quot;)
		local OnInstantlist = false
		for i = 1, #toInstantInterrupt do
			if type(toInstantInterrupt[i]) == &amp;quot;string&amp;quot; then
				if toInstantInterrupt[i] == castName then OnInstantlist = true end
			elseif type(toInstantInterrupt[i]) == &amp;quot;number&amp;quot; then
				if (GetSpellInfo(toInstantInterrupt[i]))== castName then OnInstantlist = true end
		end	end
		if OnInstantlist then
			if timeSinceStart - AlphaInterrupt_Instant_InterruptDelay &amp;lt; 0 then return false end
			if currentPercent &amp;lt; AlphaInterrupt_Instant_InterruptPercent then return false end		
		else
			--interrupt percentage check
			if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
			if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
				AlphaInterrupt_Protect1 = (GetTime()) + 1.5
				PQR_InterruptPercent = randompercentage()
			end
			if currentPercent &amp;lt; PQR_InterruptPercent then
				return false
			end
		
			--minimum interrupt time
			if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
			if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
				AlphaInterrupt_Protect2 = (GetTime()) + 1.5
				PQR_InterruptDelay = randomdelay()
			end
			if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
				return false
			end
		end	
	else
		--interrupt percentage check
		if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
		if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
			AlphaInterrupt_Protect1 = (GetTime()) + 1.5
			PQR_InterruptPercent = randompercentage()
		end
		if currentPercent &amp;lt; PQR_InterruptPercent then
			return false
		end
	
		--minimum interrupt time
		if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
		if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
			AlphaInterrupt_Protect2 = (GetTime()) + 1.5
			PQR_InterruptDelay = randomdelay()
		end
		if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
			return false
		end
	end

	--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
	if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
		--Nerder&amp;apos;s DK priority
		if UnitClass(&amp;quot;player&amp;quot;) == &amp;quot;DEATHKNIGHT&amp;quot; then
			local name, _, _, count = UnitBuffID(&amp;quot;player&amp;quot;,114851)
			
			if PQR_InterruptSpell() ~= 47528 then
			 	for i = 1, 2 do
			 		local RuneCDstart, RuneCDduration = GetRuneCooldown(i)
					if GetRuneType(i) == 1
					and ( RuneCDstart + RuneCDduration - GetTime() &amp;gt; 0 ) then
						if (name ~= nil and count &amp;gt;= 5) then
							local unitname = GetUnitName(customTarget)
							local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
							PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname..&amp;quot; - Used: &amp;quot;..GetSpellInfo(45529), 20, &amp;quot;DC143C&amp;quot;)						
							CastSpellByName(GetSpellInfo(45529), &amp;quot;player&amp;quot;)
							CastSpellByID(interruptSpell, customTarget)
							return true
						end
					else
						return false
					end
				end
			elseif PQR_InterruptSpell() == 47528 then
				local unitname = GetUnitName(customTarget)
				local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
				PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
				CastSpellID(interruptSpell, customTarget)
				return true
			end
		else
			local unitname = GetUnitName(customTarget)
			local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
			PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
			CastSpellByID(interruptSpell, customTarget)
			return true
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Functions --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--This is the delay before interrupting in seconds.
--random delay added by Alpha
local iDelay
function randomdelay()
	if AlphaInterrupt_RandomDelay_enable then
		local delay = 0
		if AlphaInterrupt_Minimumdelaytime_value == AlphaInterrupt_Maximumdelaytime_value then
			return AlphaInterrupt_Minimumdelaytime_value
		elseif AlphaInterrupt_Minimumdelaytime_value &amp;gt; AlphaInterrupt_Maximumdelaytime_value then
			local subDelay = 1 - AlphaInterrupt_Minimumdelaytime_value
			local iDelay = tonumber(math.random())  --gives us a # of 0-1, ex. 0.20459608752709
			if iDelay &amp;lt; AlphaInterrupt_Maximumdelaytime_value then -- delay is to small
				delay = iDelay + AlphaInterrupt_Maximumdelaytime_value  --add to the delay its to small
			elseif iDelay &amp;gt; AlphaInterrupt_Minimumdelaytime_value then  --delay is to large
				delay = iDelay - subDelay   --subtract from the delay
			else
				delay = iDelay   --delay is grader than Minimum delay time and less than Maximum delay time keep delay time
			end	
			if delay &amp;gt; AlphaInterrupt_Minimumdelaytime_value then
				delay = AlphaInterrupt_Minimumdelaytime_value
			end
			if delay &amp;lt; AlphaInterrupt_Maximumdelaytime_value then
				delay = AlphaInterrupt_Maximumdelaytime_value
			end
			return delay
		else
			local subDelay = 1 - AlphaInterrupt_Maximumdelaytime_value
			local iDelay = tonumber(math.random())  --gives us a # of 0-1, ex. 0.20459608752709
			if iDelay &amp;lt; AlphaInterrupt_Minimumdelaytime_value then -- delay is to small
				delay = iDelay + AlphaInterrupt_Minimumdelaytime_value  --add to the delay its to small
			elseif iDelay &amp;gt; AlphaInterrupt_Maximumdelaytime_value then  --delay is to large
				delay = iDelay - subDelay   --subtract from the delay
			else
				delay = iDelay   --delay is grader than Minimum delay time and less than Maximum delay time keep delay time
			end	
			if delay &amp;gt; AlphaInterrupt_Maximumdelaytime_value then
				delay = AlphaInterrupt_Maximumdelaytime_value
			end
			if delay &amp;lt; AlphaInterrupt_Minimumdelaytime_value then
				delay = AlphaInterrupt_Minimumdelaytime_value
			end
			return delay
		end
	else
		return 0.05
	end
end

--This is the percentage of the cast to wait before interrupting
--random percentage added by Alpha
function randompercentage()
	if AlphaInterrupt_RandomPercentage_enable then
		if AlphaInterrupt_MinimumCastPercentage_value &amp;gt; AlphaInterrupt_MaximumCastPercentage_value then
			local iPercent = tonumber(math.random(AlphaInterrupt_MaximumCastPercentage_value, AlphaInterrupt_MinimumCastPercentage_value))
			return iPercent
		else
			local iPercent = tonumber(math.random(AlphaInterrupt_MinimumCastPercentage_value, AlphaInterrupt_MaximumCastPercentage_value))
			return iPercent
		end
	else
		return 0
	end
end

function AlphaInterrupt_stop()
	if PQInterfaceLoaded and PQInterfaceUpdated and PQInterfaceDataLoaded then
		if PQI_AlphaInterrupt_PauseInterrupting_enable and PQI:IsHotkeys(PQI_AlphaInterrupt_PauseInterrupting_key) then
			return true else return false end
	else return false end
end

if AlphaInterrupt_SpamProtect == nil then AlphaInterrupt_SpamProtect = 0 end
function Alpha_Deserialize(s,Sname)
	local func,err = loadstring(s)
	if err and AlphaInterrupt_SpamProtect &amp;lt; GetTime() then
		AlphaInterrupt_SpamProtect = (GetTime()) + 10
		print(format(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Interrupt Error|cff00ffff&amp;gt;|cffb048f8 |cff00aaffSyntax Error in &amp;quot;..Sname..&amp;quot; List: |cffb048f8&amp;quot;..err)) end
	return func()
end

if AlphaInterrupt_SpamProtect2 == nil then AlphaInterrupt_SpamProtect2 = 0 end
if AlphaInterrupt_TestIgnorelist_enable then
	if AlphaInterrupt_SpamProtect2 &amp;lt; GetTime() then
		AlphaInterrupt_SpamProtect2 = (GetTime()) + 10
		Alpha_Deserialize(AlphaInterrupt_Ignorelist, &amp;quot;Ignore&amp;quot;)
		for i = 1, #toIgnore do
			print(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Interrupt|cff00ffff&amp;gt;|cffb048f8 Ignoring Spell: &amp;quot;..toIgnore[i])
		end
	end
end

if AlphaInterrupt_SpamProtect3 == nil then AlphaInterrupt_SpamProtect3 = 0 end
if AlphaInterrupt_TestInstantInterruptlist_enable then
	if AlphaInterrupt_SpamProtect3 &amp;lt; GetTime() then
		AlphaInterrupt_SpamProtect3 = (GetTime()) + 10
		Alpha_Deserialize(AlphaInterrupt_Instantlist, &amp;quot;Instant Interrupt&amp;quot;)
		for i = 1, #toInstantInterrupt do
			print(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Interrupt|cff00ffff&amp;gt;|cffb048f8 Instant Interrupt Spell: &amp;quot;..toInstantInterrupt[i])
		end
	end
end

--Let them know that they have an old version of PQI and should update to use the rotation configure, profile will still work if they dont though!
if PQInterfaceLoaded and not PQInterfaceUpdated and not PQI_AlphaInterrupt_UpdateError_sent then
	print(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Interrupt Error|cff00ffff&amp;gt; |cffb048f8 PQInterface was detected but not up to date, please update both the Addon and the PQR Data File to use the in-game options&amp;quot;)
	print(&amp;quot;|cffb048f8You can download the latest version from: |cffffffffhttp://PQRotation.wikia.com/wiki/PQInterface&amp;quot;)
	PQI_AlphaInterrupt_UpdateError_sent = true
end
--Let them know that they dont have PQR_PQI_Data.lua and where to get it to use the rotation configure, profile will still work if they dont though!
if not PQInterfaceDataLoaded and PQInterfaceLoaded and PQInterfaceUpdated and not PQI_AlphaInterrupt_UpdateError2_sent then
	print(&amp;quot;|cff00ffff&amp;lt;|cff00aaffError|cff00ffff&amp;gt; |cffb048f8 PQInterface was detected and is up to date but you are missing the PQR Data File. This is required to use the in-game options&amp;quot;)
	print(&amp;quot;|cffb048f8Download the latest version and follow the installation instructions at the bottom of this page: |cffffffffhttp://PQRotation.wikia.com/wiki/PQInterface&amp;quot;)
	PQI_AlphaInterrupt_UpdateError2_sent = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PQI Config --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- PQI Options By PaintPauller (Alpha profiles)
if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
	PQInterfaceLoaded = true
	PQInterfaceVersion = (tonumber(GetAddOnMetadata(&amp;quot;PQInterface&amp;quot;, &amp;quot;Version&amp;quot;)))
	if PQInterfaceVersion &amp;gt;= 2.22 then
		PQInterfaceUpdated = true
	else PQInterfaceUpdated = nil end
else PQInterfaceLoaded = nil end
if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == true then
	PQInterfaceDataLoaded = true
else PQInterfaceDataLoaded = false end
-- Alpha Utilities now supports PQI thanks to Diesal!
-- Lets not continue if they dont have PQI or its not up-to-date 
if PQI_Alpha_Interrupt_GUI_enable or not PQInterfaceLoaded or not PQInterfaceUpdated or not PQInterfaceDataLoaded then return false end
local config = {
	name	= &amp;apos;&amp;apos;,
	author	= &amp;apos;Alpha Interrupt&amp;apos;,
	abilities = {
		{ 	name = &amp;quot;Alpha Target Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables interrupting your Target,|cffC80000 Disabled without a valid Target!&amp;quot;,
		},
		{ 	name = &amp;quot;Alpha Focus Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables interrupting your Focus,|cffC80000 Disabled without a valid Focus Target!&amp;quot;,
		},
		{ 	name = &amp;quot;Alpha Mouseover Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables interrupting your Mouseover Target,|cffC80000 Disabled without a valid Mouseover Target!&amp;quot;,
		},
		{ 	name = &amp;quot;Alpha Boss Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables interrupting Bosses while in a party or raid without the need to target them,|cffC80000 Disabled out of active instances!&amp;quot;,
		},	
		{ 	name = &amp;quot;Alpha Arena Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables interrupting apposing Arena targets without the need to target them,|cffC80000 Disabled out of active arenas!&amp;quot;,
		},								
		{ 	name = &amp;quot;Alpha BattleGround Interrupt&amp;quot;,
			enable = false,
			tooltip = &amp;quot;~~BETA~~ Enables interrupting in battlegrounds by shuffling around your focus to the opposing team and trying to keep it on targets that are within range to be interrupted.|cffC80000 Take caution when using this as if someone notices that you are changing your focus that much they may start to suspect things! Disabled out of active battleGrounds!&amp;quot;,
		},
		{   name = &amp;quot;Random Percentage&amp;quot;,
			newSection = true,
            enable = true,
            tooltip = &amp;quot;Delay interrupting till cast is after this Percentage.&amp;quot;,
        },
        {   name = &amp;quot;Minimum Cast Percentage:&amp;quot;,
            enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 30, 
			    min = 1, 
			    max = 100, 
			    step = 10,               
			    tooltip = &amp;quot;The minimum Cast Percentage.                                               |cff00FFFFDefault:|cffFFD700 30|cffffffff&amp;quot;,
				width = 80
			 },
        },
       	{   name = &amp;quot;Maximum Cast Percentage:&amp;quot;,
            enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 50, 
			    min = 1, 
			    max = 100, 
			    step = 10, 
			    tooltip = &amp;quot;The Maximum Cast Percentage.                                               |cff00FFFFDefault:|cffFFD700 50|cffffffff&amp;quot;,
				width = 80
			 },
        },
		{ 	name = &amp;quot;Random Delay&amp;quot;,
			newSection = true,
			enable = true,
			tooltip = &amp;quot;When enabled interrupts will have a random delay - for PVP.                                                                                When disabled interrupts will have the default delay of 0.05 seconds for - PVE.&amp;quot;,
		},
		{   name = &amp;quot;Minimum Delay time:&amp;quot;,
            enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = .1, 
			    min = .01, 
			    max = 1, 
			    step = .1,               
			    tooltip = &amp;quot;The minimum time in seconds to delay the interrupt.                                                                                                            |cff00FFFFDefault:|cffFFD700 .1|cffffffff&amp;quot;,
				width = 80
			 },
        },
       	{   name = &amp;quot;Maximum Delay time:&amp;quot;,
            enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = .8, 
			    min = .01, 
			    max = 1, 
			    step = .1, 
			    tooltip = &amp;quot;The Maximum time in seconds to delay the interrupt.                                                                                                            |cff00FFFFDefault:|cffFFD700 .8|cffffffff&amp;quot;,
				width = 80
			 },
        },
		{ 	name = &amp;quot;Ignore list&amp;quot;,
			newSection = true,
			enable = false,
			tooltip = &amp;quot;List of spells to ignore&amp;quot;,
				widget = { type = &amp;apos;txtbox&amp;apos;, 
			    value = &amp;apos;&amp;quot;Spell Name&amp;quot;, SpellID, &amp;quot;Spell Name&amp;quot;&amp;apos;, 
			   	width = 225,													   --				  --														  --																																		   --															  --
				tooltip = &amp;apos;|cffb048f8 --   --   List of Spells to Ignore   --   --                    |cff00FF96Put spell names or spellIDs in this list.         Spell names must be enclosed in quotation marks, every spell in the list must be separated by a comma.                                       |cff00FFFFHere is an example of proper syntax:                 |cffFFD700&amp;quot;Waterbolt&amp;quot;, 7328, &amp;quot;Holy Radiance&amp;quot;&amp;apos;,
			 },
		},
		{ 	name = &amp;quot;Test Ignore list&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Every 10 seconds it will print out spells on your ignore list and check if there is errors in the list, if there is then it will print out an error message.&amp;quot;,
		},
       	{   name = &amp;quot;Instant Cast Percentage:&amp;quot;,
			newSection = true,
            enable = true,
            tooltip = &amp;quot;Enabling or Disabling this does nothing!&amp;quot;,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 10, 
			    min = 1, 
			    max = 100, 
			    step = 10, 
			    tooltip = &amp;quot;The Cast Percentage.                                                       |cff00FFFFDefault:|cffFFD700 10|cffffffff&amp;quot;,
				width = 80
			 },
        },		
		{   name = &amp;quot;Instant Delay time:&amp;quot;,
            enable = true,
            tooltip = &amp;quot;Enabling or Disabling this does nothing!&amp;quot;,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = .05, 
			    min = .01, 
			    max = 1, 
			    step = .1,               
			    tooltip = &amp;quot;The time in seconds to delay the interrupt.                                                                                                            |cff00FFFFDefault:|cffFFD700 .05|cffffffff&amp;quot;,
				width = 80
			 },
        },
		{ 	name = &amp;quot;Instant Interrupt list&amp;quot;,
			enable = false,
			tooltip = &amp;quot;List of spells to instantly interrupt&amp;quot;,
				widget = { type = &amp;apos;txtbox&amp;apos;, 
			    value = &amp;apos;&amp;quot;Spell Name&amp;quot;, SpellID, &amp;quot;Spell Name&amp;quot;&amp;apos;, 
			   	width = 225,													   --				  --														  --																																		   --															  --
				tooltip = &amp;apos;|cffb048f8-- -- List of Spells to instantly interrupt -- --           |cff00FF96Put spell names or spellIDs in this list.         Spell names must be enclosed in quotation marks, every spell in the list must be separated by a comma.                                       |cff00FFFFHere is an example of proper syntax:                 |cffFFD700&amp;quot;Waterbolt&amp;quot;, 7328, &amp;quot;Holy Radiance&amp;quot;&amp;apos;,
			 },
		},
		{ 	name = &amp;quot;Test Instant Interrupt list&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Every 10 seconds it will print out spells on your instant interrupt list and check if there is errors in the list, if there is then it will print out an error message.&amp;quot;,
		},
	},
	hotkeys = {
   		{	name = &amp;quot;Pause Interrupting&amp;quot;,
   			enable = true,
   			hotkeys = {&amp;apos;ra&amp;apos;},
   		},
	},	
}
PQI_Alpha_Interrupt_GUI_enable = PQI:AddRotation(config)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (Boss)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local _,InstanceType = GetInstanceInfo()
if AlphaInterrupt_stop()
or not AlphaInterrupt_AlphaBossInterrupt_enable
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
or not PQR_SpellAvailable(PQR_InterruptSpell())
or ((not IsInInstance()) or (IsInInstance() and InstanceType ~= &amp;quot;party&amp;quot; and InstanceType ~= &amp;quot;raid&amp;quot;))
then return false end

for i=1,4 do
	local customTarget = &amp;quot;boss&amp;quot;..i
	local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
	local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
	local divineshield = UnitBuffID(customTarget,642)
	local Inner_Focus = UnitBuffID(customTarget,89485)
	
	if UnitExists(customTarget) == nil then return false end
	
	if channelName ~= nil then
		--target is channeling a spell that is interruptable
		--load the channel variables into the cast variables to make logic a little easier.
		castName = channelName
		castStartTime = channelStartTime
		castEndTime = channelEndTime
		castInterruptable = channelInterruptable
	end
	
	--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
	if castInterruptable == false then
		castInterruptable = true
	else
		castInterruptable = false
	end
		
	--we can&amp;apos;t attack the target.
	if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
		return false
	end
		
	--we can&amp;apos;t Interrupt when target has immunity.
	if divineshield or Inner_Focus then
		return false
	end
		
	if castInterruptable then
		--target is casting something that is interruptable.
		--the following 2 variables are named logically... value is in seconds.
		local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
		local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
		local castTime = castEndTime - castStartTime
		local currentPercent = timeSinceStart / castTime * 100000
		
		--make sure the interrupt spell is available
		local interruptSpell = PQR_InterruptSpell()
		if interruptSpell ~= 0 then
			local interruptName = GetSpellInfo(interruptSpell)
			if not PQR_SpellAvailable(interruptSpell) or IsSpellInRange(interruptName, customTarget) ~= 1 or SpellIsTargeting() then
				return false
			end
		else
			return false
		end		
		
		--Ignore spells on Ignore list
		if AlphaInterrupt_Ignorelist_enable then
			Alpha_Deserialize(AlphaInterrupt_Ignorelist, &amp;quot;Ignore&amp;quot;)
			local unitname = GetUnitName(customTarget)
			local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
			for i = 1, #toIgnore do
				if type(toIgnore[i]) == &amp;quot;string&amp;quot; then
					if toIgnore[i] == castName then
						PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
						return false
					end
				elseif type(toIgnore[i]) == &amp;quot;number&amp;quot; then
					if (GetSpellInfo(toIgnore[i])) == castName then
						PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
						return false
					end
				end		
			end
		end
		
		--should we use InstantInterrupt delays or normal?
		if AlphaInterrupt_InstantInterruptlist_enable then
			Alpha_Deserialize(AlphaInterrupt_Instantlist, &amp;quot;Instant Interrupt&amp;quot;)
			local OnInstantlist = false
			for i = 1, #toInstantInterrupt do
				if type(toInstantInterrupt[i]) == &amp;quot;string&amp;quot; then
					if toInstantInterrupt[i] == castName then OnInstantlist = true end
				elseif type(toInstantInterrupt[i]) == &amp;quot;number&amp;quot; then
					if (GetSpellInfo(toInstantInterrupt[i]))== castName then OnInstantlist = true end
			end	end
			if OnInstantlist then
				if timeSinceStart - AlphaInterrupt_Instant_InterruptDelay &amp;lt; 0 then return false end
				if currentPercent &amp;lt; AlphaInterrupt_Instant_InterruptPercent then return false end		
			else
				--interrupt percentage check
				if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
				if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
					AlphaInterrupt_Protect1 = (GetTime()) + 1.5
					PQR_InterruptPercent = randompercentage()
				end
				if currentPercent &amp;lt; PQR_InterruptPercent then
					return false
				end
			
				--minimum interrupt time
				if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
				if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
					AlphaInterrupt_Protect2 = (GetTime()) + 1.5
					PQR_InterruptDelay = randomdelay()
				end
				if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
					return false
				end
			end	
		else
			--interrupt percentage check
			if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
			if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
				AlphaInterrupt_Protect1 = (GetTime()) + 1.5
				PQR_InterruptPercent = randompercentage()
			end
			if currentPercent &amp;lt; PQR_InterruptPercent then
				return false
			end
		
			--minimum interrupt time
			if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
			if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
				AlphaInterrupt_Protect2 = (GetTime()) + 1.5
				PQR_InterruptDelay = randomdelay()
			end
			if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
				return false
			end
		end
	
		--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
		--Nerder&amp;apos;s DK priority
		if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
			if UnitClass(&amp;quot;player&amp;quot;) == &amp;quot;DEATHKNIGHT&amp;quot; then
				local name, _, _, count = UnitBuffID(&amp;quot;player&amp;quot;,114851)
				
				if PQR_InterruptSpell() ~= 47528 then
				 	for i = 1, 2 do
						if GetRuneType(i) == 1
						 and ( select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;gt; 0 ) then
							if (name ~= nil and count &amp;gt;= 5) then
								local unitname = GetUnitName(customTarget)
								local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
								PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname..&amp;quot; - Used: &amp;quot;..GetSpellInfo(45529), 20, &amp;quot;DC143C&amp;quot;)						
								CastSpellByName(GetSpellInfo(45529), &amp;quot;player&amp;quot;)
								CastSpellByID(interruptSpell, customTarget)
								return true
							end
						else
							return false
						end
					end
				elseif PQR_InterruptSpell() == 47528 then
					local unitname = GetUnitName(customTarget)
					local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
					CastSpellID(interruptSpell, customTarget)
					return true
				end
			else
				local unitname = GetUnitName(customTarget)
				local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
				PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
				PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
				CastSpellByID(interruptSpell, customTarget)
				return true
			end
		end
		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (Mouseover)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AlphaInterrupt_stop()
or not AlphaInterrupt_AlphaMouseoverInterrupt_enable
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
or not PQR_SpellAvailable(PQR_InterruptSpell())
or UnitExists(&amp;quot;mouseover&amp;quot;) == nil
then return false end

local customTarget = &amp;quot;mouseover&amp;quot;
local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
local divineshield = UnitBuffID(customTarget,642)
local Inner_Focus = UnitBuffID(customTarget,89485)

if channelName ~= nil then
	--target is channeling a spell that is interruptable
	--load the channel variables into the cast variables to make logic a little easier.
	castName = channelName
	castStartTime = channelStartTime
	castEndTime = channelEndTime
	castInterruptable = channelInterruptable
end

--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
if castInterruptable == false then
	castInterruptable = true
else
	castInterruptable = false
end
	
--we can&amp;apos;t attack the target.
if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
	return false
end
	
--we can&amp;apos;t Interrupt when target has immunity.
if divineshield or Inner_Focus then
	return false
end
	
if castInterruptable then
	--target is casting something that is interruptable.
	--the following 2 variables are named logically... value is in seconds.
	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
	local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
	local castTime = castEndTime - castStartTime
	local currentPercent = timeSinceStart / castTime * 100000
	
	--make sure the interrupt spell is available
	local interruptSpell = PQR_InterruptSpell()
	if interruptSpell ~= 0 then
		local interruptName = GetSpellInfo(interruptSpell)
		if not PQR_SpellAvailable(interruptSpell) or IsSpellInRange(interruptName, customTarget) ~= 1 or SpellIsTargeting() then
			return false
		end
	else
		return false
	end
	
	--Ignore spells on Ignore list
	if AlphaInterrupt_Ignorelist_enable then
		Alpha_Deserialize(AlphaInterrupt_Ignorelist, &amp;quot;Ignore&amp;quot;)
		local unitname = GetUnitName(customTarget)
		local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
		for i = 1, #toIgnore do
			if type(toIgnore[i]) == &amp;quot;string&amp;quot; then
				if toIgnore[i] == castName then
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
					return false
				end
			elseif type(toIgnore[i]) == &amp;quot;number&amp;quot; then
				if (GetSpellInfo(toIgnore[i])) == castName then
					PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Ignoring - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName, 20, &amp;quot;DC143C&amp;quot;)
					return false
				end
			end		
		end
	end
	
	--should we use InstantInterrupt delays or normal?
	if AlphaInterrupt_InstantInterruptlist_enable then
		Alpha_Deserialize(AlphaInterrupt_Instantlist, &amp;quot;Instant Interrupt&amp;quot;)
		local OnInstantlist = false
		for i = 1, #toInstantInterrupt do
			if type(toInstantInterrupt[i]) == &amp;quot;string&amp;quot; then
				if toInstantInterrupt[i] == castName then OnInstantlist = true end
			elseif type(toInstantInterrupt[i]) == &amp;quot;number&amp;quot; then
				if (GetSpellInfo(toInstantInterrupt[i]))== castName then OnInstantlist = true end
		end	end
		if OnInstantlist then
			if timeSinceStart - AlphaInterrupt_Instant_InterruptDelay &amp;lt; 0 then return false end
			if currentPercent &amp;lt; AlphaInterrupt_Instant_InterruptPercent then return false end		
		else
			--interrupt percentage check
			if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
			if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
				AlphaInterrupt_Protect1 = (GetTime()) + 1.5
				PQR_InterruptPercent = randompercentage()
			end
			if currentPercent &amp;lt; PQR_InterruptPercent then
				return false
			end
		
			--minimum interrupt time
			if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
			if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
				AlphaInterrupt_Protect2 = (GetTime()) + 1.5
				PQR_InterruptDelay = randomdelay()
			end
			if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
				return false
			end
		end	
	else
		--interrupt percentage check
		if AlphaInterrupt_Protect1 == nil then AlphaInterrupt_Protect1 = 0 end
		if AlphaInterrupt_Protect1 &amp;lt; GetTime() then
			AlphaInterrupt_Protect1 = (GetTime()) + 1.5
			PQR_InterruptPercent = randompercentage()
		end
		if currentPercent &amp;lt; PQR_InterruptPercent then
			return false
		end
	
		--minimum interrupt time
		if AlphaInterrupt_Protect2 == nil then AlphaInterrupt_Protect2 = 0 end
		if AlphaInterrupt_Protect2 &amp;lt; GetTime() then
			AlphaInterrupt_Protect2 = (GetTime()) + 1.5
			PQR_InterruptDelay = randomdelay()
		end
		if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
			return false
		end
	end

	--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
	if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
		if UnitClass(&amp;quot;player&amp;quot;) == &amp;quot;DEATHKNIGHT&amp;quot; then
			local name, _, _, count = UnitBuffID(&amp;quot;player&amp;quot;,114851)
			
			if PQR_InterruptSpell() ~= 47528 then
			 	for i = 1, 2 do
					if GetRuneType(i) == 1
					 and ( select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;gt; 0 ) then
						if (name ~= nil and count &amp;gt;= 5) then
							local unitname = GetUnitName(customTarget)
							local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
							PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname..&amp;quot; - Used: &amp;quot;..GetSpellInfo(45529), 20, &amp;quot;DC143C&amp;quot;)						
							CastSpellByName(GetSpellInfo(45529), &amp;quot;player&amp;quot;)
							CastSpellByID(interruptSpell, customTarget)
							return true
						end
					else
						return false
					end
				end
			elseif PQR_InterruptSpell() == 47528 then
				local unitname = GetUnitName(customTarget)
				local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
				PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
				CastSpellID(interruptSpell, customTarget)
				return true
			end
		else
			local unitname = GetUnitName(customTarget)
			local Interruptspellname = GetSpellInfo(PQR_InterruptSpell())
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Interrupted - &amp;quot;..unitname..&amp;quot;: &amp;quot;..castName..&amp;quot; - With: &amp;quot;..Interruptspellname, 20, &amp;quot;DC143C&amp;quot;)
			PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
			CastSpellByID(interruptSpell, customTarget)
			return true
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></INTERRUPT>