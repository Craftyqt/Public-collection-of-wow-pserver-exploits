<?xml version="1.0" encoding="utf-8" ?><INTERRUPT><Ability><Name>--[PQI - Farming]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_Utility_value == 1 
and PQI_AlphaUtilities_Utility_enable == true then

	local dontAscendStop = true
	local weed = {&amp;quot;Encroaching Weed&amp;quot;, &amp;quot;Stubborn Weed&amp;quot;}
	local occupied = {&amp;quot;Occupied Soil&amp;quot;}
	local Untilled = {&amp;quot;Untilled Soil&amp;quot;}
	local runty = {
	&amp;quot;Runty Enigma Seed&amp;quot;, &amp;quot;Runty Green Cabbage&amp;quot;, &amp;quot;Runty Jade Squash&amp;quot;, &amp;quot;Runty Juicycrunch Carrot&amp;quot;, &amp;quot;Runty Magebulb&amp;quot;, &amp;quot;Runty Mogu Pumpkin&amp;quot;, &amp;quot;Runty Pink Turnip&amp;quot;, &amp;quot;Runty Raptorleaf&amp;quot;, &amp;quot;Runty Red Blossom Leek&amp;quot;, &amp;quot;Runty Scallions&amp;quot;, &amp;quot;Runty Snakeroot&amp;quot;, &amp;quot;Runty Songbell&amp;quot;, &amp;quot;Runty Striped Melon&amp;quot;, &amp;quot;Runty White Turnip&amp;quot;, &amp;quot;Runty Windshear Cactus&amp;quot;, &amp;quot;Runty Witchberries&amp;quot;}
	local wild = {
	&amp;quot;Wild Enigma Seed&amp;quot;, &amp;quot;Wild Green Cabbage&amp;quot;, &amp;quot;Wild Jade Squash&amp;quot;, &amp;quot;Wild Juicycrunch Carrot&amp;quot;, &amp;quot;Wild Magebulb&amp;quot;, &amp;quot;Wild Mogu Pumpkin&amp;quot;, &amp;quot;Wild Pink Turnip&amp;quot;, &amp;quot;Wild Raptorleaf&amp;quot;, &amp;quot;Wild Red Blossom Leek&amp;quot;, &amp;quot;Wild Scallions&amp;quot;, &amp;quot;Wild Snakeroot&amp;quot;, &amp;quot;Wild Songbell&amp;quot;, &amp;quot;Wild Striped Melon&amp;quot;, &amp;quot;Wild White Turnip&amp;quot;, &amp;quot;Wild Windshear Cactus&amp;quot;, &amp;quot;Wild Witchberries&amp;quot; }
	local Alluring = {
	&amp;quot;Alluring Enigma Seed&amp;quot;, &amp;quot;Alluring Green Cabbage&amp;quot;, &amp;quot;Alluring Jade Squash&amp;quot;, &amp;quot;Alluring Juicycrunch Carrot&amp;quot;, &amp;quot;Alluring Magebulb&amp;quot;, &amp;quot;Alluring Mogu Pumpkin&amp;quot;, &amp;quot;Alluring Pink Turnip&amp;quot;, &amp;quot;Alluring Raptorleaf&amp;quot;, &amp;quot;Alluring Red Blossom Leek&amp;quot;, &amp;quot;Alluring Scallions&amp;quot;, &amp;quot;Alluring Snakeroot&amp;quot;, &amp;quot;Alluring Songbell&amp;quot;, &amp;quot;Alluring Striped Melon&amp;quot;, &amp;quot;Alluring White Turnip&amp;quot;, &amp;quot;Alluring Windshear Cactus&amp;quot;, &amp;quot;Alluring Witchberries&amp;quot;}
	local Wiggling = {
	&amp;quot;Wiggling Enigma Seed&amp;quot;, &amp;quot;Wiggling Green Cabbage&amp;quot;, &amp;quot;Wiggling Jade Squash&amp;quot;, &amp;quot;Wiggling Juicycrunch Carrot&amp;quot;, &amp;quot;Wiggling Magebulb&amp;quot;, &amp;quot;Wiggling Mogu Pumpkin&amp;quot;, &amp;quot;Wiggling Pink Turnip&amp;quot;, &amp;quot;Wiggling Raptorleaf&amp;quot;, &amp;quot;Wiggling Red Blossom Leek&amp;quot;, &amp;quot;Wiggling Scallions&amp;quot;, &amp;quot;Wiggling Snakeroot&amp;quot;, &amp;quot;Wiggling Songbell&amp;quot;, &amp;quot;Wiggling Striped Melon&amp;quot;, &amp;quot;Wiggling White Turnip&amp;quot;, &amp;quot;Wiggling Windshear Cactus&amp;quot;, &amp;quot;Wiggling Witchberries&amp;quot;}
	local Bursting = {
	&amp;quot;Bursting Enigma Seed&amp;quot;, &amp;quot;Bursting Green Cabbage&amp;quot;, &amp;quot;Bursting Jade Squash&amp;quot;, &amp;quot;Bursting Juicycrunch Carrot&amp;quot;, &amp;quot;Bursting Magebulb&amp;quot;, &amp;quot;Bursting Mogu Pumpkin&amp;quot;, &amp;quot;Bursting Pink Turnip&amp;quot;, &amp;quot;Bursting Raptorleaf&amp;quot;, &amp;quot;Bursting Red Blossom Leek&amp;quot;, &amp;quot;Bursting Scallions&amp;quot;, &amp;quot;Bursting Snakeroot&amp;quot;, &amp;quot;Bursting Songbell&amp;quot;, &amp;quot;Bursting Striped Melon&amp;quot;, &amp;quot;Bursting White Turnip&amp;quot;, &amp;quot;Bursting Windshear Cactus&amp;quot;, &amp;quot;Bursting Witchberries&amp;quot;}
	local Ripe = {
	&amp;quot;Ripe Enigma Seed&amp;quot;, &amp;quot;Ripe Green Cabbage&amp;quot;, &amp;quot;Ripe Jade Squash&amp;quot;, &amp;quot;Ripe Juicycrunch Carrot&amp;quot;, &amp;quot;Ripe Magebulb&amp;quot;, &amp;quot;Ripe Mogu Pumpkin&amp;quot;, &amp;quot;Ripe Pink Turnip&amp;quot;, &amp;quot;Ripe Raptorleaf&amp;quot;, &amp;quot;Ripe Red Blossom Leek&amp;quot;, &amp;quot;Ripe Scallions&amp;quot;, &amp;quot;Ripe Snakeroot&amp;quot;, &amp;quot;Songbell&amp;quot;, &amp;quot;Ripe Striped Melon&amp;quot;, &amp;quot;Ripe White Turnip&amp;quot;, &amp;quot;Ripe Windshear Cactus&amp;quot;, &amp;quot;Ripe Witchberries&amp;quot;, &amp;quot;Green Tea Leaf&amp;quot;, &amp;quot;Silkweed&amp;quot;, &amp;quot;Rain Poppy&amp;quot;, &amp;quot;Snow Lily&amp;quot;, &amp;quot;Fool&amp;apos;s Cap&amp;quot;, &amp;quot;Golden Lotus&amp;quot;, &amp;quot;Magebulb&amp;quot;, &amp;quot;Raptorleaf&amp;quot;, &amp;quot;snakeroot&amp;quot;, &amp;quot;Windshear Cactus&amp;quot;}
	local Plump = {
	&amp;quot;Plump Enigma Seed&amp;quot;, &amp;quot;Plump Green Cabbage&amp;quot;, &amp;quot;Plump Jade Squash&amp;quot;, &amp;quot;Plump Juicycrunch Carrot&amp;quot;, &amp;quot;Plump Magebulb&amp;quot;, &amp;quot;Plump Mogu Pumpkin&amp;quot;, &amp;quot;Plump Pink Turnip&amp;quot;, &amp;quot;Plump Raptorleaf&amp;quot;, &amp;quot;Plump Red Blossom Leek&amp;quot;, &amp;quot;Plump Scallions&amp;quot;, &amp;quot;Plump Snakeroot&amp;quot;, &amp;quot;Plump Songbell&amp;quot;, &amp;quot;Plump Striped Melon&amp;quot;, &amp;quot;Plump White Turnip&amp;quot;, &amp;quot;Plump Windshear Cactus&amp;quot;, &amp;quot;Plump Witchberries&amp;quot;}
	local Tangled = {
	&amp;quot;Tangled Enigma Seed&amp;quot;, &amp;quot;Tangled Green Cabbage&amp;quot;, &amp;quot;Tangled Jade Squash&amp;quot;, &amp;quot;Tangled Juicycrunch Carrot&amp;quot;, &amp;quot;Tangled Magebulb&amp;quot;, &amp;quot;Tangled Mogu Pumpkin&amp;quot;, &amp;quot;Tangled Pink Turnip&amp;quot;, &amp;quot;Tangled Raptorleaf&amp;quot;, &amp;quot;Tangled Red Blossom Leek&amp;quot;, &amp;quot;Tangled Scallions&amp;quot;, &amp;quot;Tangled Snakeroot&amp;quot;, &amp;quot;Tangled Songbell&amp;quot;, &amp;quot;Tangled StTangledd Melon&amp;quot;, &amp;quot;Tangled White Turnip&amp;quot;, &amp;quot;Tangled Windshear Cactus&amp;quot;, &amp;quot;Tangled Witchberries&amp;quot;}
	local Infested = {
	&amp;quot;Infested Enigma Seed&amp;quot;, &amp;quot;Infested Green Cabbage&amp;quot;, &amp;quot;Infested Jade Squash&amp;quot;, &amp;quot;Infested Juicycrunch Carrot&amp;quot;, &amp;quot;Infested Magebulb&amp;quot;, &amp;quot;Infested Mogu Pumpkin&amp;quot;, &amp;quot;Infested Pink Turnip&amp;quot;, &amp;quot;Infested Raptorleaf&amp;quot;, &amp;quot;Infested Red Blossom Leek&amp;quot;, &amp;quot;Infested Scallions&amp;quot;, &amp;quot;Infested Snakeroot&amp;quot;, &amp;quot;Infested Songbell&amp;quot;, &amp;quot;Infested StInfestedd Melon&amp;quot;, &amp;quot;Infested White Turnip&amp;quot;, &amp;quot;Infested Windshear Cactus&amp;quot;, &amp;quot;Infested Witchberries&amp;quot;}
	local Parched = {
	&amp;quot;Parched Enigma Seed&amp;quot;, &amp;quot;Parched Green Cabbage&amp;quot;, &amp;quot;Parched Jade Squash&amp;quot;, &amp;quot;Parched Juicycrunch Carrot&amp;quot;, &amp;quot;Parched Magebulb&amp;quot;, &amp;quot;Parched Mogu Pumpkin&amp;quot;, &amp;quot;Parched Pink Turnip&amp;quot;, &amp;quot;Parched Raptorleaf&amp;quot;, &amp;quot;Parched Red Blossom Leek&amp;quot;, &amp;quot;Parched Scallions&amp;quot;, &amp;quot;Parched Snakeroot&amp;quot;, &amp;quot;Parched Songbell&amp;quot;, &amp;quot;Parched StParchedd Melon&amp;quot;, &amp;quot;Parched White Turnip&amp;quot;, &amp;quot;Parched Windshear Cactus&amp;quot;, &amp;quot;Parched Witchberries&amp;quot;}
	
	-- Pauses when non-nil/non-zero value. Thanks to snowhawk &amp; crystal_tech 
	if PQR_PauseRotation == nil then
	    PQR_PauseRotation = 0
	elseif PQR_PauseRotation &amp;gt; GetTime() then
	    return true
	else
	    PQR_PauseRotation = 0
	end
	
	-- will destroy any targeted plant if Left Shift and Alt key is down and you have a Dented Shovel
	if (PQI_AlphaUtilities_DestroyTargetedPlant_enable == true)
	and (GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;)
	and (GetItemCount(89880,false,false) &amp;gt; 0)
	and (PQI:IsHotkeys(PQI_AlphaUtilities_DestroyTargetedPlant_key)) then
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Enigma Seed&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Green Cabbage&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Jade Squash&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Juicycrunch Carrot&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Magebulb&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Mogu Pumpkin&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Pink Turnip&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Raptorleaf&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Red Blossom Leek&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Scallions&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Snakeroot&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Songbell&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Striped Melon&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing White Turnip&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Windshear Cactus&amp;quot; then
			UseItemByName(89880)
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Growing Witchberries&amp;quot; then
			UseItemByName(89880)
		end
	end
	
	--will force target tilled soil
	if (PQI_AlphaUtilities_ForceTargetTilledSoil_enable == true)
	and (GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;) 
	and (PQI:IsHotkeys( PQI_AlphaUtilities_ForceTargetTilledSoil_key  ))	then
		TargetUnit(&amp;quot;Tilled Soil&amp;quot;)
		return true
	end
	
	--If you are in Sunsong Ranch and dont have Master Plow it will till the soil
	if (PQI_AlphaUtilities_TillSoil_enable == true)
	and (GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;) then 
		for i=1,#Untilled do 
			InteractUnit(Untilled[i]) 
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will activate the Occupied Soil allows main rotation to kill.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then	
		for i=1,#occupied do 
			InteractUnit(occupied[i])
		end
		TargetUnit(&amp;quot;Squatting Virmen&amp;quot;)
		if UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Squatting Virmen&amp;quot;) then
			TargetUnit(&amp;quot;Squatting Virmen&amp;quot;)
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will eliminate all Parched Plants in range if you have a watering can.
	if (PQI_AlphaUtilities_UseWateringCan_enable == true) 
	and (GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;) 
	and (GetItemCount(79104,false,false) &amp;gt; 0) then
		for i=1,#Parched do 
			TargetUnit(Parched[i]) 
		end
		if GetItemCount(79104,false,false) &amp;gt; 0 then 
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Enigma Seed&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Green Cabbage&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Jade Squash&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Juicycrunch Carrot&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Magebulb&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Mogu Pumpkin&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Pink Turnip&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Raptorleaf&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Red Blossom Leek&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Scallions&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Snakeroot&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Songbell&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Striped Melon&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched White Turnip&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Windshear Cactus&amp;quot; then
				UseItemByName(79104)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Parched Witchberries&amp;quot; then
				UseItemByName(79104)
			end
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will eliminate all Infested Plants in range if you have a bug spryer.
	if (PQI_AlphaUtilities_UseBugSpray_enable == true)
	and (GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;)
	and (GetItemCount(80513,false,false) &amp;gt; 0) then
		for i=1,#Infested do 
			TargetUnit(Infested[i]) 
		end
		if GetItemCount(80513,false,false) &amp;gt; 0 then 
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Enigma Seed&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Green Cabbage&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Jade Squash&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Juicycrunch Carrot&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Magebulb&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Mogu Pumpkin&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Pink Turnip&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Raptorleaf&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Red Blossom Leek&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Scallions&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Snakeroot&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Songbell&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Striped Melon&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested White Turnip&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Windshear Cactus&amp;quot; then
				UseItemByName(80513)
			end
			if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Infested Witchberries&amp;quot; then
				UseItemByName(80513)
			end
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will eliminate all Encroaching WeedÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â plants in range.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#weed do 
			InteractUnit(weed[i]) 
		end
		CastSpellByID(115857)
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will eliminate all Runted Plants in range.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
	--	for i=1,#runty do 
		for _,v in ipairs(runty) do
			TargetUnit(v) 
		end
		if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Enigma Seed&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Enigma Seed&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Green Cabbage&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Green Cabbage&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Jade Squash&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Jade Squash&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Juicycrunch Carrot&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Juicycrunch Carrot&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Magebulb&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Magebulb&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Mogu Pumpkin&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Mogu Pumpkin&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Pink Turnip&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Pink Turnip&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Raptorleaf&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Raptorleaf&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Red Blossom Leek&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Red Blossom Leek&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Scallions&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Scallions&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Snakeroot&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Snakeroot&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Songbell&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Songbell&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Striped Melon&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Striped Melon&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty White Turnip&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty White Turnip&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Windshear Cactus&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Windshear Cactus&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Runty Witchberries&amp;quot; then
			if getRunty then
				getRunty = false
				jumpRunty = true
				InteractUnit(&amp;quot;Runty Witchberries&amp;quot;)
				PQR_PauseRotation = (GetTime()) + 1.25
				return true
			end
			if jumpRunty then
				PQR_PauseRotation = (GetTime()) + 1
				jumpRunty = false
				getRunty = true
				JumpOrAscendStart()
				dontAscendStop = false
				return true
			end
		elseif dontAscendStop == false then
			AscendStop()
			dontAscendStop = true
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will eliminate all wild Plants in range.
	local slam,_,_,_,_,timer = UnitCastingInfo(&amp;quot;target&amp;quot;)
	
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#wild do 
			InteractUnit(wild[i]) 
		end
		if slam == GetSpellInfo(116084) and PQR_SpellAvailable(116069) then
			CastSpellByID(116069)
		else
			CastSpellByID(116073)
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will activate the Alluring Plants allows main rotation to kill.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then	
		for i=1,#Alluring do 
			InteractUnit(Alluring[i])
		end
		TargetUnit(&amp;quot;Swooping Plainshawk&amp;quot;)
		if UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Swooping Plainshawk&amp;quot;) then
			TargetUnit(&amp;quot;Swooping Plainshawk&amp;quot;)
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will activate the Wiggling Plants allows main rotation to kill.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#Wiggling do 
			InteractUnit(Wiggling[i])
		end
		TargetUnit(&amp;quot;Voracious Virmen&amp;quot;)
		if UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Voracious Virmen&amp;quot;) then
			TargetUnit(&amp;quot;Voracious Virmen&amp;quot;)
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will collect the Bursting Plants for you.
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; then
		for i=1,#Bursting do 
			InteractUnit(Bursting[i])
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will collect the Ripe Plants for you.
	if (PQI_AlphaUtilities_HarvestPlant_enable == true)
	and (GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;)
	and (PQI:IsHotkeys( PQI_AlphaUtilities_HarvestPlant_key  )) then
		for i=1,#Ripe do 
			InteractUnit(Ripe[i])
		end
	end
	
	--If you are in Sunsong RanchÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â it will collect the Plump Plants for you.
	if (PQI_AlphaUtilities_HarvestPlant_enable == true)
	and (GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot;)
	and (PQI:IsHotkeys( PQI_AlphaUtilities_HarvestPlant_key  )) then
		for i=1,#Plump do 
			InteractUnit(Plump[i])
		end
	end
end</Lua><RecastDelay>50</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI Config]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

-- Alpha Utilities now supports PQI thanks to Diesal!
if PQI_AlphaUtilities_GUI_Default then
local config = {
	name	= &amp;apos;&amp;apos;,
	author	= &amp;apos;Alpha Utilities&amp;apos;,
	abilities = {
		{	name = &amp;quot;Utility&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables selected Utility&amp;quot;,
			widget = { type = &amp;apos;select&amp;apos;,
				values = {&amp;quot;Farming&amp;quot;,&amp;quot;Disenchant&amp;quot;,&amp;quot;Mill&amp;quot;,&amp;quot;Prospect&amp;quot; },
				value = 1,
				tooltip = &amp;quot;Select one!&amp;quot;,
				width  = 80,
			},
		},
		{ 	name = &amp;quot;Xelper Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables XelperÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s Interrupt profile to run in the background!&amp;quot;,
		},
		{ 	name = &amp;quot;Chat Reminders&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Gives you useful information about the selected Utility after the initial message&amp;quot;,
		},
		{ 	name = &amp;quot;Modular UI&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Modularizes the GUI dependent on the selected Utility!&amp;quot;,
		},
		{	name = &amp;quot;Plant Seed&amp;quot;,
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Target Tilled Soil to plant selected seed, alternatively you can use Force Target Tilled Soil below for a hotkey&amp;quot;,
			widget = { type = &amp;apos;select&amp;apos;,
				values = {&amp;quot;Enigma&amp;quot;,&amp;quot;Green Cabbage&amp;quot;,&amp;quot;Jade Squash&amp;quot;,&amp;quot;Juicycrunch Carrot&amp;quot;,&amp;quot;Magebulb&amp;quot;,&amp;quot;Mogu Pumpkin&amp;quot;,&amp;quot;Pink Turnip&amp;quot;,&amp;quot;Raptorleaf&amp;quot;,&amp;quot;Red Blossom Leek&amp;quot;,&amp;quot;Scallion&amp;quot;,&amp;quot;Snakeroot&amp;quot;,&amp;quot;Songbell&amp;quot;,&amp;quot;Striped Melon&amp;quot;,&amp;quot;White Turnip&amp;quot;,&amp;quot;Windshear Cactus&amp;quot;,&amp;quot;Witchberry&amp;quot;},
				value = 1,
				tooltip = &amp;quot;Select one!&amp;quot;,
				width  = 125,
			},
		},
		{	name = &amp;quot;Till Soil&amp;quot;,
     		enable = false,
    		tooltip = &amp;apos;Use this if you dont have                                                                          |cffFFFFFF[Master Plow]|cffffffff&amp;apos;,
    	},
    	{	name = &amp;quot;Use Bug Spray&amp;quot;,
     		enable = false,
    		tooltip = &amp;apos;Use this if you dont have                                                                          |cffFFFFFF[&amp;quot;Thunder King&amp;quot; Pest Repellers]|cffffffff&amp;apos;,
    	},
    	{	name = &amp;quot;Use Watering Can&amp;quot;,
     		enable = false,
    		tooltip = &amp;apos;Use this if you dont have                                                                          |cffFFFFFF[&amp;quot;Jinyu Princess&amp;quot; Irrigation System]|cffffffff&amp;apos;,
    	},
		{ 	name = &amp;quot;Disenchant J.C. Neck &amp; Ring (|cff0080ffBlues|cffffffff)&amp;quot;,
			--name = &amp;quot;Disenchant J.C. Necks and Rings (Blues)&amp;quot;,
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Do you want to disenchant them?&amp;quot;,
		},
		{ 	name = &amp;quot;Disenchant J.C. Neck &amp; Ring (|cff1eff00Greens|cffffffff)&amp;quot;,
			--name = &amp;quot;Disenchant J.C. Necks and Rings (Greens)&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Do you want to disenchant them?&amp;quot;,
		},
		{ 	name = &amp;quot;Disenchant Tailor Wrists&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Do you want to disenchant them?&amp;quot;,
		},
		{ 	name = &amp;quot;Mill MoP Herbs&amp;quot;, 
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Do you want to Mill them?&amp;quot;,
		},
		{ 	name = &amp;quot;Mill Cata Herbs&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Do you want to Mill them?&amp;quot;,
		},
		{ 	name = &amp;quot;Prospect Ghost Iron Ore&amp;quot;,
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Do you want to Prospect it?&amp;quot;,
		},
		{ 	name = &amp;quot;Prospect Kyparite&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Do you want to Prospect it?&amp;quot;,
		},
		{ 	name = &amp;quot;Prospect Trillium Ore&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Do you want to Prospect it?&amp;quot;,
		},
		{ 	name = &amp;quot;Prospect Cata Ore&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Do you want to Prospect them?&amp;quot;,
		},
		{   name = &amp;quot;Overclock Disenchanting&amp;quot;,
			newSection = true,
            enable = false,
            tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff&amp;quot;,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 1, 
			    min = .5, 
			    max = 3, 
			    step = .5, 
			    tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff                                                                         |cff6A5ACDNumber is seconds in between Disenchants|cffffffff                                                                           |cff00FFFFDefault:|cffFFD700 1|cffffffff&amp;quot;, 
				width = 80
			 },
        }, 
		{   name = &amp;quot;Overclock Milling&amp;quot;,
            enable = false,
            tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff&amp;quot;,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 1, 
			    min = .5, 
			    max = 3, 
			    step = .5, 
			    tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff                                                                        |cff6A5ACDNumber is seconds in between Mills|cffffffff                                                                           |cff00FFFFDefault:|cffFFD700 1|cffffffff&amp;quot;, 
				width = 80
			 },
        }, 
		{   name = &amp;quot;Overclock Prospecting&amp;quot;,
            enable = false,
            tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff&amp;quot;,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 1.5, 
			    min = .5, 
			    max = 3, 
			    step = .5, 
			    tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff                                                                          |cff6A5ACDNumber in seconds in between Prospects|cffffffff                                                                          |cff00FFFFDefault:|cffFFD700 1.5|cffffffff&amp;quot;, 
				width = 80
			 },
        }, 
	},
	hotkeys = {
		{	name = &amp;quot;Force Target Tilled Soil&amp;quot;,		
			enable = true,
			hotkeys = {&amp;apos;ls&amp;apos;},
			tooltip = &amp;quot;Used to plant selected seed without needing to target Tilled Soil&amp;quot;,
		},
		{	name = &amp;quot;Harvest Plant&amp;quot;,		
			enable = true,
			hotkeys = {&amp;apos;la&amp;apos;},
			tooltip = &amp;quot;Used to Harvest Plants without needing to target them&amp;quot;,
		},
   		{	name = &amp;quot;Destroy Targeted Plant&amp;quot;,
   			enable = true,
   			hotkeys = {&amp;apos;ls&amp;apos;, &amp;apos;la&amp;apos;},	
   			tooltip = &amp;quot;Requires Dented Shovel&amp;quot;,
   		},
   		{	name = &amp;quot;Pauses Disenchanting&amp;quot;,
   		  	newSection = true,
   			enable = true,
   			hotkeys = {&amp;apos;ls&amp;apos;},
   		},
   		{	name = &amp;quot;Pauses Milling&amp;quot;,
   			newSection = true,
   			enable = true,
   			hotkeys = {&amp;apos;ls&amp;apos;},
   		},
   		{	name = &amp;quot;Pauses Prospecting&amp;quot;,
   			newSection = true,
   			enable = true,
   			hotkeys = {&amp;apos;ls&amp;apos;},
   		},
	},	
}
PQI_AlphaUtilities_GUI_Default_enable = PQI:AddRotation(config)
PQI_AlphaUtilities_GUI_Default = false
PQI_AlphaUtilities_GUI_Farming_enable = false
PQI_AlphaUtilities_GUI_Disenchant_enable = false
PQI_AlphaUtilities_GUI_Mill_enable = false
PQI_AlphaUtilities_GUI_Prospect_enable = false
--PQI_AlphaUtilities_GUI_Default_enable = false
--PQR_WriteToChat(&amp;quot;Default&amp;quot;)
end

if PQI_AlphaUtilities_GUI_Farming then
local config = {
	name	= &amp;apos;&amp;apos;,
	author	= &amp;apos;Alpha Utilities&amp;apos;,
	abilities = {
		{	name = &amp;quot;Utility&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables selected Utility&amp;quot;,
			widget = { type = &amp;apos;select&amp;apos;,
				values = {&amp;quot;Farming&amp;quot;,&amp;quot;Disenchant&amp;quot;,&amp;quot;Mill&amp;quot;,&amp;quot;Prospect&amp;quot; },
				value = 1,
				tooltip = &amp;quot;Select one!&amp;quot;,
				width  = 80,
			},
		},
		{ 	name = &amp;quot;Xelper Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables XelperÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s Interrupt profile to run in the background!&amp;quot;,
		},
		{ 	name = &amp;quot;Chat Reminders&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Gives you useful information about the selected Utility after the initial message&amp;quot;,
		},
		{ 	name = &amp;quot;Modular UI&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Modularizes the GUI dependent on the selected Utility!&amp;quot;,
		},
		{	name = &amp;quot;Plant Seed&amp;quot;,
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Target Tilled Soil to plant selected seed, alternatively you can use Force Target Tilled Soil below for a hotkey&amp;quot;,
			widget = { type = &amp;apos;select&amp;apos;,
				values = {&amp;quot;Enigma&amp;quot;,&amp;quot;Green Cabbage&amp;quot;,&amp;quot;Jade Squash&amp;quot;,&amp;quot;Juicycrunch Carrot&amp;quot;,&amp;quot;Magebulb&amp;quot;,&amp;quot;Mogu Pumpkin&amp;quot;,&amp;quot;Pink Turnip&amp;quot;,&amp;quot;Raptorleaf&amp;quot;,&amp;quot;Red Blossom Leek&amp;quot;,&amp;quot;Scallion&amp;quot;,&amp;quot;Snakeroot&amp;quot;,&amp;quot;Songbell&amp;quot;,&amp;quot;Striped Melon&amp;quot;,&amp;quot;White Turnip&amp;quot;,&amp;quot;Windshear Cactus&amp;quot;,&amp;quot;Witchberry&amp;quot;},
				value = 1,
				tooltip = &amp;quot;Select one!&amp;quot;,
				width  = 125,
			},
		},
		{	name = &amp;quot;Till Soil&amp;quot;,
     		enable = false,
    		tooltip = &amp;apos;Use this if you dont have                                                                          |cffFFFFFF[Master Plow]|cffffffff&amp;apos;,
    	},
    	{	name = &amp;quot;Use Bug Spray&amp;quot;,
     		enable = false,
    		tooltip = &amp;apos;Use this if you dont have                                                                          |cffFFFFFF[&amp;quot;Thunder King&amp;quot; Pest Repellers]|cffffffff&amp;apos;,
    	},
    	{	name = &amp;quot;Use Watering Can&amp;quot;,
     		enable = false,
    		tooltip = &amp;apos;Use this if you dont have                                                                          |cffFFFFFF[&amp;quot;Jinyu Princess&amp;quot; Irrigation System]|cffffffff&amp;apos;,
    	},
 
	},
	hotkeys = {
		{	name = &amp;quot;Force Target Tilled Soil&amp;quot;,		
			enable = true,
			hotkeys = {&amp;apos;ls&amp;apos;},
			tooltip = &amp;quot;Used to plant selected seed without needing to target Tilled Soil&amp;quot;,
		},
		{	name = &amp;quot;Harvest Plant&amp;quot;,		
			enable = true,
			hotkeys = {&amp;apos;la&amp;apos;},
			tooltip = &amp;quot;Used to Harvest Plants without needing to target them&amp;quot;,
		},
   		{	name = &amp;quot;Destroy Targeted Plant&amp;quot;,
   			enable = true,
   			hotkeys = {&amp;apos;ls&amp;apos;, &amp;apos;la&amp;apos;},	
   			tooltip = &amp;quot;Requires Dented Shovel&amp;quot;,
   		},
	},	
}
PQI_AlphaUtilities_GUI_Farming_enable = PQI:AddRotation(config)
PQI_AlphaUtilities_GUI_Farming = false	
--PQI_AlphaUtilities_GUI_Farming_enable = false
PQI_AlphaUtilities_GUI_Disenchant_enable = false
PQI_AlphaUtilities_GUI_Mill_enable = false
PQI_AlphaUtilities_GUI_Prospect_enable = false
PQI_AlphaUtilities_GUI_Default_enable = false
--PQR_WriteToChat(&amp;quot;Farming&amp;quot;)
end

if PQI_AlphaUtilities_GUI_Disenchant then
local config = {
	name	= &amp;apos;&amp;apos;,
	author	= &amp;apos;Alpha Utilities&amp;apos;,
	abilities = {
		{	name = &amp;quot;Utility&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables selected Utility&amp;quot;,
			widget = { type = &amp;apos;select&amp;apos;,
				values = {&amp;quot;Farming&amp;quot;,&amp;quot;Disenchant&amp;quot;,&amp;quot;Mill&amp;quot;,&amp;quot;Prospect&amp;quot; },
				value = 1,
				tooltip = &amp;quot;Select one!&amp;quot;,
				width  = 80,
			},
		},
		{ 	name = &amp;quot;Xelper Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables XelperÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s Interrupt profile to run in the background!&amp;quot;,
		},
		{ 	name = &amp;quot;Chat Reminders&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Gives you useful information about the selected Utility after the initial message&amp;quot;,
		},
		{ 	name = &amp;quot;Modular UI&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Modularizes the GUI dependent on the selected Utility!&amp;quot;,
		},
		{ 	name = &amp;quot;Disenchant J.C. Neck &amp; Ring (|cff0080ffBlues|cffffffff)&amp;quot;,
			--name = &amp;quot;Disenchant J.C. Necks and Rings (Blues)&amp;quot;,
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Do you want to disenchant them?&amp;quot;,
		},
		{ 	name = &amp;quot;Disenchant J.C. Neck &amp; Ring (|cff1eff00Greens|cffffffff)&amp;quot;,
			--name = &amp;quot;Disenchant J.C. Necks and Rings (Greens)&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Do you want to disenchant them?&amp;quot;,
		},
		{ 	name = &amp;quot;Disenchant Tailor Wrists&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Do you want to disenchant them?&amp;quot;,
		},
		{   name = &amp;quot;Overclock Disenchanting&amp;quot;,
			newSection = true,
            enable = false,
            tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff&amp;quot;,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 1, 
			    min = .5, 
			    max = 3, 
			    step = .5, 
			    tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff                                                                         |cff6A5ACDNumber is seconds in between Disenchants|cffffffff                                                                           |cff00FFFFDefault:|cffFFD700 1|cffffffff&amp;quot;, 
				width = 80
			 },
        },
	},
	hotkeys = {
   		{	name = &amp;quot;Pauses Disenchanting&amp;quot;,
   		  	newSection = true,
   			enable = true,
   			hotkeys = {&amp;apos;ls&amp;apos;},
   		},
	},	
}
PQI_AlphaUtilities_GUI_Disenchant_enable = PQI:AddRotation(config)
PQI_AlphaUtilities_GUI_Disenchant = false	
PQI_AlphaUtilities_GUI_Farming_enable = false	
--PQI_AlphaUtilities_GUI_Disenchant_enable = false
PQI_AlphaUtilities_GUI_Mill_enable = false
PQI_AlphaUtilities_GUI_Prospect_enable = false
PQI_AlphaUtilities_GUI_Default_enable = false
--PQR_WriteToChat(&amp;quot;Disenchant&amp;quot;)
end

if PQI_AlphaUtilities_GUI_Mill then
local config = {
	name	= &amp;apos;&amp;apos;,
	author	= &amp;apos;Alpha Utilities&amp;apos;,
	abilities = {
		{	name = &amp;quot;Utility&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables selected Utility&amp;quot;,
			widget = { type = &amp;apos;select&amp;apos;,
				values = {&amp;quot;Farming&amp;quot;,&amp;quot;Disenchant&amp;quot;,&amp;quot;Mill&amp;quot;,&amp;quot;Prospect&amp;quot; },
				value = 1,
				tooltip = &amp;quot;Select one!&amp;quot;,
				width  = 80,
			},
		},
		{ 	name = &amp;quot;Xelper Interrupt&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables XelperÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s Interrupt profile to run in the background!&amp;quot;,
		},
		{ 	name = &amp;quot;Chat Reminders&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Gives you useful information about the selected Utility after the initial message&amp;quot;,
		},
		{ 	name = &amp;quot;Modular UI&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Modularizes the GUI dependent on the selected Utility!&amp;quot;,
		},
		{ 	name = &amp;quot;Mill MoP Herbs&amp;quot;, 
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Do you want to Mill them?&amp;quot;,
		},
		{ 	name = &amp;quot;Mill Cata Herbs&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Do you want to Mill them?&amp;quot;,
		},
		{   name = &amp;quot;Overclock Milling&amp;quot;,
			newSection = true,
            enable = false,
            tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff&amp;quot;,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 1, 
			    min = .5, 
			    max = 3, 
			    step = .5, 
			    tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff                                                                          |cff6A5ACDNumber in seconds in between Mills|cffffffff                                                                          |cff00FFFFDefault:|cffFFD700 1|cffffffff&amp;quot;, 
				width = 80
			 },
        }, 
	},
	hotkeys = {
   		{	name = &amp;quot;Pauses Milling&amp;quot;,
   			newSection = true,
   			enable = true,
   			hotkeys = {&amp;apos;ls&amp;apos;},
   		},
	},	
}
PQI_AlphaUtilities_GUI_Mill_enable = PQI:AddRotation(config)
PQI_AlphaUtilities_GUI_Mill = false	
PQI_AlphaUtilities_GUI_Farming_enable = false	
PQI_AlphaUtilities_GUI_Disenchant_enable = false
--PQI_AlphaUtilities_GUI_Mill_enable = false
PQI_AlphaUtilities_GUI_Prospect_enable = false
PQI_AlphaUtilities_GUI_Default_enable = false
--PQR_WriteToChat(&amp;quot;Mill&amp;quot;)
end

if PQI_AlphaUtilities_GUI_Prospect then
local config = {
	name	= &amp;apos;&amp;apos;,
	author	= &amp;apos;Alpha Utilities&amp;apos;,
	abilities = {
		{	name = &amp;quot;Utility&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Enables selected Utility&amp;quot;,
			widget = { type = &amp;apos;select&amp;apos;,
				values = {&amp;quot;Farming&amp;quot;,&amp;quot;Disenchant&amp;quot;,&amp;quot;Mill&amp;quot;,&amp;quot;Prospect&amp;quot; },
				value = 1,
				tooltip = &amp;quot;Select one!&amp;quot;,
				width  = 80,
			},
		},
		{ 	name = &amp;quot;Xelper Interrupt&amp;quot;,
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Enables XelperÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s Interrupt profile to run in the background!&amp;quot;,
		},
		{ 	name = &amp;quot;Chat Reminders&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Gives you useful information about the selected Utility after the initial message&amp;quot;,
		},
		{ 	name = &amp;quot;Modular UI&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Modularizes the GUI dependent on the selected Utility!&amp;quot;,
		},
		{ 	name = &amp;quot;Prospect Ghost Iron Ore&amp;quot;,
			newSection = true,
			enable = true,
			tooltip = &amp;quot;Do you want to Prospect it?&amp;quot;,
		},
		{ 	name = &amp;quot;Prospect Kyparite&amp;quot;,
			enable = true,
			tooltip = &amp;quot;Do you want to Prospect it?&amp;quot;,
		},
		{ 	name = &amp;quot;Prospect Trillium Ore&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Do you want to Prospect it?&amp;quot;,
		},
		{ 	name = &amp;quot;Prospect Cata Ore&amp;quot;,
			enable = false,
			tooltip = &amp;quot;Do you want to Prospect them?&amp;quot;,
		},
		{   name = &amp;quot;Overclock Prospecting&amp;quot;,
			newSection = true,
            enable = false,
            tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff&amp;quot;,
			widget = { type = &amp;apos;numBox&amp;apos;, 
			    value = 1.5, 
			    min = .5, 
			    max = 3, 
			    step = .5, 
			    tooltip = &amp;quot;|cffC80000Overclocking will cause Blizzard Errors!|cffffffff                                                                          |cff6A5ACDNumber in seconds in between Prospects|cffffffff                                                                          |cff00FFFFDefault:|cffFFD700 1.5|cffffffff&amp;quot;, 
				width = 80
			 },
        }, 
	},
	hotkeys = {
   		{	name = &amp;quot;Pauses Prospecting&amp;quot;,
   			newSection = true,
   			enable = true,
   			hotkeys = {&amp;apos;ls&amp;apos;},
   		},
	},	
}
PQI_AlphaUtilities_GUI_Prospect_enable = PQI:AddRotation(config)
PQI_AlphaUtilities_GUI_Prospect = false	
PQI_AlphaUtilities_GUI_Farming_enable = false	
PQI_AlphaUtilities_GUI_Disenchant_enable = false
PQI_AlphaUtilities_GUI_Mill_enable = false
--PQI_AlphaUtilities_GUI_Prospect_enable = false
PQI_AlphaUtilities_GUI_Default_enable = false
--PQR_WriteToChat(&amp;quot;Prospect&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI - Disenchant]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_Utility_value == 2
and PQI_AlphaUtilities_Utility_enable == true then
	
	local desDelayTime
	local disenchanting = GetSpellInfo(13262)
	local castingSpell,_,_,_,_,endTime = UnitCastingInfo(&amp;quot;player&amp;quot;)
	
	-- Pauses when non-nil/non-zero value. Thanks to snowhawk and crystal_tech 
	if PQR_PauseRotation == nil then
	    PQR_PauseRotation = 0
	elseif PQR_PauseRotation &amp;gt; GetTime() then
	    return true
	elseif PQI_AlphaUtilities_PausesDisenchanting_enable == true
	and PQI:IsHotkeys(PQI_AlphaUtilities_PausesDisenchanting_key) then
	    return true
	else
	    PQR_PauseRotation = 0
	end
	
	if PQI_AlphaUtilities_OverclockDisenchanting_enable == true then
		CloseLoot({errNo})
	end
	
	if PQI_AlphaUtilities_OverclockDisenchanting_enable == true then
		desDelayTime = PQI_AlphaUtilities_OverclockDisenchanting_value
	else
		desDelayTime = 1.0
	end
	
	if (castingSpell and castingSpell == disenchanting) then
	    -- Convert endtime from millseconds to seconds, then add a delay
	    PQR_PauseRotation = endTime/1000 + desDelayTime
	    return true
	end
	
	if PQI_AlphaUtilities_DisenchantJCNeckRingBlues_enable == true then
		-- Disenchant Shadowfire Necklace (ilvl 415, Blue))
		if IsSpellKnown(13262) and GetItemCount(90905,false,false) &amp;gt;= 1 then
			CastSpellByID(13262)
			UseItemByName(90905)
		end
		
		-- Disenchant Ornate Band (ilvl 415, Blue)
		if IsSpellKnown(13262) and GetItemCount(90904,false,false) &amp;gt;= 1 then
			CastSpellByID(13262)
			UseItemByName(90904)
		end
	end
	
	if PQI_AlphaUtilities_DisenchantJCNeckRingGreens_enable == true then
		-- Disenchant Shadowfire Necklace (ilvl 384, Green)
		if IsSpellKnown(13262) and GetItemCount(83794,false,false) &amp;gt;= 1 then
			CastSpellByID(13262)
			UseItemByName(83794)
		end
		
		-- Disenchant Ornate Band (ilvl 384, Green)
		if IsSpellKnown(13262) and GetItemCount(83793,false,false) &amp;gt;= 1 then
			CastSpellByID(13262)
			UseItemByName(83793)
		end
	end
	
	if PQI_AlphaUtilities_DisenchantTailorWrists_enable == true then
		-- Disenchant Contender&amp;apos;s Satin Cuffs (ilvl 450)
		if IsSpellKnown(13262) and GetItemCount(82434,false,false) &amp;gt;= 1 then
			CastSpellByID(13262)
			UseItemByName(82434)
		end
		
		-- Disenchant Contender&amp;apos;s Silk Cuffs (ilvl 450)
		if IsSpellKnown(13262) and GetItemCount(82426,false,false) &amp;gt;= 1 then
			CastSpellByID(13262)
			UseItemByName(82426)
		end
		
		-- Disenchant Windwool Bracers (ilvl 384)
		if IsSpellKnown(13262) and GetItemCount(82402,false,false) &amp;gt;= 1 then
			CastSpellByID(13262)
			UseItemByName(82402)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI - Farming - Seed]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_Utility_value == 1 
and PQI_AlphaUtilities_Utility_enable == true then
	
	-- Enigma Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 1 then
		UseItemByName(85216)
	end
	
	-- Green Cabbage Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 2 then
		UseItemByName(79102)
	end
	
	-- Jade Squash Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 3 then
		UseItemByName(89328)
	end
	
	--- Juicycrunch Carrot Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 4 then
		UseItemByName(80590)
	end
	
	-- Magebulb Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 5 then
		UseItemByName(85217)
	end
	
	-- Mogu Pumpkin Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 6 then
		UseItemByName(80592)
	end
	
	-- Pink Turnip Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 7 then
		UseItemByName(80594)
	end
	
	-- Raptorleaf Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 8 then
		UseItemByName(89202)
	end
	
	-- Red Blossom Leek Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 9 then
		UseItemByName(80593)
	end
	
	-- Scallion Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 10 then
		UseItemByName(80591)
	end
	
	-- Snakeroot Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 11 then
		UseItemByName(85215)
	end
	
	-- Songbell Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 12 then
		UseItemByName(89233)
	end
	
	--- Striped Melon Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 13 then
		UseItemByName(89329)
	end
	
	--- White Turnip Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true 
	and PQI_AlphaUtilities_PlantSeed_value == 14 then
		UseItemByName(80595)
	end
	
	-- Windshear Cactus Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true
	and PQI_AlphaUtilities_PlantSeed_value == 15 then
		UseItemByName(89197)
	end
	
	--- Witchberry Seed
	if GetSubZoneText() == &amp;quot;Sunsong Ranch&amp;quot; 
	and UnitName(&amp;quot;target&amp;quot;) == (&amp;quot;Tilled Soil&amp;quot;) 
	and PQI_AlphaUtilities_PlantSeed_enable == true
	and PQI_AlphaUtilities_PlantSeed_value == 16 then
		UseItemByName(89326)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI - Prospecting]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_Utility_value == 4
and PQI_AlphaUtilities_Utility_enable == true then

	if PQI_sendToChatProsOn == true then
		print(format(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Utilities|cff00ffff&amp;gt;|cffb048f8 Place any stack of Ore that is not divisible by 5 as the last stack of that kind of Ore in your bag.&amp;quot;))
		Alpha_Utilities_Notify_Short(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Utilities|cff00ffff&amp;gt;|cffb048f8 Place any stack of Ore that is not divisible&amp;quot;)
		Alpha_Utilities_Notify2_Short(&amp;quot;|cffb048f8by 5 as the last stack of that kind of Ore in your bag.&amp;quot;)
		PQI_sendToChatProsOn = false
	end
	
	local prospecting = GetSpellInfo(31252)
	local castingSpell,_,_,_,_,endTime = UnitCastingInfo(&amp;quot;player&amp;quot;)
	
	-- Pauses when non-nil/non-zero value. Thanks to snowhawk &amp; crystal_tech 
	if PQR_PauseRotation == nil then
	    PQR_PauseRotation = 0
	elseif PQR_PauseRotation &amp;gt; GetTime() then
	    return true
	elseif PQI_AlphaUtilities_PausesProspecting_enable == true
	and PQI:IsHotkeys(PQI_AlphaUtilities_PausesProspecting_key) then
	    return true
	else
	    PQR_PauseRotation = 0
	end
	
	if PQI_AlphaUtilities_OverclockProspecting_enable == true then
		CloseLoot({errNo})
	end
	
	if PQI_AlphaUtilities_OverclockProspecting_enable == true then
		prosDelayTime = PQI_AlphaUtilities_OverclockProspecting_value
	else
		prosDelayTime = 1.5
	end
	
	if (castingSpell and castingSpell == milling) then
	    -- Convert endtime from millseconds to seconds, then add a delay
	    PQR_PauseRotation = endTime/1000 + prosDelayTime
	    return true
	end
	
	if PQI_AlphaUtilities_ProspectGhostIronOre_enable then
		-- Prospect Ghost Iron Ore
		if IsSpellKnown(31252) and GetItemCount(72092,false,false) &amp;gt;= 5 then
			CastSpellByID(31252)
			UseItemByName(72092)
		end
	end
	
	if PQI_AlphaUtilities_ProspectKyparite_enable then
		-- Prospect Kyparite
		if IsSpellKnown(31252) and GetItemCount(72093,false,false) &amp;gt;= 5 then
			CastSpellByID(31252)
			UseItemByName(72093)
		end
	end
	
	if PQI_AlphaUtilities_ProspectTrilliumOre_enable then
		-- Prospect Black Trillium Ore
		if IsSpellKnown(31252) and GetItemCount(72094,false,false) &amp;gt;= 5 then
			CastSpellByID(31252)
			UseItemByName(72094)
		end
		
		-- Prospect White Trillium Ore
		if IsSpellKnown(31252) and GetItemCount(72103,false,false) &amp;gt;= 5 then
			CastSpellByID(31252)
			UseItemByName(72103)
		end
	end
	
	if PQI_AlphaUtilities_ProspectCataOre_enable then
		-- Prospect Pyrite Ore
		if IsSpellKnown(31252) and GetItemCount(52183,false,false) &amp;gt;= 5 then
			CastSpellByID(31252)
			UseItemByName(52183)
		end
		
		-- Prospect Elementium Ore
		if IsSpellKnown(31252) and GetItemCount(52185,false,false) &amp;gt;= 5 then
			CastSpellByID(31252)
			UseItemByName(52185)
		end
		
		-- Prospect Obsidium Ore
		if IsSpellKnown(31252) and GetItemCount(53038,false,false) &amp;gt;= 5 then
			CastSpellByID(31252)
			UseItemByName(53038)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI - Milling]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_Utility_value == 3
and PQI_AlphaUtilities_Utility_enable == true then

	if PQI_sendToChatMillOn == true then
		print(format(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Utilities|cff00ffff&amp;gt;|cffb048f8 Place any stack of Herbs that is not divisible by 5 as the last stack of that kind of Herb in your bag.&amp;quot;))
		Alpha_Utilities_Notify_Short(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Utilities|cff00ffff&amp;gt;|cffb048f8 Place any stack of Herbs that is not divisible&amp;quot;)
		Alpha_Utilities_Notify2_Short(&amp;quot;|cffb048f8by 5 as the last stack of that kind of Herb in your bag.&amp;quot;)
		PQI_sendToChatMillOn = false
	end
	
	local milling = GetSpellInfo(51005)
	local castingSpell,_,_,_,_,endTime = UnitCastingInfo(&amp;quot;player&amp;quot;)
	
	-- Pauses when non-nil/non-zero value. Thanks to snowhawk &amp; crystal_tech 
	if PQR_PauseRotation == nil then
	    PQR_PauseRotation = 0
	elseif PQR_PauseRotation &amp;gt; GetTime() then
	    return true
	elseif PQI_AlphaUtilities_PausesMilling_enable == true
	and PQI:IsHotkeys(PQI_AlphaUtilities_PausesMilling_key) then
	    return true
	else
	    PQR_PauseRotation = 0
	end
	
	if PQI_AlphaUtilities_OverclockMilling_enable == true then
		CloseLoot({errNo})
	end
	
	if PQI_AlphaUtilities_OverclockMilling_enable == true then
		millDelayTime = PQI_AlphaUtilities_OverclockMilling_value
	else
		millDelayTime = 1.0
	end
	
	if (castingSpell and castingSpell == milling) then
	    -- Convert endtime from millseconds to seconds, then add a delay
	    PQR_PauseRotation = endTime/1000 + millDelayTime
	    return true
	end
	
	if PQI_AlphaUtilities_MillMoPHerbs_enable then
		-- mill Fool&amp;apos;s Cap
		if IsSpellKnown(51005) and GetItemCount(79011,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(79011)
		end
		
		-- mill Snow Lily
		if IsSpellKnown(51005) and GetItemCount(79010,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(79010)
		end
		
		-- mill Silkweed
		if IsSpellKnown(51005) and GetItemCount(72235,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(72235)
		end
		
		-- mill Rain Poppy
		if IsSpellKnown(51005) and GetItemCount(72237,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(72237)
		end
		
		-- mill Green Tea Leaf
		if IsSpellKnown(51005) and GetItemCount(72234,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(72234)
		end
		
		-- mill Desecrated Herb
		if IsSpellKnown(51005) and GetItemCount(89639,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(89639)
		end
	
	end
	
	if PQI_AlphaUtilities_MillCataHerbs_enable then
		-- mill Heartblossom
		if IsSpellKnown(51005) and GetItemCount(52986,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(52986)
		end
		
		-- Twilight Jasmine
		if IsSpellKnown(51005) and GetItemCount(52987,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(52987)
		end
		
		-- Azshara&amp;apos;s Veil
		if IsSpellKnown(51005) and GetItemCount(52985,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(52985)
		end
		
		-- Cinderbloom
		if IsSpellKnown(51005) and GetItemCount(52983,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(52983)
		end
		
		-- Stormvine
		if IsSpellKnown(51005) and GetItemCount(52984,false,false) &amp;gt;= 5 then
			CastSpellByID(51005)
			UseItemByName(52984)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI Xelper Initialize]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_XelperInterrupt_enable then
	if xelperInterruptInit == nil then
		--TestComment
		xelperInterruptInit = true
		function PQR_InterruptSpell()
			local _, playerClass = UnitClass(&amp;quot;player&amp;quot;)
			
			if playerClass == &amp;quot;DEATHKNIGHT&amp;quot; then
				return 47528
			elseif playerClass == &amp;quot;DRUID&amp;quot; then
				local catForm = UnitBuffID(&amp;quot;player&amp;quot;, 768)
				if catForm ~= nil then
					return 80965
				else
					return 80964
				end
			elseif playerClass == &amp;quot;HUNTER&amp;quot; then
				return 34490
			elseif playerClass == &amp;quot;MAGE&amp;quot; then
				return 2139
			elseif playerClass == &amp;quot;PALADIN&amp;quot; then
				return 96231
			elseif playerClass == &amp;quot;PRIEST&amp;quot; then
				return 15487
			elseif playerClass == &amp;quot;ROGUE&amp;quot; then
				return 1766
			elseif playerClass == &amp;quot;SHAMAN&amp;quot; then
				return 57994
			elseif playerClass == &amp;quot;WARLOCK&amp;quot; then
				return 19647
			elseif playerClass == &amp;quot;WARRIOR&amp;quot; then
				return 6552
			else
				return 0
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI Xelper Interrupt (Target) ]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_XelperInterrupt_enable then
	local customTarget = &amp;quot;target&amp;quot;
	local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
	local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
	
	if channelName ~= nil then
		--target is channeling a spell that is interruptable
		--load the channel variables into the cast variables to make logic a little easier.
		castName = channelName
		castStartTime = channelStartTime
		castEndTime = channelEndTime
		castInterruptable = channelInterruptable
	end
	
	--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
	if castInterruptable == false then
		castInterruptable = true
	else
		castInterruptable = false
	end
	
	--we can&amp;apos;t attack the target.
	if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
		return false
	end
	
	if castInterruptable then
		--target is casting something that is interruptable.
		--the following 2 variables are named logically... value is in seconds.
		local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
		local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
		local castTime = castEndTime - castStartTime
		local currentPercent = timeSinceStart / castTime * 100000
		
		--interrupt percentage check
		if currentPercent &amp;lt; PQR_InterruptPercent then
			return false
		end
	
		--minimum interrupt time.
		if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
			return false
		end
	
		--make sure the interrupt spell is available
		local interruptSpell = PQR_InterruptSpell()
		if interruptSpell ~= 0 then
			
			local interruptName = GetSpellInfo(interruptSpell)
			if not PQR_SpellAvailable(interruptSpell) or not IsSpellInRange(interruptName, customTarget) then
				return false
			end
		else
			return false
		end
	
		--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
		if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
			PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
			CastSpellByID(interruptSpell, customTarget)
			return true
		end
		
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI Xelper Interrupt (Focus) ]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_XelperInterrupt_enable then
	local customTarget = &amp;quot;focus&amp;quot;
	local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
	local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
	
	if channelName ~= nil then
		--target is channeling a spell that is interruptable
		--load the channel variables into the cast variables to make logic a little easier.
		castName = channelName
		castStartTime = channelStartTime
		castEndTime = channelEndTime
		castInterruptable = channelInterruptable
	end
	
	--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
	if castInterruptable == false then
		castInterruptable = true
	else
		castInterruptable = false
	end
	
	--we can&amp;apos;t attack the target.
	if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
		return false
	end
	
	if castInterruptable then
		--target is casting something that is interruptable.
		--the following 2 variables are named logically... value is in seconds.
		local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
		local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
		local castTime = castEndTime - castStartTime
		local currentPercent = timeSinceStart / castTime * 100000
		
		--interrupt percentage check
		if currentPercent &amp;lt; PQR_InterruptPercent then
			return false
		end
	
		--minimum interrupt time.
		if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
			return false
		end
	
		--make sure the interrupt spell is available
		local interruptSpell = PQR_InterruptSpell()
		if interruptSpell ~= 0 then
			
			local interruptName = GetSpellInfo(interruptSpell)
			if not PQR_SpellAvailable(interruptSpell) or not IsSpellInRange(interruptName, customTarget) then
				return false
			end
		else
			return false
		end
	
		--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
		if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
			PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
			CastSpellByID(interruptSpell, customTarget)
			return true
		end
		
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Focus</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI Xelper Interrupt (Arena) ]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  PQI is Required  --  --
if PQI_AlphaUtilities_Stop then return false end

if PQI_AlphaUtilities_XelperInterrupt_enable then
	for i=1,5 do
		local customTarget = &amp;quot;arena&amp;quot;..i
		local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
		local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
		
		if channelName ~= nil then
			--target is channeling a spell that is interruptable
			--load the channel variables into the cast variables to make logic a little easier.
			castName = channelName
			castStartTime = channelStartTime
			castEndTime = channelEndTime
			castInterruptable = channelInterruptable
		end
		
		--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
		if castInterruptable == false then
			castInterruptable = true
		else
			castInterruptable = false
		end
		
		--we can&amp;apos;t attack the target.
		if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
			return false
		end
		
		if castInterruptable then
			--target is casting something that is interruptable.
			--the following 2 variables are named logically... value is in seconds.
			local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
			local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
			local castTime = castEndTime - castStartTime
			local currentPercent = timeSinceStart / castTime * 100000
			
			--interrupt percentage check
			if currentPercent &amp;lt; PQR_InterruptPercent then
				return false
			end
		
			--minimum interrupt time.
			if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
				return false
			end
		
			--make sure the interrupt spell is available
			local interruptSpell = PQR_InterruptSpell()
			if interruptSpell ~= 0 then
				
				local interruptName = GetSpellInfo(interruptSpell)
				if not PQR_SpellAvailable(interruptSpell) or not IsSpellInRange(interruptName, customTarget) then
					return false
				end
			else
				return false
			end
		
			--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
			if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
				PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
				CastSpellByID(interruptSpell, customTarget)
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--[PQI Global Variables]--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  --  Alpha Utilities Notify Frame  --  --
if PQI_Alpha_Utilities_NotifyFrame == nil then
	PQI_Alpha_Utilities_NotifyFrame = true
	Alpha_Utilities_NotifyFrame = nil
	function Alpha_Utilities_NotifyFrame_OnUpdate()
		if (Alpha_Utilities_NotifyFrameTime &amp;lt; GetTime()) then
			local alpha = Alpha_Utilities_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then Alpha_Utilities_NotifyFrame:SetAlpha(alpha - .000001) end
			if (aplha == 0) then Alpha_Utilities_NotifyFrame:Hide() end
		end
	end
	
	-- messages.
	function Alpha_Utilities_Notify_Long(message)
		Alpha_Utilities_NotifyFrame.text:SetText(message)
		Alpha_Utilities_NotifyFrame:SetAlpha(1)
		Alpha_Utilities_NotifyFrame:Show()
		Alpha_Utilities_NotifyFrameTime = (GetTime() + 15)
	end
	function Alpha_Utilities_Notify_Short(message)
		Alpha_Utilities_NotifyFrame.text:SetText(message)
		Alpha_Utilities_NotifyFrame:SetAlpha(1)
		Alpha_Utilities_NotifyFrame:Show()
		Alpha_Utilities_NotifyFrameTime = (GetTime() + 2)
	end
		
	-- Notification Frame
	Alpha_Utilities_NotifyFrame = CreateFrame(&amp;apos;Frame&amp;apos;)
	Alpha_Utilities_NotifyFrame:ClearAllPoints()
	Alpha_Utilities_NotifyFrame:SetHeight(300)
	Alpha_Utilities_NotifyFrame:SetWidth(650)
	Alpha_Utilities_NotifyFrame:SetScript(&amp;apos;OnUpdate&amp;apos;, Alpha_Utilities_NotifyFrame_OnUpdate)
	Alpha_Utilities_NotifyFrame:Hide()
	Alpha_Utilities_NotifyFrame.text = Alpha_Utilities_NotifyFrame:CreateFontString(nil, &amp;apos;BACKGROUND&amp;apos;, &amp;apos;PVPInfoTextFont&amp;apos;)
	Alpha_Utilities_NotifyFrame.text:SetAllPoints()
	Alpha_Utilities_NotifyFrame:SetPoint(&amp;apos;CENTER&amp;apos;, 0, 200)
	Alpha_Utilities_NotifyFrameTime = 0
	
	Alpha_Utilities_NotifyFrame2 = nil
	function Alpha_Utilities_NotifyFrame2_OnUpdate()
		if (Alpha_Utilities_NotifyFrame2Time &amp;lt; GetTime()) then
			local alpha = Alpha_Utilities_NotifyFrame2:GetAlpha()
			if (alpha ~= 0) then Alpha_Utilities_NotifyFrame2:SetAlpha(alpha - .000001) end
			if (aplha == 0) then Alpha_Utilities_NotifyFrame2:Hide() end
		end
	end
	
	-- messages.
	function Alpha_Utilities_Notify2_Long(message)
		Alpha_Utilities_NotifyFrame2.text:SetText(message)
		Alpha_Utilities_NotifyFrame2:SetAlpha(1)
		Alpha_Utilities_NotifyFrame2:Show()
		Alpha_Utilities_NotifyFrame2Time = (GetTime() + 15)
	end
	function Alpha_Utilities_Notify2_Short(message)
		Alpha_Utilities_NotifyFrame2.text:SetText(message)
		Alpha_Utilities_NotifyFrame2:SetAlpha(1)
		Alpha_Utilities_NotifyFrame2:Show()
		Alpha_Utilities_NotifyFrame2Time = (GetTime() + 2)
	end
		
	-- Notification Frame
	Alpha_Utilities_NotifyFrame2 = CreateFrame(&amp;apos;Frame&amp;apos;)
	Alpha_Utilities_NotifyFrame2:ClearAllPoints()
	Alpha_Utilities_NotifyFrame2:SetHeight(300)
	Alpha_Utilities_NotifyFrame2:SetWidth(650)
	Alpha_Utilities_NotifyFrame2:SetScript(&amp;apos;OnUpdate&amp;apos;, Alpha_Utilities_NotifyFrame2_OnUpdate)
	Alpha_Utilities_NotifyFrame2:Hide()
	Alpha_Utilities_NotifyFrame2.text = Alpha_Utilities_NotifyFrame2:CreateFontString(nil, &amp;apos;BACKGROUND&amp;apos;, &amp;apos;PVPInfoTextFont&amp;apos;)
	Alpha_Utilities_NotifyFrame2.text:SetAllPoints()
	Alpha_Utilities_NotifyFrame2:SetPoint(&amp;apos;CENTER&amp;apos;, 0, 180)
	Alpha_Utilities_NotifyFrame2Time = 0
end
	
--  --  Initialized  --  --
if PQR_InterruptStarted then
	PQR_InterruptStarted = false
	getRunty = true
	--  --  PQI is Required  --  --
	if (IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;)) == 1 then
		PQInterfaceNotLoaded = true
		PQInterfaceVersion = (tonumber(GetAddOnMetadata(&amp;quot;PQInterface&amp;quot;, &amp;quot;Version&amp;quot;)))
		if PQInterfaceVersion &amp;gt;= 2.21 then
			PQInterfaceNotUpdated = true
		end
	end
	if PQInterfaceNotLoaded == nil or PQInterfaceNotUpdated == nil then
		PQI_AlphaUtilities_Stop = true
		Alpha_Utilities_Notify_Long(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Utilities Error|cff00ffff&amp;gt; |cffb048f8You don&amp;apos;t have PQInterface installed or it is not up to date  PQInterface is now Required! Alpha Utilities has been halted.                                    You can download the latest version from:                                                                     |cffffffffhttp://PQRotation.wikia.com/wiki/PQInterface&amp;quot;)
		print(format(&amp;quot;|cff00ffff&amp;lt;|cff00aaffAlpha Utilities Error|cff00ffff&amp;gt; |cffb048f8You don&amp;apos;t have PQInterface installed or it is not up to date - PQInterface is now Required! Alpha Utilities has been halted. You can download the latest version from: |cffffffffhttp://PQRotation.wikia.com/wiki/PQInterface&amp;quot;))
		return true		
	end	
end
if PQI_AlphaUtilities_Stop == true then return false end

--  --  To Chat  --  --
if PQI_AlphaUtilities_ChatReminders_enable then
	if PQI_AlphaUtilities_Utility_value ~= 3
	or PQI_AlphaUtilities_Utility_enable == false  then
		if PQI_sendToChatMillOn == false then
			PQI_sendToChatMillOn = true
		end
	end
	if PQI_AlphaUtilities_Utility_value ~= 4
	or PQI_AlphaUtilities_Utility_enable == false  then
		if PQI_sendToChatProsOn == false then
			PQI_sendToChatProsOn = true
		end
	end
end
--  --  Modular GUI  --  --
if PQI_AlphaUtilities_ModularUI_enable then
	if PQI_AlphaUtilities_Utility_value == 1
	and not PQI_AlphaUtilities_GUI_Farming_enable then
		PQI_AlphaUtilities_GUI_Farming = true
		PQI_AlphaUtilities_GUI_Disenchant = false 
		PQI_AlphaUtilities_GUI_Mill = false
		PQI_AlphaUtilities_GUI_Prospect = false
		PQI_AlphaUtilities_GUI_Default = false
	end
	if PQI_AlphaUtilities_Utility_value == 2
	and not PQI_AlphaUtilities_GUI_Disenchant_enable then
		PQI_AlphaUtilities_GUI_Farming = false
		PQI_AlphaUtilities_GUI_Disenchant = true 
		PQI_AlphaUtilities_GUI_Mill = false
		PQI_AlphaUtilities_GUI_Prospect = false
		PQI_AlphaUtilities_GUI_Default = false
	end
	if PQI_AlphaUtilities_Utility_value == 3
	and not PQI_AlphaUtilities_GUI_Mill_enable then
		PQI_AlphaUtilities_GUI_Farming = false
		PQI_AlphaUtilities_GUI_Disenchant = false 
		PQI_AlphaUtilities_GUI_Mill = true
		PQI_AlphaUtilities_GUI_Prospect = false
		PQI_AlphaUtilities_GUI_Default = false
	end
	if PQI_AlphaUtilities_Utility_value == 4
	and not PQI_AlphaUtilities_GUI_Prospect_enable then
		PQI_AlphaUtilities_GUI_Farming = false
		PQI_AlphaUtilities_GUI_Disenchant = false 
		PQI_AlphaUtilities_GUI_Mill = false
		PQI_AlphaUtilities_GUI_Prospect = true
		PQI_AlphaUtilities_GUI_Default = false
	end
elseif not PQI_AlphaUtilities_GUI_Default_enable then
	PQI_AlphaUtilities_GUI_Farming = false
	PQI_AlphaUtilities_GUI_Disenchant = false 
	PQI_AlphaUtilities_GUI_Mill = false
	PQI_AlphaUtilities_GUI_Prospect = false
	PQI_AlphaUtilities_GUI_Default = true
end
--  --  Initialized  --  --
if PQI_AlphaUtilitiesInit == nil then
	PQI_AlphaUtilitiesInit = true
	PQR_PauseRotation = 0
	--  --  Modular GUI  --  --
	PQI_AlphaUtilities_GUI_Farming_enable = false
	PQI_AlphaUtilities_GUI_Disenchant_enable = false
	PQI_AlphaUtilities_GUI_Mill_enable = false
	PQI_AlphaUtilities_GUI_Prospect_enable = false
	PQI_AlphaUtilities_GUI_Default_enable = false
	if PQI_AlphaUtilities_ModularUI_enable then
		PQI_AlphaUtilities_GUI_Farming = true
		PQI_AlphaUtilities_GUI_Disenchant = false 
		PQI_AlphaUtilities_GUI_Mill = false
		PQI_AlphaUtilities_GUI_Prospect = false
		PQI_AlphaUtilities_GUI_Default = false
	else 
		PQI_AlphaUtilities_GUI_Farming = false
		PQI_AlphaUtilities_GUI_Disenchant = false 
		PQI_AlphaUtilities_GUI_Mill = false
		PQI_AlphaUtilities_GUI_Prospect = false
		PQI_AlphaUtilities_GUI_Default = true
	end
	--  --  To Chat  --  --
	PQI_sendToChatMillOn = true
	PQI_sendToChatProsOn = true
	--  --  PQI Settings   --  --
	RunMacroText(&amp;quot;/PQI show&amp;quot;)
	RunMacroText(&amp;quot;/PQI config show&amp;quot;)
	RunMacroText(&amp;quot;/PQI config width 250&amp;quot;)
	--  --  Xelper  --  --
	--Only interrupt these abilities:
	--PQR_AddInterrupt(&amp;quot;Holy Light&amp;quot;)
	--PQR_AddInterrupt(&amp;quot;Flash of Light&amp;quot;)
	--PQR_AddInterrupt(GetSpellInfo(16914)) --Hurricane

	--This is the delay before interrupting in seconds.
	PQR_InterruptDelay = 0.05
	
	--This is the percentage of the cast to wait before interrupting
	PQR_InterruptPercent = 0
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></INTERRUPT>