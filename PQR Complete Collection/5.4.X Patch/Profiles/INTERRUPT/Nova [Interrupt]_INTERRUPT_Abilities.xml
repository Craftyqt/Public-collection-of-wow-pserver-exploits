<?xml version="1.0" encoding="utf-8" ?><INTERRUPT><Ability><Name>-- Initialize --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if xelperInterruptInit == nil then
	--TestComment
	xelperInterruptInit = true
	function PQR_InterruptSpell()
		local _, playerClass = UnitClass(&amp;quot;player&amp;quot;)
		
		if playerClass == &amp;quot;DEATHKNIGHT&amp;quot; then
			return 47528
		elseif playerClass == &amp;quot;DRUID&amp;quot; then
			local catForm = UnitBuffID(&amp;quot;player&amp;quot;, 768)
			if catForm ~= nil then
				return 80965
			else
				return 80964
			end
		elseif playerClass == &amp;quot;HUNTER&amp;quot; then
			return 34490
		elseif playerClass == &amp;quot;MAGE&amp;quot; then
			return 2139
		elseif playerClass == &amp;quot;PALADIN&amp;quot; then
			return 96231
		elseif playerClass == &amp;quot;PRIEST&amp;quot; then
			return 15487
		elseif playerClass == &amp;quot;ROGUE&amp;quot; then
			return 1766
		elseif playerClass == &amp;quot;SHAMAN&amp;quot; then
			return 57994
		elseif playerClass == &amp;quot;WARLOCK&amp;quot; then
			return 19647
		elseif playerClass == &amp;quot;WARRIOR&amp;quot; then
			return 6552
		elseif playerClass == &amp;quot;MONK&amp;quot; then
			return 116705
		else
			return 0
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Variables: Interrupt --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--PQR_InterruptStarted is a global flag to indicate that a new interrupt rotation has started.

if PQR_InterruptStarted then
	PQR_InterruptStarted = false

	--Only interrupt these abilities:
	--PQR_AddInterrupt(&amp;quot;Holy Light&amp;quot;)
	--PQR_AddInterrupt(&amp;quot;Flash of Light&amp;quot;)
	--PQR_AddInterrupt(GetSpellInfo(16914)) --Hurricane

	--This is the delay before interrupting in seconds.
	PQR_InterruptDelay = 0.05
	
	--This is the percentage of the cast to wait before interrupting
	PQR_InterruptPercent = math.random(30, 50)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (Target)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local customTarget = &amp;quot;target&amp;quot;
local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)

if channelName ~= nil then
	--target is channeling a spell that is interruptable
	--load the channel variables into the cast variables to make logic a little easier.
	castName = channelName
	castStartTime = channelStartTime
	castEndTime = channelEndTime
	castInterruptable = channelInterruptable
end

--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
if castInterruptable == false then
	castInterruptable = true
else
	castInterruptable = false
end

--we can&amp;apos;t attack the target.
if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
	return false
end

if castInterruptable then
	--target is casting something that is interruptable.
	--the following 2 variables are named logically... value is in seconds.
	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
	local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
	local castTime = castEndTime - castStartTime
	local currentPercent = timeSinceStart / castTime * 100000
	
	--interrupt percentage check
	if currentPercent &amp;lt; PQR_InterruptPercent then
		return false
	end

	--minimum interrupt time.
	if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
		return false
	end

	--make sure the interrupt spell is available
	local interruptSpell = PQR_InterruptSpell()
	if interruptSpell ~= 0 then
		
		local interruptName = GetSpellInfo(interruptSpell)
		if not PQR_SpellAvailable(interruptSpell) or not IsSpellInRange(interruptName, customTarget) then
			return false
		end
	else
		return false
	end

	--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
	if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
		PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
		CastSpellByName(GetSpellInfo(interruptSpell), customTarget)
		return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (Focus)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local customTarget = &amp;quot;focus&amp;quot;
local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)

if channelName ~= nil then
	--target is channeling a spell that is interruptable
	--load the channel variables into the cast variables to make logic a little easier.
	castName = channelName
	castStartTime = channelStartTime
	castEndTime = channelEndTime
	castInterruptable = channelInterruptable
end

--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
if castInterruptable == false then
	castInterruptable = true
else
	castInterruptable = false
end

--we can&amp;apos;t attack the target.
if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
	return false
end

if castInterruptable then
	--target is casting something that is interruptable.
	--the following 2 variables are named logically... value is in seconds.
	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
	local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
	local castTime = castEndTime - castStartTime
	local currentPercent = timeSinceStart / castTime * 100000
	
	--interrupt percentage check
	if currentPercent &amp;lt; PQR_InterruptPercent then
		return false
	end

	--minimum interrupt time.
	if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
		return false
	end

	--make sure the interrupt spell is available
	local interruptSpell = PQR_InterruptSpell()
	if interruptSpell ~= 0 then
		
		local interruptName = GetSpellInfo(interruptSpell)
		if not PQR_SpellAvailable(interruptSpell) or not IsSpellInRange(interruptName, customTarget) then
			return false
		end
	else
		return false
	end

	--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
	if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
		PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
		CastSpellByName(GetSpellInfo(interruptSpell), customTarget)
		return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Focus</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Interrupt (Arena)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>for i=1,5 do
	local customTarget = &amp;quot;arena&amp;quot;..i
	local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
	local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
	
	if channelName ~= nil then
		--target is channeling a spell that is interruptable
		--load the channel variables into the cast variables to make logic a little easier.
		castName = channelName
		castStartTime = channelStartTime
		castEndTime = channelEndTime
		castInterruptable = channelInterruptable
	end
	
	--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
	if castInterruptable == false then
		castInterruptable = true
	else
		castInterruptable = false
	end
	
	--we can&amp;apos;t attack the target.
	if UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) == nil then
		return false
	end
	
	if castInterruptable then
		--target is casting something that is interruptable.
		--the following 2 variables are named logically... value is in seconds.
		local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
		local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
		local castTime = castEndTime - castStartTime
		local currentPercent = timeSinceStart / castTime * 100000
		
		--interrupt percentage check
		if currentPercent &amp;lt; PQR_InterruptPercent then
			return false
		end
	
		--minimum interrupt time.
		if timeSinceStart - PQR_InterruptDelay &amp;lt; 0 then
			return false
		end
	
		--make sure the interrupt spell is available
		local interruptSpell = PQR_InterruptSpell()
		if interruptSpell ~= 0 then
			
			local interruptName = GetSpellInfo(interruptSpell)
			if not PQR_SpellAvailable(interruptSpell) or not IsSpellInRange(interruptName, customTarget) then
				return false
			end
		else
			return false
		end
	
		--Finally, make sure the spell they are casting is on the interrupt list or interrupt all is checked
		if PQR_IsOnInterruptList(castName) or PQR_IsInterruptAll() then
			PQR_Debug(&amp;quot;Casting interrupt on &amp;quot;..customTarget)
			CastSpellByName(GetSpellInfo(interruptSpell), customTarget)
			return true
		end
		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></INTERRUPT>