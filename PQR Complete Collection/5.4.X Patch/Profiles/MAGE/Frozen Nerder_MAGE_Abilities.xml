<?xml version="1.0" encoding="utf-8" ?><MAGE><Ability><Name>Rune of Power</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsPlayerSpell(RUNEOFPOWER) == true then
	if IsLeftControlKeyDown() and not GetCurrentKeyBoardFocus() then
		Cast(RUNEOFPOWER)
		if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mirror Image</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CDUsage() == true then
	if GetSpellCooldown(MIRRORIMAGE) == 0 then
		CastCD(MIRRORIMAGE)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frozen Orb</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_UnitFacing(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;, true) &amp;lt;= 15
 or PQR_UnitFacing(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;, true) &amp;gt;= 345 then
	if GetSpellCooldown(FROZENORB) == 0 then
		CastCD(FROZENORB)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Icy Veins</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CDUsage() == true then
	if GetSpellCooldown(ICYVEINS) == 0 then
		if ( (UnitDebuffID(&amp;quot;target&amp;quot;, FROSTBOLT, &amp;quot;player&amp;quot;) ~= nil and select(4, UnitDebuffID(&amp;quot;target&amp;quot;, FROSTBOLT, &amp;quot;player&amp;quot;)) &amp;gt;= 3 )
		 and ( UnitBuffID(&amp;quot;player&amp;quot;, BRAINFREEZE) ~= nil
		 or UnitBuffID(&amp;quot;player&amp;quot;, FOFBUFF) ) )
		 or ( TimeToDie &amp;lt; 22
		 and not PQR_IsMoving(0.1) ) then
			CastCD(ICYVEINS)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Presense of Mind</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CDUsage() == true then
	if UnitBuffID(&amp;quot;player&amp;quot;, ICYVEINSBUFF) ~= nil then
		CastCD(POM)
	end
	
	if UnitBuffID(&amp;quot;player&amp;quot;, ICYVEINSBUFF) == nil
	 and ( OnCooldown(131078) and CooldownRemains(131078) &amp;gt; 15 ) then
		CastCD(POM)
	end
	
	if TimeToDie &amp;lt; 15 then
 		CastCD(POM)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Alter Time</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CDUsage() == true then
	if IsPlayerSpell(ALTERTIME) == true
	 and GetSpellCooldown(ALTERTIME) == 0 then
 		if not UnitBuffID(&amp;quot;player&amp;quot;, ALTERTIMEBUFF)
		 and UnitBuffID(&amp;quot;player&amp;quot;, ICYVEINSBUFF) ~= nil then
 			CastCD(ALTERTIME)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Flamestrike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoE then
	Cast(FLAMESTRIKE, &amp;quot;target&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frostfire Bolt</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, BRAINFREEZE) ~= nil then
	Cast(FROSTFIREBOLT)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Ice Lance</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, FOFBUFF) then
	Cast(ICELANCE)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nether Tempest</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local NT, _, _, _, _, _, NTtime = UnitDebuffID(&amp;quot;target&amp;quot;, NETHERTEMPTEST, &amp;quot;player&amp;quot;)

if ( NT == nil
 or (NT and NTtime - GetTime() &amp;lt; 1) )
 and TimeToDie &amp;gt; 6 then
	Cast(NETHERTEMPTEST)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frostbolt</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local fb, _, _, fbcount = UnitDebuffID(&amp;quot;target&amp;quot;, FROSTBOLT, &amp;quot;player&amp;quot;)

if fb == nil
 or ( fb ~= nil
 and fbcount &amp;lt; 3 ) then
	Cast(FROSTBOLT, &amp;quot;target&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fire Blast</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_IsMoving(0.3)
 and GetSpellCooldown(FIREBLAST) == 0 then
 	Cast(FIREBLAST)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Initialize []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	PQR_RotationStarted = false

PQR_WriteToChat(&amp;quot;|cffffff00Frost Mage Profile Version - |cff33CC001.03&amp;quot;)
PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Frost Profile Verion - 1.03&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
PQR_SwapCheckTimer = 0

	--Tables
	Nova_ValueCheck = {
		[1] =	{ Var1 = nil,	Text = &amp;quot;Survivability&amp;quot;,			Var2 = nil },
		[2] =	{ Var1 = 30, 	Text = &amp;quot;Healthstone&amp;quot;,			Var2 = 1 },
--		[3] =	{ Var1 = 75, 	Text = &amp;quot;Recuperate&amp;quot;, 			Var2 = 0 },
--		[4] =	{ Var1 = 3,		Text = &amp;quot;Recup at CP&amp;quot;,			Var2 = nil },
--		[5] =	{ Var1 = nil,	Text = &amp;quot;MH Poison&amp;quot;,				Var2 = nil },
--		[6] =	{ Var1 = nil,	Text = &amp;quot;Deadly Poison&amp;quot;,			Var2 = 1 },
--		[7] =	{ Var1 = nil,	Text = &amp;quot;Wound Poison&amp;quot;,			Var2 = 0 },
--		[8] =	{ Var1 = nil, 	Text = &amp;quot;OH Poison&amp;quot;, 			Var2 = nil },
--		[9] =	{ Var1 = nil, 	Text = &amp;quot;Leeching Poison&amp;quot;, 		Var2 = 0 },
--		[10] =	{ Var1 = nil, 	Text = &amp;quot;Crippling Poison&amp;quot;,		Var2 = 1 },
--		[11] =	{ Var1 = nil, 	Text = &amp;quot;Mind Numbing Poison&amp;quot;,	Var2 = 0 },
--		[12] =	{ Var1 = nil,	Text = &amp;quot;Paralytic Poison&amp;quot;,		Var2 = 0 },
--		[13] = 	{ Var1 = nil, 	Text = &amp;quot;AoE Toggles&amp;quot;, 			Var2 = nil },
--		[14] = 	{ Var1 = nil, 	Text = &amp;quot;Crimson Tempest&amp;quot;,		Var2 = 1 },
--		[15] =	{ Var1 = nil, 	Text = &amp;quot;Fan of Knives&amp;quot;, 		Var2 = 1 },
--		[16] =	{ Var1 = nil, 	Text = &amp;quot;Cooldowns&amp;quot;, 			Var2 = nil },
--		[17] =	{ Var1 = nil, 	Text = &amp;quot;Shadow Blades&amp;quot;, 		Var2 = 1 },
--		[18] =	{ Var1 = nil, 	Text = &amp;quot;Vanish&amp;quot;, 				Var2 = 1 },
--		[19] =	{ Var1 = nil, 	Text = &amp;quot;Preparation&amp;quot;,			Var2 = 1 },
--		[20] =	{ Var1 = nil, 	Text = &amp;quot;Vendetta&amp;quot;,	 			Var2 = 1 },
--		[21] =	{ Var1 = nil, 	Text = &amp;quot;Other&amp;quot;, 				Var2 = nil },
--		[22] =	{ Var1 = nil, 	Text = &amp;quot;Trinket 1&amp;quot;, 			Var2 = 0 },
--		[23] =	{ Var1 = nil, 	Text = &amp;quot;Trinket 2&amp;quot;,				Var2 = 0 },
--		[24] =	{ Var1 = nil, 	Text = &amp;quot;Tinkered Gloves&amp;quot;,		Var2 = 1 },
		[3] =	{ Var1 = nil,	Text = &amp;quot;CDs: Boss Only&amp;quot;,		Var2 = 1 },
--		[26] =	{ Var1 = nil,	Text = &amp;quot;Tricks Focus&amp;quot;,			Var2 = 1 },
--		[27] =	{ Var1 = nil,	Text = &amp;quot;Pooling &amp; Clipping&amp;quot;,	Var2 = 1 },
--		[28] =	{ Var1 = nil,	Text = &amp;quot;Openers&amp;quot;,				Var2 = nil },
--		[29] =	{ Var1 = nil,	Text = &amp;quot;Ambush&amp;quot;,				Var2 = 0 },
--		[30] =	{ Var1 = nil,	Text = &amp;quot;Garrote&amp;quot;,				Var2 = 0 },
--		[31] =	{ Var1 = nil,	Text = &amp;quot;Mutilate or Dispatch&amp;quot;,	Var2 = 1 }
		}
	Nova_CooldownCheck = {
		[1] =	{ Mod = 8,		Text = &amp;quot;Area of Effect Toggle&amp;quot;,	Var1 = 1},
		[2] =	{ Mod = (8 + 2),Text = &amp;quot;Cooldown Toggle&amp;quot;,		Var1 = 1},
		[3] =	{ Mod = 4,		Text = &amp;quot;Pause Rotation&amp;quot;,		Var1 = 1}
		}
	-- Load LUA files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nova_Frame.lua&amp;quot;) == true then
			MiniMapCreation()
			-- Slash Commands
			SLASH_NOVAFRAME1 = &amp;quot;/novaframe&amp;quot;
			SLASH_NOVAFRAME2 = &amp;quot;/nova&amp;quot;
			function SlashCmdList.NOVAFRAME(msg, editbox)
				if Setup == nil then
					Setup = true
					FrameCreation(Nova_ValueCheck, Nova_CooldownCheck, &amp;quot;Frost Options&amp;quot;, &amp;quot;CD Settings&amp;quot;)
				end
				if not Nova_Frame:IsShown() then
					Nova_Frame:Show() else Nova_Frame:Hide()
				end
			end
		end
	end

	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nerder.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You&amp;apos;re missing the PQR_Nerder.lua file. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
	
	if not mage then
		AoE = false
		UseCD = true
		mage = true
	end
	
	if GetSpecialization() ~= 3 then
		PQR_WriteToChat(&amp;quot;You must be in Frost Spec. Please switch and try again.&amp;quot;, &amp;quot;Warning&amp;quot;)
		PQR_StopRotation()
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Hot Keys []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if modtime == nil then
	modtime = 0
end

if Nova_Mod() == AoETog and GetTime() - modtime &amp;gt; 0.3 then
	modtime = GetTime()
	if AoE then
		AoE = false
		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFFE61515Disabled&amp;quot;)
	else
		AoE = true
		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFF15E615Enabled&amp;quot;)
	end
end

if Nova_Mod() == CDTog and GetTime() - modtime &amp;gt; 0.3 then
	modtime = GetTime()
	if UseCD then
		UseCD = false
		PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;)
	else
		UseCD = true
		PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Enabled&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Key Mods []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>Nova_Mod = nil
function Nova_Mod()
	total = 0
	if IsLeftShiftKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 1
	end
	if IsLeftControlKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 2
	end
	if IsLeftAltKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 4
	end
	if IsRightShiftKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 8
	end
	if IsRightControlKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 16
	end
	if IsRightAltKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 32
	end
	return total
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Pause []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if pauseCheck == 1 then
	if Nova_Mod() == pause
	or IsMounted()
	or UnitBuffID(&amp;quot;player&amp;quot;, 104235)
	or UnitBuffID(&amp;quot;player&amp;quot;, 104262)
	or UnitIsDead(&amp;quot;target&amp;quot;)
	or UnitIsDead(&amp;quot;player&amp;quot;)
	or UnitCastingInfo(&amp;quot;player&amp;quot;)
	or not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		return true
	end
elseif pauseCheck ~= 1 then
	return false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] CVars []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--CVar Registration
for i=1,#Nova_ValueCheck do
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1)
	end
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_ValueCheck[i].Var2)
	end
end

for i=1,#Nova_CooldownCheck do
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_CooldownCheck[i].Mod)
	end
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_CooldownCheck[i].Var1)
	end
end
	--CVar Translations
	--Enabled/Disabled
	hsenabled =		GetCVarBool(&amp;quot;Nova_Healthstone_Enabled&amp;quot;)
	cdBoss =		GetCVarBool(&amp;quot;Nova_CDs:_Boss_Only_Enabled&amp;quot;)
	--Thresholds
	hsHealth =		tonumber(GetCVar(&amp;quot;Nova_Healthstone&amp;quot;))
	--Cooldowns
	AoETog =		tonumber(GetCVar(&amp;quot;Nova_Area_of_Effect_Toggle&amp;quot;))
	CDTog =			tonumber(GetCVar(&amp;quot;Nova_Cooldown_Toggle&amp;quot;))
	pause =			tonumber(GetCVar(&amp;quot;Nova_Pause_Rotation&amp;quot;))
	--Cooldown Checks
	AoETogCheck =	GetCVarBool(&amp;quot;Nova_Area_of_Effect_Toggle_Enabled&amp;quot;)
	CDTogCheck =	GetCVarBool(&amp;quot;Nova_Cooldown_Toggle_Enabled&amp;quot;)
	pauseCheck =	GetCVarBool(&amp;quot;Nova_Pause_Rotation_Enabled&amp;quot;)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Functions []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-----------------
-- Time to die --
-----------------
TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

-- dummy
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 999999
	end
end

CDUsage = nil
function CDUsage()
	if UseCD and ( cdBoss ~= 1
	 or ( cdBoss == 1 and SpecialUnit() ) ) then
		return true
	else
		return false
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Filler Frostbolt</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, FOFBUFF) ~= nil
 or UnitBuffID(&amp;quot;player&amp;quot;, BRAINFREEZE) ~= nil then
	return false
end

if GetSpellCooldown(FROSTBOLT) == 0 then
	Cast(FROSTBOLT, &amp;quot;target&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tinkered Gloves</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CDUsage() == true then
	UseItem(10)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Ice Lance Moving</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local start, duration = GetSpellCooldown(FIREBLAST)

if PQR_IsMoving(0.3) and ( start &amp;gt; 0 and duration &amp;gt; 1.5 ) then
	Cast(ICELANCE)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Arcane Brilliance</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, ARCANEBRILLIANCE) == nil then
	Cast(ARCANEBRILLIANCE, &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Pet Summon</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitExists(&amp;quot;pet&amp;quot;) then
	Cast(SUMMONELE)
end

if UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(SUMMONELE)
 and UnitExists(&amp;quot;pet&amp;quot;) then
 	SpellStopCasting()
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Invocation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CDUsage() == true then
	if PQR_IsMoving(0.2) then
		return false
	end

	if IsPlayerSpell(INVOCATION) == true then
		if not ( UnitBuffID(&amp;quot;player&amp;quot;, 116257) or UnitBuffID(&amp;quot;player&amp;quot;, 12051) ) then
			Cast(EVOCATION)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Frost Armor</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitBuffID(&amp;quot;player&amp;quot;, 7302) then
 	Cast(7302)
end

if UnitCastingInfo(&amp;quot;player&amp;quot;) == GetSpellInfo(7302)
 and UnitBuffID(&amp;quot;player&amp;quot;, 7302) then
 	SpellStopCasting()
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nether Tempest Mouseover</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local NTM, _, _, _, _, _, NTMtime = UnitDebuffID(&amp;quot;mouseover&amp;quot;, NETHERTEMPTEST, &amp;quot;player&amp;quot;)

if UnitExists(&amp;quot;mouseover&amp;quot;) ~= nil
 and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;)
 and not ( UnitIsUnit(&amp;quot;mouseover&amp;quot;, &amp;quot;target&amp;quot;)
 or UnitIsUnit(&amp;quot;mouseover&amp;quot;, &amp;quot;focus&amp;quot;) )
 and not UnitIsDead(&amp;quot;mouseover&amp;quot;) then
 	if ( NTM == nil
	 or (NTM and NTMtime - GetTime() &amp;lt; 1) )
	 and TimeToDie &amp;gt; 6 then
		CastSpellByName(GetSpellInfo(NETHERTEMPTEST), &amp;quot;mouseover&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Ice Barrier</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsPlayerSpell(ICEBARRIER) == true then
	if not HasBuff(ICEBARRIER) and not OnCooldown(ICEBARRIER) then
		Cast(ICEBARRIER)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Spell Steal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;target&amp;quot;) then
	for b = 1, 40 do
		if select(9, UnitBuff(&amp;quot;target&amp;quot;, b)) == 1 then
			CastSpellByName(GetSpellInfo(SPELLSTEAL), &amp;quot;target&amp;quot;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Raid Events []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsInRaid() then
	group = &amp;quot;raid&amp;quot;
elseif IsInGroup() then
	group = &amp;quot;party&amp;quot;
end

for i=1, GetNumGroupMembers() do
	if UnitDebuffID(group..i, 136512) ~= nil then --Hex of Confusion. Make sure its whatever harmful one you need dispelled
		PQR_CustomTarget = group..i 
		if PQR_UnitDistance(&amp;quot;player&amp;quot;, PQR_CustomTarget) &amp;lt;= 40 then
        	CastSpellByName(GetSpellInfo(475), PQR_CustomTarget) --475 is the mage dispell, so change that to what you need
        end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></MAGE>