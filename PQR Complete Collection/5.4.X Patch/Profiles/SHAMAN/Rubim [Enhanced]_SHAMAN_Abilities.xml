<?xml version="1.0" encoding="utf-8" ?><SHAMAN><Ability><Name>[ MISC ] Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp
Update_Nova()
local Nova_Mod = Nova_Mod
local HOTKEY = PHotkey
local HOTKEY2 = PHotkey2

--Code by Crystal_tech
if Nova_Mod() == PHotkey
or Nova_Mod() == PHotkey2
or IsMounted()
or not PlayerCombat
or UnitInVehicle(&amp;quot;player&amp;quot;)
or UnitIsDead(&amp;quot;player&amp;quot;)
 then
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>0 - Auto Cast</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not spellSucced then
	spellSucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
	spellSucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
	spellSucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)==CheckSpell then SpellSucess=true end end)
end

if SpellSucess == true then
	TextQueue(CheckSpell,1)
	CheckSpell = 0
	SpellSucess = false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Auto Buff</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>NOUSE = 1

if NoSpam == nil
then
	NoSpam = 0
end
--SHIELD
if IsMounted()
or UnitInVehicle(&amp;quot;player&amp;quot;) then return false end

if not PlayerCombat
then
	if PQR_SpellAvailable(LightningShield)
	and not LightningShieldBuff then
		CastSpell(LightningShield)
	end
	
	if PQR_SpellAvailable(TotemicRecall)
	and GetTime() - NoSpam &amp;gt; 2
	and UnitCastingInfo(&amp;quot;player&amp;quot;) == nil
	and NOUSE == 0
	and TotemFireTime &amp;gt; 1
	and TotemWaterName ~= GetSpellInfo(HealingStreamTotem)
	then 
		CastSpell(TotemicRecall)
		NoSpam = GetTime()
	end
	
	if PQR_SpellAvailable(GhostWolf)
	and PQR_IsMoving(1)
	and GetShapeshiftForm() ~= 1
	and not RangedRange()
	then
		CastSpell(GhostWolf)
	end
end

--BUFFS
local MH,_,_,OH = GetWeaponEnchantInfo()

--WINFURY
if MH == nil
then
	CastSpellByName(GetSpellInfo(8232),nil)
end

--FLAMETONGUE
if OH == nil
then
	CastSpellByName(GetSpellInfo(8024),nil)
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Spell List</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>Ascendance = 114049
BindElemental = 76780
Bloodlust = 2825
CapacitorTotem = 108269
ChainHeal = 1064
ChainLightning = 421
CleanseSpirit = 51886
EarthElementalTotem = 2062
EarthShock = 8042
EarthbindTotem = 2484
FireElementalTotem = 2894
FlameShock = 8050
FlametongueWeapon = 8024
FrostShock = 80567
FrostbrandWeapon = 8033
GhostWolf = 2645
GroundingTotem = 8177
HealingRain = 73920
HealingStreamTotem = 5394
HealingSurge = 8004
Heroism = 32182
Hex = 51514
LightningBolt = 403
LightningShield = 324
PrimalStrike = 73899
Purge = 370
RockbiterWeapon = 8017
SpiritwalkersGrace = 79206
Stormblast = 115356
StormlashTotem = 120668
TremorTotem = 8143
TotemicRecall = 36936
UnleashElements = 73680
WaterShield = 52127
WindShear = 57994

MagmaTotem = 8190
SearingTotem = 3599

--ELEMENTAL
Earthquake = 61882
LavaBurst = 51505
ShamanisticRage = 30823
Thunderstorm = 51490


--ENHANCED
FeralSpirit = 51533
FireNova = 1535
LavaLash = 60103
ShamanisticRage = 30823
SpiritWalk = 58875
Stormstrike = 17364
WindfuryWeapon = 8232


--RESTORATION
EarthShield = 974
EarthlivingWeapon = 51730
GreaterHealingWave = 77472
HealingWave = 331
LavaBurst = 51505
ManaTideTotem = 16190
PurifySpirit = 77130
Riptide = 61295
SpiritLinkTotem = 98008

--PET
AngeredEarth = 36213
FireBlast = 57984
FireNova = 117588
Immolate = 118297
Pulverize = 118345
SpiritBite = 58859

MeeleSpell = PrimalStrike
RangedSpell = FlameShock

FlameShockDebuff = UnitBuffID(&amp;quot;player&amp;quot;,LightningShield)

----------TOEMS
_,TotemFireName,fTime,fDuration = GetTotemInfo(1)
if TotemFireName ~= nil then
	TotemFireTime = fTime + fDuration - GetTime()
else TotemFireTime = 0
end

_,TotemWaterName,wTime,wDuration = GetTotemInfo(3)
if TotemWaterName ~= nil then
	TotemWaterTime = wTime + wDuration - GetTime()
else TotemWaterTime = 0
end

-----------------
-- PROCS/BUFFS --
-----------------
Maelstrom,_,_,MaelstromCount = UnitBuffID( &amp;quot;player&amp;quot;, 53817 )

if Maelstrom == nil
then
	MaelstromCount = 0
end

LightningShieldBuff,_,_,LightningShieldCount = UnitBuffID(&amp;quot;player&amp;quot;,LightningShield)

if LightningShieldBuff == nil
then
	LightningShieldCount = 0
end
-------------
-- DEBUFFS --
-------------
FS,_,_,_,_,_,FStimer = UnitDebuffID(&amp;quot;target&amp;quot;,8050,&amp;quot;player&amp;quot;)


if not FS
then
	FStimer = 0
else
	FStimer = FStimer - GetTime()
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SkillEnabled = HSenabled
local SkillPercent = HShealth

if SkillEnabled ~= 1 then return false end

if GetItemCount(5512,false,true) &amp;gt; 0
	and PlayerHP &amp;lt;= SkillPercent
	and PQR_SpellAvailable(5512)
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and GetItemCooldown(5512) == 0
then
	UseItemByName(5512)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Death Siphon</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if HSenabled ~= 1 then return false end

if PQR_SpellAvailable(HealingSurge)
and PlayerHP &amp;lt;= HShealth
then
	CastSpell(HealingSurge)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] PQR_Text</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp

function PQR_SendText(CHOICE,SPELL)
	if CHOICE == &amp;quot;Standby&amp;quot;
	then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Standby: &amp;quot; .. ActualRotation, nil, &amp;quot;ffffff&amp;quot;)
	end
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Functions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp

-------------
-- RACIAL --
------------
function RacialDetection()
	Racial = 0
	local _,Race = UnitRace(&amp;quot;player&amp;quot;)
	if Race == &amp;quot;Orc&amp;quot;
	then
		local Orc_Racial = {
		20572,
		33697,
		33702,
		82836
		}
	
		for i=1, #Orc_Racial do
			if IsSpellKnown(Orc_Racial[i]) then
				Racial = Orc_Racial[i]
			end
		end
	elseif Race == &amp;quot;Troll&amp;quot;
	then
		Racial = 26297
	end

end

------------------
-- INIT MESSAGE --
------------------
function initMessage()
	PQR_WriteToChat(&amp;quot;|cff91e782Rubim&amp;apos;s DK Blood |cff82cee7Loaded!|cffffffff&amp;quot;)
end

function PQR_Distance(var1, var2)
        if UnitExists(var1) and not UnitIsDead(var1) then
                local x1 , y1 = select(1,PQR_UnitInfo(var1)), select(2,PQR_UnitInfo(var1))
                local x2 , y2 = select(1,PQR_UnitInfo(var2)), select(2,PQR_UnitInfo(var2))
                local w = 100000
                local h = 100000
                local distance = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2)                
                return distance
        end
end
------------------
--Level 90 Check--
------------------
--if UnitLevel(&amp;quot;player&amp;quot;) ~= 90 then
--	PQR_WriteToChat(&amp;quot;Nope, you need to be lvl 90.&amp;quot;)
--	PQR_StopRotation()
--end

-----------------
-- Meele Range --
-----------------
function MeeleRange()
	if IsSpellInRange(GetSpellInfo(MeeleSpell), &amp;quot;target&amp;quot;) == 1
	then return true else return false
	end
end

function RangedRange()
	if IsSpellInRange(GetSpellInfo(RangedSpell), &amp;quot;target&amp;quot;) == 1
	then return true else return false
	end
end

----------------
-- CAST SPELL --
----------------
function CastSpell(spell)
	CastSpellByName(GetSpellInfo(spell),nil)
end

--------------
-- CD Check --
--------------
function CdCheck(spellid)
	Sstart, Sduration, Senabled = GetSpellCooldown(spellid)
	Scooldown = (Sstart + Sduration - GetTime())
	if Sstart == 0
	then
		Scooldown = 0
	end
	return Scooldown
end


------------------
-- SPELL SUCESS --
------------------
if not fireTotemSucced then
		fireTotemSucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
		fireTotemSucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
		fireTotemSucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(3,...)==&amp;quot;player&amp;quot; and (select(7,...)==3599 or select(7,...)==MagmaTotem) then FireTotemActive=true print(&amp;quot;Spell Casted&amp;quot; .. select(7,...)) end end)
end
--select(7,...)==FireTotem  and  
-----------
-- DEBUG --
-----------
DebugSpell = 0
if UnitAffectingCombat(&amp;quot;player&amp;quot;)
and PQR_Rubim_Debug ~= 0 then
	if not castspellsucced then
		castspellsucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
		castspellsucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
		castspellsucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)== 3606 then
		DebugSpell = 1
		LastSpell = select(7,...)
		LastSpellN = GetSpellInfo(select(7,...))
--		select1 = select(1,...)
		select2 = select(2,...)
		select3 = select(3,...)
		select4 = select(4,...)
		select5 = select(5,...)
		select6 = select(6,...)
		
	end end)
end
	
	if DebugSpell ~= 0
	then
		PQR_WriteToChat(&amp;quot;Casted: |cffffcc00&amp;quot; .. LastSpell .. &amp;quot; &amp;quot; .. LastSpellN)
		--PQR_WriteToChat(&amp;quot;SELECT 1&amp;quot; .. select1)
		PQR_WriteToChat(&amp;quot;SELECT 2&amp;quot; .. select2)
		PQR_WriteToChat(&amp;quot;SELECT 3&amp;quot; .. select3) -- target
		PQR_WriteToChat(&amp;quot;SELECT 4&amp;quot; .. select4)
		PQR_WriteToChat(&amp;quot;SELECT 5&amp;quot; .. select5)
		PQR_WriteToChat(&amp;quot;SELECT 6&amp;quot; .. select6)
		DebugSpell = 1
	end
end

-------------
-- PRE POT --
-------------
function PrePot()
	if UnitBuffID(&amp;quot;player&amp;quot;,105706)
	then return true else return false end
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

--Player Info
PlayerRP	= select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;))
PlayerHP			= Nova_UnitInfo(&amp;quot;player&amp;quot;)
PlayerCombat		= UnitAffectingCombat(&amp;quot;player&amp;quot;)
	
--PQR Functions
isMoving			= PQR_IsMoving()

--Key Mods
lShift				= Nova_Pause(1)
lCtrl				= Nova_Pause(2)
lAlt				= Nova_Pause(3)
rShift				= Nova_Pause(4)
rCtrl				= Nova_Pause(5)
rAlt				= Nova_Pause(6)

--Target Info
TargetHP				= select(1, Nova_UnitInfo(&amp;quot;target&amp;quot;))
EnemyLevel			= UnitLevel(&amp;quot;target&amp;quot;)
		
-----------------
-- Time to die --
-----------------
TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and PlayerCombat then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

-- dummy
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 99
	end
end


--------------
-- AOE SWAP --
--------------
if Timer == nil then
	Timer = 0
end

local Nova_Mod = Nova_Mod
local AoEHOTKEY = AoEHotkey
if Nova_Mod() == AoEHotkey
and GetTime() - Timer &amp;gt; 0.5
then
	Timer = GetTime()
	if AoERotation == false
	then
		AoERotation = true
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0EArea of Effect|R&amp;quot;)
		ActualRotation = &amp;quot;Area of Effect&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	elseif AoERotation == true
	then
		AoERotation = false
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0ESingle Target|R&amp;quot;)
		ActualRotation = &amp;quot;Single Target&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	end
end

-----------------------
-- SHAMAN ONLY --
-----------------------


-- At this point, everything should have loaded perfectly!
if PQ_SHEnhanced == nil then
	PQ_SHEnhanced= true
	--SET VAR (no nil)
	CheckSpell = 0
	DistancePlayer = 0
	x1 = 0
	x2 = 0
	y1 = 0
	y2 = 0
	
	--SET BOOLEAN
	SpellSucess = false
	AoERotation = false
	FireTotemActive = false
	ActualRotation = &amp;quot;Single Target&amp;quot;
	PQR_SendText(&amp;quot;Standby&amp;quot;)
	initMessage()
	RacialDetection()
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Nova_Frame</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp

---------------
-- GET NAMES --
---------------
-------------------------------------------------------------------------------
-- Variables &amp; Sanity checks
-------------------------------------------------------------------------------
-- Load LUA data files.
if PQR_RotationStarted == true then
	PQR_RotationStarted = false
	
	-- Tables
	Nova_ValueCheck = {
		[1] =	{ Var1 = nil,	Text = &amp;quot;Cooldowns&amp;quot;,				Var2 = nil, },
		[2] =	{ Var1 = 35,	Text = &amp;quot;Healthstone&amp;quot;,			Var2 = 1 },
		[3] =	{ Var1 = 50,	Text = &amp;quot;Healing Surge&amp;quot;,			Var2 = 0 },
		[4] =	{ Var1 = 75,	Text = &amp;quot;Healing Stream Totem&amp;quot;,	Var2 = 0 },
		[5] =	{ Var1 = nil,	Text = &amp;quot;Others&amp;quot;,				Var2 = nil },
		[6] =	{ Var1 = nil,	Text = &amp;quot;Trinket 01&amp;quot;,			Var2 = 0 },
		[7] =	{ Var1 = nil,	Text = &amp;quot;Trinket 02&amp;quot;,			Var2 = 0 },
		[8] =	{ Var1 = nil,	Text = &amp;quot;Gloves&amp;quot;,				Var2 = 0 },
		[9] =	{ Var1 = nil,	Text = &amp;quot;Auto Racial Use&amp;quot;,		Var2 = 1 },
		[10] =	{ Var1 = nil,	Text = &amp;quot;CD: Boss Only&amp;quot;,			Var2 = 1 }		
	}
	Nova_CooldownCheck = {
		[1]	=	{ Mod = 16,		Text = &amp;quot;Death n Decay&amp;quot;,			Var1 = 1},
		[2]	=	{ Mod = 4,		Text = &amp;quot;Pestilence&amp;quot;,			Var1 = 1},
		[3]	=	{ Mod = 3,		Text = &amp;quot;Lichborne&amp;quot;,				Var1 = 1},
		[4]	=	{ Mod = 8,		Text = &amp;quot;AoE Rotation&amp;quot;,			Var1 = 1},
		[5]	=	{ Mod =	2,		Text = &amp;quot;Pause 1&amp;quot;,				Var1 = 1},
		[6]	=	{ Mod =	1,		Text = &amp;quot;Pause 2&amp;quot;,				Var1 = 1}
	}
	
	-- CVar Registration
	for i=1,#Nova_ValueCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1)
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_ValueCheck[i].Var2)
		end
	end
	for i=1,#Nova_CooldownCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_CooldownCheck[i].Mod)
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_CooldownCheck[i].Var1)
		end
	end

function Update_Nova()
	-- CVar Translations
	-- Cooldowns
	
	HSenabled 		= GetCVarBool(&amp;quot;Nova_Healthstone_Enabled&amp;quot;)
	HShealth 		= tonumber(GetCVar(&amp;quot;Nova_Healthstone&amp;quot;))
	
	HSenabled 		= GetCVarBool(&amp;quot;Nova_Healing_Surge_Enabled&amp;quot;)
	HShealth 		= tonumber(GetCVar(&amp;quot;Nova_Healing_Surge&amp;quot;))
	
	HSTenabled		= GetCVarBool(&amp;quot;Nova_Healing_Stream_Totem_Enabled&amp;quot;)
	HSThealth		= tonumber(GetCVar(&amp;quot;Nova_Healing_Stream_Totem&amp;quot;))
	
	T01enabled		= GetCVarBool(&amp;quot;Nova_Trinket_01_Enabled&amp;quot;)
	T02enabled		= GetCVarBool(&amp;quot;Nova_Trinket_02_Enabled&amp;quot;)
	GLOenabled		= GetCVarBool(&amp;quot;Nova_Gloves_Enabled&amp;quot;)		
	RAenabled = GetCVarBool(&amp;quot;Nova_Auto_Racial_Use_Enabled&amp;quot;)
	CDenabled = GetCVarBool(&amp;quot;Nova_CD:_Boss_Only_Enabled&amp;quot;)
	
	DNDHotkey = tonumber(GetCVar(&amp;quot;Nova_Death_n_Decay&amp;quot;))
	PEHotkey = tonumber(GetCVar(&amp;quot;Nova_Pestilence&amp;quot;))
	LBHotkey = tonumber(GetCVar(&amp;quot;Nova_Lichborne&amp;quot;))
	
	AoEHotkey = tonumber(GetCVar(&amp;quot;Nova_AoE_Rotation&amp;quot;))
	PHotkey = tonumber(GetCVar(&amp;quot;Nova_Pause_1&amp;quot;))
	PHotkey2 = tonumber(GetCVar(&amp;quot;Nova_Pause_2&amp;quot;))	
	
end
	
	-- Load LUA files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_Nova_Data.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_Nova_Frame.lua&amp;quot;) == true then
			MiniMapCreation()
			
			-- Slash Commands
			SLASH_NOVAFRAME1 = &amp;quot;/novaframe&amp;quot;
			SLASH_NOVAFRAME2 = &amp;quot;/nova&amp;quot;
			function SlashCmdList.NOVAFRAME(msg, editbox)
				if Setup == nil then
					Setup = true
					FrameCreation(Nova_ValueCheck, Nova_CooldownCheck, &amp;quot;DK Blood Options&amp;quot;, &amp;quot;DK Blood CD Settings&amp;quot;)
				end
				if not Nova_Frame:IsShown() then Nova_Frame:Show() else Nova_Frame:Hide() end
			end
		end
	end
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hotkey: Death n Decay</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Nova_Mod = Nova_Mod
local SPELL = DeathandDecay
local SkillEnabled = DNDEnabled
local HOTKEY = DNDHotkey

if PQR_SpellAvailable(SPELL)
and Nova_Mod() == HOTKEY then
	CastSpellByName(GetSpellInfo(43265))
	if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
	return true 
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hotkey: Pestilence</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Nova_Mod = Nova_Mod
local SPELL = Pestilence
local SkillEnabled = PEenabled
local HOTKEY = PEHotkey

if Nova_Mod() == HOTKEY then
	CheckSpell = Pestilence
	PQR_WriteToChat(&amp;quot;Queue |cFF00FF00Pestilence.&amp;quot;)
	TextQueue(Pestilence,0)
	return true
end

if not MeeleRange() then return false end

if CheckSpell == Pestilence
and PQR_SpellAvailable(CheckSpell)
then
	CastSpellByName(GetSpellInfo(Pestilence))
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Single Target</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == true then return false end
FireTotem = SearingTotem

function BossCheck()
	if CDenabled ~= 1
	then return true
	end
	
	if CDenabled == 1
	and SpecialUnit()
		then return true	
	end
	return false
end

if SearingSucessTimer == nil then SearingSucessTimer = 0 end
if FireTotemActive == true
and GetTime() - SearingSucessTimer &amp;gt; 3
then
	SearingSucessTimer = GetTime()
	print(&amp;quot;Searing Sucess&amp;quot;)
	x1, y1 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	print(&amp;quot;Fire Totem Update&amp;quot;)
	FireTotemActive = false
end

if TimerRangeCheck == nil then TimerRangeCheck = 0 end
if GetTime() - TimerRangeCheck &amp;gt; 1
and TotemFireTime &amp;gt; 1
then
	TimerRangeCheck = GetTime()
	print(&amp;quot;Update Current&amp;quot;)
	x2, y2 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	w = 100000
    h = 100000
    DistancePlayer = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2)                
    print(&amp;quot;Distance: &amp;quot; .. DistancePlayer)
end

--COMBAT
if not PlayerCombat then return false end

if RangedRange()
then
	if Racial ~= 0 and PQR_SpellAvailable(Racial)
	and BossCheck()
	then
		CastSpell(Racial)
	end
end


if SearingTotemSpam == nil then SearingTotemSpam = 0 end

if PQR_SpellAvailable(SearingTotem)
and TotemFireName ~= GetSpellInfo(FireElementalTotem)
and (TotemFireTime &amp;lt; 1
or TotemFireName ~= GetSpellInfo(SearingTotem))
then
	x1, y1 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	CastSpell(SearingTotem)
end

if DistancePlayer &amp;gt; 20
then
	x1, y1 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	CastSpell(SearingTotem)
end


if DistancePlayer &amp;gt; 20 then return false end


if TargetValidation(&amp;quot;target&amp;quot;,LavaBurst)
and FStimer &amp;gt; 1
then
	CastSpell(LavaBurst)
end

if TargetValidation(&amp;quot;target&amp;quot;,EarthShock)
and LightningShieldCount &amp;gt;= 7
then
	CastSpell(EarthShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,FlameShock)
and FStimer &amp;lt; 3
then
	CastSpell(FlameShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,EarthShock)
then
	CastSpell(EarthShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,LightningBolt)
then
	CastSpell(LightningBolt)
end

if TargetValidation(&amp;quot;target&amp;quot;,PrimalStrike)
then
	CastSpell(PrimalStrike)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Area of Effect</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == false then return false end
IcyBlast = HowlingBlast

function BossCheck()
	if CDenabled ~= 1
	then return true
	end
	
	if CDenabled == 1
	and SpecialUnit()
		then return true	
	end
	return false
end

--COMBAT
if not PlayerCombat then return false end

if RangedRange()
then
	if Racial ~= 0 and PQR_SpellAvailable(Racial)
	and BossCheck()
	then
		CastSpell(Racial)
	end
end


if SearingTotemSpam == nil then SearingTotemSpam = 0 end

if TotemFireTime &amp;lt; 3
and GetTime() - SearingTotemSpam &amp;gt; 2
then
	SearingTotemSpam = GetTime()
	CastSpell(SearingTotem)
end

if DistancePlayer &amp;gt; 20
and GetTime() - SearingTotemSpam &amp;gt; 0.5
then
		SearingTotemSpam = GetTime()
		CastSpell(SearingTotem)
end

if PQR_SpellAvailable(MagmaTotem)
and GetTime() - SearingTotemSpam &amp;gt; 2
and (TotemFireTime &amp;lt; 3
or TotemFireName ~= GetSpellInfo(MagmaTotem)
or DistancePlayer &amp;gt; 10)
then	
	SearingTotemSpam = GetTime()
	CastSpell(MagmaTotem)
end

if SearingSucessTimer == nil then SearingSucessTimer = 0 end
if SearingTotemActive == true
and GetTime() - SearingSucessTimer &amp;gt; 3
then
	SearingSucessTimer = GetTime()
	print(&amp;quot;Searing Sucess&amp;quot;)
	x1, y1 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	print(&amp;quot;Fire Totem Update&amp;quot;)
	SearingTotemActive = false
end

if TimerRangeCheck == nil then TimerRangeCheck = 0 end
if GetTime() - TimerRangeCheck &amp;gt; 1
then
	TimerRangeCheck = GetTime()
	print(&amp;quot;Update Current&amp;quot;)
	x2, y2 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	w = 100000
    h = 100000
    DistancePlayer = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2)                
    print(&amp;quot;Distance: &amp;quot; .. DistancePlayer)
end

if TargetValidation(&amp;quot;target&amp;quot;,LavaBurst)
and FStimer &amp;gt; 1
then
	CastSpell(LavaBurst)
end

if TargetValidation(&amp;quot;target&amp;quot;,EarthShock)
and LightningShieldCount &amp;gt;= 7
then
	CastSpell(EarthShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,FlameShock)
and FStimer &amp;lt; 3
then
	CastSpell(FlameShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,EarthShock)
then
	CastSpell(EarthShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,ChainLightning)
then
	CastSpell(ChainLightning)
end

if TargetValidation(&amp;quot;target&amp;quot;,PrimalStrike)
then
	CastSpell(PrimalStrike)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Death Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if DSenabled ~= 1 then return false end

if BPtimer &amp;gt; 0
and FFtimer &amp;gt; 0
and TargetValidation(&amp;quot;target&amp;quot;,DeathStrike)
and UnitBuffID(&amp;quot;player&amp;quot;,101568)
and PlayerHP &amp;lt;= DShealth then
	CastSpell(DeathStrike)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Trinkets</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (T01enabled ~= 1 and T02enabled ~= 1 and GLOenabled ~= 1) or not MeeleRange() then return false end



local SpecialUnit = SpecialUnit


----------------
-- TRINKET 01 --
----------------
if T01enabled ~= nil
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,13) == 0
and (CDenabled ~= 1
or (CDenabled == 1 and SpecialUnit()))
then
	UseInventoryItem(13)
end

if T02enabled ~= nil
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0
and (CDenabled ~= 1
or (CDenabled == 1 and SpecialUnit()))
then
	UseInventoryItem(14)
end

if GLOenabled ~= nil
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,10) == 0
and (CDenabled ~= 1
or (CDenabled == 1 and SpecialUnit()))
then
	UseInventoryItem(10)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Totem Recal</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PlayerCombat
and PQR_IsMoving(1)
and TotemFireTime &amp;gt; 1
	then CastSpellByName(GetSpellInfo(36936),nil)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Healing Surge</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if HSenabled ~= 1 then return false end

if PQR_SpellAvailable(HealingSurge)
and MaelstromCount &amp;gt;= 4
and PlayerHP &amp;lt;= HShealth
then
	CastSpell(HealingSurge)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Healing Stream Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if HSTenabled ~= 1 then return false end

if PQR_SpellAvailable(HealingStreamTotem)
and PlayerHP &amp;lt;= HSThealth
then
	if TotemWaterName == tostring(GetSpellInfo(5394)) then
		return false
	elseif TotemWaterTime &amp;lt; 1 then
		CastSpell(HealingStreamTotem)
	return true
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>ST ENHANCED</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == true then return false end
IcyBlast = HowlingBlast

function BossCheck()
	if CDenabled ~= 1
	then return true
	end
	
	if CDenabled == 1
	and SpecialUnit()
		then return true	
	end
	return false
end

--POSIÇÃO TOTEM
if FireSucessTimer == nil then FireSucessTimer = 0 end
if FireTotemActive == true
and GetTime() - FireSucessTimer &amp;gt; 3
then
	FireSucessTimer = GetTime()
	print(&amp;quot;Fire Sucess&amp;quot;)
	x1, y1 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	print(&amp;quot;Fire Totem Update&amp;quot;)
	FireTotemActive = false
end

--POSIÇÃO JOGADOR
if TimerRangeCheck == nil then TimerRangeCheck = 0 end
if GetTime() - TimerRangeCheck &amp;gt; 1
and TotemFireTime &amp;gt; 1
then
	TimerRangeCheck = GetTime()
	print(&amp;quot;Update Current&amp;quot;)
	x2, y2 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	w = 100000
    h = 100000
    DistancePlayer = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2)                
    print(&amp;quot;Distance: &amp;quot; .. DistancePlayer)
end

--COMBAT
if not PlayerCombat then return false end

if MeeleRange()
then
	if Racial ~= 0 and PQR_SpellAvailable(Racial)
	and BossCheck()
	then
		CastSpell(Racial)
	end
	
	if PQR_SpellAvailable(FeralSpirit)
	and BossCheck()
	then
		CastSpell(FeralSpirit)
	end
	
end

if TotemFireTime &amp;lt; 1
and TotemFireName ~= GetSpellInfo(FireElementalTotem)
then
	CastSpell(SearingTotem)
end

if SearingTotemSpam == nil then SearingTotemSpam = 0 end
if DistancePlayer &amp;gt; 20
and TotemFireName ~= GetSpellInfo(FireElementalTotem)
and GetTime() - SearingTotemSpam &amp;gt; 0.3
then
	CastSpell(SearingTotem)
	SearingTotemSpam = GetTime()
end

if SearingTotemSpam == nil then SearingTotemSpam = 0 end
if PQR_SpellAvailable(SearingTotem)
and GetTime() - SearingTotemSpam &amp;gt; 2
and TotemFireName ~= GetSpellInfo(FireElementalTotem)
and (TotemFireTime &amp;lt; 3
or TotemFireName ~= GetSpellInfo(SearingTotem)
or DistancePlayer &amp;gt; 20)
then
	SearingTotemSpam = GetTime()
	CastSpell(SearingTotem)
end

if TargetValidation(&amp;quot;target&amp;quot;,FlameShock)
and FStimer &amp;lt; 3
then
	CastSpell(FlameShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,UnleashElements)
then
	CastSpell(UnleashElements)
end

if TargetValidation(&amp;quot;target&amp;quot;,LightningBolt)
and MaelstromCount == 5
then
	CastSpell(LightningBolt)
end

if TargetValidation(&amp;quot;target&amp;quot;,EarthShock)
then
	CastSpell(EarthShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,PrimalStrike)
then
	CastSpell(PrimalStrike)
end

if TargetValidation(&amp;quot;target&amp;quot;,LavaLash)
then
	CastSpell(LavaLash)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>AREA OF EFFECT: ENHANCED</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == false then return false end
FireTotem = MagmaTotem

function BossCheck()
	if CDenabled ~= 1
	then return true
	end
	
	if CDenabled == 1
	and SpecialUnit()
		then return true	
	end
	return false
end

--POSIÇÃO TOTEM
if MagmaSucessTimer == nil then MagmaSucessTimer = 0 end
if FireTotemActive == true
and GetTime() - MagmaSucessTimer &amp;gt; 3
then
	MagmaSucessTimer = GetTime()
	print(&amp;quot;Magma Sucess&amp;quot;)
	x1, y1 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	print(&amp;quot;Fire Totem Update&amp;quot;)
	FireTotemActive = false
end

--POSIÇÃO JOGADOR
if TimerRangeCheck == nil then TimerRangeCheck = 0 end
if GetTime() - TimerRangeCheck &amp;gt; 1
and TotemFireTime &amp;gt; 1
then
	TimerRangeCheck = GetTime()
	print(&amp;quot;Update Current&amp;quot;)
	x2, y2 = select(1,PQR_UnitInfo(&amp;quot;player&amp;quot;)), select(2,PQR_UnitInfo(&amp;quot;player&amp;quot;))
	w = 100000
    h = 100000
    DistancePlayer = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2)                
    print(&amp;quot;Distance: &amp;quot; .. DistancePlayer)
end

--COMBAT
if not PlayerCombat then return false end

if MeeleRange()
then
	if Racial ~= 0 and PQR_SpellAvailable(Racial)
	and BossCheck()
	then
		CastSpell(Racial)
	end
	
	if PQR_SpellAvailable(FeralSpirit)
	and BossCheck()
	then
		CastSpell(FeralSpirit)
	end
	
end

if SearingTotemSpam == nil then SearingTotemSpam = 0 end
if PQR_SpellAvailable(SearingTotem)
and GetTime() - SearingTotemSpam &amp;gt; 2
and (TotemFireTime &amp;lt; 3
or TotemFireName ~= GetSpellInfo(MagmaTotem)
or DistancePlayer &amp;gt; 10)
then
	SearingTotemSpam = GetTime()
	CastSpell(MagmaTotem)
end

if FStimer &amp;gt; 1
and PQR_SpellAvailable(FireNova)
then
	CastSpell(FireNova)
end

if TargetValidation(&amp;quot;target&amp;quot;,FlameShock)
and FStimer &amp;lt; 3
then
	CastSpell(FlameShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,ChainLightning)
and MaelstromCount == 5
then
	CastSpell(ChainLightning)
end

if TargetValidation(&amp;quot;target&amp;quot;,EarthShock)
then
	CastSpell(EarthShock)
end

if TargetValidation(&amp;quot;target&amp;quot;,PrimalStrike)
then
	CastSpell(PrimalStrike)
end

if TargetValidation(&amp;quot;target&amp;quot;,LavaLash)
then
	CastSpell(LavaLash)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></SHAMAN>