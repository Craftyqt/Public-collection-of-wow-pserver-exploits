<?xml version="1.0" encoding="utf-8" ?><SHAMAN><Ability><Name>[DPS] Flame Shock</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local FSHOCK,_,_,_,_,_,FSHOCKTIMER = UnitDebuffID(&amp;quot;target&amp;quot;,8050,&amp;quot;PLAYER&amp;quot;)
-----------------------------------------------------------------------------

if AOE_MODE == false then
	--and UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) == nil then
		if (FSHOCK == nil or FSHOCKTIMER - GetTime() &amp;lt;= 5)
			and PQR_SpellAvailable(8050) == true then
			--and not LineOfSight(&amp;quot;target&amp;quot;) then
				CastSpellByName(GetSpellInfo(8050), &amp;quot;target&amp;quot;)
				return true 
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Lava Burst</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local FSDEBUFF = UnitDebuffID(&amp;quot;target&amp;quot;,8050,&amp;quot;PLAYER&amp;quot;) 
--------------------------------------------------------------------

if AOE_MODE == false then
	if FSDEBUFF ~= nil
		and PQR_SpellAvailable(51505) == true
		and (not PQR_IsMoving(0.3) or UnitBuffID(&amp;quot;player&amp;quot;,16188) or UnitBuffID(&amp;quot;player&amp;quot;,79206) or UnitBuffID(&amp;quot;player&amp;quot;,77762) ~= nil) then
		CastSpellByName(GetSpellInfo(51505), &amp;quot;target&amp;quot;)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Lightning Bolt</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local FSDEBUFF = select(7,UnitDebuffID(&amp;quot;target&amp;quot;,8050,&amp;quot;PLAYER&amp;quot;)) 
---------------------------------------------------------------------

if (UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) ~= nil and PQR_IsMoving(0.3) == false and FSDEBUFF ~= nil)
	or (UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) ~= nil and UnitBuffID(&amp;quot;player&amp;quot;,79206)~= nil)
	or (UnitBuffID(&amp;quot;player&amp;quot;,77762) ~= nil and FSDEBUFF ~= nil)
	or (IsPlayerSpell(117014) == true and PQR_SpellAvailable(117014) == true and (PQR_IsMoving(0.3) == false or UnitBuffID(&amp;quot;player&amp;quot;,79206)~= nil))
	or (PQI_MavminsELEMENTALHOTKEYS_AoEKeyHold_enable 
		and (PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_AoEKeyHold_key) 
		and not GetCurrentKeyBoardFocus())
		and PQR_IsMoving(0.3) == false) then
			return false
end



--if UnitBuffID(&amp;quot;player&amp;quot;,77762) == nil then
if (AOE_MODE == false and CLEAVE_MODE == false)
	or (CLEAVE_MODE == true and PQR_IsMoving(0.3) and not UnitBuffID(&amp;quot;player&amp;quot;,79206))
	or (AOE_MODE == true and PQR_IsMoving(0.3) and UnitBuffID(&amp;quot;player&amp;quot;,79206)== nil) then
		
		if (PQR_IsMoving(0.3) and UnitBuffID(&amp;quot;player&amp;quot;,79206)== nil)
			or (PQR_SpellAvailable(51505) == false and (PQR_SpellAvailable(117014) == false or IsPlayerSpell(117014) == false))
			or (FSDEBUFF == nil and PQR_SpellAvailable(8050) == false) then
			CastSpellByName(GetSpellInfo(403), &amp;quot;target&amp;quot;)
			return true
		end
		
end

--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Elemental Blast</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(2,GetTalentRowSelectionInfo(6)) == 18 
	and PQR_SpellAvailable(117014) == true
	and (not PQR_IsMoving(0.3) or UnitBuffID(&amp;quot;player&amp;quot;,79206)) then
		CastSpellByName(GetSpellInfo(117014), &amp;quot;target&amp;quot;)
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Earth Shock</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local FSHOCK,_,_,_,_,_,FSHOCKTIMER = UnitDebuffID(&amp;quot;target&amp;quot;,8050,&amp;quot;PLAYER&amp;quot;)
local LSH1, LSH2, LSH3, LSH4 = UnitBuffID(&amp;quot;player&amp;quot;,324)
-------------------------------------------------------------------------------

if not AOE_MODE 
	and LSH1 ~= nil
	and FSHOCK ~= nil
	and UnitBuffID(&amp;quot;player&amp;quot;,138963) == nil then
	
	if (LSH4 &amp;gt; 3 and FSHOCKTIMER - GetTime() &amp;gt;= 6 and FSHOCKTIMER - GetTime() &amp;lt;= 9)
		or (PQR_IsMoving(0.3) and FSHOCKTIMER - GetTime() &amp;gt;= 6 and not UnitBuffID(&amp;quot;player&amp;quot;,79206))
		or (LSH4 &amp;gt;= 6 and FSHOCKTIMER - GetTime() &amp;gt;= 6) then
		CastSpellByName(GetSpellInfo(8042), &amp;quot;target&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Searing Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local TOT1, TOTNAME, startTime, duration = GetTotemInfo(1)
local TOTEXPIRE = startTime + duration - GetTime()
-------------------------------------------------------------

if PQI_MavminsELEMENTALFUNCTIONS_AutoTotemReposition_enable == false then

	if TOTNAME ~= tostring(GetSpellInfo(2894)) 
		and TOTNAME ~= tostring(GetSpellInfo(8190))
		and AOE_MODE == false
		and IsSpellInRange(tostring(GetSpellInfo(8050)), &amp;quot;target&amp;quot;) then
			if TOTEXPIRE == nil 
				or TOTEXPIRE &amp;lt; 2 then
					x2,y2 = PQR_UnitInfo(&amp;quot;Player&amp;quot;)
	   				CastSpellByName(GetSpellInfo(3599))
					return true
			end
	end
	
end

if PQI_MavminsELEMENTALFUNCTIONS_AutoTotemReposition_enable == true then

--	if TOTNAME == nil then
--		x2,y2 = PQR_UnitInfo(&amp;quot;Player&amp;quot;) 
--	   	CastSpellByName(GetSpellInfo(3599))
--	   	LAST_CAST = &amp;quot;SEARINGTOTEM&amp;quot;
--		return true
--	end

	if TOTNAME ~= tostring(GetSpellInfo(2894))
		and TOTNAME ~= tostring(GetSpellInfo(8190))
		and AOE_MODE == false
		and IsSpellInRange(tostring(GetSpellInfo(8050)), &amp;quot;target&amp;quot;) then
			if TOTEXPIRE == nil or TOTEXPIRE &amp;lt; 2 then
				x2,y2 = PQR_UnitInfo(&amp;quot;Player&amp;quot;) 
	   			CastSpellByName(GetSpellInfo(3599))
				return true
			elseif totemDistance &amp;gt; 41 and playerTargetDistance &amp;lt; 40 then
				x2,y2 = PQR_UnitInfo(&amp;quot;Player&amp;quot;) 
	   			CastSpellByName(GetSpellInfo(3599))
	   		--	print(&amp;quot;Repositioned out of range Searing Totem&amp;quot;)
	   			return true
			end
	end	
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[CD] Fire Elemental Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local TOT1, TOTNAME, startTime, duration = GetTotemInfo(1)
-------------------------------------------------------------
if PQR_SpellAvailable(2894) == true
	and TOTNAME ~= tostring(GetSpellInfo(2894))
	and UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) == nil then
	--and AOE_MODE == false then
	
	if PQR_SpellAvailable(16166) ~= true or IsPlayerSpell(16166) ~= true then
	
		if 	PQI_MavminsELEMENTALFUNCTIONS_AutoFireElementalTotem_enable or 
			USE_CDS == true or
			(PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_key) and not GetCurrentKeyBoardFocus()) or
			(PQI_MavminsELEMENTALHOTKEYS_FireElementalTotem_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_FireElementalTotem_key) and not GetCurrentKeyBoardFocus()) then
			CastSpellByName(GetSpellInfo(2894))
			return true
		end
		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Initialize --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Load LUA data files.
if PQR_RotationStarted then
	PQR_RotationStarted = false

	-- Load required data files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_MavminsElemental2.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_MavminsElemental2_DATA.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_PQI.lua - It&amp;apos;s required to run the profile! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
end

if ShamanInformation == nil then
	ShamanInformation = true
	print(&amp;quot;|cffFF0099--------------------------------------------------------------------&amp;quot;)
	print(&amp;quot;|cffFF0099*-*-*-*-*-*Mavmins Elemental Shaman Profile v1.95*-*-*-*-*-*-*&amp;quot;)
	print(&amp;quot;|cffFF0099--------------------------------------------------------------------&amp;quot;)
end


-- Don&amp;apos;t automatically start if we&amp;apos;re mounted.
if IsMounted() then return true end

-- Don&amp;apos;t automatically start if we&amp;apos;re dead or a ghost.
if UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) then return true end

-- Initialize AOE --
if AOE_MODE == nil then 
	AOE_MODE = false 
end

if CLEAVE_MODE == nil then
	CLEAVE_MODE = false
end

--initialize CDS

if USE_CDS == nil then
	USE_CDS = false
end

if AOE_MODE == false and USE_CDS == false then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET MODE - NOT USING COOLDOWNS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
end

if AOE_MODE == false and USE_CDS == true then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET MODE - USING COOLDOWNS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
end

if AOE_MODE == true and USE_CDS == true then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;AOE MODE - USING COOLDOWNS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
end

if AOE_MODE == true and USE_CDS == false then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;AOE MODE - NOT USING COOLDOWNS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
end

if CLEAVE_MODE == true and USE_CDS == true then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;CLEAVE MODE - USING COOLDOWNS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
end

if CLEAVE_MODE == true and USE_CDS == false then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;CLEAVE MODE - NOT USING COOLDOWNS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
end

-- Position and range query set values to 0 on load to avoid nil errors. 
if not timerLoaded then 
    x1, y1 = 0,0 
    x2, y2 = 0,0 
    playerTargetDistance = 0 
    readyTimer = 0      
    timerLoaded = true 
end

if x1 == nil then x1 = 0 end
if x2 == nil then x2 = 0 end
if y1 == nil then y1 = 0 end
if y2 == nil then y2 = 0 end

if COMBAT_CHECK == nil then
	COMBAT_CHECK = 0
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local TOT1, TOTNAME, startTime, duration = GetTotemInfo(1)
local TOT2, TOTNAME, startTime, duration = GetTotemInfo(2)
local TOT3, TOTNAME, startTime, duration = GetTotemInfo(3)
local TOT4, TOTNAME, startTime, duration = GetTotemInfo(4)
-----------------------------------------------------------------

if UnitAffectingCombat(&amp;quot;player&amp;quot;) == nil then

	POTION_USED = false
	
	if PQI_MavminsELEMENTALFUNCTIONS_AutoDisableCDsOOC_enable == true 
		and USE_CDS ~= false
		and COMBAT_CHECK == 1 then
			USE_CDS = false
	end
	
	if PQI_MavminsELEMENTALFUNCTIONS_AutoTotemPickupOOC_enable == true 
		and PQR_SpellAvailable(36936) == true then
		

			
			if (TOT1 ~= false or TOT2 ~= false or TOT3 ~= false or TOT4 ~= false) then
				CastSpellByName(GetSpellInfo(36936))
			end
		
	end
	
	COMBAT_CHECK = 0
	return true
end

if PAUSE_PROFILE 
	or	(PQI_MavminsELEMENTALHOTKEYS_PauseKeyHold_enable == true
		and (PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_PauseKeyHold_key)
		and not GetCurrentKeyBoardFocus())) then
	return true
end

--boss stuff to stop casting
--dark animus jolt
if select(1, UnitCastingInfo(&amp;quot;target&amp;quot;)) == &amp;quot;Interrupting Jolt&amp;quot; then
	return true 
end
--trash lightning shield
if UnitBuffID( &amp;quot;target&amp;quot;, 140296 ) ~= nil then
	return true
end
--------------------------------------------------------

if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil then
	COMBAT_CHECK = 1
end

if UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) == nil then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[BUFF] Flametongue Weapon</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local MH1, MH2  = GetWeaponEnchantInfo()
--------------------------------------------------

if MH1 ~= 1 then
	CastSpellByName(GetSpellInfo(8024))
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[BUFF] Lightning Shield</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID( &amp;quot;player&amp;quot;, 324 ) == nil then
	CastSpellByName(GetSpellInfo(324), &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[CD] Ascendance</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local FSHOCK,_,_,_,_,_,FSHOCKTIMER = UnitDebuffID(&amp;quot;target&amp;quot;,8050,&amp;quot;PLAYER&amp;quot;)
local FIRECD = select(2,GetSpellCooldown(2894)) + (select(1,GetSpellCooldown(2894)) - GetTime())
--local STORMCD = select(2,GetSpellCooldown(120668)) + (select(1,GetSpellCooldown(120668)) - GetTime())
-----------------------------------------------------------------------------

if PQR_SpellAvailable(2894) == true then
--	or PQR_SpellAvailable(120668) == true then
	return false
end

if FSHOCKTIMER == nil then
	FSHOCKTIMER = 0
end

if USE_CDS == true 
		or (PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_enable 
			and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_key)
			and not GetCurrentKeyBoardFocus()) then
		
		if UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) == nil
			and	PQR_SpellAvailable(114049) == true
			and UnitExists(&amp;quot;target&amp;quot;) ~= nil
			and PQR_SpellAvailable(2894) == false
		--	and PQR_SpellAvailable(120668) == false
			and (IsPlayerSpell(33702) == false or PQR_SpellAvailable(33702)== false)
			and	(IsPlayerSpell(26297) == false or PQR_SpellAvailable(26297)== false) then
			
				if FIRECD &amp;gt; 2 then
					--and STORMCD &amp;gt; 2 then
			
						if FSHOCKTIMER - GetTime() &amp;lt; 15 
							and GetSpellCooldown(8050) == 0
							and (AOE_MODE == false and CLEAVE_MODE == false) then
								CastSpellByName(GetSpellInfo(8050), &amp;quot;target&amp;quot;)
								CastSpellByName(tostring(GetSpellInfo(114049)))
								return true
						end
											
						if FSHOCKTIMER - GetTime() &amp;gt;= 15 then
							CastSpellByName(tostring(GetSpellInfo(114049)))
							return true
						end
						
						if AOE_MODE == true
							or CLEAVE_MODE == true then
								CastSpellByName(tostring(GetSpellInfo(114049)))
							return true
						end
				end
		end		
end

if 	PQI_MavminsELEMENTALFUNCTIONS_AutoAscendance_enable
	or (PQI_MavminsELEMENTALHOTKEYS_Ascendance_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_Ascendance_key) and not GetCurrentKeyBoardFocus()) then
	
		if PQR_SpellAvailable(114049) == true
			and UnitExists(&amp;quot;target&amp;quot;) ~= nil
			and UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) == nil then
				CastSpellByName(tostring(GetSpellInfo(114049)))
				return true
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- AoE Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_AoEModeToggle_enable == true then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_AoEModeToggle_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
		modtime = GetTime()
		if AOE_MODE == true then
	    	AOE_MODE = false
--	    	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET MODE&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
	    	if PQI_MavminsELEMENTALFUNCTIONS_ChatNotifications_enable then
	    		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFFE61515Disabled&amp;quot;)
	    	end
	    else
	        AOE_MODE = true
	        CLEAVE_MODE = false
--	        PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;AOE MODE&amp;quot;, nil, &amp;quot;FF0000&amp;quot;)
	        if PQI_MavminsELEMENTALFUNCTIONS_ChatNotifications_enable then
	  			PQR_WriteToChat(&amp;quot;Area of Effect: \124cFF15E615Enabled&amp;quot;)
	  		end
	    end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[CD] Stormlash Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(120668) == true
	and UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) == nil then
	--and AOE_MODE == false then
	
	if 	PQI_MavminsELEMENTALFUNCTIONS_AutoStormlashTotem_enable 
		--USE_CDS == true or
		or (UnitBuffID(&amp;quot;player&amp;quot;,32182)	or UnitBuffID(&amp;quot;player&amp;quot;,2825) or UnitBuffID(&amp;quot;player&amp;quot;,80353))
		or (PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_key) and not GetCurrentKeyBoardFocus())
		or (PQI_MavminsELEMENTALHOTKEYS_StormlashTotem_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_StormlashTotem_key) and not GetCurrentKeyBoardFocus()) then
		CastSpellByName(GetSpellInfo(120668))
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[CD] Earth Elemental Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local TOT1, TOTNAME, startTime, duration = GetTotemInfo(2)
-------------------------------------------------------------
if PQR_SpellAvailable(2062) == true
	and	TOTNAME ~= tostring(GetSpellInfo(2062))
	and UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) == nil
	and PQR_SpellAvailable(2894) == false then
--	and AOE_MODE == false then
	
		if 	PQI_MavminsELEMENTALFUNCTIONS_AutoEarthElementalTotem_enable or 
			USE_CDS == true or
			(PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_key) and not GetCurrentKeyBoardFocus()) or
			(PQI_MavminsELEMENTALHOTKEYS_EarthElementalTotem_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_EarthElementalTotem_key) and not GetCurrentKeyBoardFocus()) then
			CastSpellByName(GetSpellInfo(2062))
			return true
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_PauseRotation_enable then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_PauseRotation_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
		modtime = GetTime()
		if PAUSE_PROFILE then
	    	PAUSE_PROFILE = false
	    	if PQI_MavminsELEMENTALFUNCTIONS_ChatNotifications_enable then
	    		PQR_WriteToChat(&amp;quot;Rotation Pause: \124cFFE61515Disabled&amp;quot;)
	    	end
	    else
	        PAUSE_PROFILE = true
	        if PQI_MavminsELEMENTALFUNCTIONS_ChatNotifications_enable then
	  			PQR_WriteToChat(&amp;quot;Rotation Pause: \124cFF15E615Enabled&amp;quot;)
	  		end
	    end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Jade Serpent Potion</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local JadeSerpentPotion = GetItemCount(76093, nil, true) 
local JadePotCD = select(2,GetItemCooldown(76093))
-------------------------------------------------------------------

if UnitBuffID(&amp;quot;player&amp;quot;,105702) == nil and POTION_USED ~= true then

	if PQI_MavminsELEMENTALFUNCTIONS_AutoPotion_enable then
	
		if JadeSerpentPotion == nil or JadeSerpentPotion == 0 then
			return false
		end
		
		if UnitBuffID(&amp;quot;player&amp;quot;,32182)
			or UnitBuffID(&amp;quot;player&amp;quot;,2825)
			or UnitBuffID(&amp;quot;player&amp;quot;,80353) then
			
			if JadeSerpentPotion &amp;gt; 0 and JadePotCD == 0 then
				UseItemByName(76093)
				POTION_USED = true
				return true
			end
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
-----------------------------------------------------------------------------------------

if PQI_MavminsELEMENTALFUNCTIONS_AutoRacials_enable == true then
	-- Draenei: Gift of the Naaru
	if IsPlayerSpell(59544) and PQR_SpellAvailable(59544) and Playerhealth &amp;lt; 60 then
		CastSpellByName(GetSpellInfo(59544),&amp;quot;player&amp;quot;)
		return true
	end
	
	if (UnitBuffID(&amp;quot;player&amp;quot;,32182) ~= nil
		or UnitBuffID(&amp;quot;player&amp;quot;,2825) ~= nil
		or UnitBuffID(&amp;quot;player&amp;quot;,80353) ~= nil
		or USE_CDS == true
		or (PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_enable 
			and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_OffensiveCDKeyHold_key)
			and not GetCurrentKeyBoardFocus())) then
		
			-- Troll: Berserking	
			if IsPlayerSpell(26297) == true and PQR_SpellAvailable(26297) == true then
				CastSpellByName(tostring(GetSpellInfo(26297)))
				return true
			end
			
			-- Orc: Blood Fury
			if IsPlayerSpell(33697) == true and PQR_SpellAvailable(33697) == true then
				CastSpellByName(tostring(GetSpellInfo(33697)))
				return true
			end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Offensive CD Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_OffensiveCDToggle_enable == true then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_OffensiveCDToggle_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
		modtime = GetTime()
		if USE_CDS then
	    	USE_CDS = false
	    --	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;NOT USING OFFSIVE COOLDOWNS&amp;quot;, nil, &amp;quot;FF0000&amp;quot;)
	    	if PQI_MavminsELEMENTALFUNCTIONS_ChatNotifications_enable then
	    		PQR_WriteToChat(&amp;quot;OFFENSIVE COOLDOWNS: \124cFFE61515Disabled&amp;quot;)
	    	end
	    else
	        USE_CDS = true
	    --  PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;USING OFFENSIVE COOLDOWNS&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
	        if PQI_MavminsELEMENTALFUNCTIONS_ChatNotifications_enable then
	  			PQR_WriteToChat(&amp;quot;OFFENSIVE COOLDOWNS: \124cFF15E615Enabled&amp;quot;)
	  		end
	    end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Chain Lightning</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------------------------------------

if AOE_MODE == true
	or (PQI_MavminsELEMENTALHOTKEYS_AoEKeyHold_enable
		and (PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_AoEKeyHold_key)
		and not GetCurrentKeyBoardFocus())) then
		

		
		if (PQR_IsMoving(0.3) == false
			or UnitBuffID(&amp;quot;player&amp;quot;,79206) ~= nil) then
			
				if castName ~= nil then
					local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
					local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
					local castTime = castEndTime - castStartTime
					local currentPercent = timeSinceStart / castTime * 100000
				
					if (castName == (GetSpellInfo(403))) then
						SpellStopCasting()
					end
					
				end
				
			CastSpellByName(GetSpellInfo(421), &amp;quot;target&amp;quot;)
			return true
			
		end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[CD] Heroism</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_Heroism_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_Heroism_key) and not GetCurrentKeyBoardFocus() then

	if UnitBuffID(&amp;quot;player&amp;quot;,32182) == nil
		and UnitBuffID(&amp;quot;player&amp;quot;,2825) == nil
		and UnitBuffID(&amp;quot;player&amp;quot;,80353) == nil
		and PQR_SpellAvailable(32182) then
		CastSpellByName(tostring(GetSpellInfo(32182)))
		return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Earthquake</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_Earthquake_enable then

	if PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_Earthquake_key)
		and PQR_SpellAvailable(61882)
		and not GetCurrentKeyBoardFocus()
		and (not PQR_IsMoving(0.3) or UnitBuffID(&amp;quot;player&amp;quot;,79206)) then
			SpellCancelQueuedSpell() 
			CastSpellByName(GetSpellInfo(61882))
		
		if SpellIsTargeting() then
			CameraOrSelectOrMoveStart()
			CameraOrSelectOrMoveStop()
		end
		
		return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Thunderstorm</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERMANA = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)
---------------------------------------------------------------------------

if PQI_MavminsELEMENTALFUNCTIONS_AutoThunderstorm_enable == true
	and PLAYERMANA &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_AutoThunderstorm_value
	and PQR_SpellAvailable(51490) then
	CastSpellByName(tostring(GetSpellInfo(51490)))
	return true
end

if PQI_MavminsELEMENTALHOTKEYS_Thunderstorm_enable == true
	and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_Thunderstorm_key) and not GetCurrentKeyBoardFocus()
	and PQR_SpellAvailable(51490) then
	CastSpellByName(tostring(GetSpellInfo(51490)))
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local HEALTHSTONECD = select(2,GetItemCooldown(5512))
local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if GetItemCount(5512) &amp;gt; 0 then

	if PQI_MavminsELEMENTALFUNCTIONS_Healthstone_enable then
		if PLAYERHP &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_Healthstone_value
			and HEALTHSTONECD == 0 then
			UseItemByName(5512, &amp;quot;player&amp;quot;)
		end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Astral Shift</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if select(2,GetTalentRowSelectionInfo(1)) == 3 then

	if (PQI_MavminsELEMENTALFUNCTIONS_AutoAstralShift_enable and PLAYERHP &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_AutoAstralShift_value)
		or (PQI_MavminsELEMENTALHOTKEYS_AstralShift_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_AstralShift_key)) then
		
		if PQR_SpellAvailable(108271) == true
			and not UnitBuffID( &amp;quot;player&amp;quot;, 108271 )
			and not UnitBuffID( &amp;quot;player&amp;quot;, 30823 ) then
			CastSpellByName(tostring(GetSpellInfo(108271)))
			return true
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Shamanistic Rage</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if (PQI_MavminsELEMENTALFUNCTIONS_AutoShamanisticRage_enable and PLAYERHP &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_AutoShamanisticRage_value)
	or (PQI_MavminsELEMENTALHOTKEYS_ShamanisticRage_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_ShamanisticRage_key)) then
	
	if PQR_SpellAvailable(30823) == true
		and not UnitBuffID( &amp;quot;player&amp;quot;, 30823 ) then
		CastSpellByName(tostring(GetSpellInfo(30823)))
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Stone Bulwark Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
local TOT1, TOTNAME, startTime, duration = GetTotemInfo(2)
----------------------------------------------------------------------------------

if select(2,GetTalentRowSelectionInfo(1)) == 2 then

	if (PQI_MavminsELEMENTALFUNCTIONS_AutoStoneBulwarkTotem_enable and PLAYERHP &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_AutoStoneBulwarkTotem_value)
		or (PQI_MavminsELEMENTALHOTKEYS_StoneBulwarkTotem_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_StoneBulwarkTotem_key))
		and PQR_SpellAvailable(108270) == true
		and TOTNAME ~= tostring(GetSpellInfo(108270)) then
			CastSpellByName(tostring(GetSpellInfo(108270)))
			return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Spirit Walkers Grace</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALFUNCTIONS_AutoSpiritwalkersGrace_enable == true
	and PQR_SpellAvailable(79206)	
	and UnitBuffID( &amp;quot;player&amp;quot;, 114049 )
	and PQR_IsMoving(0.3) then
	CastSpellByName(tostring(GetSpellInfo(79206)))
	return true
end

if (PQI_MavminsELEMENTALHOTKEYS_SpiritwalkersGrace_enable ==true and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_SpiritwalkersGrace_key) and not GetCurrentKeyBoardFocus())
	and PQR_SpellAvailable(79206) then
	CastSpellByName(tostring(GetSpellInfo(79206)))
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Tremor Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(8143) == true
	and	PQI_MavminsELEMENTALHOTKEYS_TremorTotem_enable == true 
	and	PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_TremorTotem_key)
	and not GetCurrentKeyBoardFocus() then
		CastSpellByName(GetSpellInfo(8143))
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Grounding Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(8177) == true
	and	PQI_MavminsELEMENTALHOTKEYS_GroundingTotem_enable == true 
	and	PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_GroundingTotem_key)
	and not GetCurrentKeyBoardFocus() then
		CastSpellByName(GetSpellInfo(8177))
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Hex Mouseover</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_HexMouseover_enable then

	if PQR_SpellAvailable(51514) 
		and IsSpellInRange(tostring(GetSpellInfo(51514)), &amp;quot;mouseover&amp;quot;) == 1
		and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_HexMouseover_key)
		and not GetCurrentKeyBoardFocus()
	 	and UnitExists(&amp;quot;mouseover&amp;quot;)
	 	and UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;mouseover&amp;quot;) ~= 1
	 	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) == 1 then
	 	CastSpellByName(GetSpellInfo(51514),&amp;quot;mouseover&amp;quot;)
	 	return true
	 end
	 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Bind Elemental Mouseover</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_BindElementalMouseover_enable then

	if PQR_SpellAvailable(76780) 
		and IsSpellInRange(tostring(GetSpellInfo(76780)), &amp;quot;mouseover&amp;quot;) == 1
		and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_BindElementalMouseover_key)
		and not GetCurrentKeyBoardFocus()
	 	and UnitExists(&amp;quot;mouseover&amp;quot;)
	 	and UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;mouseover&amp;quot;) ~= 1
	 	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;mouseover&amp;quot;) == 1 then
	 	CastSpellByName(GetSpellInfo(76780),&amp;quot;mouseover&amp;quot;)
	 	return true
	 end
	 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Mouse Click --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Change &amp;quot;3&amp;quot; to whatever mouse button you&amp;apos;d like.

if IsMouseButtonDown(3) then
	RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Player Healing Surge</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsELEMENTALFUNCTIONS_EnableSelfHealing_enable
	and PQI_MavminsELEMENTALFUNCTIONS_AutoHealingSurge_enable then

	if PLAYERHP &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_AutoHealingSurge_value
		and (PQR_IsMoving(0.3) ~= true or UnitBuffID(&amp;quot;player&amp;quot;,79206) ~= nil ) then
		CastSpellByName(GetSpellInfo(8004), &amp;quot;player&amp;quot;)
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Healing Stream Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
local TOT1, TOTNAME, startTime, duration = GetTotemInfo(3)
----------------------------------------------------------------------------------

if PQI_MavminsELEMENTALFUNCTIONS_EnableSelfHealing_enable
	and PQI_MavminsELEMENTALFUNCTIONS_AutoHealingStreamTotem_enable
	and TOTNAME ~= tostring(GetSpellInfo(108280))
	and GetSpellCooldown(5394) == 0
	and PLAYERHP &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_AutoHealingStreamTotem_value
	or PQI_MavminsELEMENTALHOTKEYS_HealingStreamTotem_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_HealingStreamTotem_key) and not GetCurrentKeyBoardFocus()
	and PQR_SpellAvailable(5394) == true then

	CastSpellByName(GetSpellInfo(5394))
	return true
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Healing Tide Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
local TOT1, TOTNAME, startTime, duration = GetTotemInfo(3)
----------------------------------------------------------------------------------

if select(2,GetTalentRowSelectionInfo(5)) == 13 then

	if PQI_MavminsELEMENTALFUNCTIONS_EnableSelfHealing_enable
		and PQI_MavminsELEMENTALFUNCTIONS_AutoHealingTideTotem_enable
		and TOTNAME ~= tostring(GetSpellInfo(108280))
		and PQR_SpellAvailable(108280) == true
		and PLAYERHP &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_AutoHealingTideTotem_value
		or PQI_MavminsELEMENTALHOTKEYS_HealingTideTotem_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_HealingTideTotem_key) and not GetCurrentKeyBoardFocus()
		and PQR_SpellAvailable(108280) == true then

		CastSpellByName(GetSpellInfo(108280))
		return true
	
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Ancestral Guidance</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if select(2,GetTalentRowSelectionInfo(5)) == 14 then
	
	if PQI_MavminsELEMENTALFUNCTIONS_AutoAncestralGuidance_enable
		and PQR_SpellAvailable(108281) == true
		and PLAYERHP &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_AutoAncestralGuidance_value
		or PQI_MavminsELEMENTALHOTKEYS_AncestralGuidance_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_AncestralGuidance_key) and not GetCurrentKeyBoardFocus() then
			CastSpellByName(GetSpellInfo(108281))
			return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Wind Shear</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALFUNCTIONS_AutoWindShear_enable 
	or PQI_MavminsELEMENTALHOTKEYS_WindShearTarget_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_WindShearTarget_key) and not GetCurrentKeyBoardFocus() then

		if select(9, UnitCastingInfo(&amp;quot;target&amp;quot;)) == false
		 or select(8, UnitChannelInfo(&amp;quot;target&amp;quot;)) == false then
		 
			 if PQR_SpellAvailable(57994) == true
			 and IsSpellInRange(tostring(GetSpellInfo(57994)), &amp;quot;target&amp;quot;) == 1 then
			    CastSpellByName(GetSpellInfo(57994), &amp;quot;target&amp;quot;)
			    return true
			 end
			 
		end
		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Purge</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALFUNCTIONS_AutoPurge_enable 
	or PQI_MavminsELEMENTALHOTKEYS_PurgeTarget_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_PurgeTarget_key) and not GetCurrentKeyBoardFocus() then

	for i = 1, 40 do
	    if select(9, UnitBuff(&amp;quot;target&amp;quot;, i)) == 1 then
	        CastSpellByName(GetSpellInfo(370), &amp;quot;target&amp;quot;)
	    end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Cleanse Spirit</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALFUNCTIONS_AutoCleanseSpiritSelf_enable == true
	and PQR_SpellAvailable(51886) == true
	and UnitDebuff(&amp;quot;player&amp;quot;,1) then
	
	for y=1, 40 do
	
		if UnitDebuff(&amp;quot;player&amp;quot;,y)	
			and select(5, UnitDebuff(&amp;quot;player&amp;quot;, y)) == &amp;quot;Curse&amp;quot; then
			CastSpellByName(GetSpellInfo(51886), &amp;quot;player&amp;quot;)
			return true
		end
		
	end
	
end

if PQI_MavminsELEMENTALHOTKEYS_CleanseSpiritMouseover_enable == true
	and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_CleanseSpiritMouseover_key)
	and not GetCurrentKeyBoardFocus()
	and PQR_SpellAvailable(51886) == true then
	
	for y=1, 40 do
	
		if UnitDebuff(&amp;quot;mouseover&amp;quot;,y)
			and IsSpellInRange(tostring(GetSpellInfo(51886)), &amp;quot;mouseover&amp;quot;) == 1	
			and select(5, UnitDebuff(&amp;quot;mouseover&amp;quot;, y)) == &amp;quot;Curse&amp;quot; then
			CastSpellByName(GetSpellInfo(51886), &amp;quot;mouseover&amp;quot;)
			return true
		end
		
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Unleash Elements</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(2,GetTalentRowSelectionInfo(6)) == 16 
	and PQR_SpellAvailable(73680) == true then
	CastSpellByName(GetSpellInfo(73680), &amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[CD] Elemental Mastery</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(2,GetTalentRowSelectionInfo(4)) == 10 then

	if PQI_MavminsELEMENTALFUNCTIONS_AutoElementalMastery_enable
		or (PQI_MavminsELEMENTALHOTKEYS_ElementalMastery_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_ElementalMastery_key))
		or USE_CDS == true then
		
		if PQR_SpellAvailable(16166) == true 
			and IsPlayerSpell(16166)
			and UnitBuffID(&amp;quot;player&amp;quot;,16166) == nil then
			CastSpellByName(tostring(GetSpellInfo(16166)))
			return true
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Flame Shock Focus</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local FSHOCK,_,_,_,_,_,FSHOCKTIMER = UnitDebuffID(&amp;quot;focus&amp;quot;,8050,&amp;quot;PLAYER&amp;quot;)
local LSH1, LSH2, LSH3, LSH4 = UnitBuffID(&amp;quot;player&amp;quot;,324)
-----------------------------------------------------------------------------

if PQI_MavminsELEMENTALFUNCTIONS_AutoFlameShockFocus_enable then
	if AOE_MODE == false
		and UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) == nil then
			if (FSHOCK == nil or FSHOCKTIMER - GetTime() &amp;lt;= 5)
				and GetSpellCooldown(8050) == 0
				and UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;focus&amp;quot;) ~= 1
				and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;) ~= nil
				and IsSpellInRange(tostring(GetSpellInfo(8050)), &amp;quot;focus&amp;quot;) == 1 then
			--	and not LineOfSight(&amp;quot;focus&amp;quot;) then
					if  LSH1 ~= nil
						and LSH4 &amp;lt;= 5 then
						CastSpellByName(GetSpellInfo(8050), &amp;quot;focus&amp;quot;)
						return true 
					end
			end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Ancestral Swiftness</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(2,GetTalentRowSelectionInfo(4)) == 11 then

	if PQI_MavminsELEMENTALFUNCTIONS_AutoAncestralSwiftness_enable
		or (PQI_MavminsELEMENTALHOTKEYS_AncestralSwiftness_enable and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_AncestralSwiftness_key))
		or USE_CDS == true then
		if UnitBuffID( &amp;quot;player&amp;quot;, 16188 ) == nil
			and PQR_SpellAvailable(16188) ~= false then
			CastSpellByName(GetSpellInfo(16188))
			return true
		end
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- NO TARGET --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;target&amp;quot;) == nil
	or UnitBuffID(&amp;quot;player&amp;quot;,2645) ~= nil then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Totem Range --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALFUNCTIONS_AutoTotemReposition_enable == true 
	and	UnitExists(&amp;quot;Target&amp;quot;) ~= nil
	and UnitAffectingCombat(&amp;quot;Player&amp;quot;) ~= nil then
	
	if x1 == nil then x1 = 0 end
	if x2 == nil then x2 = 0 end
	if y1 == nil then y1 = 0 end
	if y2 == nil then y2 = 0 end
	if playerTargetDistance == nil then playerTargetDistance = 0 end
	if readyTimer == nil then readyTimer = 0 end
	
		-- Store our Position if in combat and have valid target. 
		if readyTimer == 0 then 
		    if UnitExists(&amp;quot;Target&amp;quot;) and UnitCanAttack(&amp;quot;Player&amp;quot;,&amp;quot;Target&amp;quot;) and UnitAffectingCombat(&amp;quot;Player&amp;quot;) then 
		        x1, y1 = PQR_UnitInfo(&amp;quot;target&amp;quot;) 
		        playerTargetDistance = PQR_UnitDistance(&amp;quot;Player&amp;quot;,&amp;quot;Target&amp;quot;) 
		        w = 100000 
		        h = 100000 
		        totemDistance = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2) 
		        --print(&amp;quot;Distance form Totem to target: &amp;quot;..floor(totemDistance)..&amp;quot; // Distance to Target: &amp;quot;..floor(playerTargetDistance))
		        readyTimer = GetTime() 
		    end 
		end 
			
		-- This part is delaying the script to check only once every seconds. 
		if readyTimer ~= 0 then 
		    timerCheck = GetTime() - readyTimer 
		end 
		if timerCheck &amp;gt; 1 then 
		    readyTimer = 0 
		end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Survival] Healing Rain</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_HealingRain_enable then

	if PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_HealingRain_key)
		and PQR_SpellAvailable(73920)
		and not GetCurrentKeyBoardFocus() then
			CastSpellByName(tostring(GetSpellInfo(73920),nil))
			if SpellIsTargeting() then
				CameraOrSelectOrMoveStart()
				CameraOrSelectOrMoveStop()
			end
		return true
	 end
	 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Cancel Queued Spell --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(&amp;quot;player&amp;quot;)
local FSHOCK,_,_,_,_,_,FSHOCKTIMER = UnitDebuffID(&amp;quot;target&amp;quot;,8050,&amp;quot;PLAYER&amp;quot;)
------------------------------------------------------------------------------------------------------------------

if 	PQI_MavminsELEMENTALFUNCTIONS_EnableCancelCast_enable == true
	and AOE_MODE == false then

	if castName ~= nil then
		local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
		local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
		local castTime = castEndTime - castStartTime
		local currentPercent = timeSinceStart / castTime * 100000
		
		if (castName == (GetSpellInfo(403)) or castName == (GetSpellInfo(117014)))
			and FSHOCK ~= nil
			and (UnitBuffID(&amp;quot;player&amp;quot;,77762) ~= nil or PQR_SpellAvailable(51505) == true)
			and currentPercent &amp;lt;= PQI_MavminsELEMENTALFUNCTIONS_EnableCancelCast_value then
			--	print(&amp;quot;Cancelled cast for Lava Surge Proc&amp;quot;)
				SpellStopCasting()
				return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Capacitor Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(108269) == true
	and	PQI_MavminsELEMENTALHOTKEYS_CapacitorTotem_enable == true 
	and	PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_GroundingTotem_key)
	and not GetCurrentKeyBoardFocus() then
		CastSpellByName(GetSpellInfo(108269))
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Windwalk Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(2,GetTalentRowSelectionInfo(2)) == 6 then

	if PQR_SpellAvailable(108273) == true
		and	PQI_MavminsELEMENTALHOTKEYS_WindwalkTotem_enable == true 
		and	PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_WindwalkTotem_key)
		and not GetCurrentKeyBoardFocus() then
			CastSpellByName(GetSpellInfo(108273))
			return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Earthbind Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(2484) == true
	and	PQI_MavminsELEMENTALHOTKEYS_EarthbindTotem_enable == true 
	and	PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_GroundingTotem_key)
	and not GetCurrentKeyBoardFocus() then
		CastSpellByName(GetSpellInfo(2484))
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Magma Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(8190) == true
	and	PQI_MavminsELEMENTALHOTKEYS_MagmaTotem_enable == true 
	and	PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_GroundingTotem_key)
	and not GetCurrentKeyBoardFocus() then
		CastSpellByName(GetSpellInfo(8190))
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Totemic Recall</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(36936) == true
	and	PQI_MavminsELEMENTALHOTKEYS_TotemicRecall_enable == true 
	and	PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_TotemicRecall_key)
	and not GetCurrentKeyBoardFocus() then
		CastSpellByName(GetSpellInfo(36936))
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Chain Heal Mouseover</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_ChainHealMouseover_enable == true
	and PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_ChainHealMouseover_key)
	and not GetCurrentKeyBoardFocus()
	and PQR_SpellAvailable(1064) == true
	and IsSpellInRange(tostring(GetSpellInfo(1064)), &amp;quot;mouseover&amp;quot;) == 1 then
	
		CastSpellByName(GetSpellInfo(1064), &amp;quot;mouseover&amp;quot;)
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- TRINKETS --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--specific trinket logic

--Unerring Vision of LeiShen 100% Crit buff---------------------------------------

if UnitBuffID(&amp;quot;player&amp;quot;,138963) ~= nil then

	if AOE_MODE == false 
		and GetSpellCooldown(8050) == 0 then
			--SpellStopCasting()
			CastSpellByName(GetSpellInfo(8050), &amp;quot;target&amp;quot;)
			return true 
	end
	
end

------------------------------------------------------------------------------------</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Cleave] Chain Lightning</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CLEAVE_MODE == true
	or (PQI_MavminsELEMENTALHOTKEYS_CleaveKeyHold_enable
		and (PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_CleaveKeyHold_key)
		and not GetCurrentKeyBoardFocus())) then
	if (PQR_IsMoving(0.3) == false or UnitBuffID(&amp;quot;player&amp;quot;,79206) ~= nil) then
		CastSpellByName(GetSpellInfo(421), &amp;quot;target&amp;quot;)
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[PVP] Arena Purge</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PlayerHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
local PlayerMana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)

local purgeThis1 = {

1044,   -- Hand of Freedom

6940,   -- Hand of Sacrifice

69369,   -- Predatory Swiftness

12472,  -- Icy Veins

1022,   -- Hand of Protection

11426, -- Ice Barrier

20925, -- Sacred Shield

114250, -- Selfless Healer

17, -- PW Shield

79206, -- Spirit walker&amp;apos;s Grace

116849, -- Life Cocoon

974, -- Earth Shield

33076 -- PoM
}

----------------------------------------------------------------------------

if UnitExists(&amp;quot;arena1&amp;quot;) then
	for i=1, #purgeThis1 do
		if UnitBuffID(&amp;quot;arena1&amp;quot;, purgeThis1[i]) ~= nil
			and PQR_IsOutOfSight(&amp;quot;arena1&amp;quot;, 0.1) == false
			and IsSpellInRange(tostring(GetSpellInfo(370)), &amp;quot;arena1&amp;quot;) == 1 then
			CastSpellByID(370, &amp;quot;arena1&amp;quot;)
		end
	end
end

if UnitExists(&amp;quot;arena2&amp;quot;) then
	for i=1, #purgeThis1 do
		if UnitBuffID(&amp;quot;arena2&amp;quot;, purgeThis1[i]) ~= nil
			and PQR_IsOutOfSight(&amp;quot;arena2&amp;quot;, 0.1) == false
			and IsSpellInRange(tostring(GetSpellInfo(370)), &amp;quot;arena2&amp;quot;) == 1 then
			CastSpellByID(370, &amp;quot;arena2&amp;quot;)
		end
	end
end

if UnitExists(&amp;quot;arena3&amp;quot;) then
	for i=1, #purgeThis1 do
		if UnitBuffID(&amp;quot;arena3&amp;quot;, purgeThis1[i]) ~= nil
			and PQR_IsOutOfSight(&amp;quot;arena3&amp;quot;, 0.1) == false
			and IsSpellInRange(tostring(GetSpellInfo(370)), &amp;quot;arena3&amp;quot;) == 1 then
			CastSpellByID(370, &amp;quot;arena3&amp;quot;)
		end
	end
end

if UnitExists(&amp;quot;arena4&amp;quot;) then
	for i=1, #purgeThis1 do
		if UnitBuffID(&amp;quot;arena4&amp;quot;, purgeThis1[i]) ~= nil
			and PQR_IsOutOfSight(&amp;quot;arena4&amp;quot;, 0.1) == false
			and IsSpellInRange(tostring(GetSpellInfo(370)), &amp;quot;arena4&amp;quot;) == 1 then
			CastSpellByID(370, &amp;quot;arena4&amp;quot;)
		end
	end
end

if UnitExists(&amp;quot;arena5&amp;quot;) then
	for i=1, #purgeThis1 do
		if UnitBuffID(&amp;quot;arena5&amp;quot;, purgeThis1[i]) ~= nil
			and PQR_IsOutOfSight(&amp;quot;arena5&amp;quot;, 0.1) == false
			and IsSpellInRange(tostring(GetSpellInfo(370)), &amp;quot;arena5&amp;quot;) == 1 then
			CastSpellByID(370, &amp;quot;arena5&amp;quot;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[PVP] BG Purge</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PlayerHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
local PlayerMana = 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;)

local purgeThis2 = {

1044,   -- Hand of Freedom

6940,   -- Hand of Sacrifice

69369,   -- Predatory Swiftness

12472,  -- Icy Veins

1022,   -- Hand of Protection

11426, -- Ice Barrier

20925, -- Sacred Shield

114250, -- Selfless Healer

17, -- PW Shield

79206, -- Spirit walker&amp;apos;s Grace

116849, -- Life Cocoon

974, -- Earth Shield

33076 -- PoM

}

----------------------------------------------------------------------------------

if UnitExists(&amp;quot;target&amp;quot;)
	and UnitIsEnemy(&amp;quot;target&amp;quot;, &amp;quot;player&amp;quot;)
	and IsSpellInRange(GetSpellInfo(370), &amp;quot;target&amp;quot;) ~= nil then
		for i=1, #purgeThis2 do
			if UnitBuffID(&amp;quot;target&amp;quot;, purgeThis2[i]) ~= nil
				and PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 0.1) == false
				and IsSpellInRange(tostring(GetSpellInfo(370)), &amp;quot;target&amp;quot;) == 1
				and PlayerMana &amp;gt; 40 then
					CastSpellByID(370, &amp;quot;target&amp;quot;)
			end
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[PVP] Grounding Totem</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GroundThis == nil then
    GroundThis = {
    33786, -- Cyclone	 (cast)
	28272, -- Pig Poly	 (cast)
	118, -- Sheep Poly	 (cast)
	61305, -- Cat Poly	 (cast)
	61721, -- Rabbit Poly	 (cast)
	61780, -- Turkey Poly	 (cast)
	28271, -- Turtle Poly	 (cast)
	51514, -- Hex	 (cast)
	51505, -- Lava Burst	 (cast)
	339, -- Entangling Roots	(cast)
	30451, -- Arcane Blast	 (cast)
	605, -- Dominate Mind	 (cast)
	116858, --Chaos Bolt	 (cast)
	113092, --Frost Bomb	 (cast)
	8092, --Mind Blast	 (cast)
	11366, --Pyroblast	 (cast)
	48181, --Haunt	 (cast)
	102051, --Frost Jaw	 (cast)
	51505, -- Lava Burst	 (cast)
	8936, -- Regrowth	 (cast)
	2812, -- Denounce	 (cast)
	126201, -- Frost Bolt	 (cast)
	44614, -- Frostfire Bolt	(cast)
	133, -- Fireball	 (cast)
	1513, -- Scare Beast	 (cast)
	118297, -- Immolate	 (cast)
	124465, -- Vampiric Touch	 (cast)
	1120, -- Drain Soul	 (channeling cast)
	12051, -- Evocation	 (channeling cast)
    }
end

if PQR_SpellAvailable(57994) ~= true and PQR_SpellAvailable(8177) == true then
    for i = 1, 5 do
        local ArenaTarget = &amp;quot;arena&amp;quot;..i
        if UnitExists(ArenaTarget) 
          and IsSpellInRange(GetSpellInfo(57994), ArenaTarget) ~= nil
          and not PQR_IsOutOfSight(ArenaTarget, 0.1) then
            for j = 1, #GroundThis do
                if UnitCastingInfo(ArenaTarget) == GetSpellInfo(GroundThis[j]) then
                    CastSpellByName(GetSpellInfo(57994), ArenaTarget)
                    return true
                end
            end
        end
    end
end 

if PQR_SpellAvailable(57994) ~= true and PQR_SpellAvailable(8177) == true then
	if UnitExists(&amp;quot;target&amp;quot;) == true
          and IsSpellInRange(GetSpellInfo(57994), &amp;quot;target&amp;quot;) ~= nil
          and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 0.1) then
            for j = 1, #GroundThis do
                if UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(GroundThis[j]) then
                    CastSpellByName(GetSpellInfo(57994), &amp;quot;target&amp;quot;)
                    return true
                end
            end
	end
end  

if PQR_SpellAvailable(57994) ~= true and PQR_SpellAvailable(8177) == true then
	if UnitExists(&amp;quot;focus&amp;quot;) == true
          and IsSpellInRange(GetSpellInfo(57994), &amp;quot;focus&amp;quot;) ~= nil
          and not PQR_IsOutOfSight(&amp;quot;focus&amp;quot;, 0.1) then
            for j = 1, #GroundThis do
                if UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(GroundThis[j]) then
                    CastSpellByName(GetSpellInfo(57994), &amp;quot;focus&amp;quot;)
                    return true
                end
            end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[PVP] Arena / BG Cleanse</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GetSpellCooldown(51886) == 0 then

	if ValidDispel(&amp;quot;player&amp;quot;) then
	    CastSpellByName(GetSpellInfo(51886), &amp;quot;player&amp;quot;)
	end
	
	if ValidDispel(&amp;quot;party1&amp;quot;)
		and PQR_IsOutOfSight(&amp;quot;party1&amp;quot;) == false 
		and IsSpellInRange(&amp;quot;Healing Surge&amp;quot;, &amp;quot;party1&amp;quot;) == 1 
		and not UnitIsEnemy(&amp;quot;party1&amp;quot;, &amp;quot;player&amp;quot;) then
			CastSpellByName(GetSpellInfo(51886), &amp;quot;party1&amp;quot;)
			return true
	end
	
	if ValidDispel(&amp;quot;party2&amp;quot;)
		and PQR_IsOutOfSight(&amp;quot;party2&amp;quot;) == false
		and IsSpellInRange(&amp;quot;Healing Surge&amp;quot;, &amp;quot;party2&amp;quot;) == 1 
		and not UnitIsEnemy(&amp;quot;party2&amp;quot;, &amp;quot;player&amp;quot;)  then
			CastSpellByName(GetSpellInfo(51886), &amp;quot;party2&amp;quot;)
			return true
	end
	
	if ValidDispel(&amp;quot;party3&amp;quot;)
		and PQR_IsOutOfSight(&amp;quot;party3&amp;quot;) == false 
		and IsSpellInRange(&amp;quot;Healing Surge&amp;quot;, &amp;quot;party3&amp;quot;) == 1 
		and not UnitIsEnemy(&amp;quot;party3&amp;quot;, &amp;quot;player&amp;quot;) then
			CastSpellByName(GetSpellInfo(51886), &amp;quot;party3&amp;quot;)
			return true
	end
	
	if ValidDispel(&amp;quot;party4&amp;quot;)
		and PQR_IsOutOfSight(&amp;quot;party4&amp;quot;) == false 
		and IsSpellInRange(&amp;quot;Healing Surge&amp;quot;, &amp;quot;party4&amp;quot;) == 1 
		and not UnitIsEnemy(&amp;quot;party4&amp;quot;, &amp;quot;player&amp;quot;) then
			CastSpellByName(GetSpellInfo(51886), &amp;quot;party4&amp;quot;)
			return true
	end
	
	if ValidDispel(&amp;quot;party5&amp;quot;)
		and PQR_IsOutOfSight(&amp;quot;party5&amp;quot;) == false 
		and IsSpellInRange(&amp;quot;Healing Surge&amp;quot;, &amp;quot;party5&amp;quot;) == 1 
		and not UnitIsEnemy(&amp;quot;party5&amp;quot;, &amp;quot;player&amp;quot;) then
			CastSpellByName(GetSpellInfo(51886), &amp;quot;party5&amp;quot;)
			return true
	end
		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[PVP] Stealthers Bane</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--RedRussian&amp;apos;s &amp;quot;Stealthers&amp;apos; Bane&amp;quot;

local rescan_period = 2 --how often stealthed list is repopulated

local function IsStealthed(unit) --check if unit is stealthed
stealth, prowl, shadowmeld = 1784, 5215, 58984 --list of detectable stealth buffs may be incomplete!
	return ( UnitBuffID(unit, stealth) or UnitBuffID(unit, prowl) or UnitBuffID(unit, shadowmeld) )
end

local function Breaker() --instant stealth breaker, class dependent
_, playerClass = UnitClass(&amp;quot;player&amp;quot;)
	if playerClass == &amp;quot;WARRIOR&amp;quot; then
		return 57755 --Heroic Throw
	elseif playerClass == &amp;quot;PALADIN&amp;quot; then
		if PQR_SpellAvailable(879) then
			return 879 --Exorcism
		else	
			return 20271 --Judgment
		end	
	elseif playerClass == &amp;quot;HUNTER&amp;quot; then
		return 3044 --Arcane shot
	elseif playerClass == &amp;quot;ROGUE&amp;quot; then
		if IsStealthed(&amp;apos;player&amp;apos;) then
			return 6770 --Sap
		else
			return 121733 --Throw
		end
	elseif playerClass == &amp;quot;PRIEST&amp;quot; then
		return 589 --Shadow Word: Pain
	elseif playerClass == &amp;quot;DEATHKNIGHT&amp;quot; then
		return 45524 --Chains of Ice
	elseif playerClass == &amp;quot;SHAMAN&amp;quot; then
		return 8056 --Frost Shock
	elseif playerClass == &amp;quot;MAGE&amp;quot; then
		return 30455 --Ice Lance
	elseif playerClass == &amp;quot;WARLOCK&amp;quot; then
		return 77799 --Fel Flame
	elseif playerClass == &amp;quot;MONK&amp;quot; then
		return 115546 --Taunt
	elseif playerClass == &amp;quot;DRUID&amp;quot; then
		if IsStealthed(&amp;apos;player&amp;apos;) then
			return 0 --do nothing
		elseif ( not IsStealthed(&amp;apos;player&amp;apos;) and PQR_SpellAvailable(770) ) then
			return 770 --fairy fire
		elseif 	not ( IsStealthed(&amp;apos;player&amp;apos;) or PQR_SpellAvailable(770) ) then
			return 8921 --moonfire
		end
	else
		return 0 
	end
end

local breakername = GetSpellInfo(Breaker()) --localized breaker name for use with IsSpellInRange


------------------------BG/RBG--------------------------------
--get stealthed list
if ( not last_scan or GetTime()-last_scan &amp;gt;= rescan_period ) then --repopulate list every T seconds
last_scan = GetTime()
stealthed = {} --depopulate stealthed list
local pname = UnitName(&amp;apos;player&amp;apos;) --player&amp;apos;s name
local currtarget = UnitName(&amp;apos;target&amp;apos;) --get current target&amp;apos;s name

	for j=1,GetNumBattlefieldScores() do --get player faction to make profile work in rbgs and arenas
	local name, killingBlows, honorableKills, deaths, honorGained, faction, rank, race, class = GetBattlefieldScore(j) 
		if name == pname then 
		pfaction = faction --get player&amp;apos;s faction
		break
		end 
	end

	for i=1,GetNumBattlefieldScores() do 
	local name, killingBlows, honorableKills, deaths, honorGained, faction, rank, race, class = GetBattlefieldScore(i)
	local matched_name = name:match(&amp;apos;[^-]+&amp;apos;) --filter out &amp;quot;-Realm&amp;quot; part
		if ( class == &amp;quot;DRUID&amp;quot; or class == &amp;quot;ROGUE&amp;quot; ) and faction ~= pfaction and not UnitChannelInfo(&amp;apos;player&amp;apos;) then --target change is fatal to channgeling
		TargetUnit(name)
			if ( UnitName(&amp;apos;target&amp;apos;) ~= matched_name or ( UnitName(&amp;apos;target&amp;apos;) == matched_name and IsStealthed(&amp;apos;target&amp;apos;) ) ) then --targeting attemp was unsuccessful or stealthed target was caught during list repopulation
			stealthed[name] = 1
			end
		end
		if ( currtarget and UnitName(&amp;apos;target&amp;apos;) ~= currtarget ) then --return to previous target after targeting stealther
		TargetLastTarget() 
		elseif not currtarget then 
		ClearTarget() 
		end	
	end
end

--look for stealthed
if PQR_SpellAvailable(Breaker()) then --CD/GCD check to prevent excessive spam. NOTE: spell with ID 0 is never avalaible
local currtarget = UnitName(&amp;apos;target&amp;apos;) --get current target&amp;apos;s name
local stealther_spotted = false
	for k,v in pairs(stealthed) do
		if ( not ( UnitCastingInfo(&amp;apos;player&amp;apos;) or UnitChannelInfo(&amp;apos;player&amp;apos;) ) and v == 1 ) then --not on GCD &amp; not casting &amp; not channeling
		TargetUnit(k)
			if UnitName(&amp;apos;target&amp;apos;) == k:match(&amp;apos;[^-]+&amp;apos;) then --k is matched to be the same format with UnitName(&amp;apos;target&amp;apos;)
				if ( IsStealthed(&amp;apos;target&amp;apos;) and IsSpellInRange(breakername, &amp;apos;target&amp;apos;) == 1 ) then --range check to prevent spam caused by stealth glitch
				CastSpellByID(Breaker(), &amp;apos;target&amp;apos;)
				stealther_spotted = true --flag fixing your target on spotted stealther
				else
				stealthed[k] = nil	--exclude non-stealthed or too distant stealther from the list
				end
			end
		end
		if not stealther_spotted then	--return to previous target if no stealther was spotted, do nothing otherwise
			if ( currtarget and UnitName(&amp;apos;target&amp;apos;) ~= currtarget ) then 
			TargetLastTarget() 
			elseif not currtarget then 
			ClearTarget() 
			end
		end	
	end	
end
------------------------ARENA--------------------------------
for a=1,5 do
local arenatarget = &amp;apos;arena&amp;apos;..a
	if IsStealthed(arenatarget) then
	CastSpellByID(Breaker(), arenatarget)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[PVP] Interrupt Protection</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>SIN_InterruptFrame = SIN_InterruptFrame or CreateFrame(&amp;quot;FRAME&amp;quot;, nil, UIParent)

function SIN_Interrupt_OnEvent(self, event, ...)
	local type, _, _, _, _, _, destGUID = select(2, ...)
	if event == &amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot; then
		if type == &amp;quot;SPELL_CAST_SUCCESS&amp;quot; then
			if destGUID == UnitGUID(&amp;quot;player&amp;quot;) then
				local spellId = select(12, ...)
				local interruptId = {
					102060, --Disrupting Shout
					106839, --Skull Bash
					80964, --Skull Bash
					115781, --Optical Blast
					116705, --Spear Hand Strike
					1766, --Kick
					19647, --Spell Lock
					2139, --Counterspell
					47476, --Strangulate
					47528, --Mind Freeze
					57994, --Wind Shear
					6552, --Pummel
					96231, --Rebuke
					}
				for i = 1, #interruptId do
					if spellId == interruptId[i] then
						SpellStopCasting()
						PQR_DelayRotation(1)
					end
				end
			end
		end
	end
end

SIN_InterruptFrame:SetScript(&amp;quot;OnEvent&amp;quot;, SIN_Interrupt_OnEvent)
SIN_InterruptFrame:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- ENGINEERING --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SpellStart, SpellDuration = GetSpellCooldown(114049)
local ASCENDANCECD = SpellStart + SpellDuration - GetTime()
------------------------------------------------------------------------------------------


if IsPlayerSpell(110403) == true
	and PQI_MavminsELEMENTALFUNCTIONS_EngineerCDs_enable then
	
	-- Frag Belt
	if GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 6) == 0 then
			-- Cast Frag Belt on target
			if GetCurrentKeyBoardFocus() == nil 
				and UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;mouseover&amp;quot;)
				and UnitIsDead(&amp;quot;target&amp;quot;) ~= 1
			then
				UseInventoryItem(6)
				if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
			end
	end
	
	
	-- Synapse Springs
	if GetInventoryItemCooldown(&amp;quot;player&amp;quot;,10) == 0 
		and (UnitBuffID( &amp;quot;player&amp;quot;, 114049 ) ~= nil
			or ASCENDANCECD &amp;gt;= 60) then
				-- Cast Synapse Springs
				UseInventoryItem(10)
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Totemic Projection</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(2,GetTalentRowSelectionInfo(3)) == 9 then

	if PQR_SpellAvailable(108287) == true
		and	PQI_MavminsELEMENTALHOTKEYS_TotemicProjection_enable == true 
		and	PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_TotemicProjection_key)
		and not GetCurrentKeyBoardFocus() then
			CastSpellByName(GetSpellInfo(108287))
			
			if SpellIsTargeting() then
				CameraOrSelectOrMoveStart()
				CameraOrSelectOrMoveStop()
			end
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[PVP] Wind Shear</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if InteruptThis == nil then
    InteruptThis = {
    33786, -- Cyclone	 (cast)
	28272, -- Pig Poly	 (cast)
	118, -- Sheep Poly	 (cast)
	61305, -- Cat Poly	 (cast)
	129249, -- Insanity YO
	61721, -- Rabbit Poly	 (cast)
	61780, -- Turkey Poly	 (cast)
	28271, -- Turtle Poly	 (cast)
	51514, -- Hex	 (cast)
	51505, -- Lava Burst	 (cast)
	339, -- Entangling Roots	(cast)
	30451, -- Arcane Blast	 (cast)
	605, -- Dominate Mind	 (cast)
	20066, --Repentance	 (cast)
	116858, --Chaos Bolt	 (cast)
	113092, --Frost Bomb	 (cast)
	8092, --Mind Blast	 (cast)
	11366, --Pyroblast	 (cast)
	48181, --Haunt	 (cast)
	102051, --Frost Jaw	 (cast)
	1064, -- Chain Heal	 (cast)
	77472, -- Greater Healing Wave	(cast)
	8004, -- Healing Surge	 (cast)
	73920, -- Healing Rain	 (cast)
	51505, -- Lava Burst	 (cast)
	8936, -- Regrowth	 (cast)
	2061, -- Flash Heal	 (cast)
	2060, -- Greater Heal	 (cast)
	32375, -- Mass Dispel	 (cast)
	2006, -- Resurrection	 (cast)
	5185, -- Healing Touch	 (cast)
	596, -- Prayer of Healing	(cast)
	19750, -- Flash of Light	(cast)
	635, -- Holy Light	 (cast)
	7328, -- Redemption	 (cast)
	2008, -- Ancestral Spirit	(cast)
	50769, -- Revive	 (cast)
	2812, -- Denounce	 (cast)
	82327, -- Holy Radiance	 (cast)
	10326, -- Turn Evil	 (cast)
	82326, -- Divine Light	 (cast)
	82012, -- Repentance	 (cast)
	116694, -- Surging Mist	 (cast)
	124682, -- Enveloping Mist	(cast)
	115151, -- Renewing Mist	(cast)
	115310, -- Revival	 (cast)
	126201, -- Frost Bolt	 (cast)
	44614, -- Frostfire Bolt	(cast)
	133, -- Fireball	 (cast)
	1513, -- Scare Beast	 (cast)
	982, -- Revive Pet	 (cast)
	111771, -- Demonic Gateway	 (cast)
	118297, -- Immolate	 (cast)
	124465, -- Vampiric Touch	 (cast)
	32375, -- Mass Dispel	 (cast)
	1120, -- Drain Soul	 (channeling cast)
	12051, -- Evocation	 (channeling cast)
	115294, -- Mana Tea	 (channeling cast)
	115175, -- Soothing Mist	(channeling cast)
	64843, -- Divine Hymn	 (channeling cast)
	64901, -- Hymn of Hope	 (channeling cast)
	47540 -- Penance
    }
end

if PQR_SpellAvailable(57994) == true then
    for i = 1, 5 do
        local ArenaTarget = &amp;quot;arena&amp;quot;..i
        if UnitExists(ArenaTarget) 
          and IsSpellInRange(GetSpellInfo(57994), ArenaTarget) ~= nil
          and not PQR_IsOutOfSight(ArenaTarget, 0.1) then
            for j = 1, #InteruptThis do
                if UnitCastingInfo(ArenaTarget) == GetSpellInfo(InteruptThis[j]) then
                    CastSpellByName(GetSpellInfo(57994), ArenaTarget)
                    return true
                end
            end
        end
    end
end 

if PQR_SpellAvailable(57994) == true then
	if UnitExists(&amp;quot;target&amp;quot;) == true
          and IsSpellInRange(GetSpellInfo(57994), &amp;quot;target&amp;quot;) ~= nil
          and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 0.1) then
            for j = 1, #InteruptThis do
                if UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(InteruptThis[j]) then
                    CastSpellByName(GetSpellInfo(57994), &amp;quot;target&amp;quot;)
                    return true
                end
            end
	end
end  

if PQR_SpellAvailable(57994) == true then
	if UnitExists(&amp;quot;focus&amp;quot;) == true
          and IsSpellInRange(GetSpellInfo(57994), &amp;quot;focus&amp;quot;) ~= nil
          and not PQR_IsOutOfSight(&amp;quot;focus&amp;quot;, 0.1) then
            for j = 1, #InteruptThis do
                if UnitCastingInfo(&amp;quot;target&amp;quot;) == GetSpellInfo(InteruptThis[j]) then
                    CastSpellByName(GetSpellInfo(57994), &amp;quot;focus&amp;quot;)
                    return true
                end
            end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- RAID SPECIFICS --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(&amp;quot;target&amp;quot;)
local TARGETHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
-----------------------------------------------------------------------------------------------------------

--------------------------Throne of Thunder-------------------------------

--dark animus jolt
if castName == (GetSpellInfo(139869)) -- Raid Finder
	or castName == (GetSpellInfo(139867)) -- Heroic
	or castName == (GetSpellInfo(138763)) then -- Normal
	return true 
end

--trash lightning shield
if UnitBuffID( &amp;quot;target&amp;quot;, 140296 ) ~= nil then
	return true
end

--whirl turtle
if tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(6, 10), 16) == 67966 then
	if UnitHealth(&amp;quot;target&amp;quot;) == 0 then
		return true
	end
end

--------------------------------------------------------------------------</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Cleave Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsELEMENTALHOTKEYS_CleaveModeToggle_enable == true then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsELEMENTALHOTKEYS_CleaveModeToggle_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
		modtime = GetTime()
		if CLEAVE_MODE == true then
	    	CLEAVE_MODE = false
--	    	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET MODE&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
	    	if PQI_MavminsELEMENTALFUNCTIONS_ChatNotifications_enable then
	    		PQR_WriteToChat(&amp;quot;CLEAVE MODE: \124cFFE61515Disabled&amp;quot;)
	    	end
	    else
	        CLEAVE_MODE = true
	        AOE_MODE = false
--	        PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;AOE MODE&amp;quot;, nil, &amp;quot;FF0000&amp;quot;)
	        if PQI_MavminsELEMENTALFUNCTIONS_ChatNotifications_enable then
	  			PQR_WriteToChat(&amp;quot;CLEAVE MODE: \124cFF15E615Enabled&amp;quot;)
	  		end
	    end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Auto target Sig</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitInRaid(&amp;quot;player&amp;quot;) or UnitInParty(&amp;quot;player&amp;quot;) then

local InParty = GetNumSubgroupMembers()
if InParty &amp;gt; 0 then
for i = 1, InParty, 1 do
if UnitGroupRolesAssigned(&amp;quot;party&amp;quot;..tostring(i)) == &amp;quot;TANK&amp;quot; then heisthetank = &amp;quot;party&amp;quot;..tostring(i) end
end
if not UnitExists(&amp;quot;target&amp;quot;) 
or UnitIsDead(&amp;quot;target&amp;quot;) ~= nil
then
if heisthetank --and UnitExists(&amp;quot;target&amp;quot;) == nil
--and UnitAffectingCombat(heisthetank) 
--and UnitAffectingCombat(heisthetank..&amp;quot;target&amp;quot;) 
and UnitIsDead(heisthetank..&amp;quot;target&amp;quot;) == nil
and UnitCanAttack(&amp;quot;player&amp;quot;,heisthetank..&amp;quot;target&amp;quot;)
then 
TargetUnit(heisthetank..&amp;quot;target&amp;quot;)
AssistUnit(heisthetank)
PetAttack()
AttackTarget()
CastSpellByName(GetSpellInfo(403), &amp;quot;target&amp;quot;)
end
end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></SHAMAN>