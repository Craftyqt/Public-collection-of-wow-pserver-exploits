<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>[ MISC ] Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp
Update_Nova()
local Nova_Mod = Nova_Mod
local HOTKEY = PHotkey
local HOTKEY2 = PHotkey2


--Code by Crystal_tech
if Nova_Mod() == PHotkey
or Nova_Mod() == PHotkey2
or IsMounted()
or not PlayerCombat
or UnitInVehicle(&amp;quot;player&amp;quot;)
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
 then
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>0 - Auto Cast</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not spellSucced then
	spellSucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
	spellSucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
	spellSucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)==CheckSpell then SpellSucess=true end end)
end

if SpellSucess == true then
	PQR_SendText(&amp;quot;Casted&amp;quot;,CheckSpell)
	CheckSpell = 0
	SaveRP = nil
	SpellSucess = false
end

for i=1, #PlayerSpells do
	if CheckSpell == PlayerSpells[i]
	and PQR_SpellAvailable(CheckSpell)
	then
		print(&amp;quot;|cff00ffffCast: |r&amp;quot; .. CheckSpell)
		CastSpellByName(GetSpellInfo(CheckSpell))
	end
end

if CheckSpell ~= 0
and PQR_SpellAvailable(BerserkerRage)
then
	CastSpell(BerserkerRage)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Auto Buff</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PlayerCombat
and not IsMounted()
then
	if GetShapeshiftForm() ~= 2 and GetShapeshiftFormCooldown(2) == 0 then
		CastShapeshiftForm(2)
	end

	if CurrentShout == BattleShout
	and PQR_SpellAvailable(CurrentShout)
	and PQ_AuraInfo(3) == nil
	then
		CastSpell(CurrentShout)
	end
	
	if CurrentShout == CommandingShout
	and PQR_SpellAvailable(CurrentShout)
	and PQ_AuraInfo(2) == nil
	then
		CastSpell(CurrentShout)
	end

end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Spell List</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>PlayerSpells = {
46968, -- Shockwave
57755, -- Heroic Throw
112048, -- ShieldBarrier
2565 -- ShieldBlock
}

PlayerShouts = {
6673, -- Battle
469, -- Commanding
}

--TALENT
Shockwave = 46968

-- RAGE GENERATION
ShieldSlam = 23922
Revenge = 6572

-- BUFFS
ShieldBarrier = 112048
BerserkerRage = 18499
ShieldBlock = 2565

-- DEBUFFS
Devastate = 20243
ThunderClap = 6343

-- RAGE SPEND
HeroicStrike = 78
Execute = 5308
Cleave = 845

-- OTHERS
HeroicLeap = 6544
HeroicThrow = 57755
Shockwave = 46968
HeroicThrow = 57755

-- SHOUT
BattleShout = 6673
CommandingShout = 469

-- TALENT / HEALING
VictoryRush = 34428
ImpendingVictory = 103840

--SPECIAL
--if UnitBuffID(&amp;quot;player&amp;quot;,HornofWinter) ~= nil
--then
--	HornofWinterBuff = UnitBuffID(&amp;quot;player&amp;quot;,HornofWinter)
--else
--	HornofWinterBuff = false
--end

-----------------
-- PROCS/BUFFS --
-----------------
Ultimatum = UnitBuffID(&amp;quot;player&amp;quot;,122510)
VR,_,_,_,_,_,VRtimer = UnitAura(&amp;quot;player&amp;quot;,GetSpellInfo(32216))
if not VR
then
	VRtimer = 0
else
	VRtimer = VRtimer - GetTime()
end


--LichborneBuff = UnitBuffID(&amp;quot;player&amp;quot;,49039)
--Rime = UnitBuffID(&amp;quot;player&amp;quot;,59052)
--KillingMachine = UnitBuffID(&amp;quot;player&amp;quot;,51124)

--BC,_,_,BCCount = UnitBuffID(&amp;quot;player&amp;quot;,114851)

--if not BC
--then
--	BCCount = 0
--end


-------------
-- DEBUFFS --
-------------
WA,_,_,WAcount,_,_,WAtimer = UnitDebuffID(&amp;quot;target&amp;quot;,113746)
DW,_,_,_,_,_,DWtimer = UnitDebuffID(&amp;quot;target&amp;quot;,115767)
WB,_,_,_,_,_,WBtimer = UnitDebuffID(&amp;quot;target&amp;quot;,115798)

if not WA
then
	WAtimer = 0
else
	WAtimer = WAtimer - GetTime()
end

if not DW
then
	DWtimer = 0
else
	DWtimer = DWtimer - GetTime()
end

if not WB
then
	WBtimer = 0
else
	WBtimer = WBtimer - GetTime()
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SkillEnabled = HSenabled
local SkillPercent = HShealth

if SkillEnabled ~= 1 then return false end

if GetItemCount(5512,false,true) &amp;gt; 0
	and PlayerHP &amp;lt;= SkillPercent
	and PQR_SpellAvailable(5512)
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and GetItemCooldown(5512) == 0
then
	PQR_DebugP(&amp;quot;Healing with Healthstone (Current HP: &amp;quot; .. PlayerHP)
	UseItemByName(5512)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Victory Rush (Proc)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if VRPenabled ~= 1 then return false end

if IsSpellKnown(ImpendingVictory)
then
	SPELL = ImpendingVictory
else
	SPELL = VictoryRush
end

if TargetValidation(&amp;quot;target&amp;quot;,SPELL)
and ((VRtimer &amp;gt; 1
and PlayerHP &amp;lt;= VRPhealth)
or (VRtimer &amp;lt; 2))
then
	PQR_DebugP(&amp;quot;Healing with Victory Rush (Current HP: &amp;quot; .. PlayerHP)
	CastSpell(SPELL)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] PQR_Text</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp

function PQR_SendText(CHOICE,SPELL)
	if CHOICE == &amp;quot;Standby&amp;quot;
	then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Standby: &amp;quot; .. ActualRotation, nil, &amp;quot;ffffff&amp;quot;)
	end
	
	if CHOICE ~= &amp;quot;Standby&amp;quot;
	and SPELL ~= 0
	then
		local nskill = GetSpellInfo(SPELL)		
		
		if CHOICE == &amp;quot;Queue&amp;quot;
		then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Queue Skill: &amp;quot; .. nskill, nil, &amp;quot;14DCB4&amp;quot;)
		end
		
		if CHOICE == &amp;quot;Casted&amp;quot;
		then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Casted: &amp;quot; .. nskill, nil, &amp;quot;ffffff&amp;quot;)
		end
	end
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Functions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp

-------------
-- RACIAL --
------------
function RacialDetection()
	Racial = 0
	local _,Race = UnitRace(&amp;quot;player&amp;quot;)
	if Race == &amp;quot;Orc&amp;quot;
	then
		local Orc_Racial = {
		20572,
		33697,
		33702,
		82836
		}
	
		for i=1, #Orc_Racial do
			if IsSpellKnown(Orc_Racial[i]) then
				Racial = Orc_Racial[i]
			end
		end
	end
end

if Race == &amp;quot;Troll&amp;quot;
then
	Racial = 26297
end

------------------
-- INIT MESSAGE --
------------------
function initMessage()
	PQR_WriteToChat(&amp;quot;|cff91e782Rubim&amp;apos;s Warrior Protection|cff82cee7Loaded!|cffffffff&amp;quot;)
	
	LastSpell = 6603
end

------------------
--Level 90 Check--
------------------
if UnitLevel(&amp;quot;player&amp;quot;) ~= 90 then
	PQR_WriteToChat(&amp;quot;Nope, you need to be lvl 90.&amp;quot;)
	PQR_StopRotation()
end

-----------------
-- Meele Range --
-----------------
function MeeleRange()
	if IsSpellInRange(GetSpellInfo(HeroicStrike), &amp;quot;target&amp;quot;) == 1
	then return true else return false
	end
end

----------------
-- CAST SPELL --
----------------
function CastSpell(spell)
	CastSpellByName(GetSpellInfo(spell),nil)
end

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
and PQR_Rubim_Debug ~= 0 then
	if not castspellsucced then
		castspellsucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
		castspellsucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
		castspellsucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)~= 0 then DebugSpell = 1 LastSpell = GetSpellInfo(select(7,...)) end end)
	end
	
	if DebugSpell ~= 0
	then
		PQR_WriteToChat(&amp;quot;Casted: |cffffcc00&amp;quot; .. LastSpell)
		DebugSpell = 0
	end
end

--------------
-- CD Check --
--------------
function CdCheck(spellid)
	Sstart, Sduration, Senabled = GetSpellCooldown(spellid)
	Scooldown = (Sstart + Sduration - GetTime())
	if Sstart == 0
	then
		Scooldown = 0
	end
	return Scooldown
end


------------------
-- SPELL SUCESS --
------------------
if not spellSucced then
		spellSucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
		spellSucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
		spellSucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)==CheckSpell then SpellSucess=true end end)
end

-------------
-- PRE POT --
-------------
function PrePot()
	if UnitBuffID(&amp;quot;player&amp;quot;,105706)
	then return true else return false end
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

--Player Info
PlayerRage			= select(4, Nova_UnitInfo(&amp;quot;player&amp;quot;))
PlayerHP			= Nova_UnitInfo(&amp;quot;player&amp;quot;)
PlayerCombat		= UnitAffectingCombat(&amp;quot;player&amp;quot;)
	
--PQR Functions
isMoving			= PQR_IsMoving()

--Key Mods
lShift				= Nova_Pause(1)
lCtrl				= Nova_Pause(2)
lAlt				= Nova_Pause(3)
rShift				= Nova_Pause(4)
rCtrl				= Nova_Pause(5)
rAlt				= Nova_Pause(6)

--Target Info
TargetHP				= select(1, Nova_UnitInfo(&amp;quot;target&amp;quot;))
EnemyLevel			= UnitLevel(&amp;quot;target&amp;quot;)
		
-----------------
-- Time to die --
-----------------
TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and PlayerCombat then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

-- dummy
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 99
	end
end

--------------
-- AOE SWAP --
--------------
if Timer == nil then
	Timer = 0
end

local Nova_Mod = Nova_Mod
local AoEHOTKEY = AoEHotkey
if Nova_Mod() == AoEHotkey
and GetTime() - Timer &amp;gt; 0.5
then
	Timer = GetTime()
	if AoERotation == false
	then
		AoERotation = true
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0EArea of Effect|R&amp;quot;)
		ActualRotation = &amp;quot;Area of Effect&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	elseif AoERotation == true
	then
		AoERotation = false
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0ESingle Target|R&amp;quot;)
		ActualRotation = &amp;quot;Single Target&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	end
end

-----------------------
-- Death Knight Only --
-----------------------
RuneCheck = nil
function RuneCheck()
	FrostRune = 0
	UnholyRune = 0
	BloodRune = 0
	DeathRune = 0
	for i=1, 6 do
		if GetRuneType(i) == 1 and select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;lt; 0 then 
		   BloodRune = BloodRune + 1
		end
		if GetRuneType(i) == 2 and select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;lt; 0 then 
		   UnholyRune = UnholyRune + 1
		end
		if GetRuneType(i) == 3 and select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;lt; 0 then 
		   FrostRune = FrostRune + 1
		end
		if GetRuneType(i) == 4 and select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;lt; 0 then 
		   DeathRune = DeathRune + 1
		end
	end
	return BloodRune, UnholyRune, FrostRune, DeathRune
end

RuneHalfCD = nil
function RuneHalfCD()
	local FrostRuneHalf = 0
	local UnholyRuneHalf = 0
	local BloodRuneHalf = 0
	local DeathRuneHalf = 0
	for i=1, 6 do
		if GetRuneType(i) == 1 and select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;lt; ((select(2,GetRuneCooldown(i)) * 15) / 100) then 
		   BloodRuneHalf = BloodRuneHalf + 1
		end
		if GetRuneType(i) == 2 and select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;lt; ((select(2,GetRuneCooldown(i)) * 15) / 100) then 
		   UnholyRuneHalf = UnholyRuneHalf + 1
		end
		if GetRuneType(i) == 3 and select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;lt; ((select(2,GetRuneCooldown(i)) * 15) / 100) then 
		   FrostRuneHalf = FrostRuneHalf + 1
		end
		if GetRuneType(i) == 4 and select(1,GetRuneCooldown(i)) + select(2,GetRuneCooldown(i)) - GetTime() &amp;lt; ((select(2,GetRuneCooldown(i)) * 15) / 100) then 
		   DeathRuneHalf = DeathRuneHalf + 1
		end
	end
	return BloodRuneHalf, UnholyRuneHalf, FrostRuneHalf, DeathRuneHalf
end


-- At this point, everything should have loaded perfectly!
if PQ_WRProt == nil then
	PQ_WRProt = true
	CheckSpell = 0
	LastCheckSpell = 0
	CurrentShout = CommandingShout
	SpellSucess = false
	AoERotation = false
	ActualRotation = &amp;quot;Single Target&amp;quot;
	PQR_SendText(&amp;quot;Standby&amp;quot;)
	initMessage()
	RacialDetection()
	RunMacroText(&amp;quot;/rcast All&amp;quot;)
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Nova_Frame</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp

---------------
-- DEFAULTS --
--------------

PQR_Rubim_Debug = 0


---------------
-------------------------------------------------------------------------------
-- Variables &amp; Sanity checks
-------------------------------------------------------------------------------
-- Load LUA data files.
if PQR_RotationStarted == true then
	PQR_RotationStarted = false
	
	-- Tables
	Nova_ValueCheck = {
		[1] =	{ Var1 = nil,	Text = &amp;quot;Cooldowns&amp;quot;,				Var2 = nil, },
		[2] =	{ Var1 = 35,	Text = &amp;quot;Healthstone&amp;quot;,			Var2 = 1 },
		[3] =	{ Var1 = 60,	Text = &amp;quot;Victory Rush&amp;quot;,			Var2 = 0 },
		[4] =	{ Var1 = 85,	Text = &amp;quot;Victory Rush (Proc)&amp;quot;,	Var2 = 1 },
		[5] =	{ Var1 = nil,	Text = &amp;quot;Usable&amp;quot;,				Var2 = nil },
		[6] =	{ Var1 = nil,	Text = &amp;quot;Trinket 01&amp;quot;,			Var2 = 0 },
		[7] =	{ Var1 = nil,	Text = &amp;quot;Trinket 02&amp;quot;,			Var2 = 0 },
		[8] =	{ Var1 = nil,	Text = &amp;quot;Gloves&amp;quot;,				Var2 = 0 },
		[9] =	{ Var1 = nil,	Text = &amp;quot;Auto Racial Use&amp;quot;,		Var2 = 1 },
		[10] =	{ Var1 = nil,	Text = &amp;quot;CD: Boss Only&amp;quot;,			Var2 = 1 },		
		[11] =	{ Var1 = nil,	Text = &amp;quot;Extra&amp;quot;,					Var2 = nil },
		[12] =	{ Var1 = nil,	Text = &amp;quot;Boss Mechanic&amp;quot;,			Var2 = 0 },
		[13] =	{ Var1 = nil,	Text = &amp;quot;Auto Dispell&amp;quot;,			Var2 = 0 }		
		
	}
	Nova_CooldownCheck = {
		[1]	=	{ Mod = 4,		Text = &amp;quot;Heroic Leap&amp;quot;,			Var1 = 1},
		[2]	=	{ Mod = 8,		Text = &amp;quot;AoE Rotation&amp;quot;,			Var1 = 1},
		[3]	=	{ Mod =	2,		Text = &amp;quot;Pause 1&amp;quot;,				Var1 = 1},
		[4]	=	{ Mod =	1,		Text = &amp;quot;Pause 2&amp;quot;,				Var1 = 1}
	}
	
	-- CVar Registration
	for i=1,#Nova_ValueCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1)
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_ValueCheck[i].Var2)
		end
	end
	for i=1,#Nova_CooldownCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_CooldownCheck[i].Mod)
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_CooldownCheck[i].Var1)
		end
	end

function Update_Nova()
	-- CVar Translations
	-- Cooldowns
	
	HSenabled 		= GetCVarBool(&amp;quot;Nova_Healthstone_Enabled&amp;quot;)
	HShealth 		= tonumber(GetCVar(&amp;quot;Nova_Healthstone&amp;quot;))
	
	DSSenabled 		= GetCVarBool(&amp;quot;Nova_Death_Siphon_Enabled&amp;quot;)
	DSShealth 		= tonumber(GetCVar(&amp;quot;Nova_Death_Siphon&amp;quot;))
	
	VRenabled		= GetCVarBool(&amp;quot;Nova_Victory_Rush_Enabled&amp;quot;)
	VRhealth		= tonumber(GetCVar(&amp;quot;Nova_Victory_Rush&amp;quot;))
	
	VRPenabled		= GetCVarBool(&amp;quot;Nova_Victory_Rush_(Proc)_Enabled&amp;quot;)
	VRPhealth		= tonumber(GetCVar(&amp;quot;Nova_Victory_Rush_(Proc)&amp;quot;))
	
	T01enabled		= GetCVarBool(&amp;quot;Nova_Trinket_01_Enabled&amp;quot;)
	T02enabled		= GetCVarBool(&amp;quot;Nova_Trinket_02_Enabled&amp;quot;)
	GLOenabled		= GetCVarBool(&amp;quot;Nova_Gloves_Enabled&amp;quot;)		
	RAenabled	 	= GetCVarBool(&amp;quot;Nova_Auto_Racial_Use_Enabled&amp;quot;)
	CDenabled		= GetCVarBool(&amp;quot;Nova_CD:_Boss_Only_Enabled&amp;quot;)
	BMenabled		= GetCVarBool(&amp;quot;Nova_Boss_Mechanic_Enabled&amp;quot;)
	ADenabled		= GetCVarBool(&amp;quot;Nova_Auto_Dispell_Enabled&amp;quot;)	
	
	HLenabled		= GetCVarBool(&amp;quot;Nova_Heroic_Leap_Enabled&amp;quot;)
	HLHotkey		= tonumber(GetCVar(&amp;quot;Nova_Heroic_Leap&amp;quot;))
	
	AoEHotkey	 	= tonumber(GetCVar(&amp;quot;Nova_AoE_Rotation&amp;quot;))
	PHotkey 		= tonumber(GetCVar(&amp;quot;Nova_Pause_1&amp;quot;))
	PHotkey2		= tonumber(GetCVar(&amp;quot;Nova_Pause_2&amp;quot;))	
	
end
	
	-- Load LUA files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_Nova_Data.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_Nova_Frame.lua&amp;quot;) == true then
			MiniMapCreation()
			
			-- Slash Commands
			SLASH_NOVAFRAME1 = &amp;quot;/novaframe&amp;quot;
			SLASH_NOVAFRAME2 = &amp;quot;/nova&amp;quot;
			function SlashCmdList.NOVAFRAME(msg, editbox)
				if Setup == nil then
					Setup = true
					FrameCreation(Nova_ValueCheck, Nova_CooldownCheck, &amp;quot;WR PROTECTION&amp;quot;, &amp;quot;HOTKEYS&amp;quot;)
				end
				if not Nova_Frame:IsShown() then Nova_Frame:Show() else Nova_Frame:Hide() end
			end
		end
	end
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Single Target</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == true then return false end

function BossCheck()
	if CDenabled ~= 1
	then return true
	end
	
	if CDenabled == 1
	and SpecialUnit()
		then return true	
	end
	return false
end

--COMBAT
if not PlayerCombat then return false end

--HeroicThrow
if not MeeleRange()
and PQR_SpellAvailable(HeroicThrow)
then
	CastSpell(HeroicThrow)
end

--ShieldSlam
if TargetValidation(&amp;quot;target&amp;quot;,ShieldSlam)
and PlayerRage &amp;lt;= 80
then
	CastSpell(ShieldSlam)
end

--Revenge
if TargetValidation(&amp;quot;target&amp;quot;,Revenge)
then
	CastSpell(Revenge)
end

--Damage Reduction ThunderClap (AoE)
if PQR_SpellAvailable(ThunderClap)
and MeeleRange()
and WBtimer &amp;lt; 1
then
	CastSpell(ThunderClap)
end

--Dot + Sunden Armor
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
and ((WAcount ~= 3
or WAtimer &amp;lt; 1)
or DWtimer &amp;lt; 1)
then
	CastSpell(Devastate)
end

if TargetValidation(&amp;quot;targeT&amp;quot;,HeroicStrike)
and Ultimatum
then
	CastSpell(HeroicStrike)
end

--Rage &amp;gt; 40 - Execute
if TargetValidation(&amp;quot;target&amp;quot;,Execute)
and TargetHP &amp;lt;= 20
and PlayerRage &amp;gt;= 40
and CheckSpell == 0
then
	CastSpell(Execute)
end

--Rage &amp;gt; 40 - Heroic Strike
if TargetValidation(&amp;quot;target&amp;quot;,HeroicStrike)
and TargetHP &amp;gt; 20
and PlayerRage &amp;gt;= 40
and CheckSpell == 0
then
	CastSpell(HeroicStrike)
end

--Filler Devastate
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
then
	CastSpell(Devastate)
end

--Shout Filler
if CurrentShout == CommandingShout
and PQR_SpellAvailable(CurrentShout)
then
	CastSpell(CurrentShout)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Area of Effect</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == false then return false end

function BossCheck()
	if CDenabled ~= 1
	then return true
	end
	
	if CDenabled == 1
	and SpecialUnit()
		then return true	
	end
	return false
end

--COMBAT
if not PlayerCombat then return false end

--HeroicThrow
if not MeeleRange()
and PQR_SpellAvailable(HeroicThrow)
then
	CastSpell(HeroicThrow)
end

--DOT Spread
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
and DWtimer &amp;lt; 1
then
	CastSpell(Devastate)
end

--Damage Reduction ThunderClap (AoE)
if PQR_SpellAvailable(ThunderClap)
and MeeleRange()
then
	CastSpell(ThunderClap)
end

--ShieldSlam
if TargetValidation(&amp;quot;target&amp;quot;,ShieldSlam)
and PlayerRage &amp;lt;= 80
then
	CastSpell(ShieldSlam)
end

--Revenge
if TargetValidation(&amp;quot;target&amp;quot;,Revenge)
then
	CastSpell(Revenge)
end

--Dot + Sunden Armor
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
and ((WAcount ~= 3
or WAtimer &amp;lt; 1)
or DWtimer &amp;lt; 1)
then
	CastSpell(Devastate)
end

--Rage &amp;gt; 40 - Heroic Strike
if TargetValidation(&amp;quot;target&amp;quot;,Cleave)
and PlayerRage &amp;gt;= 20
and CheckSpell == 0
then
	CastSpell(Cleave)
end

--Filler Devastate
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
then
	CastSpell(Devastate)
end

--Shout Filler
if CurrentShout == CommandingShout
and PQR_SpellAvailable(CurrentShout)
then
	CastSpell(CurrentShout)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Trinkets</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (T01enabled ~= 1 and T02enabled ~= 1 and GLOenabled ~= 1) or not MeeleRange() then return false end



local SpecialUnit = SpecialUnit


----------------
-- TRINKET 01 --
----------------
if T01enabled ~= nil
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,13) == 0
and (CDenabled ~= 1
or (CDenabled == 1 and SpecialUnit()))
then
	UseInventoryItem(13)
end

if T02enabled ~= nil
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0
and (CDenabled ~= 1
or (CDenabled == 1 and SpecialUnit()))
then
	UseInventoryItem(14)
end

if GLOenabled ~= nil
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,10) == 0
and (CDenabled ~= 1
or (CDenabled == 1 and SpecialUnit()))
then
	UseInventoryItem(10)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Boss Mechanics</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if BMenabled ~= 1 then return false end

--Implement PQR_resumeAttack.. this is used to prevent
--abilities lower in the rotation from being cast.
if PQR_resumeAttack == nil then
    PQR_resumeAttack = 0
elseif PQR_resumeAttack &amp;gt; GetTime() then
    return true
else
    PQR_resumeAttack = 0
end


--IMPORTANT: Change this if you have any cleaves that would do damage to a secondary target
--as part of your single target rotation. Better to be safe than sorry! 
--Used for : Spirit Kings
local cleaveClass = true
local isAOE = strmatch(strupper(PQR_RotationName), &amp;quot;AOE&amp;quot;) --checks if we are in AOE mode.

for i=1,4 do
    local bossCheck = &amp;quot;boss&amp;quot;..i

    if UnitExists(bossCheck) then
        
        local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16)
        local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(bossCheck)
        
        if npcID == 62511 or npcID == 62711 then --Amber-Shaper Un&amp;apos;sok or Amber Monstrosity
            local reshapeName = GetSpellInfo(122370)
            local reshapeLife = UnitDebuff(&amp;quot;player&amp;quot;, reshapeName)
            
            if reshapeLife ~= nil then
                local playerCasting = UnitCastingInfo(&amp;quot;vehicle&amp;quot;)
                local playerCasting2 = UnitCastingInfo(&amp;quot;player&amp;quot;)
                --grab spell names for abilities:
                local amberExplosion = GetSpellInfo(122402)
                
                --interrupt self if casting amber explosion
                if playerCasting == amberExplosion then
                    --Press the 2nd button (Struggle for Control)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
                    return true
                end
                
                --interrupt self if casting amber explosion
                if playerCasting2 == amberExplosion then
                    --Press the 2nd button (Struggle for Control)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
                    return true
                end
                
                --interrupt the target if casting amber explosion
                if bossCasting and bossCasting == amberExplosion then
                    TargetUnit(bossCheck)
                    --Press the 1st button (Amber Strike)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton1&amp;quot;)
                    return true
                end
                
                if UnitExists(&amp;quot;boss2&amp;quot;) then
                    if bossCheck == &amp;quot;boss2&amp;quot; then 
                        return true --prevent the rotation from executing while reshaped
                    end
                else
                    return true
                end

            end
            
        elseif npcID == 60709 then --Spirit Kings: Qiang. (Impervious Shield)
            --Stop all attacks until 0.2 seconds after cast time ends and until buff (Impervious Shield) is gone.
            
            --only continue checking if we are targetting the boss or have no target.
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local impName = GetSpellInfo(117961)
                local impShieldBuff = UnitBuffID(bossCheck, 117961)
                
                if (bossCasting and bossCasting == impName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.2
                    return true
                end
                
                if impShieldBuff then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end
            
        elseif npcID == 60710 then --Spirit Kings: Subetai. (Sleight of Hand)
            --Stop all attacks when casting Sleight of Hand, and until 0.2 seconds after cast time ends.
            --Also stop attacks if not stunned.
            
            --only continue checking if we are targetting the boss or have no target.
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local sleightName = GetSpellInfo(118162)
                local sleightBuff = UnitBuffID(bossCheck, 118162)
                --                  HoJ,   FoJ,  Kidney  
                local stunList = { 853, 105593, 408 }
                local isStunned = nil
                for _,v in ipairs(stunList) do
                    local debuffCheck = UnitDebuffID(bossCheck, v)
                    if debuffCheck then
                        isStunned = true
                    end
                end
                
                if (bossCasting and bossCasting == sleightName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.2
                    return true
                end
                
                if sleightBuff and not isStunned then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end

        elseif npcID == 60701 then --Spirit Kings: Zian. (Shield of Darkness)
            --Stop all attacks until 0.5 seconds after cast time ends and until buff (Shield of Darkness) is gone.
                        
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local sodName = GetSpellInfo(117697)
                local sodBuff = UnitBuffID(bossCheck, 117697)
                
                if (bossCasting and bossCasting == sodName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.5 --0.5 to account for lag... REALLY do not want to set this off.
                    return true
                end
                
                if sodBuff then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end
        end
    end
end

--click button to leave.
--Gara&amp;apos;jal isn&amp;apos;t a boss while in the Spirit Realm.
local returnSoul = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
if returnSoul and returnSoul - GetTime() &amp;lt; 2 then 
    RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Dispell (Icy Touch)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Thanks to Cpoworks / Kaylo

--if GlyphCheck(43546) == false then return false end
if ADenabled ~= 1 or not UnitExists(&amp;quot;target&amp;quot;) then return false end

--DISPELL
local DispellList = {
117283, -- Corrupted water (Protectors)
122149, -- Quickening (Wind Lord)
117697 -- Shield of Darkness (Spirit Kings)
}

for i=1, #DispellList do
	if UnitBuffID(&amp;quot;target&amp;quot;, DispellList[i]) ~= nil
	then
		DispellName = GetSpellInfo(DispellList[i])
		IcyDispell = 1
	end
end

if IcyDispell ~= 1 then return false end

if IcyDispell ~= nil
and TargetValidation(&amp;quot;target&amp;quot;,IcyTouch)
then
	PQR_DebugP(&amp;quot;Dispelling : &amp;quot; .. DispellName .. &amp;quot; on &amp;quot; .. UnitName(&amp;quot;target&amp;quot;))
	CastSpell(IcyTouch)
	IcyDispell = nil
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Rubim_Cast</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>------------
-- CAST --
------------
SLASH_rcast1 = &amp;quot;/rcast&amp;quot;
function SlashCmdList.rcast(rcast, editbox)
	if rcast == &amp;quot;ShieldBlock&amp;quot; then
		if CheckSpell ~= 2565 then
				CheckSpell = 2565
		else CheckSpell = 0 LastCheckSpell = 2565 end
	elseif rcast == &amp;quot;ShieldBarrier&amp;quot; then
		if CheckSpell ~= 112048 then
			CheckSpell = 112048
		else CheckSpell = 0 LastCheckSpell = 112048 end
	elseif rcast == &amp;quot;Shockwave&amp;quot; then
		if CheckSpell ~= 46968 then
			CheckSpell = 46968
		else CheckSpell = 0 LastCheckSpell = 46968 end
	elseif rcast == &amp;quot;BattleShout&amp;quot; then
		CheckSpell = 6673
		CurrentShout = BattleShout
	elseif rcast == &amp;quot;CommandingShout&amp;quot; then
		CheckSpell = 469
		CurrentShout = CommandingShout
	elseif rcast == &amp;quot;All&amp;quot; then
		CheckSpell = 0
	else argument = &amp;quot; |CFFFF0303(No arguments)|R&amp;quot;
	end
	if CheckSpell ~= 0 then
		print(&amp;quot;|cff00ffffQueue: |r&amp;quot; .. GetSpellInfo(CheckSpell).. &amp;quot;(&amp;quot; .. CheckSpell .. &amp;quot;)&amp;quot;)
		PQR_SendText(&amp;quot;Queue&amp;quot;,CheckSpell)
	else print(&amp;quot;|cff00ffffRemoved: |r&amp;quot; .. GetSpellInfo(LastCheckSpell).. &amp;quot;(&amp;quot; .. LastCheckSpell .. &amp;quot;)&amp;quot;)
		PQR_SendText(&amp;quot;Standby&amp;quot;) end
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hotkey: Heroic Leap</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if HLenabled ~= 1 then return false end

local Nova_Mod = Nova_Mod
local SPELL = HeroicLeap
local HOTKEY = HLHotkey

if PQR_SpellAvailable(SPELL)
and Nova_Mod() == HOTKEY then
	CastSpellByName(GetSpellInfo(SPELL))
	if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end  
	return true 
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Nova_Frame: Victory Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IVenabled ~= 1 then return false end

if TargetValidation(&amp;quot;target&amp;quot;,ImpendingVictory)
and PlayerHP &amp;lt;= VShealth
then
	PQR_DebugP(&amp;quot;Healing with Impending Victory (Current HP: &amp;quot; .. PlayerHP)
	CastSpell(ImpendingVictory)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARRIOR>