<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>[ MISC ] Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp
-- Diesall
if PQI:IsHotkeys(PQI_RubimGeneralWarrior_Pause1_key)
or PQI:IsHotkeys(PQI_RubimGeneralWarrior_Pause2_key)
or IsMounted()
or not PlayerCombat
or UnitInVehicle(&amp;quot;player&amp;quot;)
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
 then
 	return true
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>0 - Auto Cast</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not spellSucced then
	spellSucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
	spellSucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
	spellSucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)==CheckSpell and select(3,...)==&amp;quot;player&amp;quot; then SpellSucess=true end end)
end

if SpellSucess == true then
	print(&amp;quot;|cff00ffffCast: |r&amp;quot; .. CheckSpell)
	PQR_SendText(&amp;quot;Casted&amp;quot;,CheckSpell)
	
	if CheckSpell == CommandingShout
	then
		CurrentShout = CommandingShout
	end
	
	if CheckSpell == BattleShout
	then
		CurrentShout = BattleShout
	end
	
	CheckSpell = 0
	CastText = nil
	SpellSucess = false
end

if CheckSpell ~= 0
and PQR_SpellAvailable(CheckSpell)
then
	CastSpell(CheckSpell)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Auto Buff</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CombatTimer == nil
then
	CombatTimer = GetTime()
end

if not PlayerCombat
and not IsMounted()
then
	CombatTimer = GetTime()
	if CurrentShout == BattleShout
	and PQR_SpellAvailable(CurrentShout)
	and GetRaidBuffTrayAuraInfo(3) == nil
	then
		CastSpell(CurrentShout)
	end
	
	if CurrentShout == CommandingShout
	and PQR_SpellAvailable(CurrentShout)
	and GetRaidBuffTrayAuraInfo(2) == nil
	then
		CastSpell(CurrentShout)
	end	
	
	if Spec == &amp;quot;Protection&amp;quot;
	then
		if not PQI_RubimProtection_DefensiveStance_enable then return false end
		if GetShapeshiftForm() ~= 2
			and GetShapeshiftFormCooldown(2) == 0
			then CastShapeshiftForm(2)
		end
	end
	
	if Spec == &amp;quot;Fury&amp;quot;
	then
		if not PQI_RubimFury_BattleStance_enable then return false end
		if GetShapeshiftForm() ~= 1
			and GetShapeshiftFormCooldown(1) == 0
			then CastShapeshiftForm(1)
		end
	end
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Spell List</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp
-- Diesall

--TALENT
EnragedRegeneration = 55694
ImpendingVictory = 103840

Shockwave = 46968

Avatar = 107574
Bloodbath = 12292
StormBolt = 107570

-- RAGE GENERATION
ShieldSlam = 23922
Revenge = 6572

Bloodthirst = 23881
ColossusSmash = 86346

-- BUFFS
ShieldBarrier = 112048
ShieldBlock = 2565

BerserkerRage = 18499
Recklessness = 1719

-- DEBUFFS
Devastate = 20243
ThunderClap = 6343

-- RAGE SPEND
HeroicStrike = 78
Execute = 5308
Cleave = 845
WildStrike = 100130
RagingBlow = 85288

-- OTHERS
HeroicLeap = 6544
HeroicThrow = 57755
Shockwave = 46968
HeroicThrow = 57755

-- SHOUT
BattleShout = 6673
CommandingShout = 469

-- HEALING
VictoryRush = 34428

-- BANNER
SkullBanner = 114207

-----------------
-- PROCS/BUFFS --
-----------------
Ultimatum = UnitBuffID(&amp;quot;player&amp;quot;,122510)
VR,_,_,_,_,_,VRtimer = UnitAura(&amp;quot;player&amp;quot;,GetSpellInfo(32216))
if not VR
then
	VRtimer = 0
else
	VRtimer = VRtimer - GetTime()
end

-------------
-- DEBUFFS --
-------------
WA,_,_,WAcount,_,_,WAtimer = UnitDebuffID(&amp;quot;target&amp;quot;,113746)
DW,_,_,_,_,_,DWtimer = UnitDebuffID(&amp;quot;target&amp;quot;,115767)
WB,_,_,_,_,_,WBtimer = UnitDebuffID(&amp;quot;target&amp;quot;,115798)

if not WA
then
	WAtimer = 0
else
	WAtimer = WAtimer - GetTime()
end

if not DW
then
	DWtimer = 0
else
	DWtimer = DWtimer - GetTime()
end

if not WB
then
	WBtimer = 0
else
	WBtimer = WBtimer - GetTime()
end

-----------------
-- PROCS/BUFFS --
-----------------
BloodbathBuff = UnitBuffID(&amp;quot;player&amp;quot;,12292)
BloodSurgeBuff = UnitBuffID(&amp;quot;player&amp;quot;,46916)
EnrageBuff = UnitBuffID(&amp;quot;player&amp;quot;,12880)

RecklessnessBuff,_,_,_,_,_,RecklessnessBuffTimer = UnitBuffID(&amp;quot;player&amp;quot;,1719)
if not RecklessnessBuff
then
	RecklessnessBuffTimer = 0
else
	RecklessnessBuffTimer = RecklessnessBuffTimer - GetTime()
end

RagingBlowBuff,_,_,RagingBlowBuffCount,_,_,RagingBlowBuffTimer = UnitBuffID(&amp;quot;player&amp;quot;,131116)
if not RagingBlowBuff
then
	RagingBlowBuffTimer = 0
	RagingBlowBuffCount = 0
else
	RagingBlowBuffTimer = RagingBlowBuffTimer - GetTime()
end

-------------
-- DEBUFFS --
-------------
ColossusSmashDebuff_,_,_,_,_,ColossusSmashDebuffTimer = UnitDebuffID(&amp;quot;target&amp;quot;,86346,&amp;quot;player&amp;quot;)
if not ColossusSmashDebuff
then
	ColossusSmashDebuffTimer = 0
else
	ColossusSmashDebuffTimer = ColossusSmashDebuffTimer - GetTime()
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>General_Frame: Trinkets/Gloves</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (PQI_RubimGeneralDeathKnight_Trinket01_enable ~= true
and PQI_RubimGeneralDeathKnight_Trinket02_enable ~= true
and PQI_RubimGeneralDeathKnight_Gloves_enable ~= true)
or not MeeleRange() then return false end

----------------
-- TRINKET 01 --
----------------
if PQI_RubimGeneralDeathKnight_Trinket01_enable == true
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,13) == 0
and BossCheck()
then
	UseInventoryItem(13)
end

----------------
-- TRINKET 02 --
----------------

if PQI_RubimGeneralDeathKnight_Trinket02_enable == true
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0
and BossCheck()
then
	UseInventoryItem(14)
end

------------
-- GLOVES --
------------
if PQI_RubimGeneralDeathKnight_Gloves_enable == true
and GetInventoryItemCooldown(&amp;quot;player&amp;quot;,10) == 0
and BossCheck()
then
	UseInventoryItem(10)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blood_Frame: Death Siphon</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_RubimUnholy_DeathSiphon_enable ~= true then return false end
local HealthFrame = tonumber(PQI_RubimBlood_DeathSiphon_value)

if TargetValidation(&amp;quot;target&amp;quot;,DeathSiphon)
and PlayerHP &amp;lt;= HealthFrame
then
	PQR_DebugP(&amp;quot;Healing with Death Siphon (Current HP: &amp;quot; .. PlayerHP)
	CastSpell(DeathSiphon)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blood_Frame: Death Pact</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_RubimBlood_DeathPactCombo_enable ~= true then return false end
local HealthFrame = tonumber(PQI_RubimBlood_DeathPactCombo_value)

if PQR_SpellAvailable(DeathPact)
and PQR_SpellAvailable(RaiseDead)
and PlayerHP &amp;lt;= HealthFrame then
	PQR_DebugP(&amp;quot;Casting Raise Dead (Current HP: &amp;quot; .. PlayerHP)
	CastSpell(RaiseDead)
	return true
end

if CdCheck(RaiseDead) &amp;gt;= 60
and PQR_SpellAvailable(DeathPact)
and PlayerHP &amp;lt;= HealthFrame then
	PQR_DebugP(&amp;quot;Casting Death Pact (Current HP: &amp;quot; .. PlayerHP)
	CastSpell(DeathPact)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>General_Frame: Boss Mechanics</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_RubimGeneralDeathKnight_BossMechanics_enable ~= true then return false end

--Implement PQR_resumeAttack.. this is used to prevent
--abilities lower in the rotation from being cast.
if PQR_resumeAttack == nil then
    PQR_resumeAttack = 0
elseif PQR_resumeAttack &amp;gt; GetTime() then
    return true
else
    PQR_resumeAttack = 0
end


--IMPORTANT: Change this if you have any cleaves that would do damage to a secondary target
--as part of your single target rotation. Better to be safe than sorry! 
--Used for : Spirit Kings
local cleaveClass = true
local isAOE = strmatch(strupper(PQR_RotationName), &amp;quot;AOE&amp;quot;) --checks if we are in AOE mode.

for i=1,4 do
    local bossCheck = &amp;quot;boss&amp;quot;..i

    if UnitExists(bossCheck) then
        
        local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16)
        local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(bossCheck)
        
        if npcID == 62511 or npcID == 62711 then --Amber-Shaper Un&amp;apos;sok or Amber Monstrosity
            local reshapeName = GetSpellInfo(122370)
            local reshapeLife = UnitDebuff(&amp;quot;player&amp;quot;, reshapeName)
            
            if reshapeLife ~= nil then
                local playerCasting = UnitCastingInfo(&amp;quot;vehicle&amp;quot;)
                local playerCasting2 = UnitCastingInfo(&amp;quot;player&amp;quot;)
                --grab spell names for abilities:
                local amberExplosion = GetSpellInfo(122402)
                
                --interrupt self if casting amber explosion
                if playerCasting == amberExplosion then
                    --Press the 2nd button (Struggle for Control)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
                    return true
                end
                
                --interrupt self if casting amber explosion
                if playerCasting2 == amberExplosion then
                    --Press the 2nd button (Struggle for Control)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
                    return true
                end
                
                --interrupt the target if casting amber explosion
                if bossCasting and bossCasting == amberExplosion then
                    TargetUnit(bossCheck)
                    --Press the 1st button (Amber Strike)
                    RunMacroText(&amp;quot;/click OverrideActionBarButton1&amp;quot;)
                    return true
                end
                
                if UnitExists(&amp;quot;boss2&amp;quot;) then
                    if bossCheck == &amp;quot;boss2&amp;quot; then 
                        return true --prevent the rotation from executing while reshaped
                    end
                else
                    return true
                end

            end
            
        elseif npcID == 60709 then --Spirit Kings: Qiang. (Impervious Shield)
            --Stop all attacks until 0.2 seconds after cast time ends and until buff (Impervious Shield) is gone.
            
            --only continue checking if we are targetting the boss or have no target.
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local impName = GetSpellInfo(117961)
                local impShieldBuff = UnitBuffID(bossCheck, 117961)
                
                if (bossCasting and bossCasting == impName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.2
                    return true
                end
                
                if impShieldBuff then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end
            
        elseif npcID == 60710 then --Spirit Kings: Subetai. (Sleight of Hand)
            --Stop all attacks when casting Sleight of Hand, and until 0.2 seconds after cast time ends.
            --Also stop attacks if not stunned.
            
            --only continue checking if we are targetting the boss or have no target.
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local sleightName = GetSpellInfo(118162)
                local sleightBuff = UnitBuffID(bossCheck, 118162)
                --                  HoJ,   FoJ,  Kidney  
                local stunList = { 853, 105593, 408 }
                local isStunned = nil
                for _,v in ipairs(stunList) do
                    local debuffCheck = UnitDebuffID(bossCheck, v)
                    if debuffCheck then
                        isStunned = true
                    end
                end
                
                if (bossCasting and bossCasting == sleightName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.2
                    return true
                end
                
                if sleightBuff and not isStunned then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end

        elseif npcID == 60701 then --Spirit Kings: Zian. (Shield of Darkness)
            --Stop all attacks until 0.5 seconds after cast time ends and until buff (Shield of Darkness) is gone.
                        
            if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
                local sodName = GetSpellInfo(117697)
                local sodBuff = UnitBuffID(bossCheck, 117697)
                
                if (bossCasting and bossCasting == sodName) then
                    StopAttack()
                    SpellStopCasting()
                    local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
                    PQR_resumeAttack = GetTime() + delayAdd + 0.5 --0.5 to account for lag... REALLY do not want to set this off.
                    return true
                end
                
                if sodBuff then
                    StopAttack()
                    SpellStopCasting()
                    return true
                end
            end
        end
    end
end

--click button to leave.
--Gara&amp;apos;jal isn&amp;apos;t a boss while in the Spirit Realm.
local returnSoul = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
if returnSoul and returnSoul - GetTime() &amp;lt; 2 then 
    RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Genera_Frame: Auto Dispell</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Thanks to Cpoworks / Kaylo

--if GlyphCheck(43546) == false then return false end
if PQI_RubimGeneralDeathKnight_AutoDispell_enable ~= true or not UnitExists(&amp;quot;target&amp;quot;) then return false end

--DISPELL
local DispellList = {
117283, -- Corrupted water (Protectors)
122149, -- Quickening (Wind Lord)
117697 -- Shield of Darkness (Spirit Kings)
}

for i=1, #DispellList do
	if UnitBuffID(&amp;quot;target&amp;quot;, DispellList[i]) ~= nil
	then
		DispellName = GetSpellInfo(DispellList[i])
		IcyDispell = 1
	end
end

if IcyDispell ~= 1 then return false end

if IcyDispell ~= nil
and TargetValidation(&amp;quot;target&amp;quot;,IcyTouch)
then
	PQR_DebugP(&amp;quot;Dispelling : &amp;quot; .. DispellName .. &amp;quot; on &amp;quot; .. UnitName(&amp;quot;target&amp;quot;))
	CastSpell(IcyTouch)
	IcyDispell = nil
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>General_Frame: Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_RubimGeneralDeathKnight_Healthstone_enable ~= true then return false end
local HealthFrame = tonumber(PQI_RubimGeneralDeathKnight_Healthstone_value)

if GetItemCount(5512,false,true) &amp;gt; 0
	and PlayerHP &amp;lt;= HealthFrame
	and PQR_SpellAvailable(5512)
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and GetItemCooldown(5512) == 0
then
	PQR_DebugP(&amp;quot;Healing with Healthstone (Current HP: &amp;quot; .. PlayerHP)
	UseItemByName(5512)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blood_Frame: Rune Tap</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_RubimBlood_RuneTap_enable ~= true then return false end

if PQR_SpellAvailable(RuneTap)
and VampiricBloodBuff then
	PQR_DebugP(&amp;quot;Healing with Rune Tap (Current HP: &amp;quot; .. PlayerHP)
	CastSpell(RuneTap)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Functions (General)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp
-- Diesall


-----------------
-- DUMB CHECKS --
-----------------
if  (select(2, UnitClass(&amp;quot;player&amp;quot;)) ~= &amp;quot;DEATHKNIGHT&amp;quot;)
then
	print(&amp;quot;Error: Wrong Class - Expecting Death Knight&amp;quot;)
	PQR_StopRotation()
elseif UnitLevel(&amp;quot;player&amp;quot;) ~= 90
then
	print(&amp;quot;Error: Wrong Level - Expecting LvL 90&amp;quot;)
	PQR_StopRotation()
elseif GetSpecialization() == nil
then
	print(&amp;quot;Error: Wrong Spec - None selected!&amp;quot;)
	PQR_StopRotation()
end

----------------
-- SPEC CHECK --
----------------
if GetSpecialization() == 1 then
	Spec = &amp;quot;Blood&amp;quot;
	PQR_SwapRotation(&amp;quot;Blood (Rubim)&amp;quot;) 
elseif GetSpecialization() == 2 then
	Spec = &amp;quot;Frost&amp;quot;
	if PQI_RubimFrost_FrostDW_enable == false then
		PQR_SwapRotation(&amp;quot;Frost 2H (Rubim)&amp;quot;)
	elseif PQI_RubimFrost_FrostDW_enable == true then
		PQR_SwapRotation(&amp;quot;Frost DW (Rubim)&amp;quot;)
	end
elseif GetSpecialization() == 3 then
	Spec = &amp;quot;Unholy&amp;quot;
	PQR_SwapRotation(&amp;quot;Unholy (Rubim)&amp;quot;)
end

---------------
-- PQI_TEXT --
--------------
function PQR_SendText(CHOICE,SPELL)
	if CHOICE == &amp;quot;Standby&amp;quot;
	then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Standby: &amp;quot; .. RotationMode, nil, &amp;quot;ffffff&amp;quot;)
	end
	
	if CHOICE ~= &amp;quot;Standby&amp;quot;
	and SPELL ~= 0
	then
		local nskill = GetSpellInfo(SPELL)		
		
		if CHOICE == &amp;quot;Queue&amp;quot;
		then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Queue Skill: &amp;quot; .. nskill, nil, &amp;quot;14DCB4&amp;quot;)
		end
		
		if CHOICE == &amp;quot;Casted&amp;quot;
		then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Casted: &amp;quot; .. nskill, nil, &amp;quot;ffffff&amp;quot;)
		end
	end
end

---------------------------------
-- NOVA_DATA.LUA / by TeamNova --
---------------------------------
-- Target Validation Function.
TargetValidation = nil
function TargetValidation(unit, spell)
	if UnitExists(unit)
	 and IsPlayerSpell(spell)
	 and UnitCanAttack(&amp;quot;player&amp;quot;, unit) == 1 
	 and not UnitIsDeadOrGhost(unit) 
	 and not PQR_IsOutOfSight(unit, 1) then
	 	if IsSpellKnown(spell) then  -- Redundent Check to see if Morphed Spell or not
	 		if PQR_SpellAvailable(spell) then
		 		if IsSpellInRange(GetSpellInfo(spell), unit) == 1 then
		 			return true
		 		else
		 			return false
		 		end
		 	else
		 		return false
		 	end
	 	else -- If spell is a morphed spell, return true without Range Check
	 		if select(2, GetSpellCooldown(spell)) == 0 then
	 			return true
	 		end
	 	end
	end
end


--RESOURCES
Nova_UnitInfo = nil
function Nova_UnitInfo(t)
	-- Takes an input of UnitID (player, target, pet, mouseover, etc) and gives you their most useful info
		local TManaActual = UnitPower(t)
		local TMaxMana = UnitPowerMax(t)
		if TMaxMana == 0 then TMaxMana = 1 end			
		local TMana = 100 * UnitPower(t) / TMaxMana
		local THealthActual = UnitHealth(t)
		local THealth = 100 * UnitHealth(t) / UnitHealthMax(t) 
		local myClassPower = 0 
		local PQ_Class = select(2, UnitClass(t)) 
		local PQ_UnitLevel = UnitLevel(t)
		local PQ_CombatCheck = UnitAffectingCombat(t) 
		if PQ_Class == &amp;quot;PALADIN&amp;quot; then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 9)
			if UnitBuffID(&amp;quot;player&amp;quot;, 90174) then
				myClassPower = myClassPower + 3
			end
		elseif PQ_Class == &amp;quot;PRIEST&amp;quot; then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 13)
		elseif PQ_Class == &amp;quot;WARLOCK&amp;quot; then
			if PQR_Spec == 3 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 14) -- Destruction: Burning Embers
			elseif PQR_Spec == 2 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 15) -- Demonology: Demonic Fury
			elseif PQR_Spec == 1 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 7) -- Affliction: Soul Shards
			end
		elseif PQ_Class == &amp;quot;DRUID&amp;quot; and PQ_Class == 2 then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 8)
		elseif PQ_Class == &amp;quot;MONK&amp;quot;  then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 12)
		elseif PQ_Class == &amp;quot;ROGUE&amp;quot; and t ~= &amp;quot;player&amp;quot; then
			myClassPower = GetComboPoints(&amp;quot;player&amp;quot;, t)
		end
		--       1            2          3         4           5             6          7               8
		return THealth, THealthActual, TMana, TManaActual, myClassPower, PQ_Class, PQ_UnitLevel, PQ_CombatCheck
end

--BOSSCHECK
PQ_BossUnits = {
	-- Cataclysm Dungeons --
	-- Abyssal Maw: Throne of the Tides
	40586,		-- Lady Naz&amp;apos;jar
	40765,		-- Commander Ulthok
	40825,		-- Erunak Stonespeaker
	40788,		-- Mindbender Ghur&amp;apos;sha
	42172,		-- Ozumat
	-- Blackrock Caverns
	39665,		-- Rom&amp;apos;ogg Bonecrusher
	39679,		-- Corla, Herald of Twilight
	39698,		-- Karsh Steelbender
	39700,		-- Beauty
	39705,		-- Ascendant Lord Obsidius
	-- The Stonecore
	43438,		-- Corborus
	43214,		-- Slabhide
	42188,		-- Ozruk
	42333,		-- High Priestess Azil
	-- The Vortex Pinnacle
	43878,		-- Grand Vizier Ertan
	43873,		-- Altairus
	43875,		-- Asaad
	-- Grim Batol
	39625,		-- General Umbriss
	40177,		-- Forgemaster Throngus
	40319,		-- Drahga Shadowburner
	40484,		-- Erudax
	-- Halls of Origination
	39425,		-- Temple Guardian Anhuur
	39428,		-- Earthrager Ptah
	39788,		-- Anraphet
	39587,		-- Isiset
	39731,		-- Ammunae
	39732,		-- Setesh
	39378,		-- Rajh
	-- Lost City of the Tol&amp;apos;vir
	44577,		-- General Husam
	43612,		-- High Prophet Barim
	43614,		-- Lockmaw
	49045,		-- Augh
	44819,		-- Siamat
	-- Zul&amp;apos;Aman
	23574,		-- Akil&amp;apos;zon
	23576,		-- Nalorakk
	23578,		-- Jan&amp;apos;alai
	23577,		-- Halazzi
	24239,		-- Hex Lord Malacrass
	23863,		-- Daakara
	-- Zul&amp;apos;Gurub
	52155,		-- High Priest Venoxis
	52151,		-- Bloodlord Mandokir
	52271,		-- Edge of Madness
	52059,		-- High Priestess Kilnara
	52053,		-- Zanzil
	52148,		-- Jin&amp;apos;do the Godbreaker
	-- End Time
	54431,		-- Echo of Baine
	54445,		-- Echo of Jaina
	54123,		-- Echo of Sylvanas
	54544,		-- Echo of Tyrande
	54432,		-- Murozond
	-- Hour of Twilight
	54590,		-- Arcurion
	54968,		-- Asira Dawnslayer
	54938,		-- Archbishop Benedictus
	-- Well of Eternity
	55085,		-- Peroth&amp;apos;arn
	54853,		-- Queen Azshara
	54969,		-- Mannoroth
	55419,		-- Captain Varo&amp;apos;then
	
	-- Mists of Pandaria Dungeons --
	-- Scarlet Halls
	59303,		-- Houndmaster Braun
	58632,		-- Armsmaster Harlan
	59150,		-- Flameweaver Koegler
	-- Scarlet Monastery
	59789,		-- Thalnos the Soulrender
	59223,		-- Brother Korloff
	3977,		-- High Inquisitor Whitemane
	60040,		-- Commander Durand
	-- Scholomance
	58633,		-- Instructor Chillheart
	59184,		-- Jandice Barov
	59153,		-- Rattlegore
	58722,		-- Lilian Voss
	58791,		-- Lilian&amp;apos;s Soul
	59080,		-- Darkmaster Gandling
	-- Stormstout Brewery
	56637,		-- Ook-Ook
	56717,		-- Hoptallus
	59479,		-- Yan-Zhu the Uncasked
	-- Tempe of the Jade Serpent
	56448,		-- Wise Mari
	56843,		-- Lorewalker Stonestep
	59051,		-- Strife
	59726,		-- Peril
	58826,		-- Zao Sunseeker
	56732,		-- Liu Flameheart
	56762,		-- Yu&amp;apos;lon
	56439,		-- Sha of Doubt
	-- Mogu&amp;apos;shan Palace
	61444,		-- Ming the Cunning
	61442,		-- Kuai the Brute
	61445,		-- Haiyan the Unstoppable
	61243,		-- Gekkan
	61398,		-- Xin the Weaponmaster
	-- Shado-Pan Monastery
	56747,		-- Gu Cloudstrike
	56541,		-- Master Snowdrift
	56719,		-- Sha of Violence
	56884,		-- Taran Zhu
	-- Gate of the Setting Sun
	56906,		-- Saboteur Kip&amp;apos;tilak
	56589,		-- Striker Ga&amp;apos;dok
	56636,		-- Commander Ri&amp;apos;mok
	56877,		-- Raigonn
	-- Siege of Niuzao Temple
	61567,		-- Vizier Jin&amp;apos;bak
	61634,		-- Commander Vo&amp;apos;jak
	61485,		-- General Pa&amp;apos;valak
	62205,		-- Wing Leader Ner&amp;apos;onok

	-- Training Dummies --
	46647,		-- Level 85 Training Dummy
	67127,		-- Level 90 Training Dummy
	
	-- Pandaria Raid Adds --
	63346,		-- Tsulong: The Dark of Night
	62969,		-- Tsulong: Embodied Terror
	62977,		-- Tsulong: Frightspawn
	62919,		-- Tsulong: Unstable Sha
	61034,		-- Sha of Fear: Terror Spawn
	61003		-- Sha of Fear: Dread Spawn
}

SpecialUnit = nil
function SpecialUnit()
	local PQ_BossUnits = PQ_BossUnits
	
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		
		-- Dungeons &amp; Raids
		if UnitLevel(&amp;quot;target&amp;quot;) == -1 then return true else
			for i=1,#PQ_BossUnits do
				if PQ_BossUnits[i] == npcID then return true end
			end
			return false
		end
	else return false end
end

---------------
-- VAR SETUP --
---------------
if PQ_DKUHRubim == nil then
	PQ_DKUHRubim = true
	CheckSpell = 0
	SpellSucess = false
	
	-- AOE CHECKS	
	AoERotation = false
	RotationMode = &amp;quot;Single Target&amp;quot;
	
	-- SENDTEXT
	PQR_SendText(&amp;quot;Standby&amp;quot;)
end

------------------
-- INIT MESSAGE --
------------------
function initMessage()
	PQR_WriteToChat(&amp;quot;|cff91e782Rubim&amp;apos;s Blood |cff82cee7Loaded!|cffffffff&amp;quot;)
	if PQI_RubimGeneralDeathKnight_BloodSET_enable == true
	then
		UseEquipmentSet(PQI_RubimGeneralDeathKnight_BloodSET_value)
	end
end

-------------------
-- DEBUG OPTIONS --
-------------------
PQR_Rubim_Debug = 0

-------------
-- RACIAL --
------------
function RacialDetection()
	Racial = 0
	local _,Race = UnitRace(&amp;quot;player&amp;quot;)
	if Race == &amp;quot;Orc&amp;quot;
	then
		local Orc_Racial = {
		20572,
		33697,
		33702,
		82836
		}
	
		for i=1, #Orc_Racial do
			if IsSpellKnown(Orc_Racial[i]) then
				Racial = Orc_Racial[i]
			end
		end
	end
end

if Race == &amp;quot;Troll&amp;quot;
then
	Racial = 26297
end

------------------
-- Meele Range --
-----------------
function MeeleRange()
	if IsSpellInRange(GetSpellInfo(45462), &amp;quot;target&amp;quot;) == 1
	then return true else return false
	end
end

----------------
-- CAST SPELL --
----------------
function CastSpell(spell)
	CastSpellByName(GetSpellInfo(spell),nil)
end

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
and PQR_Rubim_Debug ~= 0 then
	if not castspellsucced then
		castspellsucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
		castspellsucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
		castspellsucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)~= 0 and select(3,...)==&amp;quot;player&amp;quot; then DebugSpell = 1 LastSpell = GetSpellInfo(select(7,...)) end end)
	end
	
	if DebugSpell ~= 0
	then
		PQR_WriteToChat(&amp;quot;Casted: |cffffcc00&amp;quot; .. LastSpell)
		DebugSpell = 0
	end
end

--------------
-- CD Check --
--------------
function CdCheck(spellid)
	Sstart, Sduration, Senabled = GetSpellCooldown(spellid)
	Scooldown = (Sstart + Sduration - GetTime())
	if Sstart == 0
	then
		Scooldown = 0
	end
	return Scooldown
end

------------------
-- SPELL SUCESS --
------------------
if not spellSucced then
		spellSucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
		spellSucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
		spellSucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)==CheckSpell then SpellSucess=true end end)
end

-------------
-- PRE POT --
-------------
function PrePot()
	if UnitBuffID(&amp;quot;player&amp;quot;,105706)
	then return true else return false end
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

--Player Info
PlayerRP	= select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;))
PlayerHP			= Nova_UnitInfo(&amp;quot;player&amp;quot;)
PlayerCombat		= UnitAffectingCombat(&amp;quot;player&amp;quot;)
	
--PQR Functions
isMoving			= PQR_IsMoving()

--Target Info
TargetHP				= select(1, Nova_UnitInfo(&amp;quot;target&amp;quot;))
EnemyLevel			= UnitLevel(&amp;quot;target&amp;quot;)
		
-----------------
-- Time to die --
-----------------
TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and PlayerCombat then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

-- dummy
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 99
	end
end

--------------
-- AOE SWAP --
--------------
if Timer == nil then
	Timer = 0
end

if PQI:IsHotkeys(PQI_RubimGeneralDeathKnight_AreaofEffect_key)
and GetTime() - Timer &amp;gt; 0.5
then
	Timer = GetTime()
	if AoERotation == false
	then
		AoERotation = true
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0EArea of Effect|R&amp;quot;)
		RotationMode = &amp;quot;Area of Effect&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	elseif AoERotation == true
	then
		AoERotation = false
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0ESingle Target|R&amp;quot;)
		RotationMode = &amp;quot;Single Target&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	end
end

------------------
-- CONSOLE CAST --
------------------
SLASH_rcast1 = &amp;quot;/rcast&amp;quot;
function SlashCmdList.rcast(rcast, editbox)
	if rcast ~= &amp;quot;All&amp;quot; then
		rcast = tonumber(rcast)
		
		if CheckSpell == 0
		or rcast ~= LastCheckSpell
		then
			CheckSpell = rcast
			LastCheckSpell = rcast
		else
			CheckSpell = 0 end
	
	elseif rcast == &amp;quot;All&amp;quot; then
		CheckSpell = 0
		LastCheckSpell = 0
	else argument = &amp;quot; |CFFFF0303(No arguments)|R&amp;quot;
	end
	if CheckSpell ~= 0 then
		print(&amp;quot;|cff00ffffQueue: |r&amp;quot; .. GetSpellInfo(CheckSpell).. &amp;quot;(&amp;quot; .. CheckSpell .. &amp;quot;)&amp;quot;)
		PQR_SendText(&amp;quot;Queue&amp;quot;,CheckSpell)
	elseif LastCheckSpell ~= 0 then
		 print(&amp;quot;|cff00ffffRemoved: |r&amp;quot; .. GetSpellInfo(LastCheckSpell).. &amp;quot;(&amp;quot; .. LastCheckSpell .. &amp;quot;)&amp;quot;)
		PQR_SendText(&amp;quot;Standby&amp;quot;) end
end

if PQR_RotationStarted == true
then
	initMessage()
	RacialDetection()
	RunMacroText(&amp;quot;/rcast All&amp;quot;)
	PQR_RotationStarted = false
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Warrior Stats</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-------------
-- BOSS CD --
-------------
function BossCheck()
	if PQI_RubimGeneralWarrior_CDBossOnly_enable == false
	and PQI_RubimGeneralWarrior_CDDisable_enable == false
	then return true
	end
	
	if PQI_RubimGeneralWarrior_CDBossOnly_enable == true
	and PQI_RubimGeneralWarrior_CDDisable_enable == false
	and SpecialUnit()
		then return true	
	end
	return false
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

--Player Info
PlayerRage			= select(4, Nova_UnitInfo(&amp;quot;player&amp;quot;))
PlayerHP			= Nova_UnitInfo(&amp;quot;player&amp;quot;)
PlayerCombat		= UnitAffectingCombat(&amp;quot;player&amp;quot;)
	
--PQR Functions
isMoving			= PQR_IsMoving()

--Target Info
TargetHP				= select(1, Nova_UnitInfo(&amp;quot;target&amp;quot;))
EnemyLevel			= UnitLevel(&amp;quot;target&amp;quot;)

function ResourceSave(Spell)
	if CheckSpell == 0
	then
		return true
	end

	if CheckSpell == ShieldBarrier
	or CheckSpell == ShieldBlock
	then
		if Spell == HeroicStrike
		then
			return false
		else
			return true
		end
	end
	
	if CheckSpell ~= 0
	then
		return true
	end
	
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Functions (Protection)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp
-- Diesall


-----------------
-- DUMB CHECKS --
-----------------
if  (select(2, UnitClass(&amp;quot;player&amp;quot;)) ~= &amp;quot;WARRIOR&amp;quot;)
then
	print(&amp;quot;Error: Wrong Class - Expecting Warrior&amp;quot;)
	PQR_StopRotation()
elseif UnitLevel(&amp;quot;player&amp;quot;) ~= 90
then
	print(&amp;quot;Error: Wrong Level - Expecting LvL 90&amp;quot;)
	PQR_StopRotation()
elseif GetSpecialization() == nil
then
	print(&amp;quot;Error: Wrong Spec - None selected!&amp;quot;)
	PQR_StopRotation()
end

----------------
-- SPEC CHECK --
----------------
if GetSpecialization() == 1 then
	Spec = &amp;quot;Arms&amp;quot;
--	PQR_SwapRotation(&amp;quot;Blood (Rubim)&amp;quot;) 
elseif GetSpecialization() == 2 then
	Spec = &amp;quot;Fury&amp;quot;
--	PQR_SwapRotation(&amp;quot;Blood (Rubim)&amp;quot;) 
elseif GetSpecialization() == 3 then
	Spec = &amp;quot;Protection&amp;quot;
--	PQR_SwapRotation(&amp;quot;Unholy (Rubim)&amp;quot;)
end

---------------
-- PQI_TEXT --
--------------
function PQR_SendText(CHOICE,SPELL)
	if CHOICE == &amp;quot;Standby&amp;quot;
	then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Standby: &amp;quot; .. RotationMode, nil, &amp;quot;ffffff&amp;quot;)
	end
	
	if CHOICE ~= &amp;quot;Standby&amp;quot;
	and SPELL ~= 0
	then
		local nskill = GetSpellInfo(SPELL)		
		
		if CHOICE == &amp;quot;Queue&amp;quot;
		then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Queue Skill: &amp;quot; .. nskill, nil, &amp;quot;14DCB4&amp;quot;)
		end
		
		if CHOICE == &amp;quot;Casted&amp;quot;
		then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Casted: &amp;quot; .. nskill, nil, &amp;quot;ffffff&amp;quot;)
		end
	end
end

---------------------------------
-- NOVA_DATA.LUA / by TeamNova --
---------------------------------
-- Target Validation Function.
TargetValidation = nil
function TargetValidation(unit, spell)
	if UnitExists(unit)
	 and IsPlayerSpell(spell)
	 and UnitCanAttack(&amp;quot;player&amp;quot;, unit) == 1 
	 and not UnitIsDeadOrGhost(unit) 
	 and not PQR_IsOutOfSight(unit, 1) then
	 	if IsSpellKnown(spell) then  -- Redundent Check to see if Morphed Spell or not
	 		if PQR_SpellAvailable(spell) then
		 		if IsSpellInRange(GetSpellInfo(spell), unit) == 1 then
		 			return true
		 		else
		 			return false
		 		end
		 	else
		 		return false
		 	end
	 	else -- If spell is a morphed spell, return true without Range Check
	 		if select(2, GetSpellCooldown(spell)) == 0 then
	 			return true
	 		end
	 	end
	end
end


--RESOURCES
Nova_UnitInfo = nil
function Nova_UnitInfo(t)
	-- Takes an input of UnitID (player, target, pet, mouseover, etc) and gives you their most useful info
		local TManaActual = UnitPower(t)
		local TMaxMana = UnitPowerMax(t)
		if TMaxMana == 0 then TMaxMana = 1 end			
		local TMana = 100 * UnitPower(t) / TMaxMana
		local THealthActual = UnitHealth(t)
		local THealth = 100 * UnitHealth(t) / UnitHealthMax(t) 
		local myClassPower = 0 
		local PQ_Class = select(2, UnitClass(t)) 
		local PQ_UnitLevel = UnitLevel(t)
		local PQ_CombatCheck = UnitAffectingCombat(t) 
		if PQ_Class == &amp;quot;PALADIN&amp;quot; then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 9)
			if UnitBuffID(&amp;quot;player&amp;quot;, 90174) then
				myClassPower = myClassPower + 3
			end
		elseif PQ_Class == &amp;quot;PRIEST&amp;quot; then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 13)
		elseif PQ_Class == &amp;quot;WARLOCK&amp;quot; then
			if PQR_Spec == 3 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 14) -- Destruction: Burning Embers
			elseif PQR_Spec == 2 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 15) -- Demonology: Demonic Fury
			elseif PQR_Spec == 1 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 7) -- Affliction: Soul Shards
			end
		elseif PQ_Class == &amp;quot;DRUID&amp;quot; and PQ_Class == 2 then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 8)
		elseif PQ_Class == &amp;quot;MONK&amp;quot;  then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 12)
		elseif PQ_Class == &amp;quot;ROGUE&amp;quot; and t ~= &amp;quot;player&amp;quot; then
			myClassPower = GetComboPoints(&amp;quot;player&amp;quot;, t)
		end
		--       1            2          3         4           5             6          7               8
		return THealth, THealthActual, TMana, TManaActual, myClassPower, PQ_Class, PQ_UnitLevel, PQ_CombatCheck
end

--BOSSCHECK
PQ_BossUnits = {
	-- Cataclysm Dungeons --
	-- Abyssal Maw: Throne of the Tides
	40586,		-- Lady Naz&amp;apos;jar
	40765,		-- Commander Ulthok
	40825,		-- Erunak Stonespeaker
	40788,		-- Mindbender Ghur&amp;apos;sha
	42172,		-- Ozumat
	-- Blackrock Caverns
	39665,		-- Rom&amp;apos;ogg Bonecrusher
	39679,		-- Corla, Herald of Twilight
	39698,		-- Karsh Steelbender
	39700,		-- Beauty
	39705,		-- Ascendant Lord Obsidius
	-- The Stonecore
	43438,		-- Corborus
	43214,		-- Slabhide
	42188,		-- Ozruk
	42333,		-- High Priestess Azil
	-- The Vortex Pinnacle
	43878,		-- Grand Vizier Ertan
	43873,		-- Altairus
	43875,		-- Asaad
	-- Grim Batol
	39625,		-- General Umbriss
	40177,		-- Forgemaster Throngus
	40319,		-- Drahga Shadowburner
	40484,		-- Erudax
	-- Halls of Origination
	39425,		-- Temple Guardian Anhuur
	39428,		-- Earthrager Ptah
	39788,		-- Anraphet
	39587,		-- Isiset
	39731,		-- Ammunae
	39732,		-- Setesh
	39378,		-- Rajh
	-- Lost City of the Tol&amp;apos;vir
	44577,		-- General Husam
	43612,		-- High Prophet Barim
	43614,		-- Lockmaw
	49045,		-- Augh
	44819,		-- Siamat
	-- Zul&amp;apos;Aman
	23574,		-- Akil&amp;apos;zon
	23576,		-- Nalorakk
	23578,		-- Jan&amp;apos;alai
	23577,		-- Halazzi
	24239,		-- Hex Lord Malacrass
	23863,		-- Daakara
	-- Zul&amp;apos;Gurub
	52155,		-- High Priest Venoxis
	52151,		-- Bloodlord Mandokir
	52271,		-- Edge of Madness
	52059,		-- High Priestess Kilnara
	52053,		-- Zanzil
	52148,		-- Jin&amp;apos;do the Godbreaker
	-- End Time
	54431,		-- Echo of Baine
	54445,		-- Echo of Jaina
	54123,		-- Echo of Sylvanas
	54544,		-- Echo of Tyrande
	54432,		-- Murozond
	-- Hour of Twilight
	54590,		-- Arcurion
	54968,		-- Asira Dawnslayer
	54938,		-- Archbishop Benedictus
	-- Well of Eternity
	55085,		-- Peroth&amp;apos;arn
	54853,		-- Queen Azshara
	54969,		-- Mannoroth
	55419,		-- Captain Varo&amp;apos;then
	
	-- Mists of Pandaria Dungeons --
	-- Scarlet Halls
	59303,		-- Houndmaster Braun
	58632,		-- Armsmaster Harlan
	59150,		-- Flameweaver Koegler
	-- Scarlet Monastery
	59789,		-- Thalnos the Soulrender
	59223,		-- Brother Korloff
	3977,		-- High Inquisitor Whitemane
	60040,		-- Commander Durand
	-- Scholomance
	58633,		-- Instructor Chillheart
	59184,		-- Jandice Barov
	59153,		-- Rattlegore
	58722,		-- Lilian Voss
	58791,		-- Lilian&amp;apos;s Soul
	59080,		-- Darkmaster Gandling
	-- Stormstout Brewery
	56637,		-- Ook-Ook
	56717,		-- Hoptallus
	59479,		-- Yan-Zhu the Uncasked
	-- Tempe of the Jade Serpent
	56448,		-- Wise Mari
	56843,		-- Lorewalker Stonestep
	59051,		-- Strife
	59726,		-- Peril
	58826,		-- Zao Sunseeker
	56732,		-- Liu Flameheart
	56762,		-- Yu&amp;apos;lon
	56439,		-- Sha of Doubt
	-- Mogu&amp;apos;shan Palace
	61444,		-- Ming the Cunning
	61442,		-- Kuai the Brute
	61445,		-- Haiyan the Unstoppable
	61243,		-- Gekkan
	61398,		-- Xin the Weaponmaster
	-- Shado-Pan Monastery
	56747,		-- Gu Cloudstrike
	56541,		-- Master Snowdrift
	56719,		-- Sha of Violence
	56884,		-- Taran Zhu
	-- Gate of the Setting Sun
	56906,		-- Saboteur Kip&amp;apos;tilak
	56589,		-- Striker Ga&amp;apos;dok
	56636,		-- Commander Ri&amp;apos;mok
	56877,		-- Raigonn
	-- Siege of Niuzao Temple
	61567,		-- Vizier Jin&amp;apos;bak
	61634,		-- Commander Vo&amp;apos;jak
	61485,		-- General Pa&amp;apos;valak
	62205,		-- Wing Leader Ner&amp;apos;onok

	-- Training Dummies --
	46647,		-- Level 85 Training Dummy
	67127,		-- Level 90 Training Dummy
	
	-- Pandaria Raid Adds --
	63346,		-- Tsulong: The Dark of Night
	62969,		-- Tsulong: Embodied Terror
	62977,		-- Tsulong: Frightspawn
	62919,		-- Tsulong: Unstable Sha
	61034,		-- Sha of Fear: Terror Spawn
	61003		-- Sha of Fear: Dread Spawn
}

SpecialUnit = nil
function SpecialUnit()
	local PQ_BossUnits = PQ_BossUnits
	
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		
		-- Dungeons &amp; Raids
		if UnitLevel(&amp;quot;target&amp;quot;) == -1 then return true else
			for i=1,#PQ_BossUnits do
				if PQ_BossUnits[i] == npcID then return true end
			end
			return false
		end
	else return false end
end

---------------
-- VAR SETUP --
---------------
if PQ_WRPROTRubim == nil then
	PQ_WRPROTRubim = true
	CheckSpell = 0
	SpellSucess = false
	
	-- AOE CHECKS	
	AoERotation = false
	RotationMode = &amp;quot;Single Target&amp;quot;
	
	-- SENDTEXT
	PQR_SendText(&amp;quot;Standby&amp;quot;)
end

------------------
-- INIT MESSAGE --
------------------
function initMessage()
	PQR_WriteToChat(&amp;quot;|cff91e782Rubim&amp;apos;s Warrior Protection |cff82cee7Loaded!|cffffffff&amp;quot;)
	if PQI_RubimGeneralWarrior_ProtSET_enable == true
	then
		UseEquipmentSet(PQI_RubimGeneralWarrior_ProtSET_value)
	end
end

-------------------
-- DEBUG OPTIONS --
-------------------
PQR_Rubim_Debug = 0

-------------
-- RACIAL --
------------
function RacialDetection()
	Racial = 0
	local _,Race = UnitRace(&amp;quot;player&amp;quot;)
	if Race == &amp;quot;Orc&amp;quot;
	then
		local Orc_Racial = {
		20572,
		33697,
		33702,
		82836
		}
	
		for i=1, #Orc_Racial do
			if IsSpellKnown(Orc_Racial[i]) then
				Racial = Orc_Racial[i]
			end
		end
	end
end

if Race == &amp;quot;Troll&amp;quot;
then
	Racial = 26297
end

------------------
-- Meele Range --
-----------------
function MeeleRange()
	if IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1
	then return true else return false
	end
end

----------------
-- CAST SPELL --
----------------
function CastSpell(spell)
	CastSpellByName(GetSpellInfo(spell),nil)
end

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
and PQR_Rubim_Debug ~= 0 then
	if not castspellsucced then
		castspellsucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
		castspellsucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
		castspellsucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)~= 0 and select(3,...)==&amp;quot;player&amp;quot; then DebugSpell = 1 LastSpell = GetSpellInfo(select(7,...)) end end)
	end
	
	if DebugSpell ~= 0
	then
		PQR_WriteToChat(&amp;quot;Casted: |cffffcc00&amp;quot; .. LastSpell)
		DebugSpell = 0
	end
end

--------------
-- CD Check --
--------------
function CdCheck(spellid)
	Sstart, Sduration, Senabled = GetSpellCooldown(spellid)
	Scooldown = (Sstart + Sduration - GetTime())
	if Sstart == 0
	then
		Scooldown = 0
	end
	return Scooldown
end

-------------
-- PRE POT --
-------------
function PrePot()
	if UnitBuffID(&amp;quot;player&amp;quot;,105706)
	then return true else return false end
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

--Player Info
PlayerRP	= select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;))
PlayerHP			= Nova_UnitInfo(&amp;quot;player&amp;quot;)
PlayerCombat		= UnitAffectingCombat(&amp;quot;player&amp;quot;)
	
--PQR Functions
isMoving			= PQR_IsMoving()

--Target Info
TargetHP				= select(1, Nova_UnitInfo(&amp;quot;target&amp;quot;))
EnemyLevel			= UnitLevel(&amp;quot;target&amp;quot;)
		
-----------------
-- Time to die --
-----------------
TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and PlayerCombat then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

-- dummy
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 99
	end
end

--------------
-- AOE SWAP --
--------------
if Timer == nil then
	Timer = 0
end

if PQI:IsHotkeys(PQI_RubimGeneralWarrior_AreaofEffect_key)
and GetTime() - Timer &amp;gt; 0.5
then
	Timer = GetTime()
	if AoERotation == false
	then
		AoERotation = true
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0EArea of Effect|R&amp;quot;)
		RotationMode = &amp;quot;Area of Effect&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	elseif AoERotation == true
	then
		AoERotation = false
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0ESingle Target|R&amp;quot;)
		RotationMode = &amp;quot;Single Target&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	end
end

------------------
-- CONSOLE CAST --
------------------
SLASH_rcast1 = &amp;quot;/rcast&amp;quot;
function SlashCmdList.rcast(rcast, editbox)
	if rcast ~= &amp;quot;All&amp;quot; then
		rcast = tonumber(rcast)
		
		if CheckSpell == 0
		or rcast ~= LastCheckSpell
		then
			CheckSpell = rcast
			LastCheckSpell = rcast
		else
			CheckSpell = 0 end
	
	elseif rcast == &amp;quot;All&amp;quot; then
		CheckSpell = 0
		LastCheckSpell = 0
	else argument = &amp;quot; |CFFFF0303(No arguments)|R&amp;quot;
	end
	if CheckSpell ~= 0 then
		print(&amp;quot;|cff00ffffQueue: |r&amp;quot; .. GetSpellInfo(CheckSpell).. &amp;quot;(&amp;quot; .. CheckSpell .. &amp;quot;)&amp;quot;)
		PQR_SendText(&amp;quot;Queue&amp;quot;,CheckSpell)
	elseif LastCheckSpell ~= 0 then
		 print(&amp;quot;|cff00ffffRemoved: |r&amp;quot; .. GetSpellInfo(LastCheckSpell).. &amp;quot;(&amp;quot; .. LastCheckSpell .. &amp;quot;)&amp;quot;)
		PQR_SendText(&amp;quot;Standby&amp;quot;) end
end

if PQR_RotationStarted == true
then
	initMessage()
	RacialDetection()
	CurrentShout = CommandingShout
	RunMacroText(&amp;quot;/rcast All&amp;quot;)
	PQR_RotationStarted = false
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Protection - Single Target</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == true then return false end

-- COMBAT BUFFS
		
--COMBAT
if not PlayerCombat then return false end

if PQR_SpellAvailable(BerserkerRage)
and CheckSpell == ShieldBlock
and PlayerRage &amp;lt; 60
then
	CastSpell(BerserkerRage)
end

--HeroicThrow
if not MeeleRange()
and PQR_SpellAvailable(HeroicThrow)
then
	CastSpell(HeroicThrow)
end

--ShieldSlam
if TargetValidation(&amp;quot;target&amp;quot;,ShieldSlam)
and PlayerRage &amp;lt;= 80
then
	CastSpell(ShieldSlam)
end

--Revenge
if TargetValidation(&amp;quot;target&amp;quot;,Revenge)
then
	CastSpell(Revenge)
end

--Damage Reduction ThunderClap (AoE)
if PQR_SpellAvailable(ThunderClap)
and MeeleRange()
and WBtimer &amp;lt; 1
then
	CastSpell(ThunderClap)
end

--Dot + Sunden Armor
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
and ((WAcount ~= 3
or WAtimer &amp;lt; 1)
or DWtimer &amp;lt; 1)
then
	CastSpell(Devastate)
end

if TargetValidation(&amp;quot;targeT&amp;quot;,HeroicStrike)
and Ultimatum
then
	CastSpell(HeroicStrike)
end

--Rage &amp;gt; 40 - Execute
if TargetValidation(&amp;quot;target&amp;quot;,Execute)
and TargetHP &amp;lt;= 20
and PlayerRage &amp;gt;= 40
and CheckSpell == 0
then
	CastSpell(Execute)
end

--Rage &amp;gt; 40 - Heroic Strike
if TargetValidation(&amp;quot;target&amp;quot;,HeroicStrike)
and TargetHP &amp;gt; 20
and PlayerRage &amp;gt;= 60
and ResourceSave(HeroicStrike)
then
	CastSpell(HeroicStrike)
end

--Shout Filler
if CurrentShout == CommandingShout
and PQR_SpellAvailable(CurrentShout)
and PlayerRage &amp;lt;= 90
then
	CastSpell(CurrentShout)
end

--Filler Devastate
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
then
	CastSpell(Devastate)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Diesall_Frame</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if RUBIM_GENERALWARRIOR
and RUBIM_PROT
and RUBIM_FURY
and RUBIM_ARMS then return false end

local config = {
	name	= &amp;apos;General Warrior&amp;apos;,
	author	= &amp;apos;Rubim&amp;apos;,
	abilities = {
		{ 	name = &amp;quot;Disable Cleave&amp;quot;,
			enable = false,
		},
		{ 	name = &amp;quot;Healthstone&amp;quot;,			newSection = true,
			enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 20,
				step = 5,
			},
		},
		{ 	name = &amp;quot;Protection SET&amp;quot;,			newSection = true,
			enable = true,
			widget = { type = &amp;apos;txtBox&amp;apos;,
				value = &amp;apos;ProtSET&amp;apos;,
				tooltip = &amp;quot;Name of your PROTECTION according to your EQUIPMENT manager&amp;quot;
			},
		},		
		{ 	name = &amp;quot;Fury SET&amp;quot;,
			enable = true,
			widget = { type = &amp;apos;txtBox&amp;apos;,
				value = &amp;apos;FurySET&amp;apos;,
				tooltip = &amp;quot;Name of your FURY according to your EQUIPMENT manager&amp;quot;
			},
		},		
		{ 	name = &amp;quot;Arms SET&amp;quot;,
			enable = true,
			widget = { type = &amp;apos;txtBox&amp;apos;,
				value = &amp;apos;ArmsSET&amp;apos;,
				tooltip = &amp;quot;Name of your ARMS according to your EQUIPMENT manager&amp;quot;
			},
		},		
		{ 	name = &amp;quot;Trinket 01&amp;quot;,			newSection = true,
			enable = false,
		},
		{ 	name = &amp;quot;Trinket 02&amp;quot;,			newSection = false,
			enable = false,
		},
		{ 	name = &amp;quot;Gloves&amp;quot;,				newSection = false,
			enable = false,
		},
		
		{ 	name = &amp;quot;Auto Dispell&amp;quot;,			newSection = true,
			enable = false,
		},
		{ 	name = &amp;quot;Boss Mechanics&amp;quot;,		newSection = false,
			enable = false,
		},
		{ 	name = &amp;quot;CD Boss Only&amp;quot;,			newSection = false,
			enable = true,
		},
		{ 	name = &amp;quot;CD Disable&amp;quot;,			newSection = false,
			enable = false,
		},
		
	},
	hotkeys = {
		{	name = &amp;quot;Area of Effect&amp;quot;,	enable = true,	hotkeys = {	&amp;apos;rs&amp;apos; },	},
		{	name = &amp;quot;Pause 1&amp;quot;,			enable = true,	hotkeys = {	&amp;apos;ls&amp;apos;	},	},
		{	name = &amp;quot;Pause 2&amp;quot;,			enable = true,	hotkeys = {	 &amp;apos;lc&amp;apos;	},	}, 
	},
}
RUBIM_GENERALWARRIOR = PQI:AddRotation(config)

-------------------
-- DIESELL FRAME --
-------------------

local config = {
	name	= &amp;apos;Protection&amp;apos;,
	author	= &amp;apos;Rubim&amp;apos;,
	abilities = {
		{	name = &amp;quot;Defensive Stance&amp;quot;,
			enable = true,
		},
		{ 	name = &amp;quot;Death Siphon&amp;quot;, 			newSection = true,
			enable = false,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 50,
				step = 5,
				tooltip = &amp;quot;You need to have the apropriate talent to use this&amp;quot;,
			},
		},
		{ 	name = &amp;quot;Death Pact Combo&amp;quot;,
			enable = false,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 15,
				step = 5,
				tooltip = &amp;quot;You need the Death Pact talent for this&amp;quot;,
			},
		},
		{	name = &amp;quot;Rune Tap&amp;quot;,
			enable = true,
		},
	},
	hotkeys = {
	},
}
RUBIM_PROT = PQI:AddRotation(config)

-------------------
-- DIESELL FRAME --
-------------------
local config = {
	name	= &amp;apos;Fury&amp;apos;,
	author	= &amp;apos;Rubim&amp;apos;,
	abilities = {
		{	name = &amp;quot;Battle Stance&amp;quot;,
			enable = true,
		},
		{	name = &amp;quot;Frost DW&amp;quot;,
			enable = false,
		},
		{ 	name = &amp;quot;Victory Rush&amp;quot;, 			newSection = true,
			enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 80,
				step = 5,
				tooltip = &amp;quot;Healing with Victory Rush&amp;quot;,
			},
		},
		{ 	name = &amp;quot;Death Siphon&amp;quot;,
			enable = false,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 50,
				step = 5,
				tooltip = &amp;quot;You need to have the apropriate talent to use this&amp;quot;,
			},
		},
	},
	hotkeys = {
	},
}
RUBIM_FURY = PQI:AddRotation(config)

-------------------
-- DIESELL FRAME --
-------------------
local config = {
	name	= &amp;apos;Arms&amp;apos;,
	author	= &amp;apos;Rubim&amp;apos;,
	abilities = {
		{	name = &amp;quot;Unholy Presence&amp;quot;,
			enable = true,
		},
		{	name = &amp;quot;Festerblight&amp;quot;,
			enable = true,
		},
		{ 	name = &amp;quot;Dark Succor&amp;quot;, 			newSection = true,
			enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 90,
				step = 5,
				tooltip = &amp;quot;Only works if you have Dark succor Glyphed&amp;quot;,
			},
		},
		{ 	name = &amp;quot;Death Siphon&amp;quot;,
			enable = false,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 50,
				step = 5,
				tooltip = &amp;quot;You need to have the apropriate talent to use this&amp;quot;,
			},
		},
	},
	hotkeys = {
	},
}
RUBIM_ARMS = PQI:AddRotation(config)</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Protection - Area of Effect</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == false then return false end

-- COMBAT BUFFS
		
--COMBAT
if MeeleRange()
then
	if Racial ~= 0 and PQR_SpellAvailable(Racial)
	and BossCheck()
	then
		CastSpell(Racial)
	end
end

--HeroicThrow
if not MeeleRange()
and PQR_SpellAvailable(HeroicThrow)
then
	CastSpell(HeroicThrow)
end

--DOT Spread
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
and DWtimer &amp;lt; 1
then
	CastSpell(Devastate)
end

--Damage Reduction ThunderClap (AoE)
if PQR_SpellAvailable(ThunderClap)
and MeeleRange()
then
	CastSpell(ThunderClap)
end

--ShieldSlam
if TargetValidation(&amp;quot;target&amp;quot;,ShieldSlam)
and PlayerRage &amp;lt;= 80
then
	CastSpell(ShieldSlam)
end

--Revenge
if TargetValidation(&amp;quot;target&amp;quot;,Revenge)
then
	CastSpell(Revenge)
end

--Dot + Sunden Armor
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
and ((WAcount ~= 3
or WAtimer &amp;lt; 1)
or DWtimer &amp;lt; 1)
then
	CastSpell(Devastate)
end

--Rage &amp;gt; 40 - Heroic Strike
if TargetValidation(&amp;quot;target&amp;quot;,Cleave)
and PlayerRage &amp;gt;= 20
and CheckSpell == 0
then
	CastSpell(Cleave)
end

--Filler Devastate
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
then
	CastSpell(Devastate)
end

--Shout Filler
if CurrentShout == CommandingShout
and PQR_SpellAvailable(CurrentShout)
then
	CastSpell(CurrentShout)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fury - Area of Effect</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == false then return false end

-- COMBAT BUFFS
		
--COMBAT
if MeeleRange()
then
	if Racial ~= 0 and PQR_SpellAvailable(Racial)
	and BossCheck()
	then
		CastSpell(Racial)
	end
end

--HeroicThrow
if not MeeleRange()
and PQR_SpellAvailable(HeroicThrow)
then
	CastSpell(HeroicThrow)
end

--DOT Spread
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
and DWtimer &amp;lt; 1
then
	CastSpell(Devastate)
end

--Damage Reduction ThunderClap (AoE)
if PQR_SpellAvailable(ThunderClap)
and MeeleRange()
then
	CastSpell(ThunderClap)
end

--ShieldSlam
if TargetValidation(&amp;quot;target&amp;quot;,ShieldSlam)
and PlayerRage &amp;lt;= 80
then
	CastSpell(ShieldSlam)
end

--Revenge
if TargetValidation(&amp;quot;target&amp;quot;,Revenge)
then
	CastSpell(Revenge)
end

--Dot + Sunden Armor
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
and ((WAcount ~= 3
or WAtimer &amp;lt; 1)
or DWtimer &amp;lt; 1)
then
	CastSpell(Devastate)
end

--Rage &amp;gt; 40 - Heroic Strike
if TargetValidation(&amp;quot;target&amp;quot;,Cleave)
and PlayerRage &amp;gt;= 20
and CheckSpell == 0
then
	CastSpell(Cleave)
end

--Filler Devastate
if TargetValidation(&amp;quot;target&amp;quot;,Devastate)
then
	CastSpell(Devastate)
end

--Shout Filler
if CurrentShout == CommandingShout
and PQR_SpellAvailable(CurrentShout)
then
	CastSpell(CurrentShout)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fury - Single Target</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AoERotation == true then return false end

-- COMBAT BUFFS

--COMBAT
if not PlayerCombat then return false end

--actions=auto_attack
--actions+=/blood_fury|beserking,if=time&amp;gt;=2
--actions=auto_attack
--actions+=/mogu_power_potion,if=(target.health.pct&amp;lt;20&amp;buff.recklessness.up)|buff.bloodlust.react|target.time_to_die&amp;lt;=25
--actions+=/bloodbath,if=talent.bloodbath.enabled&amp;(cooldown.colossus_smash.remains&amp;lt;2|debuff.colossus_smash.remains&amp;gt;=5|target.time_to_die&amp;lt;=20)
if PQR_SpellAvailable(Bloodbath)
and BossCheck()
and (CdCheck(ColossusSmash) &amp;lt; 2 or ColossusSmashDebuffTimer &amp;gt;= 5 or TimeToDie &amp;lt;= 20)
then
	CastSpell(Bloodbath)
end

--actions+=/recklessness,if=(talent.avatar.enabled&amp;(cooldown.colossus_smash.remains&amp;lt;2|debuff.colossus_smash.remains&amp;gt;=5))|(talent.bloodbath.enabled&amp;(buff.bloodbath.up&amp;(target.time_to_die&amp;gt;192|target.health.pct&amp;lt;20)))|target.time_to_die&amp;lt;=12
if PQR_SpellAvailable(Recklessness)
and BossCheck()
and ((IsSpellKnown(Avatar) and (CdCheck(ColossusSmash) &amp;lt; 2 or ColossusSmashDebuffTimer &amp;gt;= 5)) or (IsSpellKnown(Bloodbath) and (BloodbathBuff and (TimeToDie &amp;gt; 192 or TargetHP &amp;lt; 20))) or TimeToDie &amp;lt;= 12)
then
	CastSpell(Recklessness)
end

--actions+=/avatar,if=buff.recklessness.up&amp;talent.avatar.enabled
if PQR_SpellAvailable(Avatar)
and BossCheck()
and RecklessnessBuff
then
	CastSpell(Avatar)
end

--actions+=/skull_banner,if=buff.recklessness.up
if PQR_SpellAvailable(SkullBanner)
and BossCheck()
and RecklessnessBuff
then
	CastSpell(SkullBanner)
end

--actions+=/berserker_rage,if=!(buff.enrage.react|(buff.raging_blow.react=2&amp;target.health.pct&amp;gt;=20))|(buff.recklessness.remains&amp;gt;=10&amp;!buff.raging_blow.react)
if PQR_SpellAvailable(BerserkerRage)
and BossCheck()
and not (EnrageBuff or (RagingBlowBuffCount == 2 and TargetHP &amp;gt;= 20)) or (RecklessnessBuffTimer &amp;gt;= 10 and not RagingBlowBuff)
then
	CastSpell(BerserkerRage)
end

--actions+=/heroic_leap,if=debuff.colossus_smash.up
--actions+=/heroic_strike,if=((debuff.colossus_smash.up&amp;rage&amp;gt;=40)&amp;target.health.pct&amp;gt;=20)|rage&amp;gt;=110
if TargetValidation(&amp;quot;target&amp;quot;,HeroicStrike)
and (((ColossusSmashDebuff and PlayerRage &amp;gt;=40) and TargetHP &amp;gt;= 20 )or PlayerRage &amp;gt;= 110)
then
	CastSpell(HeroicStrike)
end

--actions+=/raging_blow,if=buff.raging_blow.stack=2&amp;debuff.colossus_smash.up&amp;target.health.pct&amp;gt;=20
if TargetValidation(&amp;quot;target&amp;quot;,RagingBlow)
and RagingBlowBuffCount == 2
and ColossusSmashDebuff
and TargetHP &amp;gt;= 20
then
	CastSpell(RagingBlow)
end

--actions+=/bloodthirst,if=!(target.health.pct&amp;lt;20&amp;debuff.colossus_smash.up&amp;rage&amp;gt;=30)
if TargetValidation(&amp;quot;target&amp;quot;,Bloodthirst)
and not (TargetHP &amp;lt; 20 and ColossusSmashDebuff and PlayerRage &amp;gt;= 30)
then
	CastSpell(Bloodthirst)
end


--actions+=/wild_strike,if=buff.bloodsurge.react&amp;target.health.pct&amp;gt;=20&amp;cooldown.bloodthirst.remains&amp;lt;=1
if TargetValidation(&amp;quot;target&amp;quot;,WildStrike)
and BloodSurgeBuff
and TargetHP &amp;gt;= 20
and CdCheck(Bloodthirst) &amp;lt;= 1
then
	CastSpell(WildStrike)
end

--actions+=/wait,sec=cooldown.bloodthirst.remains,if=!(target.health.pct&amp;lt;20&amp;debuff.colossus_smash.up&amp;rage&amp;gt;=30)&amp;cooldown.bloodthirst.remains&amp;lt;=1&amp;cooldown.bloodthirst.remains
--if not (EnemyHP &amp;lt; 20 and ColossusSmashDebuff and PlayerRage &amp;gt;= 30) and CdCheck(Bloodthirst) &amp;lt;= 1 
--then
--	PQR_Delay(CdCheck(Bloodthirst))
--end

--actions+=/dragon_roar,if=talent.dragon_roar.enabled&amp;(!debuff.colossus_smash.up&amp;buff.bloodbath.up)
--actions+=/colossus_smash
if TargetValidation(&amp;quot;target&amp;quot;,ColossusSmash)
then
	CastSpell(ColossusSmash)
end

--actions+=/execute,if=buff.enrage.up|debuff.colossus_smash.up|rage&amp;gt;90|target.time_to_die&amp;lt;12|buff.recklessness.up
if TargetValidation(&amp;quot;target&amp;quot;,Execute)
and (EnrageBuff or ColossusSmashDebuff or PlayerRage &amp;gt; 90 or TimeToDie &amp;lt; 12 or RecklessnessBuff)
then
	CastSpell(Execute)
end

--actions+=/storm_bolt,if=talent.storm_bolt.enabled
--if TargetValidation(&amp;quot;target&amp;quot;,Stormbolt)
--then
--	CastSpell(Stormbolt)
--end

--actions+=/raging_blow,if=buff.raging_blow.stack=2|(buff.raging_blow.up&amp;(debuff.colossus_smash.up|cooldown.colossus_smash.remains&amp;gt;=3|(cooldown.bloodthirst.remains&amp;gt;=1&amp;buff.raging_blow.remains&amp;lt;=3)))
if TargetValidation(&amp;quot;target&amp;quot;,RagingBlow)
and (RagingBlowBuffCount == 2
or (RagingBlowBuff and (ColossusSmashDebuff or CdCheck(ColossusSmash) &amp;gt;= 3 or (CdCheck(Bloodthirst) &amp;gt;= 1 and RagingBlowBuffTimer &amp;lt;= 3))))
then
	CastSpell(RagingBlow)
end

--actions+=/wild_strike,if=buff.bloodsurge.react
if TargetValidation(&amp;quot;target&amp;quot;,WildStrike)
and BloodSurgeBuff
then
	CastSpell(WildStrike)
end

--actions+=/shockwave,if=talent.shockwave.enabled
if PQR_SpellAvailable(Shockwave)
and MeeleRange()
then
	CastSpell(Shockwave)
end

--actions+=/heroic_throw,if=debuff.colossus_smash.down
if TargetValidation(&amp;quot;target&amp;quot;,HeroicThrow)
and ColossusSmashDebuff
then
	CastSpell(HeroicThrow)
end

--actions+=/battle_shout,if=rage&amp;lt;70&amp;!debuff.colossus_smash.up
if PQR_SpellAvailable(CurrentShout)
and PlayerRage &amp;lt; 70
and not ColossusSmashDebuff
then
	CastSpell(CurrentShout)
end

--actions+=/wild_strike,if=debuff.colossus_smash.up&amp;target.health.pct&amp;gt;=20
if TargetValidation(&amp;quot;target&amp;quot;,WildStrike)
and ColossusSmashDebuff
and TargetHP &amp;gt;= 20
then
	CastSpell(WildStrike)
end

--actions+=/impending_victory,if=talent.impending_victory.enabled&amp;target.health.pct&amp;gt;=20

--actions+=/wild_strike,if=cooldown.colossus_smash.remains&amp;gt;=2&amp;rage&amp;gt;=80&amp;target.health.pct&amp;gt;=20
if TargetValidation(&amp;quot;target&amp;quot;,WildStrike)
and CdCheck(ColossusSmash) &amp;gt;= 2
and PlayerRage &amp;gt;= 80
and TargetHP &amp;gt;= 20
then
	CastSpell(WildStrike)
end

--actions+=/battle_shout,if=rage&amp;lt;70
if PQR_SpellAvailable(CurrentShout)
and PlayerRage &amp;lt; 70
then
	CastSpell(CurrentShout)
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[ MISC ] Functions (Fury)</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- This profile would never be done without:
-- team_Nova (Mentally, Crystal_Tech and bu_ba_911)
-- D1sc1pl1n3
-- Kinkeh
-- cpowroks
-- Gabbz
-- googlebee
-- Xelper
-- imdasandman
-- kuukuu
-- Ninjaderp
-- Diesall


-----------------
-- DUMB CHECKS --
-----------------
if  (select(2, UnitClass(&amp;quot;player&amp;quot;)) ~= &amp;quot;WARRIOR&amp;quot;)
then
	print(&amp;quot;Error: Wrong Class - Expecting Warrior&amp;quot;)
	PQR_StopRotation()
elseif UnitLevel(&amp;quot;player&amp;quot;) ~= 90
then
	print(&amp;quot;Error: Wrong Level - Expecting LvL 90&amp;quot;)
	PQR_StopRotation()
elseif GetSpecialization() == nil
then
	print(&amp;quot;Error: Wrong Spec - None selected!&amp;quot;)
	PQR_StopRotation()
end

----------------
-- SPEC CHECK --
----------------
if GetSpecialization() == 1 then
	Spec = &amp;quot;Arms&amp;quot;
--	PQR_SwapRotation(&amp;quot;Blood (Rubim)&amp;quot;) 
elseif GetSpecialization() == 2 then
	Spec = &amp;quot;Fury&amp;quot;
--	PQR_SwapRotation(&amp;quot;Blood (Rubim)&amp;quot;) 
elseif GetSpecialization() == 3 then
	Spec = &amp;quot;Protection&amp;quot;
--	PQR_SwapRotation(&amp;quot;Unholy (Rubim)&amp;quot;)
end

---------------
-- PQI_TEXT --
--------------
function PQR_SendText(CHOICE,SPELL)
	if CHOICE == &amp;quot;Standby&amp;quot;
	then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Standby: &amp;quot; .. RotationMode, nil, &amp;quot;ffffff&amp;quot;)
	end
	
	if CHOICE ~= &amp;quot;Standby&amp;quot;
	and SPELL ~= 0
	then
		local nskill = GetSpellInfo(SPELL)		
		
		if CHOICE == &amp;quot;Queue&amp;quot;
		then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Queue Skill: &amp;quot; .. nskill, nil, &amp;quot;14DCB4&amp;quot;)
		end
		
		if CHOICE == &amp;quot;Casted&amp;quot;
		then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Casted: &amp;quot; .. nskill, nil, &amp;quot;ffffff&amp;quot;)
		end
	end
end

---------------------------------
-- NOVA_DATA.LUA / by TeamNova --
---------------------------------
-- Target Validation Function.
TargetValidation = nil
function TargetValidation(unit, spell)
	if UnitExists(unit)
	 and IsPlayerSpell(spell)
	 and UnitCanAttack(&amp;quot;player&amp;quot;, unit) == 1 
	 and not UnitIsDeadOrGhost(unit) 
	 and not PQR_IsOutOfSight(unit, 1) then
	 	if IsSpellKnown(spell) then  -- Redundent Check to see if Morphed Spell or not
	 		if PQR_SpellAvailable(spell) then
		 		if IsSpellInRange(GetSpellInfo(spell), unit) == 1 then
		 			return true
		 		else
		 			return false
		 		end
		 	else
		 		return false
		 	end
	 	else -- If spell is a morphed spell, return true without Range Check
	 		if select(2, GetSpellCooldown(spell)) == 0 then
	 			return true
	 		end
	 	end
	end
end


--RESOURCES
Nova_UnitInfo = nil
function Nova_UnitInfo(t)
	-- Takes an input of UnitID (player, target, pet, mouseover, etc) and gives you their most useful info
		local TManaActual = UnitPower(t)
		local TMaxMana = UnitPowerMax(t)
		if TMaxMana == 0 then TMaxMana = 1 end			
		local TMana = 100 * UnitPower(t) / TMaxMana
		local THealthActual = UnitHealth(t)
		local THealth = 100 * UnitHealth(t) / UnitHealthMax(t) 
		local myClassPower = 0 
		local PQ_Class = select(2, UnitClass(t)) 
		local PQ_UnitLevel = UnitLevel(t)
		local PQ_CombatCheck = UnitAffectingCombat(t) 
		if PQ_Class == &amp;quot;PALADIN&amp;quot; then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 9)
			if UnitBuffID(&amp;quot;player&amp;quot;, 90174) then
				myClassPower = myClassPower + 3
			end
		elseif PQ_Class == &amp;quot;PRIEST&amp;quot; then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 13)
		elseif PQ_Class == &amp;quot;WARLOCK&amp;quot; then
			if PQR_Spec == 3 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 14) -- Destruction: Burning Embers
			elseif PQR_Spec == 2 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 15) -- Demonology: Demonic Fury
			elseif PQR_Spec == 1 then
				myClassPower = UnitPower(&amp;quot;player&amp;quot;, 7) -- Affliction: Soul Shards
			end
		elseif PQ_Class == &amp;quot;DRUID&amp;quot; and PQ_Class == 2 then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 8)
		elseif PQ_Class == &amp;quot;MONK&amp;quot;  then
			myClassPower = UnitPower(&amp;quot;player&amp;quot;, 12)
		elseif PQ_Class == &amp;quot;ROGUE&amp;quot; and t ~= &amp;quot;player&amp;quot; then
			myClassPower = GetComboPoints(&amp;quot;player&amp;quot;, t)
		end
		--       1            2          3         4           5             6          7               8
		return THealth, THealthActual, TMana, TManaActual, myClassPower, PQ_Class, PQ_UnitLevel, PQ_CombatCheck
end

--BOSSCHECK
PQ_BossUnits = {
	-- Cataclysm Dungeons --
	-- Abyssal Maw: Throne of the Tides
	40586,		-- Lady Naz&amp;apos;jar
	40765,		-- Commander Ulthok
	40825,		-- Erunak Stonespeaker
	40788,		-- Mindbender Ghur&amp;apos;sha
	42172,		-- Ozumat
	-- Blackrock Caverns
	39665,		-- Rom&amp;apos;ogg Bonecrusher
	39679,		-- Corla, Herald of Twilight
	39698,		-- Karsh Steelbender
	39700,		-- Beauty
	39705,		-- Ascendant Lord Obsidius
	-- The Stonecore
	43438,		-- Corborus
	43214,		-- Slabhide
	42188,		-- Ozruk
	42333,		-- High Priestess Azil
	-- The Vortex Pinnacle
	43878,		-- Grand Vizier Ertan
	43873,		-- Altairus
	43875,		-- Asaad
	-- Grim Batol
	39625,		-- General Umbriss
	40177,		-- Forgemaster Throngus
	40319,		-- Drahga Shadowburner
	40484,		-- Erudax
	-- Halls of Origination
	39425,		-- Temple Guardian Anhuur
	39428,		-- Earthrager Ptah
	39788,		-- Anraphet
	39587,		-- Isiset
	39731,		-- Ammunae
	39732,		-- Setesh
	39378,		-- Rajh
	-- Lost City of the Tol&amp;apos;vir
	44577,		-- General Husam
	43612,		-- High Prophet Barim
	43614,		-- Lockmaw
	49045,		-- Augh
	44819,		-- Siamat
	-- Zul&amp;apos;Aman
	23574,		-- Akil&amp;apos;zon
	23576,		-- Nalorakk
	23578,		-- Jan&amp;apos;alai
	23577,		-- Halazzi
	24239,		-- Hex Lord Malacrass
	23863,		-- Daakara
	-- Zul&amp;apos;Gurub
	52155,		-- High Priest Venoxis
	52151,		-- Bloodlord Mandokir
	52271,		-- Edge of Madness
	52059,		-- High Priestess Kilnara
	52053,		-- Zanzil
	52148,		-- Jin&amp;apos;do the Godbreaker
	-- End Time
	54431,		-- Echo of Baine
	54445,		-- Echo of Jaina
	54123,		-- Echo of Sylvanas
	54544,		-- Echo of Tyrande
	54432,		-- Murozond
	-- Hour of Twilight
	54590,		-- Arcurion
	54968,		-- Asira Dawnslayer
	54938,		-- Archbishop Benedictus
	-- Well of Eternity
	55085,		-- Peroth&amp;apos;arn
	54853,		-- Queen Azshara
	54969,		-- Mannoroth
	55419,		-- Captain Varo&amp;apos;then
	
	-- Mists of Pandaria Dungeons --
	-- Scarlet Halls
	59303,		-- Houndmaster Braun
	58632,		-- Armsmaster Harlan
	59150,		-- Flameweaver Koegler
	-- Scarlet Monastery
	59789,		-- Thalnos the Soulrender
	59223,		-- Brother Korloff
	3977,		-- High Inquisitor Whitemane
	60040,		-- Commander Durand
	-- Scholomance
	58633,		-- Instructor Chillheart
	59184,		-- Jandice Barov
	59153,		-- Rattlegore
	58722,		-- Lilian Voss
	58791,		-- Lilian&amp;apos;s Soul
	59080,		-- Darkmaster Gandling
	-- Stormstout Brewery
	56637,		-- Ook-Ook
	56717,		-- Hoptallus
	59479,		-- Yan-Zhu the Uncasked
	-- Tempe of the Jade Serpent
	56448,		-- Wise Mari
	56843,		-- Lorewalker Stonestep
	59051,		-- Strife
	59726,		-- Peril
	58826,		-- Zao Sunseeker
	56732,		-- Liu Flameheart
	56762,		-- Yu&amp;apos;lon
	56439,		-- Sha of Doubt
	-- Mogu&amp;apos;shan Palace
	61444,		-- Ming the Cunning
	61442,		-- Kuai the Brute
	61445,		-- Haiyan the Unstoppable
	61243,		-- Gekkan
	61398,		-- Xin the Weaponmaster
	-- Shado-Pan Monastery
	56747,		-- Gu Cloudstrike
	56541,		-- Master Snowdrift
	56719,		-- Sha of Violence
	56884,		-- Taran Zhu
	-- Gate of the Setting Sun
	56906,		-- Saboteur Kip&amp;apos;tilak
	56589,		-- Striker Ga&amp;apos;dok
	56636,		-- Commander Ri&amp;apos;mok
	56877,		-- Raigonn
	-- Siege of Niuzao Temple
	61567,		-- Vizier Jin&amp;apos;bak
	61634,		-- Commander Vo&amp;apos;jak
	61485,		-- General Pa&amp;apos;valak
	62205,		-- Wing Leader Ner&amp;apos;onok

	-- Training Dummies --
	46647,		-- Level 85 Training Dummy
	67127,		-- Level 90 Training Dummy
	
	-- Pandaria Raid Adds --
	63346,		-- Tsulong: The Dark of Night
	62969,		-- Tsulong: Embodied Terror
	62977,		-- Tsulong: Frightspawn
	62919,		-- Tsulong: Unstable Sha
	61034,		-- Sha of Fear: Terror Spawn
	61003		-- Sha of Fear: Dread Spawn
}

SpecialUnit = nil
function SpecialUnit()
	local PQ_BossUnits = PQ_BossUnits
	
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		
		-- Dungeons &amp; Raids
		if UnitLevel(&amp;quot;target&amp;quot;) == -1 then return true else
			for i=1,#PQ_BossUnits do
				if PQ_BossUnits[i] == npcID then return true end
			end
			return false
		end
	else return false end
end

---------------
-- VAR SETUP --
---------------
if PQ_WRPROTRubim == nil then
	PQ_WRPROTRubim = true
	CheckSpell = 0
	SpellSucess = false
	
	-- AOE CHECKS	
	AoERotation = false
	RotationMode = &amp;quot;Single Target&amp;quot;
	
	-- SENDTEXT
	PQR_SendText(&amp;quot;Standby&amp;quot;)
end

------------------
-- INIT MESSAGE --
------------------
function initMessage()
	PQR_WriteToChat(&amp;quot;|cff91e782Rubim&amp;apos;s Warrior Fury |cff82cee7Loaded!|cffffffff&amp;quot;)
	if PQI_RubimGeneralWarrior_ProtSET_enable == true
	then
		UseEquipmentSet(PQI_RubimGeneralWarrior_ProtSET_value)
	end
end

-------------------
-- DEBUG OPTIONS --
-------------------
PQR_Rubim_Debug = 0

-------------
-- RACIAL --
------------
function RacialDetection()
	Racial = 0
	local _,Race = UnitRace(&amp;quot;player&amp;quot;)
	if Race == &amp;quot;Orc&amp;quot;
	then
		local Orc_Racial = {
		20572,
		33697,
		33702,
		82836
		}
	
		for i=1, #Orc_Racial do
			if IsSpellKnown(Orc_Racial[i]) then
				Racial = Orc_Racial[i]
			end
		end
	end
end

if Race == &amp;quot;Troll&amp;quot;
then
	Racial = 26297
end

------------------
-- Meele Range --
-----------------
function MeeleRange()
	if IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1
	then return true else return false
	end
end

----------------
-- CAST SPELL --
----------------
function CastSpell(spell)
	CastSpellByName(GetSpellInfo(spell),nil)
end

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
and PQR_Rubim_Debug ~= 0 then
	if not castspellsucced then
		castspellsucced = CreateFrame(&amp;quot;Frame&amp;quot;) 
		castspellsucced:RegisterEvent(&amp;quot;UNIT_SPELLCAST_SUCCEEDED&amp;quot;) 
		castspellsucced:SetScript(&amp;quot;OnEvent&amp;quot;,function(...) if select(7,...)~= 0 and select(3,...)==&amp;quot;player&amp;quot; then DebugSpell = 1 LastSpell = GetSpellInfo(select(7,...)) end end)
	end
	
	if DebugSpell ~= 0
	then
		PQR_WriteToChat(&amp;quot;Casted: |cffffcc00&amp;quot; .. LastSpell)
		DebugSpell = 0
	end
end

--------------
-- CD Check --
--------------
function CdCheck(spellid)
	Sstart, Sduration, Senabled = GetSpellCooldown(spellid)
	Scooldown = (Sstart + Sduration - GetTime())
	if Sstart == 0
	then
		Scooldown = 0
	end
	return Scooldown
end

-------------
-- PRE POT --
-------------
function PrePot()
	if UnitBuffID(&amp;quot;player&amp;quot;,105706)
	then return true else return false end
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

--Player Info
PlayerRP	= select(3, Nova_UnitInfo(&amp;quot;player&amp;quot;))
PlayerHP			= Nova_UnitInfo(&amp;quot;player&amp;quot;)
PlayerCombat		= UnitAffectingCombat(&amp;quot;player&amp;quot;)
	
--PQR Functions
isMoving			= PQR_IsMoving()

--Target Info
TargetHP				= select(1, Nova_UnitInfo(&amp;quot;target&amp;quot;))
EnemyLevel			= UnitLevel(&amp;quot;target&amp;quot;)
		
-----------------
-- Time to die --
-----------------
TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and PlayerCombat then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

-- dummy
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 99
	end
end

--------------
-- AOE SWAP --
--------------
if Timer == nil then
	Timer = 0
end

if PQI:IsHotkeys(PQI_RubimGeneralWarrior_AreaofEffect_key)
and GetTime() - Timer &amp;gt; 0.5
then
	Timer = GetTime()
	if AoERotation == false
	then
		AoERotation = true
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0EArea of Effect|R&amp;quot;)
		RotationMode = &amp;quot;Area of Effect&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	elseif AoERotation == true
	then
		AoERotation = false
		print(&amp;quot;|CFF1CB619Rotation|R: |CFFFE8A0ESingle Target|R&amp;quot;)
		RotationMode = &amp;quot;Single Target&amp;quot;
		PQR_SendText(&amp;quot;Standby&amp;quot;)
		PlaySound(&amp;quot;SPELLBOOKCHANGEPAGE &amp;quot;, &amp;quot;master&amp;quot;)
	end
end

------------------
-- CONSOLE CAST --
------------------
SLASH_rcast1 = &amp;quot;/rcast&amp;quot;
function SlashCmdList.rcast(rcast, editbox)
	if rcast ~= &amp;quot;All&amp;quot; then
		rcast = tonumber(rcast)
		
		if CheckSpell == 0
		or rcast ~= LastCheckSpell
		then
			CheckSpell = rcast
			LastCheckSpell = rcast
		else
			CheckSpell = 0 end
	
	elseif rcast == &amp;quot;All&amp;quot; then
		CheckSpell = 0
		LastCheckSpell = 0
	else argument = &amp;quot; |CFFFF0303(No arguments)|R&amp;quot;
	end
	if CheckSpell ~= 0 then
		print(&amp;quot;|cff00ffffQueue: |r&amp;quot; .. GetSpellInfo(CheckSpell).. &amp;quot;(&amp;quot; .. CheckSpell .. &amp;quot;)&amp;quot;)
		PQR_SendText(&amp;quot;Queue&amp;quot;,CheckSpell)
	elseif LastCheckSpell ~= 0 then
		 print(&amp;quot;|cff00ffffRemoved: |r&amp;quot; .. GetSpellInfo(LastCheckSpell).. &amp;quot;(&amp;quot; .. LastCheckSpell .. &amp;quot;)&amp;quot;)
		PQR_SendText(&amp;quot;Standby&amp;quot;) end
end

if PQR_RotationStarted == true
then
	initMessage()
	RacialDetection()
	CurrentShout = CommandingShout
	RunMacroText(&amp;quot;/rcast All&amp;quot;)
	PQR_RotationStarted = false
end</Lua><RecastDelay>250</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Rubim_Frame: Victory Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_RubimUnholy_DarkSuccor_enable ~= true then return false end
local HealthFrame = tonumber(PQI_RubimUnholy_DarkSuccor_value)
if BPtimer &amp;gt; 0
and FFtimer &amp;gt; 0
and TargetValidation(&amp;quot;target&amp;quot;,DeathStrike)
and UnitBuffID(&amp;quot;player&amp;quot;,101568)
and PlayerHP &amp;lt;= HealthFrame then
	PQR_DebugP(&amp;quot;Healing with Death Strike (Current HP: &amp;quot; .. PlayerHP)
	CastSpell(DeathStrike)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fury_Frame: Victory Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_RubimFury_VictoryRush_enable ~= true then return false end
local HealthFrame = tonumber(PQI_RubimFury_VictoryRush_value)
if TargetValidation(&amp;quot;target&amp;quot;,VictoryRush)
and UnitBuffID(&amp;quot;player&amp;quot;,32216)
and PlayerHP &amp;lt;= HealthFrame then
	PQR_DebugP(&amp;quot;Healing with Victory Rush (Current HP: &amp;quot; .. PlayerHP)
	CastSpell(VictoryRush)
	return true
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARRIOR>