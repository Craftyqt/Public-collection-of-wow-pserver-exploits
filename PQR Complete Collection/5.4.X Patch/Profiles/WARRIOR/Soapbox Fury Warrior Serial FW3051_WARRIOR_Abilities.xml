<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>---Get in Melee Range---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not MeleeRange() then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Bloodbath</Name><Default>false</Default><SpellID>12292</SpellID><Actions></Actions><Lua>local TTD = (Targethealth - 3 * (Targethealth / TimeToDie))
local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ColossusSmash, ColossusSmashtimer, Recklessness, ReckCD, CSCD = ColossusSmash, ColossusSmashtimer, 
Recklessness, ReckCD, CSCD

if CSCD &amp;lt; 2 
or (ColossusSmash and ColossusSmashtimer - GetTime() &amp;gt;= 5)
or TTD &amp;lt;= 20 then
UseInventoryItem(10)
UseInventoryItem(13)
UseInventoryItem(14)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heroic Leap</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_HeroicLeapMiddleMouse_enable 
and not PQI_SoapboxFury_HeroicLeap_enable  then return false end

local HLCD = HLCD

if ((PQI_SoapboxFury_HeroicLeapMiddleMouse_enable and IsMouseButtonDown(3))
or (PQI_SoapboxFury_HeroicLeap_enable and
PQI:IsHotkeys(PQI_SoapboxFury_HeroicLeap_key)))
and GetCurrentKeyBoardFocus() == nil 
and HLCD &amp;lt; 1 then
  CastSpellByName(GetSpellInfo(6544)) 
  if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end 
  return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heroic Strike</Name><Default>false</Default><SpellID>78</SpellID><Actions></Actions><Lua>if CleaveSwap then return false end

local MaxRage = (UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= (UnitPowerMax(&amp;quot;player&amp;quot;) - 10))
local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ColossusSmash, Rage = ColossusSmash, Rage

if ((ColossusSmash and Rage &amp;gt;= 40)
and Targethealth &amp;gt;= 20)
or MaxRage then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Raging Blow</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>if CleaveSwap then return false end

local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)
local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local RB, RBtimer, ColossusSmash, RagingBlowcount, CSCD, BTCD, Rage = RB, RBtimer, ColossusSmash, 
RagingBlowcount, CSCD, BTCD, Rage
	
if RagingBlowcount == 2
or (RB and (ColossusSmash or CSCD &amp;gt;= 3 or (BTCD &amp;gt;= 1 
and RBtimer - GetTime() &amp;lt;= 3))) then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Bloodthirst</Name><Default>false</Default><SpellID>23881</SpellID><Actions></Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ColossusSmash, Rage, RagingBlow = ColossusSmash, Rage, RagingBlow


if Targethealth &amp;lt; 20
and ColossusSmash
and Rage &amp;gt;= 30 then
return false
end

return true


---old---
---if Targethealth &amp;lt; 20
---and ColossusSmash
---and (Rage &amp;gt;= 30 or (Rage &amp;gt;= 10 and RagingBlow ~= nil)) then
---return false
---end

---return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wild Strike</Name><Default>false</Default><SpellID>100130</SpellID><Actions></Actions><Lua>if CleaveSwap then return false end

local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local CSCD = CSCD

if CSCD &amp;gt;= 2
and Rage &amp;gt;= 80
and Targethealth &amp;gt;= 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Colossus Smash</Name><Default>false</Default><SpellID>86346</SpellID><Actions></Actions><Lua>return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dragon Roar</Name><Default>false</Default><SpellID>118000</SpellID><Actions></Actions><Lua>if NoAoE == true then return false end

local BloodbathTalent, ColossusSmash, Bloodbath = BloodbathTalent, ColossusSmash, Bloodbath
local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)

if not ColossusSmash 
and ((BloodbathTalent == true and Bloodbath)
or BloodbathTalent == false) 
or targetGUID == 60913 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Execute</Name><Default>false</Default><SpellID>5308</SpellID><Actions></Actions><Lua>local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)
local TTD = (Targethealth - 3 * (Targethealth / TimeToDie))
local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ColossusSmash, Rage, Enrage = ColossusSmash, Rage, Enrage

if ColossusSmash
or Enrage
or Rage &amp;gt; 90
or TTD &amp;lt; 12
or Recklessness then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Cleave</Name><Default>false</Default><SpellID>845</SpellID><Actions></Actions><Lua>local MaxRage = (UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= (UnitPowerMax(&amp;quot;player&amp;quot;) - 10))

if MaxRage then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Globals---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>T2D = nil
function T2D(unit)
	-- If no target is given, return false.
	if unit == nil then return false end
	
	if UnitExists(unit) then
		-- Target present; Set initial values.
		if (guid ~= UnitGUID(unit)) or (guid == UnitGUID(unit) and UnitHealth(unit) == _firstLifeMax) then
			guid = UnitGUID(unit)
			_firstLife = UnitHealth(unit)
			_firstLifeMax = UnitHealthMax(unit)
			_firstTime = GetTime()
		end
		
		-- Fetch current values.
		_currentLife = UnitHealth(unit)
		_currentTime = GetTime()
		timeDiff = _currentTime - _firstTime
		hpDiff = _firstLife - _currentLife
		
		-- Calculate time to die.
		if hpDiff &amp;gt; 0 then
			fullTime = timeDiff*_firstLifeMax/hpDiff
			pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
			calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
			if calcTime &amp;lt; 1 then calcTime = 1 end
			timeToDie = calcTime
		end
		
		-- New target; reset settings.
		if hpDiff &amp;lt;= 0 then
			guid = UnitGUID(unit)
			_firstLife = UnitHealth(unit)
			_firstLifeMax = UnitHealth(unit)
			_firstTime = GetTime()
		end
	            
		-- Training Dummy&amp;apos;s are bad
		if UnitHealthMax(unit) == 1 then timeToDie = 99 end
		
		-- Initialize
		if not timeToDie then timeToDie = 100 end
		
		return timeToDie
	end
end


---No Time to Die---
if UnitExists(&amp;quot;target&amp;quot;) then 
local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)

NOT2D = false

Target = { 70235, 70247, 70212 }

for i=1, #Target do
   if targetGUID == Target[i] then NOT2D = true
   end
end
end

---Blacklist AoE Targets---
if UnitExists(&amp;quot;target&amp;quot;) then 
local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)

NoAoE = false

Name = { 62995 }

for i=1, #Name do
   if targetGUID == Name[i] then NoAoE = true
   end
end
end

--Melee Range---
function MeleeRange()
	if IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then 
	return true 
	else 
	return false
	end
end


function Buff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == &amp;quot;number&amp;quot; then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() &amp;gt; TimeLeft ) then return true end
    end
  end
end

function Debuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == &amp;quot;number&amp;quot; then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() &amp;gt; TimeLeft ) then return true end
    end
  end
end

function BattleBuff()
local AP = { 57330, 19506 }
for i=1,#AP do
	if UnitBuffID(&amp;quot;player&amp;quot;,AP[i]) ~= nil
		then
			return true
		end
	end
end
Rage = UnitPower(&amp;quot;player&amp;quot;)

Bloodbath,_,_,_,_,_,Bloodbathtimer = UnitBuffID(&amp;quot;player&amp;quot;, 12292)

Avatar,_,_,_,_,_,Avatartimer = UnitBuffID(&amp;quot;player&amp;quot;, 107574)

ColossusSmash,_,_,_,_,_,ColossusSmashtimer = UnitDebuffID(&amp;quot;target&amp;quot;, 86346, &amp;quot;PLAYER&amp;quot;)

Bloodsurge,_,_,_,_,_,Bloodsurgetimer = UnitBuffID(&amp;quot;player&amp;quot;, 46915)

Enrage,_,_,_,_,_,Enragetimer = UnitBuffID(&amp;quot;player&amp;quot;, 12880)

RB,_,_,_,_,_,RBtimer = UnitBuffID(&amp;quot;player&amp;quot;, 131116)

Recklessness,_,_,_,_,_,Recklessnesstimer = UnitBuffID(&amp;quot;player&amp;quot;, 1719)

RagingBlow,_,_,RagingBlowcount,_,_,expires = UnitBuffID(&amp;quot;player&amp;quot;,131116)

MeatCleaver,_,_,_,_,_,MeatCleavertimer = UnitBuffID(&amp;quot;player&amp;quot;, 12950)

MeatCount = select(4, UnitBuffID(&amp;quot;player&amp;quot;,85739))

local StaggerStart, StaggerDuration = GetSpellCooldown(107566)
StaggerCD = StaggerStart + StaggerDuration - GetTime()

local PiercingStart, PiercingDuration = GetSpellCooldown(12323)
PiercingCD = PiercingStart + PiercingDuration - GetTime()

local DisruptingStart, DisruptingDuration = GetSpellCooldown(102060)
DisruptingCD = DisruptingStart + DisruptingDuration - GetTime()

local BBStart, BBDuration = GetSpellCooldown(12292)
BBCD = BBStart + BBDuration - GetTime()

local HLStart, HLDuration = GetSpellCooldown(6544)
HLCD = HLStart + HLDuration - GetTime()

local IVStart, IVDuration = GetSpellCooldown(103840)
IVCD = IVStart + IVDuration - GetTime()

local VStart, VDuration = GetSpellCooldown(34428)
VCD = VStart + VDuration - GetTime()

local BTStart, BTDuration = GetSpellCooldown(23881)
BTCD = BTStart + BTDuration - GetTime()

local CSStart, CSDuration = GetSpellCooldown(86346)
CSCD = CSStart + CSDuration - GetTime()

local SBStart, SBDuration = GetSpellCooldown(114207)
SBCD = SBStart + SBDuration - GetTime()

local DBStart, DBDuration = GetSpellCooldown(114203)
DBCD = DBStart + DBDuration - GetTime()

local MBStart, MBDuration = GetSpellCooldown(114192)
MBCD = MBStart + MBDuration - GetTime()

local ReckStart, ReckDuration = GetSpellCooldown(1719)
ReckCD = ReckStart + ReckDuration - GetTime()

local CommandingStart, CommandingDuration = GetSpellCooldown(469)
CommandingCD = CommandingStart + CommandingDuration - GetTime()


Staggering = false
Pierce = false
Disrupt = false
Victory = false

if select(2,GetTalentRowSelectionInfo(2)) == 6 then Victory = true end
if select(2,GetTalentRowSelectionInfo(3)) == 7 then Staggering = true end
if select(2,GetTalentRowSelectionInfo(3)) == 8 then Pierce = true end
if select(2,GetTalentRowSelectionInfo(3)) == 9 then Disrupt = true end

--------------------------------------PVP Tools----------------------------------------------------
function IsSlowed(unit)
local Slows = {
--WARLOCK--
18223,
--WARRIOR--
12323,
1715,
--PALADIN--
110300,                             
--DK--
45524,
50435,
--DRUID--
58180,
102355,
--HUNTER--
5116,
72217,
--MAGE--
7302,
116,
120,
44614,
--PRIEST--
124468,
15407,
--ROGUE--
26679,
3408,
--SHAMAN--
8056,
--MONK--
116095
              }
for i=1,#Slows do
        if UnitDebuffID(unit,Slows[i])
                then
                        return true
                end
        end
end

function SlowImmune(unit)
local Freedom = {
--Hand of Freedom--
1044,
--Dispersion--
47585
             }
for i=1,#Freedom do
        if UnitBuffID(unit,Freedom[i])
                then
                        return true
                end
        end
end

function IsImmune(unit)
local Immunity = {
110700, --Divine Shield
1022, --Hand of Protection
45438, --Ice Block
31224,--Cloak of Shadows
19263, --Deterrence
97417--BrittleBarrier
					}
for i=1,#Immunity do
        if UnitBuffID(unit,Immunity[i])
                then
                        return true
                end
        end
end


---Engineer Glove Cooldown---
GloveCD = GetInventoryItemCooldown(&amp;quot;player&amp;quot;,10)

---Trinket 1 Cooldown---
Trinket1CD = GetInventoryItemCooldown(&amp;quot;player&amp;quot;,13)

---Trinket 2 Cooldown---
Trinket2CD = GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14)

---Healthstone Cooldown---
HealthstoneCD = select(2,GetItemCooldown(5512))


--------------------------------------HEALTH/POWER TOOLS------------------------------------------
Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)

-------------------------------------BUFFS--------------------------------------------------------

---Bloodlust Check---
Bloodlust = UnitBuffID(&amp;quot;player&amp;quot;, 2825)  
or UnitBuffID(&amp;quot;player&amp;quot;, 32182) 
or UnitBuffID(&amp;quot;player&amp;quot;, 80353) 
or UnitBuffID(&amp;quot;player&amp;quot;, 90355)


---Is Target Disarmed---
Disarmed = false

Weapons = { 676, 51722, 91644, 64058, 117368 }

for y=1, #Weapons do
   if UnitDebuffID(&amp;quot;target&amp;quot;, Weapons[y]) then Disarmed = true
   end
end


---Time to die---

TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and PlayerCombat then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

---dummy---
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 99
	end
end

PQ_ImpalingSpearCD = 0
PQ_ImpalingSpear = 122224

PQ_Frame = nil
PQ_CanCast = true
PQ_CanBT = true
PQ_CanImpalingSpear = true
function PQ_Frame_OnEvent(self, event, ...)
	if ... ~= &amp;quot;player&amp;quot; then return end
	
	local spellID = select(5, ...)
	
	if spellID ~= PQ_ImpalingSpear then
		PQ_GCD = GetTime() + 0.7
		PQ_CanCast = false
	end
			
	if spellID == PQ_ImpalingSpear then
		PQ_ImpalingSpearCD = GetTime() + 5
		PQ_CanImpalingSpear = false
	end
end
-----------------------------------------GLYPHS--------------------------------------------------

----------------------------------------TALENTS----------------------------------------------------
AvatarTalent = false
BloodbathTalent = false

if select(2,GetTalentRowSelectionInfo(6)) == 16 then AvatarTalent = true end

if select(2,GetTalentRowSelectionInfo(6)) == 17 then BloodbathTalent = true end
------------------------------------------RACIALS(Death Knight)--------------------------------------------
---Race Check---
Troll = IsSpellKnown(26297)
Orc = IsSpellKnown(20572)
Goblin = IsSpellKnown(69041)
BloodElf = IsSpellKnown(25046)

---Cooldown Check---
local TrollStart,TrollDuration = GetSpellCooldown(26297)
TrollCD = TrollStart + TrollDuration - GetTime()
local OrcStart,OrcDuration = GetSpellCooldown(20572)
OrcCD = OrcStart + OrcDuration - GetTime()
local BloodElfStart,BloodElfDuration = GetSpellCooldown(25046)
BloodElfCD = BloodElfStart + BloodElfDuration - GetTime()
local GoblinStart,GoblinDuration = GetSpellCooldown(69041)
GoblinCD = GoblinStart + GoblinDuration - GetTime()



------------------------------------------POTIONS--------------------------------------------------
VirmenCD = select(2,GetItemCooldown(76089))
Virmen = GetItemCount(76089)

MoguCD = select(2,GetItemCooldown(76095))
Mogu = GetItemCount(76095)

SharkCD = select(2,GetItemCooldown(77589))
Shark = GetItemCount(77589)




---Time to die---

TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and PlayerCombat then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

---dummy---
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 99
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Whirlwind</Name><Default>false</Default><SpellID>1680</SpellID><Actions></Actions><Lua>local MeatCleaver = MeatCleaver

if not MeatCleaver then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Raging Blow</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>local RagingBlow, RagingBlowcount, MeatCleaver, MeatCount, CSCD, BTCD, ColossusSmash = 
RagingBlow, RagingBlowcount, MeatCleaver, MeatCount, CSCD, BTCD, ColossusSmash

if (RagingBlowcount == 2 and MeatCleaver and MeatCount &amp;gt;= 1)
or (MeatCleaver and MeatCount &amp;gt;= 1 and (ColossusSmash
or CSCD &amp;gt;= 3
or (BTCD &amp;gt;= 1 and not Buff(&amp;quot;player&amp;quot;,131116,3)))) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wild Strike -High-</Name><Default>false</Default><SpellID>100130</SpellID><Actions></Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local Bloodsurge, BTCD = Bloodsurge, BTCD

if Bloodsurge
and Targethealth &amp;gt;= 20
and BTCD &amp;lt;= 1 then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wild Strike - Mid-</Name><Default>false</Default><SpellID>100130</SpellID><Actions></Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local Bloodsurge = Bloodsurge

if Bloodsurge then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shockwave</Name><Default>false</Default><SpellID>46968</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_Shockwave_enable then return false end

if PQI:IsHotkeys(PQI_SoapboxFury_Shockwave_key) 
and GetCurrentKeyBoardFocus() == nil then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heroic Throw</Name><Default>false</Default><SpellID>57755</SpellID><Actions></Actions><Lua>local ColossusSmash = ColossusSmash

if not ColossusSmash then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Rage, ColossusSmash, BattleBuff, CommandingCD = Rage, ColossusSmash, BattleBuff, CommandingCD

if Rage &amp;lt; 70 and not ColossusSmash then
	if not BattleBuff() then
	CastSpellByName(GetSpellInfo(6673))
	elseif BattleBuff() then
		if CommandingCD &amp;lt; 1 then
		CastSpellByName(GetSpellInfo(469))
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wild Strike -Low-</Name><Default>false</Default><SpellID>100130</SpellID><Actions></Actions><Lua>if CleaveSwap then return false end

local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ColossusSmash = ColossusSmash

if ColossusSmash and Targethealth &amp;gt;= 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Impending Victory</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)

local IVCD = IVCD

if Targethealth &amp;gt;= 20 then
	if IVCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(103840))
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>End</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local BattleBuff, Rage, CommandingCD = BattleBuff, Rage, CommandingCD

if Rage &amp;lt; 70 then
	if not BattleBuff() then
	CastSpellByName(GetSpellInfo(6673))
	elseif BattleBuff() then
		if CommandingCD &amp;lt; 1 then
		CastSpellByName(GetSpellInfo(469))
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Toggle Key]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted then
  PQR_RotationStarted = false
  if PQI_SoapboxFury_CleaveToggle_enable and (CleaveSwap or not CleaveSwap) then CleaveSwap = false 
  PQR_WriteToChat(&amp;quot;Cleave: \124cFFE61515Disabled&amp;quot;)
  PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cleave: Disabled&amp;quot;, nil, &amp;apos;ff0000&amp;apos;) end
  if PQI_SoapboxFury_CooldownToggle_enable and CooldownsSwap then
  PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Enabled&amp;quot;) end
  if PQI_SoapboxFury_CooldownToggle_enable and not CooldownsSwap then
  PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;) end
  if PQI_SoapboxFury_HamstringToggle_enable and HamstringSwap then
  PQR_WriteToChat(&amp;quot;Hamstring: \124cFF15E615Enabled&amp;quot;) end
  if PQI_SoapboxFury_HamstringToggle_enable and not HamstringSwap then
  PQR_WriteToChat(&amp;quot;Hamstring: \124cFFE61515Disabled&amp;quot;) end
end

if (CleaveSwap and not PQI_SoapboxFury_CleaveToggle_enable) then CleaveSwap = false 
PQR_WriteToChat(&amp;quot;Cleave: \124cFFE61515Disabled&amp;quot;)
PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cleave: Disabled&amp;quot;, nil, &amp;apos;ff0000&amp;apos;)
end

if (CooldownsSwap and not PQI_SoapboxFury_CooldownToggle_enable) then CooldownsSwap = false 
PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;)
PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cooldowns: Disabled&amp;quot;, nil, &amp;apos;ff0000&amp;apos;)
end

if (HamstringSwap and not PQI_SoapboxFury_HamstringToggle_enable) then HamstringSwap = false 
PQR_WriteToChat(&amp;quot;Hamstring: \124cFFE61515Disabled&amp;quot;)
PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Hamstring: Disabled&amp;quot;, nil, &amp;apos;ff0000&amp;apos;)
end

if modtime == nil then
	modtime = 0
end

if PQI_SoapboxFury_CleaveToggle_enable then
	if PQI:IsHotkeys(PQI_SoapboxFury_CleaveToggle_key) and GetTime() - modtime &amp;gt; 1 
	and GetCurrentKeyBoardFocus() == nil then
	modtime = GetTime()
		if CleaveSwap then 
			CleaveSwap = nil
			PQR_WriteToChat(&amp;quot;Cleave: \124cFFE61515Disabled&amp;quot;)
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cleave: Disabled&amp;quot;, nil, &amp;apos;ff0000&amp;apos;)
		else
			CleaveSwap = 1
			PQR_WriteToChat(&amp;quot;Cleave: \124cFF15E615Enabled&amp;quot;)
			PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cleave: Enabled&amp;quot;, nil, &amp;apos;0fffff&amp;apos;)
		end
	end
end

if PQI_SoapboxFury_CooldownToggle_enable then
	if PQI:IsHotkeys(PQI_SoapboxFury_CooldownToggle_key) and GetTime() - modtime &amp;gt; 1 
	and GetCurrentKeyBoardFocus() == nil then
	modtime = GetTime()
		if CooldownsSwap then 
			CooldownsSwap = nil
			PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;)
		else
			CooldownsSwap = 1
			PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Enabled&amp;quot;)
		end
	end
end

if PQI_SoapboxFury_HamstringToggle_enable then
	if PQI:IsHotkeys(PQI_SoapboxFury_HamstringToggle_key) and GetTime() - modtime &amp;gt; 1 
	and GetCurrentKeyBoardFocus() == nil then
	modtime = GetTime()
		if HamstringSwap then 
			HamstringSwap = nil
			PQR_WriteToChat(&amp;quot;Hamstring: \124cFFE61515Disabled&amp;quot;)
		else
			HamstringSwap = 1
			PQR_WriteToChat(&amp;quot;Hamstring: \124cFF15E615Enabled&amp;quot;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Table]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if SOAPBOX_FURY then return false end

local config = {
	name  = &amp;apos;Fury&amp;apos;,
	author  = &amp;apos;Soapbox&amp;apos;,
	abilities = {
		{  name = &amp;quot;Tier14 4pc&amp;quot;,
			enable = false,
		},	
		{  name = &amp;quot;Heroic Leap Middle Mouse&amp;quot;,
			enable = false,
			newSection = true,
		},
		{  name = &amp;quot;Mogu Power&amp;quot;,
			enable = true,
			newSection = true,
		},
		{  name = &amp;quot;Die by the Sword&amp;quot;,
			enable = true,
			newSection = true,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 30,
				step = 5,
			},
		},
		{  name = &amp;quot;Victory Rush&amp;quot;,
			enable = false,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 90,
				step = 5,
			},
		},
		{  name = &amp;quot;Enraged Regeneration&amp;quot;,
			enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 20,
				step = 5,
			},
		},
		{  name = &amp;quot;Healthstone&amp;quot;,
			enable = true,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 65,
				step = 5,
			},
		},
	},
	hotkeys = {
		{ name = &amp;quot;Cleave Toggle&amp;quot;,  		 enable = true, hotkeys = {&amp;apos;la&amp;apos;}, },
		{ name = &amp;quot;Heroic Leap&amp;quot;,  		 enable = true, hotkeys = {&amp;apos;lc&amp;apos;}, },
		{ name = &amp;quot;Cooldown Toggle&amp;quot;,  	 enable = true, hotkeys = {&amp;apos;ls&amp;apos;}, },
		{ name = &amp;quot;Demoralizing Banner&amp;quot;,  enable = false, hotkeys = {&amp;apos;ls&amp;apos;}, },
 		{ name = &amp;quot;Mocking Banner&amp;quot;,  	 enable = false, hotkeys = {&amp;apos;ls&amp;apos;}, },
 		{ name = &amp;quot;Tier 3 Talent&amp;quot;,  		 enable = false, hotkeys = {&amp;apos;ls&amp;apos;}, },
 		{ name = &amp;quot;Rallying Cry&amp;quot;,  		 enable = true, hotkeys = {&amp;apos;rs&amp;apos;}, },
 		{ name = &amp;quot;Hamstring Toggle&amp;quot;,  	 enable = false, hotkeys = {&amp;apos;ls&amp;apos;}, },
 		{ name = &amp;quot;Intimidating Shout&amp;quot;,   enable = false, hotkeys = {&amp;apos;ls&amp;apos;}, },
 		{ name = &amp;quot;Shockwave&amp;quot;,  	 		 enable = false, hotkeys = {&amp;apos;ls&amp;apos;}, },
	},	
}       
SOAPBOX_FURY = PQI:AddRotation(config)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Initialize---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsMounted()
or UnitChannelInfo(&amp;quot;player&amp;quot;) 
or UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) == nil
or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) 
or UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
or UnitAffectingCombat(&amp;quot;player&amp;quot;) == nil
or UnitBuffID(&amp;quot;player&amp;quot;,5384) ~= nil
or UnitDebuffID(&amp;quot;target&amp;quot;,1499)
or (UnitBuffID(&amp;quot;target&amp;quot;,123250) and UnitBuffID(&amp;quot;target&amp;quot;,123181))
or UnitDebuffID(&amp;quot;target&amp;quot;,19503)
then return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Cleave] Cleave</Name><Default>false</Default><SpellID>845</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_CleaveToggle_enable then return false end
if not CleaveSwap then return false end

local MaxRage = (UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= (UnitPowerMax(&amp;quot;player&amp;quot;) - 10))
local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ColossusSmash, Rage = ColossusSmash, Rage

if ((ColossusSmash and Rage &amp;gt;= 80)
and Targethealth &amp;gt;= 20)
or MaxRage then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Cleave] Raging Blow</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_CleaveToggle_enable then return false end
if not CleaveSwap then return false end

local RagingBlow, RagingBlowcount, MeatCleaver, MeatCount, CSCD, BTCD, ColossusSmash = 
RagingBlow, RagingBlowcount, MeatCleaver, MeatCount, CSCD, BTCD, ColossusSmash

if (RagingBlowcount == 2 and MeatCleaver and MeatCount &amp;gt;= 1)
or (MeatCleaver and MeatCount &amp;gt;= 1 and (ColossusSmash
or CSCD &amp;gt;= 3
or (BTCD &amp;gt;= 1 and not Buff(&amp;quot;player&amp;quot;,131116,3)))) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Cleave] Whirlwind</Name><Default>false</Default><SpellID>1680</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_CleaveToggle_enable then return false end
if not CleaveSwap then return false end

local MeatCleaver = MeatCleaver

if not MeatCleaver 
or not Buff(&amp;quot;player&amp;quot;,85739,1.5) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Berserker Rage</Name><Default>false</Default><SpellID>18499</SpellID><Actions></Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local Enrage, RagingBlow, RagingBlowcount = Enrage, RagingBlow, RagingBlowcount

if (Enrage or ( RagingBlow ~= nil and RagingBlowcount == 2
and Targethealth &amp;gt;= 20 )) == false
or (Buff(&amp;quot;player&amp;quot;,1719,10) and RagingBlow == nil) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Skull Banner</Name><Default>false</Default><SpellID>114207</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_CooldownToggle_enable then return false end
if not CooldownsSwap then return false end

local Recklessness, Bloodlust = Recklessness, Bloodlust

if Recklessness or Bloodlust then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Demoralizing Banner</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_DemoralizingBanner_enable then return false end

local DBCD = DBCD

if PQI:IsHotkeys(PQI_SoapboxFury_DemoralizingBanner_key) 
and GetCurrentKeyBoardFocus() == nil 
and DBCD &amp;lt; 1 then
  CastSpellByName(GetSpellInfo(114203)) 
  if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end 
  return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mocking Banner</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_MockingBanner_enable then return false end

local MBCD = MBCD

if PQI:IsHotkeys(PQI_SoapboxFury_MockingBanner_key) 
and GetCurrentKeyBoardFocus() == nil 
and MBCD &amp;lt; 1 then
  CastSpellByName(GetSpellInfo(114192)) 
  if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end 
  return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tier 3 Talent</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_Tier3Talent_enable then return false end

local Staggering, Pierce, Disrupt, StaggerCD, PiercingCD, DisruptingCD = Staggering, Pierce,
Disrupt, StaggerCD, PiercingCD, DisruptingCD

if PQI:IsHotkeys(PQI_SoapboxFury_Tier3Talent_key) 
and GetCurrentKeyBoardFocus() == nil then
	if Staggering == true then
		if StaggerCD &amp;lt; 1 then
		CastSpellByName(GetSpellInfo(107566))
		end
	elseif Pierce == true then
		if PiercingCD &amp;lt; 1 then
		CastSpellByName(GetSpellInfo(12323))
		end
	elseif Disrupt == true then
		if DisruptingCD &amp;lt; 1 then
		CastSpellByName(GetSpellInfo(102060))
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hamstring</Name><Default>false</Default><SpellID>1715</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_HamstringToggle_enable then return false end
if not HamstringSwap or SlowImmune(&amp;quot;target&amp;quot;) then return false end

local SlowThem = true

if IsSlowed(&amp;quot;target&amp;quot;)
or SlowImmune(&amp;quot;target&amp;quot;)
then
SlowThem = false
end


if SlowThem == false
and UnitDebuffID(&amp;quot;target&amp;quot;,1715)
then
	local String, _, _, _, _, _, Stringtimer = UnitDebuffID(&amp;quot;target&amp;quot;, 1715)
	if String then
		if Stringtimer - GetTime() &amp;lt; 1 then
			return true
		end
	end
end
		
		
if SlowThem == true
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Recklessness</Name><Default>false</Default><SpellID>1719</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_CooldownToggle_enable then return false end
if not CooldownsSwap then return false end
if not (UnitLevel(&amp;quot;target&amp;quot;) == -1 or UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;boss1&amp;quot;)) then return false end

local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local TTD = (Targethealth - 3 * (Targethealth / TimeToDie))
local Bloodbath, ColossusSmash, ColossusSmashtimer, AvatarTalent, CSCD, BloodbathTalent, AvatarTalent, Avatar, BBCD =
Bloodbath, ColossusSmash, ColossusSmashtimer, AvatarTalent, CSCD, BloodbathTalent, AvatarTalent, Avatar, BBCD
local T14 = PQI_SoapboxFury_Tier144pc_enable


if (AvatarTalent == true and (CSCD &amp;lt; 2 or (ColossusSmash and ColossusSmashtimer - GetTime() &amp;gt;= 5)))
or (BloodbathTalent == true and (Bloodbath and (T2D(&amp;quot;target&amp;quot;) &amp;gt; 192 or Targethealth &amp;lt; 20)))
or (AvatarTalent == false and BloodbathTalent == false)
or (Targethealth &amp;lt; 20 and T2D(&amp;quot;target&amp;quot;) &amp;lt;= 12) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Avatar</Name><Default>false</Default><SpellID>107574</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_CooldownToggle_enable then return false end
if not CooldownsSwap then return false end


local TTD = (Targethealth - 3 * (Targethealth / TimeToDie))
local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ReckCD, Recklessness = ReckCD, Recklessness
local T14 = PQI_SoapboxFury_Tier144pc_enable

if (((ReckCD &amp;gt;= 180 or Recklessness) 
or (Targethealth &amp;gt;= 20 and TimeToDie &amp;gt; 195)
or (Targethealth &amp;lt; 20 and T14)) or TTD &amp;lt;= 20) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Rallying Cry</Name><Default>false</Default><SpellID>97462</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_RallyingCry_enable then return false end

if PQI:IsHotkeys(PQI_SoapboxFury_RallyingCry_key) 
and GetCurrentKeyBoardFocus() == nil then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Intimidating Shout</Name><Default>false</Default><SpellID>5246</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_IntimidatingShout_enable then return false end

if PQI:IsHotkeys(PQI_SoapboxFury_IntimidatingShout_key) 
and GetCurrentKeyBoardFocus() == nil then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_Healthstone_enable then return false end

local value = tonumber(PQI_SoapboxFury_Healthstone_value)
local HealthstoneCD = select(2,GetItemCooldown(5512))
local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)


if  Playerhealth &amp;lt;= value
and HealthstoneCD &amp;lt; 1
then
UseItemByName(5512, &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Enraged Regeneration</Name><Default>false</Default><SpellID>55694</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_EnragedRegeneration_enable then return false end

local value = tonumber(PQI_SoapboxFury_EnragedRegeneration_value)
local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
local Enrage = Enrage

if  Playerhealth &amp;lt;= value 
and Enrage then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Die by the Sword</Name><Default>false</Default><SpellID>118038</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_DiebytheSword_enable then return false end

local value = tonumber(PQI_SoapboxFury_DiebytheSword_value)
local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

if  Playerhealth &amp;lt;= value then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Whirlwind</Name><Default>false</Default><SpellID>1680</SpellID><Actions></Actions><Lua>return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Dragon Roar</Name><Default>false</Default><SpellID>118000</SpellID><Actions></Actions><Lua>local ColossusSmash, BloodbathTalent, Bloodbath = ColossusSmash, BloodbathTalent, Bloodbath

if ((BloodbathTalent == true and Bloodbath)
or BloodbathTalent == false) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Heroic Strike</Name><Default>false</Default><SpellID>78</SpellID><Actions></Actions><Lua>local ColossusSmash, Rage = ColossusSmash, Rage

if ColossusSmash
and Rage &amp;gt;= 90 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Bladestorm</Name><Default>false</Default><SpellID>46924</SpellID><Actions></Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local CSCD, BTCD, ColossusSmash = CSCD, BTCD, ColossusSmash

if CSCD &amp;gt;= 5 and not ColossusSmash and BTCD &amp;gt;= 2 and Targethealth &amp;gt;= 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE Toggle Key]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted then
  PQR_RotationStarted = false
  if PQI_SoapboxFury_CleaveToggle_enable and CleaveSwap then CleaveSwap = false 
  PQR_WriteToChat(&amp;quot;Cleave: \124cFFE61515Disabled&amp;quot;)
  PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cleave: Disabled&amp;quot;, nil, &amp;apos;ff0000&amp;apos;) end
  if PQI_SoapboxFury_CooldownToggle_enable and CooldownsSwap then
  PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Enabled&amp;quot;) end
  if PQI_SoapboxFury_CooldownToggle_enable and not CooldownsSwap then
  PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;) end
  if PQI_SoapboxFury_HamstringToggle_enable and HamstringSwap then
  PQR_WriteToChat(&amp;quot;Hamstring: \124cFF15E615Enabled&amp;quot;) end
  if PQI_SoapboxFury_HamstringToggle_enable and not HamstringSwap then
  PQR_WriteToChat(&amp;quot;Hamstring: \124cFFE61515Disabled&amp;quot;) end
end

if (CleaveSwap and not PQI_SoapboxFury_CleaveToggle_enable) then CleaveSwap = false 
PQR_WriteToChat(&amp;quot;Cleave: \124cFFE61515Disabled&amp;quot;)
PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cleave: Disabled&amp;quot;, nil, &amp;apos;ff0000&amp;apos;)
end

if (CooldownsSwap and not PQI_SoapboxFury_CooldownToggle_enable) then CooldownsSwap = false 
PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;)
end

if (HamstringSwap and not PQI_SoapboxFury_HamstringToggle_enable) then HamstringSwap = false 
PQR_WriteToChat(&amp;quot;Hamstring: \124cFFE61515Disabled&amp;quot;)
end

if modtime == nil then
	modtime = 0
end

if PQI_SoapboxFury_CooldownToggle_enable then
	if PQI:IsHotkeys(PQI_SoapboxFury_CooldownToggle_key) and GetTime() - modtime &amp;gt; 1 
	and GetCurrentKeyBoardFocus() == nil then
	modtime = GetTime()
		if CooldownsSwap then 
			CooldownsSwap = nil
			PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;)
		else
			CooldownsSwap = 1
			PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Enabled&amp;quot;)
		end
	end
end

if PQI_SoapboxFury_HamstringToggle_enable then
	if PQI:IsHotkeys(PQI_SoapboxFury_HamstringToggle_key) and GetTime() - modtime &amp;gt; 1 
	and GetCurrentKeyBoardFocus() == nil then
	modtime = GetTime()
		if HamstringSwap then 
			HamstringSwap = nil
			PQR_WriteToChat(&amp;quot;Hamstring: \124cFFE61515Disabled&amp;quot;)
		else
			HamstringSwap = 1
			PQR_WriteToChat(&amp;quot;Hamstring: \124cFF15E615Enabled&amp;quot;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Racials]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Troll, Orc, Goblin, BloodElf, TrollCD, OrcCD, BloodElfCD, GoblinCD, Rage, Bloodbath, 
Recklessness, Bloodlust = Troll, Orc, Goblin, BloodElf, TrollCD, OrcCD, BloodElfCD, GoblinCD, Rage,
Bloodbath, Recklessness, Bloodlust

--Troll Berserking--
if Troll == true then 
	if TrollCD &amp;lt; 1 
	and not UnitBuffID(&amp;quot;player&amp;quot;, 3045) 
	and not UnitBuffID(&amp;quot;player&amp;quot;, 2825)  
	and not UnitBuffID(&amp;quot;player&amp;quot;, 32182) 
	and not UnitBuffID(&amp;quot;player&amp;quot;, 80353) 
	and not UnitBuffID(&amp;quot;player&amp;quot;, 90355) then
	CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
	return true
	end
end

--Orc Blood Fury--
if Orc == true then 
	if (UnitLevel(&amp;quot;target&amp;quot;) == -1 or UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;boss1&amp;quot;))
	and OrcCD &amp;lt; 1 
	and (Bloodbath 
	or Bloodlust
	or Recklessness) then
	CastSpellByName(GetSpellInfo(20572),&amp;quot;player&amp;quot;)
	return true
	end
end

--Blood Elf Arcane Torrent--
if BloodElf == true then 
	if BloodElfCD &amp;lt; 1 
	and Rage &amp;lt; 40 then
	CastSpellByName(GetSpellInfo(25046),&amp;quot;player&amp;quot;)
	return true
	end
end

--Goblin Rocket Barrage--
if Goblin == true then 
	if GoblinCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(69041),&amp;quot;target&amp;quot;)
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Override]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsMouseButtonDown(3) then
	RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Potions]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_MoguPower_enable then return false end

local MoguCD, Mogu, Bloodlust = MoguCD, Mogu, Bloodlust

if Bloodlust
and MoguCD &amp;lt; 1 
and Mogu &amp;gt; 0 then
UseItemByName(76095, &amp;quot;player&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Rotation Swap]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFrost_SingleAoESwap_enable then return false end

-- AoE Toggle Code
if not GetCVar(&amp;quot;FrostAoEToggle&amp;quot;) then RegisterCVar(&amp;quot;FrostAoEToggle&amp;quot;, 0) end
if not GetCVar(&amp;quot;InGameToggle&amp;quot;) then RegisterCVar(&amp;quot;InGameToggle&amp;quot;, 0) end

if tonumber(GetCVar(&amp;quot;InGameToggle&amp;quot;)) == 0 then 
 InGameSwitcher = false
elseif tonumber(GetCVar(&amp;quot;InGameToggle&amp;quot;)) == 1 then
 InGameSwitcher = true
end
if not SwitchTimer then SwitchTimer = GetTime() - 1 end

if PQI:IsHotkeys(PQI_SoapboxFrost_SingleAoESwap_key)
 and GetCurrentKeyBoardFocus() == nil 
 and not InGameSwitcher
 and GetTime() - SwitchTimer &amp;gt;= 1 then
  SwitchTimer = GetTime()
 if tonumber(GetCVar(&amp;quot;FrostAoEToggle&amp;quot;)) == 0 then 
  SetCVar(&amp;quot;FrostAoEToggle&amp;quot;, 2) 
 elseif tonumber(GetCVar(&amp;quot;FrostAoEToggle&amp;quot;)) == 5 then
  SetCVar(&amp;quot;FrostAoEToggle&amp;quot;, 1)
 end
end

if tonumber(GetCVar(&amp;quot;FrostAoEToggle&amp;quot;)) == 1 then SetCVar(&amp;quot;FrostAoEToggle&amp;quot;, 0) PQR_SwapRotation(&amp;quot;Frost (Soapbox Frost Death Knight Serial FR1359)&amp;quot;)
  PQR_WriteToChat(&amp;quot;AoE: \124cFFE61515Disabled&amp;quot;)
elseif tonumber(GetCVar(&amp;quot;FrostAoEToggle&amp;quot;)) == 2 then SetCVar(&amp;quot;FrostAoEToggle&amp;quot;, 5) PQR_SwapRotation(&amp;quot;Frost AoE (Soapbox Frost Death Knight Serial FR1359)&amp;quot;)
  PQR_WriteToChat(&amp;quot;AoE: \124cFF15E615Enabled&amp;quot;) end

if tonumber(GetCVar(&amp;quot;FrostAoEToggle&amp;quot;)) == 5 then AoEToggle = true else AoEToggle = false end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Boss Special]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--abilities lower in the rotation from being cast.
if PQR_resumeAttack == nil then
	PQR_resumeAttack = 0
elseif PQR_resumeAttack &amp;gt; GetTime() then
	return true
else
	PQR_resumeAttack = 0
end


--IMPORTANT: Change this if you have any cleaves that would do damage to a secondary target
--as part of your single target rotation. Better to be safe than sorry! 
--Used for : Spirit Kings
local cleaveClass = false
local isAOE = strmatch(strupper(PQR_RotationName), &amp;quot;AOE&amp;quot;) --checks if we are in AOE mode.

for i=1,4 do
	local bossCheck = &amp;quot;boss&amp;quot;..i

	if UnitExists(bossCheck) then
		
		local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16)
		local bossCasting,_,_,_,_,castEnd = UnitCastingInfo(bossCheck)
		
		if npcID == 62511 or npcID == 62711 then --Amber-Shaper Un&amp;apos;sok or Amber Monstrosity
			local reshapeName = GetSpellInfo(122370)
			local reshapeLife = UnitDebuff(&amp;quot;player&amp;quot;, reshapeName)
			
			if reshapeLife ~= nil then
				local playerCasting = UnitCastingInfo(&amp;quot;vehicle&amp;quot;)
				local playerCasting2 = UnitCastingInfo(&amp;quot;player&amp;quot;)
				--grab spell names for abilities:
				local amberExplosion = GetSpellInfo(122402)
				
				--interrupt self if casting amber explosion
				if playerCasting == amberExplosion then
					--Press the 2nd button (Struggle for Control)
					RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
					return true
				end
				
				--interrupt self if casting amber explosion
				if playerCasting2 == amberExplosion then
					--Press the 2nd button (Struggle for Control)
					RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
					return true
				end
				
				--interrupt the target if casting amber explosion
				if bossCasting and bossCasting == amberExplosion then
					TargetUnit(bossCheck)
					--Press the 1st button (Amber Strike)
					RunMacroText(&amp;quot;/click OverrideActionBarButton1&amp;quot;)
					return true
				end
				
				if UnitExists(&amp;quot;boss2&amp;quot;) then
					if bossCheck == &amp;quot;boss2&amp;quot; then 
						return true --prevent the rotation from executing while reshaped
					end
				else
					return true
				end

			end
		elseif npcID == 62397 then -- Wind Lord Mel&amp;apos;jarak
        
        	if UnitExists(&amp;quot;focus&amp;quot;) then
        		local impalingDebuff = select(7, UnitDebuffID(&amp;quot;focus&amp;quot;, PQ_ImpalingSpear, &amp;quot;player&amp;quot;))
        		
        		if impalingDebuff and impalingDebuff - GetTime() &amp;lt; 7 or IsMouseButtonDown(3) then
        			if PQ_CanCast
        			and PQ_CanImpalingSpear then
        				if GetSpellInfo(PQ_ImpalingSpear) == UnitCastingInfo(&amp;quot;player&amp;quot;) then
        					return true 
        				end
        				RunMacroText(&amp;quot;/target [@focus]&amp;quot;)
        				RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
        				RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
        				return true
        			end
        		end
       		end
		elseif npcID == 60709 then --Spirit Kings: Qiang. (Impervious Shield)
			--Stop all attacks until 0.2 seconds after cast time ends and until buff (Impervious Shield) is gone.
			
			--only continue checking if we are targetting the boss or have no target.
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
				local impName = GetSpellInfo(117961)
				local impShieldBuff = UnitBuffID(bossCheck, 117961)
				
				if (bossCasting and bossCasting == impName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.2
					return true
				end
				
				if impShieldBuff then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end
			
		elseif npcID == 60710 then --Spirit Kings: Subetai. (Sleight of Hand)
			--Stop all attacks when casting Sleight of Hand, and until 0.2 seconds after cast time ends.
			--Also stop attacks if not stunned.
			
			--only continue checking if we are targetting the boss or have no target.
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
				local sleightName = GetSpellInfo(118162)
				local sleightBuff = UnitBuffID(bossCheck, 118162)
				--				  HoJ,   FoJ,  Kidney  
				local stunList = { 853, 105593, 408 }
				local isStunned = nil
				for _,v in ipairs(stunList) do
					local debuffCheck = UnitDebuffID(bossCheck, v)
					if debuffCheck then
						isStunned = true
					end
				end
				
				if (bossCasting and bossCasting == sleightName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.2
					return true
				end
				
				if sleightBuff and not isStunned then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end

		elseif npcID == 60701 then --Spirit Kings: Zian. (Shield of Darkness)
			--Stop all attacks until 0.5 seconds after cast time ends and until buff (Shield of Darkness) is gone.
						
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
				local sodName = GetSpellInfo(117697)
				local sodBuff = UnitBuffID(bossCheck, 117697)
				
				if (bossCasting and bossCasting == sodName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.5 --0.5 to account for lag... REALLY do not want to set this off.
					return true
				end
				
				if sodBuff then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end
		end
	end
end

--click button to leave.
--Gara&amp;apos;jal isn&amp;apos;t a boss while in the Spirit Realm.
local returnSoul = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
if returnSoul and returnSoul - GetTime() &amp;lt; 2 then 
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Bloodthirst Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local RagingBlow, Rage, BTCD, ColossusSmash = Ragingblow, Rage, BTCD, ColossusSmash



if Targethealth &amp;lt; 20
and ColossusSmash
and Rage &amp;gt;= 30 then
return false
end




---old---
---if Targethealth &amp;lt; 20
---and ColossusSmash
---and (Rage &amp;gt;= 30 or (Rage &amp;gt;= 10 and RagingBlow ~= nil)) then
---return false
---end

if BTCD &amp;gt; 0
and BTCD &amp;lt;= 1 then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Victory Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_VictoryRush_enable then return false end

local value = tonumber(PQI_SoapboxFury_VictoryRush_value)
local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
local IVCD, Victory, VCD = IVCD, Victory, VCD

if  Playerhealth &amp;lt;= value 
and UnitBuffID(&amp;quot;player&amp;quot;,138279) then
	if Victory == true and IVCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(103840))
	elseif Victory == false and VCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(34428))
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Storm Bolt</Name><Default>false</Default><SpellID>107570</SpellID><Actions></Actions><Lua>return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Bladestorm</Name><Default>false</Default><SpellID>46924</SpellID><Actions></Actions><Lua>local BloodbathTalent, Bloodbath = BloodbathTalent, Bloodbath

if (BloodbathTalent == true and Bloodbath) 
or BloodbathTalent == false then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Raging Blow -High-</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>if CleaveSwap then return false end

local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)
local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ColossusSmash, RagingBlowcount, CSCD, BTCD, Rage = ColossusSmash, RagingBlowcount, CSCD, 
BTCD, Rage
	


if RagingBlowcount == 2
and ColossusSmash
and Targethealth &amp;gt;= 20 then
return true
end











---Old---
---if Targethealth &amp;gt;= 20 then
	---if targetGUID == 60913
	---or ColossusSmash
	---or RagingBlowcount == 2
	---or CSCD &amp;gt;= 3
	---or (BTCD &amp;gt;= 1 and not Buff(&amp;quot;player&amp;quot;,131116,3)) then
	---return true
	---end
---elseif Targethealth &amp;lt; 20 then
	---if ColossusSmash
	---or (Rage &amp;gt;= 50 
	---and (RagingBlowcount == 2
	---or CSCD &amp;gt;= 3
---	or (BTCD &amp;gt;= 1 and not Buff(&amp;quot;player&amp;quot;,131116,3)))) then
---	return true
	---end
---end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARRIOR>