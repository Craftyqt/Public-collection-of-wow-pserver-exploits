<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>[DPS] Shield Slam</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(23922) == true 
	and PQR_SpellAvailable(23922) == true
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
	
		CastSpellByName(GetSpellInfo(23922),&amp;quot;target&amp;quot;)
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Revenge</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(6572) == true 
	and PQR_SpellAvailable(6572) == true
	and IsSpellInRange(GetSpellInfo(6572),&amp;quot;target&amp;quot;) == 1 then
	
		if (UnitPowerMax(&amp;quot;player&amp;quot;) == 120 and UnitPower(&amp;quot;player&amp;quot;) &amp;lt;= 100)
			or  (UnitPowerMax(&amp;quot;player&amp;quot;) == 100 and UnitPower(&amp;quot;player&amp;quot;) &amp;lt;= 90) then
				CastSpellByName(GetSpellInfo(6572),&amp;quot;target&amp;quot;)
				return true
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Thunderclap</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if AOE_MODE == false
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(6343)
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1
	and UnitDebuffID(&amp;quot;target&amp;quot;,115798) == nil then
	
		CastSpellByName(GetSpellInfo(6343)) 
		return true 	
end

if AOE_MODE == true
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(6343)
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
	
		CastSpellByName(GetSpellInfo(6343)) 
		return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Commanding Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if SHOUT_MODE == &amp;quot;COMMANDING&amp;quot;
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(469) == true 
	and PQR_SpellAvailable(469) == true then
	
		if (UnitPowerMax(&amp;quot;player&amp;quot;) == 120 and UnitPower(&amp;quot;player&amp;quot;) &amp;lt;= 90)
			or  (UnitPowerMax(&amp;quot;player&amp;quot;) == 100 and UnitPower(&amp;quot;player&amp;quot;) &amp;lt;= 70)
			or UnitBuffID(&amp;quot;player&amp;quot;,469) == nil then
				CastSpellByName(GetSpellInfo(469))
				return true
		end	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Support] Battle Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if SHOUT_MODE == &amp;quot;BATTLE&amp;quot;
	and UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(6673) == true 
	and PQR_SpellAvailable(6673) == true then
	
		if (UnitPowerMax(&amp;quot;player&amp;quot;) == 120 and UnitPower(&amp;quot;player&amp;quot;) &amp;lt;= 90)
			or  (UnitPowerMax(&amp;quot;player&amp;quot;) == 100 and UnitPower(&amp;quot;player&amp;quot;) &amp;lt;= 70)
			or UnitBuffID(&amp;quot;player&amp;quot;,6673) == nil then
				CastSpellByName(GetSpellInfo(6673))
				return true
		end	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Heroic Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
---------------------------------------------------------------------------

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and AOE_MODE == false
	and IsPlayerSpell(78) == true 
	and PQR_SpellAvailable(78) == true
	and IsSpellInRange(GetSpellInfo(78),&amp;quot;target&amp;quot;) == 1 then
	
		if (UnitPowerMax(&amp;quot;player&amp;quot;) == 120 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 100)
			or (UnitPowerMax(&amp;quot;player&amp;quot;) == 100 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 90) then
			
				if UnitBuffID(&amp;quot;player&amp;quot;,112048) ~= nil
					or UnitBuffID(&amp;quot;player&amp;quot;,2565) ~= nil
					or PLAYERHP &amp;gt; 90 then
						CastSpellByName(GetSpellInfo(78),&amp;quot;target&amp;quot;)
						return true
				end 
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Cleave</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
---------------------------------------------------------------------------

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and AOE_MODE == true
	and IsPlayerSpell(845) == true 
	and PQR_SpellAvailable(845) == true
	and IsSpellInRange(GetSpellInfo(845),&amp;quot;target&amp;quot;) == 1 then
	
		if (UnitPowerMax(&amp;quot;player&amp;quot;) == 120 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 100)
			or (UnitPowerMax(&amp;quot;player&amp;quot;) == 100 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 90) then
			
				if UnitBuffID(&amp;quot;player&amp;quot;,112048) ~= nil
					or UnitBuffID(&amp;quot;player&amp;quot;,2565) ~= nil
					or PLAYERHP &amp;gt; 90 then
						CastSpellByName(GetSpellInfo(845),&amp;quot;target&amp;quot;)
						return true
				end  
				
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF] Shield Block</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
---------------------------------------------------------------------------

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and (SHIELD_MODE == &amp;quot;BLOCK&amp;quot; or SHIELD_MODE == &amp;quot;BOTH&amp;quot;)
	and IsPlayerSpell(2565) == true 
	and PQR_SpellAvailable(2565) == true then
	
	
		if PQI_MavminsPROTECTIONFUNCTIONS_ShieldBlockValue_enable == true
			and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_ShieldBlockValue_value
			and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 60 then
				CastSpellByName(GetSpellInfo(2565))
				return true
		end
		
		if PQI_MavminsPROTECTIONFUNCTIONS_ShieldBlockValue_enable == false
			and (PLAYERHP &amp;lt;=90 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 60) then
				CastSpellByName(GetSpellInfo(2565))
				return true
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF] Shield Barrier</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
---------------------------------------------------------------------------

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and SHIELD_MODE == &amp;quot;BARRIER&amp;quot;
	and IsPlayerSpell(112048) == true 
	and PQR_SpellAvailable(112048) == true then
	
		if  (PLAYERHP &amp;lt;= 35 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 20) then
			CastSpellByName(GetSpellInfo(112048))
			return true
		end
		
		if PQI_MavminsPROTECTIONFUNCTIONS_ShieldBarrierValue_enable == true
			and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_ShieldBarrierValue_value
			and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 60 then
				CastSpellByName(GetSpellInfo(112048))
				return true
		end
		
		if 	PQI_MavminsPROTECTIONFUNCTIONS_ShieldBarrierValue_enable == false
			and (PLAYERHP &amp;lt;=90 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 60) then
				CastSpellByName(GetSpellInfo(112048))
				return true
		end
end

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and SHIELD_MODE == &amp;quot;BOTH&amp;quot;
	and UnitBuffID(&amp;quot;player&amp;quot;,132404) ~= nil
	and IsPlayerSpell(112048) == true 
	and PQR_SpellAvailable(112048) == true then
	
		if  (PLAYERHP &amp;lt;= 35 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 20) then
			CastSpellByName(GetSpellInfo(112048))
			return true
		end
		
		if PQI_MavminsPROTECTIONFUNCTIONS_ShieldBarrierValue_enable == true
			and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_ShieldBarrierValue_value
			and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 35 then
				CastSpellByName(GetSpellInfo(112048))
				return true
		end
		
		if 	PQI_MavminsPROTECTIONFUNCTIONS_ShieldBarrierValue_enable == false
			and (PLAYERHP &amp;lt;=90 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 60) then
				CastSpellByName(GetSpellInfo(112048))
				return true
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Initialise PQI --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- PQInterface Settings

if PQI_INITIALISED == nil then

	local keybinds = {
	                name    = &amp;quot;PROTECTION HOTKEYS&amp;quot;,
	                author  = &amp;quot;Mavmins&amp;quot;,
	                hotkeys = {
	                
	           	{	name	= &amp;quot;AoE Mode Toggle&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;ls&amp;apos;},
				},
	           	{	name	= &amp;quot;Shield Mode Toggle&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;ls&amp;apos;},
				},
	           	{	name	= &amp;quot;Shout Mode Toggle&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;ls&amp;apos;},
				},
				{	name	= &amp;quot;Pause Rotation&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Pause Key Hold&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Offensive CD Toggle&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Avatar&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;ls&amp;apos;},
				},
				{	name	= &amp;quot;Recklessness&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;ls&amp;apos;},
				},
				{	name	= &amp;quot;Bladestorm&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;ls&amp;apos;},
				},
				{	name	= &amp;quot;Skull Banner&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;ls&amp;apos;},
				},
				{	name	= &amp;quot;Shattering Throw&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;la&amp;apos;},
				},
				{	name	= &amp;quot;Shield Wall&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;lc&amp;apos;},
				},
				{	name	= &amp;quot;Last Stand&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;ra&amp;apos;},
				},
				{	name	= &amp;quot;Rallying Cry&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Demoralizing Banner&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Mocking Banner&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Demoralizing Shout&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Staggering Shout&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Intimidating Shout&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Piercing Howl&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Mass Spell Reflect&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Intervene Mouseover&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Vigilance Mouseover&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
				{	name	= &amp;quot;Heroic Leap&amp;quot;,
					enable	= false,
					hotkeys	= {&amp;apos;rs&amp;apos;},
				},
			},
		}
	
	local functions = {
	                name    = &amp;quot;PROTECTION FUNCTIONS&amp;quot;,
	                author  = &amp;quot;Mavmins&amp;quot;,
	                abilities = {
				{ 	name	= &amp;quot;Chat Notifications&amp;quot;,
					tooltip	= &amp;quot;Show Notifications in Chat Window&amp;quot;,
					enable	= true,
					newSection  = true,
				},
				{ 	name	= &amp;quot;Mouse Click Override&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 3,
						step	= 1,
						tooltip	= &amp;quot;Set mouse button for force cast on spell bar.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Enable Self Healing&amp;quot;,
					tooltip	= &amp;quot;Enables profile using Enraged Regeneration or Impending Victory&amp;quot;,
					enable	= true,
					newSection  = true,
				},
				{ 	name	= &amp;quot;Auto Enraged Regeneration&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;Set Enraged Regeneration HP threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Auto Victory Rush&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;Set Impending Victory HP threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;Set Healthstone HP threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Auto Shattering Throw&amp;quot;,
					tooltip	= &amp;quot;Automatic Shattering Throw usage under Heroism.&amp;quot;,
					enable	= false,
					newSection  = true,
				},
				{ 	name	= &amp;quot;Auto Avatar&amp;quot;,
					tooltip	= &amp;quot;Auto Avatar with Skull Banner and Heroism&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Auto Skull Banner&amp;quot;,
					tooltip	= &amp;quot;Auto Skull banner under Heroism&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Auto Recklessness&amp;quot;,
					tooltip	= &amp;quot;Auto Recklessness on CD&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Auto Bladestorm&amp;quot;,
					tooltip	= &amp;quot;Auto Bladestorm in AoE&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Auto Bloodbath&amp;quot;,
					tooltip	= &amp;quot;Auto Bloodbath on CD&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Auto Stormbolt&amp;quot;,
					tooltip	= &amp;quot;Auto Stormbolt on CD&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Use Execute&amp;quot;,
					tooltip	= &amp;quot;Enables Execute Ability&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Auto Interrupts&amp;quot;,
					tooltip	= &amp;quot;Auto interrupt spells using Pummel and Disrupting Shout.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Auto Racials&amp;quot;,
					tooltip	= &amp;quot;Automatic Racial usage under Heroism.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Auto Potion&amp;quot;,
					tooltip	= &amp;quot;Automatic pot usage under Heroism.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Engineer CDs&amp;quot;,
					tooltip	= &amp;quot;Automatic use synapse springs.&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Auto Trinkets&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 60,
						step	= 5,
						tooltip	= &amp;quot;Set Auto Trinket HP threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Auto Shield Wall&amp;quot;,
					enable	= true,
					newSection  = true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 50,
						step	= 5,
						tooltip	= &amp;quot;Set automatic Shield Wall HP threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Auto Last Stand&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 50,
						step	= 5,
						tooltip	= &amp;quot;Set automatic Last Stand HP Threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Auto Rallying Cry&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 50,
						step	= 5,
						tooltip	= &amp;quot;Set automatic Rallying Cry HP Threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Auto Demoralizing Banner&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 50,
						step	= 5,
						tooltip	= &amp;quot;Set automatic Demoralizing Banner HP Threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Auto Demoralizing Shout&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 50,
						step	= 5,
						tooltip	= &amp;quot;Set automatic Demoralizing Shout HP Threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Shield Barrier Value&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 50,
						step	= 5,
						tooltip	= &amp;quot;Set Shield Barrier HP Threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Shield Block Value&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 50,
						step	= 5,
						tooltip	= &amp;quot;Set Shield Block HP Threshold.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Auto Disable CDs OOC&amp;quot;,
					tooltip	= &amp;quot;Disable USE_CDS out of combat.&amp;quot;,
					enable	= false,
				},
	                },
	        }
	        
		MAVMINS_PROTECTION = PQI:AddRotation(keybinds)
		MAVMINS_PROTECTION = PQI:AddRotation(functions)
		
		PQI_INITIALISED = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Initialise Profile--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Load LUA data files.
if PQR_RotationStarted then
	PQR_RotationStarted = false

	-- Load required data files
	if PQR_LoadLua ~= nil then
	--	if PQR_LoadLua(&amp;quot;PQR_MavminsElemental2.lua&amp;quot;) == false then
	--		PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_MavminsElemental2_DATA.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
	--		PQR_StopRotation()
	--		return true
	--	end
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737You&amp;apos;re missing PQR_PQI.lua - It&amp;apos;s required to run the profile! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
end


if ProtInformation == nil then
	ProtInformation = true
	print(&amp;quot;|cffFF0099--------------------------------------------------------------------&amp;quot;)
	print(&amp;quot;|cffFF0099*-*-*-*-*-*MavminsProtection Warrior Profile v1.0*-*-*-*-*-*-*&amp;quot;)
	print(&amp;quot;|cffFF0099--------------------------------------------------------------------&amp;quot;)

	
	-- Initialize Variables
	if AOE_MODE == nil then 
		AOE_MODE = false 
	end
	
	if SHIELD_MODE == nil then
		SHIELD_MODE = &amp;quot;BARRIER&amp;quot;
	end
	
	if SHOUT_MODE == nil then
		SHOUT_MODE = &amp;quot;BATTLE&amp;quot;
	end
	
	--initialize CDS
	if USE_OFF_CDS == nil then
		USE_OFF_CDS = false
	end
	
	if PAUSE_PROFILE == nil then
		PAUSE_PROFILE = false
	end

end

	--initialize PQI text but im sure theres a better way to do this !!
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BARRIER&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - SHIELD BARRIER - BATTLE SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BARRIER&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - SHIELD BARRIER - BATTLE SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BARRIER&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - SHIELD BARRIER - COMMANDING SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BARRIER&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - SHIELD BARRIER - COMMANDING SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BLOCK&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - SHIELD BLOCK - BATTLE SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BLOCK&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - SHIELD BLOCK - BATTLE SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BLOCK&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - SHIELD BLOCK - COMMANDING SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BLOCK&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - SHIELD BLOCK - COMMANDING SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
		if AOE_MODE == true and SHIELD_MODE == &amp;quot;BARRIER&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - SHIELD BARRIER - BATTLE SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BARRIER&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - SHIELD BARRIER - BATTLE SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BARRIER&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - SHIELD BARRIER - COMMANDING SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BARRIER&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - SHIELD BARRIER - COMMANDING SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BLOCK&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - SHIELD BLOCK - BATTLE SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BLOCK&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - SHIELD BLOCK - BATTLE SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BLOCK&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - SHIELD BLOCK - COMMANDING SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BLOCK&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - SHIELD BLOCK - COMMANDING SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	----
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BOTH&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - BLOCK &amp; BARRIER - BATTLE SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BOTH&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - BLOCK &amp; BARRIER - BATTLE SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BOTH&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - BLOCK &amp; BARRIER - COMMANDING SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == false and SHIELD_MODE == &amp;quot;BOTH&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;SINGLE TARGET - BLOCK &amp; BARRIER - COMMANDING SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BOTH&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - BLOCK &amp; BARRIER - COMMANDING SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BOTH&amp;quot; and SHOUT_MODE == &amp;quot;COMMANDING&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - BLOCK &amp; BARRIER - COMMANDING SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BOTH&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == false then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - BLOCK &amp; BARRIER - BATTLE SHOUT - NOT USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	if AOE_MODE == true and SHIELD_MODE == &amp;quot;BOTH&amp;quot; and SHOUT_MODE == &amp;quot;BATTLE&amp;quot; and USE_OFF_CDS == true then
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;MULTI TARGET - BLOCK &amp; BARRIER - BATTLE SHOUT - USING CDS&amp;quot;, nil, &amp;quot;00FFFF&amp;quot;)
	end
	
	------------

ShoutStart, ShoutDuration = GetSpellCooldown(102060)
SHOUT_CD = ShoutStart + ShoutDuration - GetTime()</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PAUSE --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil then
	COMBAT_CHECK = 1
end

if UnitAffectingCombat(&amp;quot;player&amp;quot;) == nil then

	if PQI_MavminsPROTECTIONFUNCTIONS_AutoDisableCDsOOC_enable == true 
		and USE_OFF_CDS ~= false
		and COMBAT_CHECK == 1 then
			USE_OFF_CDS = false
		COMBAT_CHECK = 0
	end
end	

-- Don&amp;apos;t automatically start if we&amp;apos;re mounted.
if IsMounted() then return true end

-- Don&amp;apos;t automatically start if we&amp;apos;re dead or a ghost.
if UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) then return true end

if UnitAffectingCombat(&amp;quot;player&amp;quot;) == nil then return true end

if PQI_MavminsPROTECTIONHOTKEYS_PauseKeyHold_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_PauseKeyHold_key)
	and not GetCurrentKeyBoardFocus()
	or PAUSE_PROFILE == true then
	
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Devastate-Sunder</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(20243) == true 
	and PQR_SpellAvailable(20243) == true
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
	
		if select(4, UnitDebuffID(&amp;quot;target&amp;quot;, 113746)) ~= 3 then
		
			CastSpellByName(GetSpellInfo(20243),&amp;quot;target&amp;quot;)
			return true
			
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Devastate-Filler</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(20243) == true 
	and PQR_SpellAvailable(20243) == true
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
		
		CastSpellByName(GetSpellInfo(20243),&amp;quot;target&amp;quot;)
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- AoE Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_AoEModeToggle_enable == true then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_AoEModeToggle_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
		modtime = GetTime()
		if AOE_MODE == true then
	    	AOE_MODE = false
	    	if PQI_MavminsPROTECTIONFUNCTIONS_ChatNotifications_enable then
	    		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFFE61515Disabled&amp;quot;)
	    	end
	    else
	        AOE_MODE = true
	        if PQI_MavminsPROTECTIONFUNCTIONS_ChatNotifications_enable then
	  			PQR_WriteToChat(&amp;quot;Area of Effect: \124cFF15E615Enabled&amp;quot;)
	  		end
	    end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Shout Mode Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_ShoutModeToggle_enable == true then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_ShoutModeToggle_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
		modtime = GetTime()
		if SHOUT_MODE == &amp;quot;BATTLE&amp;quot; then
	    	SHOUT_MODE = &amp;quot;COMMANDING&amp;quot;
	    	if PQI_MavminsPROTECTIONFUNCTIONS_ChatNotifications_enable then
	    		PQR_WriteToChat(&amp;quot;Using COMMANDING shout&amp;quot;)
	    	end
	    else
	        SHOUT_MODE = &amp;quot;BATTLE&amp;quot;
	        if PQI_MavminsPROTECTIONFUNCTIONS_ChatNotifications_enable then
	  			PQR_WriteToChat(&amp;quot;using BATTLE shout&amp;quot;)
	  		end
	    end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Shield Mode Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_ShieldModeToggle_enable == true then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_ShieldModeToggle_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
	
		modtime = GetTime()
		
		if SHIELD_MODE == &amp;quot;BARRIER&amp;quot; then
	    	SHIELD_MODE = &amp;quot;BLOCK&amp;quot;
	    	return true
	    end
	    
	    if SHIELD_MODE == &amp;quot;BLOCK&amp;quot; then
	    	SHIELD_MODE = &amp;quot;BOTH&amp;quot;
	    	return true
	    end
	    
	    if SHIELD_MODE == &amp;quot;BOTH&amp;quot; then
	    	SHIELD_MODE = &amp;quot;BARRIER&amp;quot;
	    	return true
	    end
	    
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[OFF CD] Dragon Roar</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(118000) == true 
	and PQR_SpellAvailable(118000) == true
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
	
		CastSpellByName(GetSpellInfo(118000),&amp;quot;target&amp;quot;)
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Stormbolt</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(107570) == true 
	and PQR_SpellAvailable(107570) == true
	and IsSpellInRange(GetSpellInfo(107570),&amp;quot;target&amp;quot;) == 1 then
	
		CastSpellByName(GetSpellInfo(107570),&amp;quot;target&amp;quot;)
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Bloodbath</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(12292) == true 
	and PQR_SpellAvailable(12292) == true
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
	
		CastSpellByName(GetSpellInfo(12292))
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[OFF CD] Skull Banner</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_SkullBanner_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_SkullBanner_key)
	and not GetCurrentKeyBoardFocus() then
	
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsPlayerSpell(114207) == true 
			and PQR_SpellAvailable(114207) == true then
				CastSpellByName(GetSpellInfo(114207))
				return true
		end
end

if PQI_MavminsPROTECTIONFUNCTIONS_AutoSkullBanner_enable == true then
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsPlayerSpell(114207) == true 
			and PQR_SpellAvailable(114207) == true then
			
				if UnitBuffID(&amp;quot;player&amp;quot;,32182) ~= nil --Heroism
					or UnitBuffID(&amp;quot;player&amp;quot;,2825) ~= nil --Bloodlust
					or UnitBuffID(&amp;quot;player&amp;quot;,90355) ~= nil --Ancient Hysteria
					or UnitBuffID(&amp;quot;player&amp;quot;,80353) ~= nil then --Timewarp
						CastSpellByName(GetSpellInfo(114207))
						return true
				end
		end
end

if USE_OFF_CDS == true then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(114207) == true 
		and PQR_SpellAvailable(114207) == true then
			CastSpellByName(GetSpellInfo(114207))
			return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[OFF CD] Avatar</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_Avatar_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_Avatar_key)
	and not GetCurrentKeyBoardFocus() then
	
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsPlayerSpell(107574) == true 
			and PQR_SpellAvailable(107574) == true
			and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
				CastSpellByName(GetSpellInfo(107574))
				return true
		end
end

if PQI_MavminsPROTECTIONFUNCTIONS_AutoAvatar_enable == true then
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsPlayerSpell(107574) == true 
			and PQR_SpellAvailable(107574) == true
			and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
			
				if (UnitBuffID(&amp;quot;player&amp;quot;,32182) ~= nil --Heroism
					or UnitBuffID(&amp;quot;player&amp;quot;,2825) ~= nil --Bloodlust
					or UnitBuffID(&amp;quot;player&amp;quot;,80353) ~= nil --Timewarp
					or UnitBuffID(&amp;quot;player&amp;quot;,90355) ~= nil) --Ancient Hysteria
					and UnitBuffID(&amp;quot;player&amp;quot;,114207) ~= nil then --skull banner
						CastSpellByName(GetSpellInfo(107574))
						return true
				end
		end
end


if USE_OFF_CDS == true and UnitBuffID(&amp;quot;player&amp;quot;,114207) ~= nil then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(107574) == true 
		and PQR_SpellAvailable(107574) == true
		and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
			CastSpellByName(GetSpellInfo(107574))
			return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[OFF CD] Shattering Throw</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_ShatteringThrow_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_ShatteringThrow_key)
	and not GetCurrentKeyBoardFocus() then
	
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsPlayerSpell(64382) == true 
			and PQR_SpellAvailable(64382) == true
			and IsSpellInRange(GetSpellInfo(64382),&amp;quot;target&amp;quot;) == 1
			and not PQR_IsMoving(0.3) then
				CastSpellByName(GetSpellInfo(64382),&amp;quot;target&amp;quot;)
				return true
		end
end

if PQI_MavminsPROTECTIONFUNCTIONS_AutoShatteringThrow_enable == true then
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsPlayerSpell(64382) == true 
			and PQR_SpellAvailable(64382) == true
			and IsSpellInRange(GetSpellInfo(64382),&amp;quot;target&amp;quot;) == 1
			and not PQR_IsMoving(0.3) then
			
				if UnitBuffID(&amp;quot;player&amp;quot;,32182) ~= nil --Heroism
					or UnitBuffID(&amp;quot;player&amp;quot;,2825) ~= nil --Bloodlust
					or UnitBuffID(&amp;quot;player&amp;quot;,90355) ~= nil --Ancient Hysteria
					or UnitBuffID(&amp;quot;player&amp;quot;,80353) ~= nil then --Timewarp
						CastSpellByName(GetSpellInfo(64382),&amp;quot;target&amp;quot;)
						return true
				end
		end
end

if USE_OFF_CDS == true then
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(64382) == true 
		and PQR_SpellAvailable(64382) == true
		and IsSpellInRange(GetSpellInfo(64382),&amp;quot;target&amp;quot;) == 1
		and not PQR_IsMoving(0.3) then
			CastSpellByName(GetSpellInfo(64382),&amp;quot;target&amp;quot;)
			return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Shield Wall</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_AutoShieldWall_enable == true then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(871) == true 
		and PQR_SpellAvailable(871) == true
		and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoShieldWall_value then
			CastSpellByName(GetSpellInfo(871))
			return true
	end

end

if PQI_MavminsPROTECTIONHOTKEYS_ShieldWall_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_ShieldWall_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(871) == true 
		and PQR_SpellAvailable(871) == true then
			CastSpellByName(GetSpellInfo(871))
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[OFF CD] Recklessness</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONFUNCTIONS_AutoRecklessness_enable == true then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(1719) == true 
		and PQR_SpellAvailable(1719) == true
		and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
		
			CastSpellByName(GetSpellInfo(1719))
			return true
	end
	
end

if USE_OFF_CDS == true and UnitBuffID(&amp;quot;player&amp;quot;,114207) ~= nil then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(1719) == true 
		and PQR_SpellAvailable(1719) == true
		and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
		
			CastSpellByName(GetSpellInfo(1719))
			return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Last Stand</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_AutoLastStand_enable == true then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(12975) == true 
		and PQR_SpellAvailable(12975) == true
		and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoLastStand_value then
			CastSpellByName(GetSpellInfo(12975))
			return true
	end

end

if PQI_MavminsPROTECTIONHOTKEYS_LastStand_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_LastStand_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(12975) == true 
		and PQR_SpellAvailable(12975) == true then
			CastSpellByName(GetSpellInfo(12975))
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Demoralizing Banner</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_AutoDemoralizingBanner_enable == true then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(114203) == true 
		and PQR_SpellAvailable(114203) == true
		and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoDemoralizingBanner_value then
			CastSpellByName(GetSpellInfo(114203),nil)
			if SpellIsTargeting() then
				CameraOrSelectOrMoveStart()
				CameraOrSelectOrMoveStop()
			end
	end

end

if PQI_MavminsPROTECTIONHOTKEYS_DemoralizingBanner_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_DemoralizingBanner_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(114203) == true 
		and PQR_SpellAvailable(114203) == true then
			CastSpellByName(GetSpellInfo(114203),nil)
			if SpellIsTargeting() then
				CameraOrSelectOrMoveStart()
				CameraOrSelectOrMoveStop()
			end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Rallying Cry</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_AutoRallyingCry_enable == true then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(97462) == true 
		and PQR_SpellAvailable(97462) == true
		and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoRallyingCry_value then
			CastSpellByName(GetSpellInfo(97462))
			return true
	end

end

if PQI_MavminsPROTECTIONHOTKEYS_RallyingCry_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_RallyingCry_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(97462) == true 
		and PQR_SpellAvailable(97462) == true then
			CastSpellByName(GetSpellInfo(97462))
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF] Spell Reflection</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(9, UnitCastingInfo(&amp;quot;target&amp;quot;)) == false 
	or select(8, UnitChannelInfo(&amp;quot;target&amp;quot;)) == false then
		if PQR_SpellAvailable(23920) == true
		 	and IsPlayerSpell(23920) == true
		 	and ((PQR_SpellAvailable(102060) == false and PQR_SpellAvailable(6552) == false)
		 	or IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 0) then
			    CastSpellByName(GetSpellInfo(23920))
			    return true
		 end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Defensive Stance --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GetSpecialization() == 3 then
	if GetShapeshiftForm() ~= 2	then
		CastShapeshiftForm(2)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[OFF CD] Berserker Rage</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and PQR_SpellAvailable(18499) == true
	and IsSpellInRange(GetSpellInfo(78),&amp;quot;target&amp;quot;) == 1
	and UnitBuffID(&amp;quot;player&amp;quot;,12880) == nil then 
		CastSpellByName(GetSpellInfo(18499))
		return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[INTERRUPT] Pummel</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONFUNCTIONS_AutoInterrupts_enable == true then

		if select(9, UnitCastingInfo(&amp;quot;target&amp;quot;)) == false
			or select(8, UnitChannelInfo(&amp;quot;target&amp;quot;)) == false then
			
			if IsPlayerSpell(102060) == true and PQR_SpellAvailable(102060) == true then			 	
				return false
			end
		 
			 if PQR_SpellAvailable(6552) == true
			 	and IsPlayerSpell(6552) == true
			 	and IsSpellInRange(tostring(GetSpellInfo(6552)), &amp;quot;target&amp;quot;) == 1 then
			 	
				 	if IsPlayerSpell(102060) == true and PQR_SpellAvailable(102060) == false then			 	
					    CastSpellByName(GetSpellInfo(6552),&amp;quot;target&amp;quot;)
					    return true
					end
					
				 	if IsPlayerSpell(102060) == false then			 	
					    CastSpellByName(GetSpellInfo(6552),&amp;quot;target&amp;quot;)
					    return true
					end
			 end
			 
		end
		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[INTERRUPT] Disrupting Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONFUNCTIONS_AutoInterrupts_enable == true then

		if select(9, UnitCastingInfo(&amp;quot;target&amp;quot;)) == false
			or select(8, UnitChannelInfo(&amp;quot;target&amp;quot;)) == false then
		 
			 if PQR_SpellAvailable(102060) == true
			 	and IsPlayerSpell(102060) == true
			 	and IsSpellInRange(tostring(GetSpellInfo(6552)), &amp;quot;target&amp;quot;) == 1 then
				    CastSpellByName(GetSpellInfo(102060))
				    return true
			 end
			 
		end
		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Demoralizing Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_AutoDemoralizingShout_enable == true then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(1160) == true 
		and PQR_SpellAvailable(1160) == true
		and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoDemoralizingShout_value then
			CastSpellByName(GetSpellInfo(1160))
			return true
	end

end

if PQI_MavminsPROTECTIONHOTKEYS_DemoralizingShout_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_DemoralizingShout_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(1160) == true 
		and PQR_SpellAvailable(1160) == true then
			CastSpellByName(GetSpellInfo(1160))
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Mouse Force Cast --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Change &amp;quot;3&amp;quot; to whatever mouse button you&amp;apos;d like.

if PQI_MavminsPROTECTIONFUNCTIONS_MouseClickOverride_enable == true then

	if IsMouseButtonDown(PQI_MavminsPROTECTIONFUNCTIONS_MouseClickOverride_value) then
		RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
		return true
	end

end

if PQI_MavminsPROTECTIONFUNCTIONS_MouseClickOverride_enable == false then

	if IsMouseButtonDown(3) then
		RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName())
		return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF] Vigilance Mouseover</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_VigilanceMouseover_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_VigilanceMouseover_key)
	and not GetCurrentKeyBoardFocus() then
	
		if IsPlayerSpell(114030) == true
			and UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and PQR_SpellAvailable(114030) == true
			and IsSpellInRange(GetSpellInfo(114030),&amp;quot;mouseover&amp;quot;) == 1 then
			
				CastSpellByName(GetSpellInfo(114030),&amp;quot;mouseover&amp;quot;)
				return true
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[HEAL] Impending / Victory Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_EnableSelfHealing_enable == true
	and PQI_MavminsPROTECTIONFUNCTIONS_AutoVictoryRush_enable == true then
	
	--victory rush
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(34428) == true 
		and PQR_SpellAvailable(34428) == true
		and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1
		and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoVictoryRush_value then
			CastSpellByName(GetSpellInfo(34428),&amp;quot;target&amp;quot;)
			return true
	end
	
	
	--impending victory
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(103840) == true 
		and PQR_SpellAvailable(103840) == true
		and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1
		and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 10
		and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoVictoryRush_value then
			CastSpellByName(GetSpellInfo(103840),&amp;quot;target&amp;quot;)
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[OFF CD] Bladestorm</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_Bladestorm_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_Bladestorm_key)
	and not GetCurrentKeyBoardFocus() then
	
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsPlayerSpell(46924) == true 
			and PQR_SpellAvailable(46924) == true then
				CastSpellByName(GetSpellInfo(46924))
				return true
		end
end

if PQI_MavminsPROTECTIONFUNCTIONS_AutoBladestorm_enable == true then
		if UnitAffectingCombat(&amp;quot;player&amp;quot;)
			and IsPlayerSpell(46924) == true 
			and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1
			and PQR_SpellAvailable(46924) == true then
			
				if AOE_MODE == true then
					CastSpellByName(GetSpellInfo(46924))
					return true
				end
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Staggering Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_StaggeringShout_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_StaggeringShout_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(107566) == true 
		and PQR_SpellAvailable(107566) == true then
			CastSpellByName(GetSpellInfo(107566))
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Piercing Howl</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_PiercingHowl_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_PiercingHowl_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(12323) == true 
		and PQR_SpellAvailable(12323) == true then
			CastSpellByName(GetSpellInfo(12323))
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Mass Spell Reflect</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_MassSpellReflect_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_MassSpellReflect_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(114028) == true 
		and PQR_SpellAvailable(114028) == true then
			CastSpellByName(GetSpellInfo(114028))
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[HEAL] Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local HEALTHSTONECD = select(2,GetItemCooldown(5512))
local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if GetItemCount(5512) &amp;gt; 0 then

	if PQI_MavminsPROTECTIONFUNCTIONS_Healthstone_enable == true then
		if PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_Healthstone_value
			and HEALTHSTONECD == 0 then
			UseItemByName(5512, &amp;quot;player&amp;quot;)
		end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF] Intervene / Safeguard Mouseover</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_InterveneMouseover_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_InterveneMouseover_key)
	and not GetCurrentKeyBoardFocus() then
	
		if IsPlayerSpell(3411) == true --intervene
			and PQR_SpellAvailable(3411) == true
			and IsSpellInRange(GetSpellInfo(3411),&amp;quot;mouseover&amp;quot;) == 1 then
			
				CastSpellByName(GetSpellInfo(3411),&amp;quot;mouseover&amp;quot;)
				return true
		end
		
		if IsPlayerSpell(114029) == true --safeguard
			and PQR_SpellAvailable(114029) == true
			and IsSpellInRange(GetSpellInfo(114029),&amp;quot;mouseover&amp;quot;) == 1 then
			
				CastSpellByName(GetSpellInfo(114029),&amp;quot;mouseover&amp;quot;)
				return true
		end
		

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Intimidating Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_IntimidatingShout_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_IntimidatingShout_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(5246) == true 
		and PQR_SpellAvailable(5246) == true then
			CastSpellByName(GetSpellInfo(5246))
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[OFF CD] Shockwave</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and AOE_MODE == true
	and IsPlayerSpell(46968) == true 
	and PQR_SpellAvailable(46968) == true
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 1 then
	
		CastSpellByName(GetSpellInfo(46968),&amp;quot;target&amp;quot;)
		return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Offensive Cooldowns Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_OffensiveCDToggle_enable == true then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_OffensiveCDToggle_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
		modtime = GetTime()
		if USE_OFF_CDS == true then
	    	USE_OFF_CDS = false
	    	if PQI_MavminsPROTECTIONFUNCTIONS_ChatNotifications_enable then
	    		PQR_WriteToChat(&amp;quot;OFFENSIVE CDS: \124cFFE61515Disabled&amp;quot;)
	    	end
	    else
	        USE_OFF_CDS = true
	        if PQI_MavminsPROTECTIONFUNCTIONS_ChatNotifications_enable then
	  			PQR_WriteToChat(&amp;quot;OFFENSIVE CDS: \124cFF15E615Enabled&amp;quot;)
	  		end
	    end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[HEAL] Enraged Regeneration</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_EnableSelfHealing_enable == true
	and PQI_MavminsPROTECTIONFUNCTIONS_AutoEnragedRegeneration_enable == true then

	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(55694) == true 
		and PQR_SpellAvailable(55694) == true
		and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoEnragedRegeneration_value then
			CastSpellByName(GetSpellInfo(55694))
			return true
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Engineering Skills --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsPlayerSpell(110403) == true
	and PQI_MavminsPROTECTIONFUNCTIONS_EngineerCDs_enable == true then
	
	-- Frag Belt
	if GetInventoryItemCooldown(&amp;quot;player&amp;quot;, 6) == 0 then
			-- Cast Frag Belt on target
			if GetCurrentKeyBoardFocus() == nil 
				and UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;mouseover&amp;quot;)
				and UnitIsDead(&amp;quot;target&amp;quot;) ~= 1
			then
				UseInventoryItem(6)
				if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end
			end
	end
	
	
	-- Synapse Springs
	if GetInventoryItemCooldown(&amp;quot;player&amp;quot;,10) == 0 then
		-- Cast Synapse Springs
		UseInventoryItem(10)
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Heroic Leap</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_HeroicLeap_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_HeroicLeap_key)
	and not GetCurrentKeyBoardFocus() then
	
		if PQR_SpellAvailable(6544) == true
			and IsPlayerSpell(6544) == true then
			
				CastSpellByName(GetSpellInfo(6544))
				if SpellIsTargeting() then
					CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop()
				end
				return true
			
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Utility] Racials</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
-----------------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_AutoRacials_enable == true
	or USE_OFF_CDS == true then
	
		-- Draenei: Gift of the Naaru
		if IsPlayerSpell(59544) and PQR_SpellAvailable(59544) and Playerhealth &amp;lt; 60 then
			CastSpellByName(GetSpellInfo(59544),&amp;quot;player&amp;quot;)
			return true
		end
		
		-- Troll: Berserking	
		if IsPlayerSpell(26297) == true and PQR_SpellAvailable(26297) == true then
			CastSpellByName(tostring(GetSpellInfo(26297)))
			return true
		end
				
		-- Orc: Blood Fury
		if IsPlayerSpell(33697) == true and PQR_SpellAvailable(33697) == true then
			CastSpellByName(tostring(GetSpellInfo(33697)))
			return true
		end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Heroic Throw / Throw</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--heroic throw
if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and IsPlayerSpell(57755) == true 
	and PQR_SpellAvailable(57755) == true
	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 0 then
	
		CastSpellByName(GetSpellInfo(57755),&amp;quot;target&amp;quot;)
		return true
end

--throw

--if UnitAffectingCombat(&amp;quot;player&amp;quot;)
--	and IsPlayerSpell(122475) == true 
--	and PQR_SpellAvailable(122475) == true
--	and not PQR_IsMoving(0.3)
--	and IsSpellInRange(GetSpellInfo(23922),&amp;quot;target&amp;quot;) == 0 then
	
--		CastSpellByName(GetSpellInfo(122475),&amp;quot;target&amp;quot;)
--		return true
--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Execute</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local TARGETHP = 100*(UnitHealth(&amp;quot;target&amp;quot;)/UnitHealthMax(&amp;quot;target&amp;quot;))
--------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_UseExecute_enable == true then

	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and AOE_MODE == false
		and TARGETHP &amp;lt; 20
		and IsPlayerSpell(5308) == true 
		and PQR_SpellAvailable(5308) == true
		and IsSpellInRange(GetSpellInfo(78),&amp;quot;target&amp;quot;) == 1
		and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 30 then
	
			CastSpellByName(GetSpellInfo(5308),&amp;quot;target&amp;quot;)
			return true
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause Toggle --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQI_MavminsPROTECTIONHOTKEYS_PauseRotation_enable then

	if modtime == nil then
		modtime = 0
	end
	
	if  PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_PauseRotation_key) and GetTime() - modtime &amp;gt; 0.3 and not GetCurrentKeyBoardFocus() then
		modtime = GetTime()
		if PAUSE_PROFILE then
	    	PAUSE_PROFILE = false
	    	if PQI_MavminsPROTECTIONFUNCTIONS_ChatNotifications_enable then
	    		PQR_WriteToChat(&amp;quot;Rotation Pause: \124cFFE61515Disabled&amp;quot;)
	    	end
	    else
	        PAUSE_PROFILE = true
	        if PQI_MavminsPROTECTIONFUNCTIONS_ChatNotifications_enable then
	  			PQR_WriteToChat(&amp;quot;Rotation Pause: \124cFF15E615Enabled&amp;quot;)
	  		end
	    end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Auto Trinkets --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_AutoTrinkets_enable == true 
	and PLAYERHP &amp;lt;= PQI_MavminsPROTECTIONFUNCTIONS_AutoTrinkets_value then
	
	if GetInventoryItemCooldown(14)==0 then
		UseInventoryItem(14)
	end
	if GetInventoryItemCooldown(13)==0 then
		UseInventoryItem(13)
	end
	
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DPS] Incite / Ultimatium</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
---------------------------------------------------------------------------

if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and AOE_MODE == false
	and IsPlayerSpell(78) == true 
	and PQR_SpellAvailable(78) == true
	and IsSpellInRange(GetSpellInfo(78),&amp;quot;target&amp;quot;) == 1
	and (UnitBuffID(&amp;quot;player&amp;quot;,122016) ~= nil or UnitBuffID(&amp;quot;player&amp;quot;,122509) ~= nil) then
			
		if UnitBuffID(&amp;quot;player&amp;quot;,112048) ~= nil --shield barrier
			or UnitBuffID(&amp;quot;player&amp;quot;,2565) ~= nil --shield block
			or PLAYERHP &amp;gt; 90 then
				CastSpellByName(GetSpellInfo(78),&amp;quot;target&amp;quot;)
				return true
		end 

end


if UnitAffectingCombat(&amp;quot;player&amp;quot;)
	and AOE_MODE == true
	and IsPlayerSpell(845) == true 
	and PQR_SpellAvailable(845) == true
	and IsSpellInRange(GetSpellInfo(78),&amp;quot;target&amp;quot;) == 1
	and (UnitBuffID(&amp;quot;player&amp;quot;,122016) ~= nil or UnitBuffID(&amp;quot;player&amp;quot;,122509) ~= nil) then
			
		if UnitBuffID(&amp;quot;player&amp;quot;,112048) ~= nil --shield barrier
			or UnitBuffID(&amp;quot;player&amp;quot;,2565) ~= nil --shield block
			or PLAYERHP &amp;gt; 90 then
				CastSpellByName(GetSpellInfo(845),&amp;quot;target&amp;quot;)
				return true
		end 

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[INTERRUPT] All</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(&amp;quot;target&amp;quot;)
local channelName, _, _, _, channelStartTime, channelEndTime, _, _, channelInterruptable = UnitChannelInfo(&amp;quot;target&amp;quot;)
local PQR_InterruptPercent = 35
-------------------------------------------------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONFUNCTIONS_AutoInterrupts_enable == true then
	
	if select(9, UnitCastingInfo(&amp;quot;target&amp;quot;)) == false
	or select(8, UnitChannelInfo(&amp;quot;target&amp;quot;)) == false then
	
		if (IsPlayerSpell(102060) == true and PQR_SpellAvailable(102060) == true)
		and IsSpellInRange(tostring(GetSpellInfo(6552)), &amp;quot;target&amp;quot;) == 1 then	 	
		    CastSpellByName(GetSpellInfo(102060))
			return true
						    
			elseif (IsPlayerSpell(6552) == true and PQR_SpellAvailable(6552) == true)
			and IsSpellInRange(tostring(GetSpellInfo(6552)), &amp;quot;target&amp;quot;) == 1
			and ((IsPlayerSpell(102060) == true and SHOUT_CD &amp;lt;= 38.2 and SHOUT_CD &amp;gt; 0)
				or IsPlayerSpell(102060) == false) then	
				 CastSpellByName(GetSpellInfo(6552),&amp;quot;target&amp;quot;)
				 return true
					 
		end	
	end
		
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[DEF CD] Mocking Banner</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PLAYERHP = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)
----------------------------------------------------------------------------------

if PQI_MavminsPROTECTIONHOTKEYS_MockingBanner_enable == true 
	and PQI:IsHotkeys(PQI_MavminsPROTECTIONHOTKEYS_MockingBanner_key)
	and not GetCurrentKeyBoardFocus() then
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;)
		and IsPlayerSpell(114192) == true 
		and PQR_SpellAvailable(114192) == true then
			CastSpellByName(GetSpellInfo(114192),nil)
			if SpellIsTargeting() then
				CameraOrSelectOrMoveStart()
				CameraOrSelectOrMoveStop()
			end
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARRIOR>