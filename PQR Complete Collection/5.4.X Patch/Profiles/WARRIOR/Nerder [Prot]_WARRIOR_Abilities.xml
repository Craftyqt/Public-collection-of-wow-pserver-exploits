<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>[] Initialize []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	PQR_RotationStarted = false

PQR_WriteToChat(&amp;quot;|cffffff00Prot Warrior Profile Version - |cff33CC001.0&amp;quot;)
PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Prot Warrior Profile Verion - 1.0&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
PQR_SwapCheckTimer = 0

	-- Tables
	Nova_ValueCheck = { 
		[1] =	{ Var1 = nil,		Text = &amp;quot;Survivability&amp;quot;,		Var2 = nil },
		[2] =	{ Var1 = 35,		Text = &amp;quot;Healthstone&amp;quot;,		Var2 = 1 },
		[3] =	{ Var1 = 80,		Text = &amp;quot;Victory Rush&amp;quot;,		Var2 = 1 },
		[4] =	{ Var1 = nil,		Text = &amp;quot;Banner on toggle&amp;quot;,	Var2 = nil },
		[5] =	{ Var1 = nil,		Text = &amp;quot;Skull Banner&amp;quot;,		Var2 = 0 },
		[6] =	{ Var1 = nil,		Text = &amp;quot;Demo Banner&amp;quot;,		Var2 = 0 },
		[7] =	{ Var1 = nil,		Text = &amp;quot;Mocking Banner&amp;quot;,	Var2 = 1 },
		[8] =	{ Var1 = nil,		Text = &amp;quot;Other&amp;quot;,				Var2 = nil },
		[9] =	{ Var1 = nil,		Text = &amp;quot;Recklessness&amp;quot;,		Var2 = 1 },
		[10] =	{ Var1 = nil,		Text = &amp;quot;Trinket 1&amp;quot;,			Var2 = 0 },
		[11] =	{ Var1 = nil,		Text = &amp;quot;Trinket 2&amp;quot;,			Var2 = 0 },
		[12] =	{ Var1 = nil,		Text = &amp;quot;Tinkered Gloves&amp;quot;,	Var2 = 0 },
		}
	Nova_CooldownCheck = {
		[1] =	{ Mod = 1,		Text = &amp;quot;Charge&amp;quot;,			Var1 = 1 },
		[2] =	{ Mod = (1+2),	Text = &amp;quot;Heroic Leap&amp;quot;,		Var1 = 1 },
		[3] =	{ Mod = 8,		Text = &amp;quot;AoE&amp;quot;,				Var1 = 1 },
		[4]	=	{ Mod =	16,		Text = &amp;quot;Cooldown Toggle&amp;quot;,	Var1 = 1 },
		[5] =	{ Mod = 4,		Text = &amp;quot;Pause Rotation&amp;quot;,	Var1 = 1 },
		[6] =	{ Mod = (2+4),	Text = &amp;quot;Banner Drop&amp;quot;,		Var1 = 1 }
		}
	-- Load LUA files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nerder.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You&amp;apos;re missing the PQR_Nerder.lua file. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
		
		if PQR_LoadLua(&amp;quot;PQR_Nova_Frame.lua&amp;quot;) == true then
			MiniMapCreation()
			-- Slash Commands
			SLASH_NOVAFRAME1 = &amp;quot;/novaframe&amp;quot;
			SLASH_NOVAFRAME2 = &amp;quot;/nova&amp;quot;
			function SlashCmdList.NOVAFRAME(msg, editbox)
				if Setup == nil then
					Setup = true
					FrameCreation(Nova_ValueCheck, Nova_CooldownCheck, &amp;quot;Prot War Options&amp;quot;, &amp;quot;Prot CD Settings&amp;quot;)
				end
				if not Nova_Frame:IsShown() then
					Nova_Frame:Show() else Nova_Frame:Hide()
				end
			end
		end
	end
	
	if GetSpecialization() ~= 3 then
		PQR_WriteToChat(&amp;quot;You must be in Prot Spec. Please switch and try again.&amp;quot;, &amp;quot;Warning&amp;quot;)
		PQR_StopRotation()
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Thunderclap</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local WEAKENEDBLOWS = 115798

if not AoE then
	if ( UnitDebuffID(&amp;quot;target&amp;quot;, WEAKENEDBLOWS, &amp;quot;player&amp;quot;) == nil
	 or select(7, UnitDebuffID(&amp;quot;target&amp;quot;, WEAKENEDBLOWS, &amp;quot;player&amp;quot;)) - GetTime() &amp;lt; 1.5 )
	 and ( IsPlayerSpell(THUNDERCLAP) == true
	 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 ) then
		CastSpellByName(GetSpellInfo(THUNDERCLAP), &amp;quot;target&amp;quot;)
	end
elseif AoE then
	if IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
		CastSpellByName(GetSpellInfo(THUNDERCLAP), &amp;quot;target&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shield Slam</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitPower(&amp;quot;player&amp;quot;) &amp;lt; 75
 and ( IsPlayerSpell(23922) == true
 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 ) then
	CastSpellByName(GetSpellInfo(23922), &amp;quot;target&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>HS/Cleave</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local ULTIMATUM = 122510

if not AoE then
	if HasBuff(ULTIMATUM)
	 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
		CastSpellByName(GetSpellInfo(78), &amp;quot;target&amp;quot;)
	end
elseif AoE then
	if HasBuff(ULTIMATUM)
	 and IsSpellInRange(GetSpellInfo(845), &amp;quot;target&amp;quot;) == 1 then
	 	CastSpellByName(GetSpellInfo(845), &amp;quot;target&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitPower(&amp;quot;player&amp;quot;) &amp;lt; 80
 and not OnCooldown(SHOUT) then
	CastSpellByName(GetSpellInfo(SHOUT), nil)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Berserker Rage</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
	CastSpellByName(GetSpellInfo(18499), &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Revenge</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitPower(&amp;quot;player&amp;quot;) &amp;lt; 75
 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
	CastSpellByName(GetSpellInfo(6572), &amp;quot;target&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Avatar/Bloodbath</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsPlayerSpell(107574) then
	TIER6 = 107574
elseif IsPlayerSpell(12292) then
	TIER6 = 12292
elseif IsPlayerSpell(107570) then
	TIER6 = 107570
end

if not OnCooldown(TIER6)
 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
	CastSpellByName(GetSpellInfo(TIER6), nil)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shield Block</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;target&amp;quot;) then
	if ( ( (IsInGroup() == false or IsInRaid() == false)
	 and UnitThreatSituation(&amp;quot;player&amp;quot;) == nil )
	 or ( (IsInGroup() or IsInRaid())
	 and ( UnitThreatSituation(&amp;quot;player&amp;quot;) ~= nil and UnitThreatSituation(&amp;quot;player&amp;quot;) &amp;gt;= 2 ) ) ) 
	 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
		CastSpellByName(GetSpellInfo(2565), nil)
	elseif ( ( (IsInGroup() == false or IsInRaid() == false)
	 and UnitThreatSituation(&amp;quot;player&amp;quot;) == nil )
	 or ( (IsInGroup() or IsInRaid())
	 and ( UnitThreatSituation(&amp;quot;player&amp;quot;) == nil or UnitThreatSituation(&amp;quot;player&amp;quot;) &amp;lt; 2 ) ) ) 
	 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
		if not AoE then
			CastSpellByName(GetSpellInfo(78), nil)
		elseif AoE then
			CastSpellByName(GetSpellInfo(845), nil)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shield Barrier</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not HasBuff(112048)
 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 80
 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) then
	CastSpellByName(GetSpellInfo(112048), nil)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Devastate</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
	CastSpellByName(GetSpellInfo(20243), &amp;quot;target&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Demoralizing Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not OnCooldown(1160)
 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then
 	CastSpellByName(GetSpellInfo(1160), nil)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Functions []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if modtime == nil then
	modtime = 0
end

if Nova_Mod() == CDTog and GetTime() - modtime &amp;gt; 0.3 then
	modtime = GetTime()
	if UseCD then
		UseCD = false
		PQR_WriteToChat(&amp;quot;Cooldowns: \124cFFE61515Disabled&amp;quot;)
	else
		UseCD = true
		PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Enabled&amp;quot;)
	end
end

if Nova_Mod() == AoETog and GetTime() - modtime &amp;gt; 0.3 then
	modtime = GetTime()
	if AoE then
		AoE = false
		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFFE61515Disabled&amp;quot;)
	else
		AoE = true
		PQR_WriteToChat(&amp;quot;Area of Effect: \124cFF15E615Enabled&amp;quot;)
	end
end


-----------------
-- Time to die --
-----------------
TimeToDie = 999999
if UnitExists(&amp;quot;target&amp;quot;)
and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) == 1
and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	if (guid ~= UnitGUID(&amp;quot;target&amp;quot;)) or (guid == UnitGUID(&amp;quot;target&amp;quot;) and UnitHealth(&amp;quot;target&amp;quot;) == _firstLifeMax) then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealthMax(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end             
_currentLife = UnitHealth(&amp;quot;target&amp;quot;)
_currentTime = GetTime()
timeDiff = _currentTime - _firstTime
hpDiff = _firstLife - _currentLife
	if hpDiff &amp;gt; 0 then
		fullTime = timeDiff*_firstLifeMax/hpDiff
		pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
		calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
		if calcTime &amp;lt; 1 then
			calcTime = 1
		end
   	TimeToDie = calcTime
	end
	if hpDiff &amp;lt;= 0 then
		guid = UnitGUID(&amp;quot;target&amp;quot;)
		_firstLife = UnitHealth(&amp;quot;target&amp;quot;)
		_firstLifeMax = UnitHealth(&amp;quot;target&amp;quot;)
		_firstTime = GetTime()
	end

-- dummy
	if UnitHealthMax(&amp;quot;target&amp;quot;) == 1 then
		TimeToDie = 999999
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] CVars []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>for i=1,#Nova_ValueCheck do
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1)
	end
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_ValueCheck[i].Var2)
	end
end

for i=1,#Nova_CooldownCheck do
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;), Nova_CooldownCheck[i].Mod)
	end
	if GetCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;) == nil then
		RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_CooldownCheck[i].Text,&amp;quot;%s&amp;quot;,&amp;quot;_&amp;quot;)..&amp;quot;_Enabled&amp;quot;, Nova_CooldownCheck[i].Var1)
	end
end

	--Cvar Translations
	--Enabled/Disabled
	hsenabled	= GetCVarBool(&amp;quot;Nova_Healthstone_Enabled&amp;quot;)
	vicenabled	= GetCVarBool(&amp;quot;Nova_Victory_Rush_Enabled&amp;quot;)
	SB			= GetCVarBool(&amp;quot;Nova_Skull_Banner_Enabled&amp;quot;)
	DB			= GetCVarBool(&amp;quot;Nova_Demo_Banner_Enabled&amp;quot;)
	MB			= GetCVarBool(&amp;quot;Nova_Mocking_Banner_Enabled&amp;quot;)
	reck		= GetCVarBool(&amp;quot;Nova_Whirlwind_Enabled&amp;quot;)
	tr1			= GetCVarBool(&amp;quot;Nova_Trinket_1_Enabled&amp;quot;)
	tr2			= GetCVarBool(&amp;quot;Nova_Trinket_2_Enabled&amp;quot;)
	glove		= GetCVarBool(&amp;quot;Nova_Tinkered_Gloves_Enabled&amp;quot;)
	--Thresholds
	hsHealth	= tonumber(GetCVar(&amp;quot;Nova_Healthstone&amp;quot;))
	victoryhp	= tonumber(GetCVar(&amp;quot;Nova_Victory_Rush&amp;quot;))
	-- Cooldowns
	charge		= tonumber(GetCVar(&amp;quot;Nova_Charge&amp;quot;))
	hl			= tonumber(GetCVar(&amp;quot;Nova_Heroic_Leap&amp;quot;))
	AoETog		= tonumber(GetCVar(&amp;quot;Nova_AoE&amp;quot;))
	CDTog		= tonumber(GetCVar(&amp;quot;Nova_Cooldown_Toggle&amp;quot;))
	pause		= tonumber(GetCVar(&amp;quot;Nova_Pause_Rotation&amp;quot;))
	bd			= tonumber(GetCVar(&amp;quot;Nova_Banner_Drop&amp;quot;))
	-- Cooldown Checks
	chargeCheck	= GetCVarBool(&amp;quot;Nova_Charge_Enabled&amp;quot;)
	HLCheck		= GetCVarBool(&amp;quot;Nova_Heroic_Leap_Enabled&amp;quot;)
	AoETogCheck	= GetCVarBool(&amp;quot;Nova_AoE_Enabled&amp;quot;)
	CDTogCheck	= GetCVarBool(&amp;quot;Nova_Cooldown_Toggle_Enabled&amp;quot;)
	pauseCheck	= GetCVarBool(&amp;quot;Nova_Pause_Rotation_Enabled&amp;quot;)
	bdCheck		= GetCVarBool(&amp;quot;Nova_Banner_Drop_Enabled&amp;quot;)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Nova Mods []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>Nova_Mod = nil
function Nova_Mod()
	total = 0
	if IsLeftShiftKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 1
	end
	if IsLeftControlKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 2
	end
	if IsLeftAltKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 4
	end
	if IsRightShiftKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 8
	end
	if IsRightControlKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 16
	end
	if IsRightAltKeyDown()
		and not GetCurrentKeyBoardFocus() then
			total = total + 32
	end
	return total
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[] Pause []</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Mod() == pause
or IsMounted()
or UnitBuffID(&amp;quot;player&amp;quot;, 104235)
or UnitBuffID(&amp;quot;player&amp;quot;, 104262)
or UnitIsDead(&amp;quot;target&amp;quot;)
or UnitIsDead(&amp;quot;player&amp;quot;)
or UnitCastingInfo(&amp;quot;player&amp;quot;)
or not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tier 4</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsPlayerSpell(46924) then
	TIER4 = 46924
elseif IsPlayerSpell(46968) then
	TIER4 = 46968
elseif IsPlayerSpell(118000) then
	TIER4 = 118000
end

if AoE then
	if IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1
	 and not OnCooldown(TIER4) then
		CastSpellByName(GetSpellInfo(TIER4), nil)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Execute</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local HP = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)

if HP &amp;lt; 20
 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) then
	CastSpellByName(GetSpellInfo(5308), nil)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Victory Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local victory = 32216
local hp = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

if vicenabled ~= 1 then
	return false
end

if hp &amp;lt;= victoryhp
 and HasBuff(victory)
 and IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) then
	CastSpellByName(GetSpellInfo(34428), nil)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shout check</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>SHOUT = nil

if IsInRaid() or IsInGroup() then
	if IsInRaid() then
		group = &amp;quot;raid&amp;quot;
	elseif IsInGroup() then
		group = &amp;quot;party&amp;quot;
	end
	
	for i = 1, GetNumGroupMembers() do
		if select(2, UnitClass(group..i)) == &amp;quot;PRIEST&amp;quot; then
			SHOUT = 6673
		elseif select(2, UnitClass(group..i)) == &amp;quot;DEATHKNIGHT&amp;quot;
		 or ( select(2, UnitClass(group..i)) == &amp;quot;WARRIOR&amp;quot;
		 and UnitGUID(&amp;quot;player&amp;quot;) ~= UnitGUID(group..i) ) then
		 	SHOUT = 469
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARRIOR>