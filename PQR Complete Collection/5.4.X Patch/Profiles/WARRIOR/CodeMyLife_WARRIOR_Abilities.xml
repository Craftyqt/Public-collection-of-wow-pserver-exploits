<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>-- Initialisation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--  Init --
--------------------------------------------------------------------
-- Credits goes to Team Nova for most of the Init and Frame setup --
--------------------------------------------------------------------
if PQR_RotationStarted == true then
	_AbilityList = false
	PQR_RotationStarted = false
	PQR_InterruptDelay =  0
	PQR_ResetMovementTime = 0.75
--	RunMacroText(&amp;quot;/script UIErrorsFrame:Hide();&amp;quot;)
	LastTarget = GetTime() - 2
	VarNum = 1.0
	PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;CodeMyLife Warrior &amp;quot;..VarNum,nil,&amp;quot;C27E27&amp;quot;)
end

if macros == nil then

	-- Macros
	macros = { 
	    [&amp;quot;AoE&amp;quot;]    					= 1,  
	    [&amp;quot;ActiveCooldowns&amp;quot;]   		= false,
	    [&amp;quot;DisarmQueue&amp;quot;]   			= false,
	    [&amp;quot;ExecuteQueue&amp;quot;]   			= false,
	    [&amp;quot;IntimidatingShoutQueue&amp;quot;] 	= false,
	    [&amp;quot;Pause&amp;quot;]					= false,
	    [&amp;quot;ShatteringThrowQueue&amp;quot;]   	= false,
	    [&amp;quot;Stance&amp;quot;]					= 1,
	} 
	if not _AoE then _AoE = false end
	
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_CodeMyLife_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_CodeMyLife_Data.lua. Get this file on my SVN and put it into PQR/Data folder. Until then my profiles will not work.&amp;quot;, &amp;quot;Error&amp;quot;)
		else 
			if not BoomedYet then
	 			BoomGoesTheDynamite()
	 			BoomedYet = true
			end
		end
	end	
end

CML_MeleeSpellsTable = { 78, 35395, 19503, 1776, 0, 0, 0, 0, 0, 0, }
CML_RangedSpellsTable = { 100, 20271, 3044, 121733 , 0, 0, 0, 0, 0, 0 }

if UnitExists(&amp;quot;target&amp;quot;) then LastTarget = GetTime() end

-- Latency Adjuster
local minValue = 0.05
local maxValue = 0.3
local curPing = tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000) + .025
if curPing &amp;lt; minValue then curPing = minValue elseif curPing &amp;gt; maxValue then curPing = maxValue end
PQR_SpellAvailableTime = curPing	

_MyClass = select(3,UnitClass(&amp;quot;player&amp;quot;))
_Chat = print
_HP = ( 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) )
_Mana = ( 100 * UnitPower(&amp;quot;player&amp;quot;) / UnitPowerMax(&amp;quot;player&amp;quot;) )
_SA = PQR_SpellAvailable
_UB = UnitBuffID
_UDB = UnitDebuffID
_GI	= GetSpellInfo
_Spec = GetSpecialization()
_Rage = UnitPower(&amp;quot;player&amp;quot;)
_RageMax = UnitPowerMax(&amp;quot;player&amp;quot;)
if CML_MeleeTarget() then 
	_Melee = select(2,CML_MeleeTarget())
end
_TasteForBlood = select(4,_UB(&amp;quot;player&amp;quot;, 60503))

if _Spec == 1 and _PQIConfigValue ~= 1 then
	PQR_SwapRotation(&amp;quot;Arms (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 1
	_AbilityList = false
	CastShapeshiftForm(1)
end
if _Spec == 2 and _PQIConfigValue ~= 2 then
	PQR_SwapRotation(&amp;quot;Fury (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 2
	_AbilityList = false
	CastShapeshiftForm(1)
end
if _Spec == 3 and _PQIConfigValue ~= 3 then
	PQR_SwapRotation(&amp;quot;Protection (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 3
	_AbilityList = false
	CastShapeshiftForm(2)
end
if _Spec == nil then
	PQR_SwapRotation(&amp;quot;Arms (CodeMyLife)&amp;quot;)
	_PQIConfigValue = 1
	_AbilityList = false
end

--------------------
-- Slash Commands --
--------------------
if SlashMacros == nil then
	SlashMacros = true
	
	SLASH_ACTIVECOOLDOWNS1 = &amp;quot;/activecooldowns&amp;quot;
	SLASH_ACTIVECOOLDOWNS2 = &amp;quot;/activecooldown&amp;quot;
	function SlashCmdList.ACTIVECOOLDOWNS(msg, editbox)
		if not macros[&amp;quot;ActiveCooldowns&amp;quot;] then
			xrn:message(&amp;quot;|cff9933ffCooldowns - Active.&amp;quot;)
			macros[&amp;quot;ActiveCooldowns&amp;quot;] = true
		else			
			xrn:message(&amp;quot;|cff9933ffCooldowns - Inactive.&amp;quot;)
			macros[&amp;quot;ActiveCooldowns&amp;quot;] = false
		end
	end
	
	SLASH_AOE1 = &amp;quot;/aoe&amp;quot;
	function SlashCmdList.AOE(msg, editbox)
		if _Spec == 1 then
		    if macros[&amp;quot;AoE&amp;quot;] == 1 then 
		        macros[&amp;quot;AoE&amp;quot;] = 2 
		        xrn:message(&amp;quot;\124cFF3BB0FFAoE&amp;quot;)
		    else 
		    	macros[&amp;quot;AoE&amp;quot;] = 1 
		        xrn:message(&amp;quot;\124cFF3BB0FFSingle Target&amp;quot;)
		    end
		end
		if _Spec == 2 then
		    if macros[&amp;quot;AoE&amp;quot;] == 1 then 
		        macros[&amp;quot;AoE&amp;quot;] = 2 
		        xrn:message(&amp;quot;\124cFF3BB0FF2 Targets&amp;quot;)
		    elseif macros[&amp;quot;AoE&amp;quot;] == 2 then 
		        macros[&amp;quot;AoE&amp;quot;] = 3
		        xrn:message(&amp;quot;\124cFFFFFFFF3 Targets&amp;quot;)
		    elseif macros[&amp;quot;AoE&amp;quot;] == 3 then 
		        macros[&amp;quot;AoE&amp;quot;] = 4
		        xrn:message(&amp;quot;\124cFFFFFFFFMass AoE&amp;quot;)
		    else 
		    	macros[&amp;quot;AoE&amp;quot;] = 1 
		        xrn:message(&amp;quot;\124cFF3BB0FFSingle Target&amp;quot;)
		    end
		end
		if _Spec == 3 then
		    if macros[&amp;quot;AoE&amp;quot;] == 1 then 
		        macros[&amp;quot;AoE&amp;quot;] = 2 
		        xrn:message(&amp;quot;\124cFF3BB0FFAoE&amp;quot;)
		    elseif macros[&amp;quot;AoE&amp;quot;] == 2 then 
		        macros[&amp;quot;AoE&amp;quot;] = 3
		        xrn:message(&amp;quot;\124cFFFFFFFFMass AoE&amp;quot;)
		    else 
		    	macros[&amp;quot;AoE&amp;quot;] = 1 
		        xrn:message(&amp;quot;\124cFF3BB0FFSingle Target&amp;quot;)
		    end
		end
	end 
	
	SLASH_PAUSE1 = &amp;quot;/pause&amp;quot;
	function SlashCmdList.PAUSE(msg, editbox)
		if not macros[&amp;quot;Pause&amp;quot;] then
			xrn:message(&amp;quot;\124cFFFF3300Profile Paused.&amp;quot;)
			macros[&amp;quot;Pause&amp;quot;] = true
		else
			xrn:message(&amp;quot;\124cFF0033FFProfile Resumed.&amp;quot;)
			macros[&amp;quot;Pause&amp;quot;] = false		
		end
	end
	
	SLASH_STANCEDANCE1 = &amp;quot;/stancedance&amp;quot;
	function SlashCmdList.STANCEDANCE(msg, editbox)
		if macros[&amp;quot;Stance&amp;quot;] == 1 then
			xrn:message(&amp;quot;\124cFF006FEDDefensive Stance.&amp;quot;)
			macros[&amp;quot;Stance&amp;quot;] = 2
		else
			xrn:message(&amp;quot;\124cFFED0000Battle Stance.&amp;quot;)
			macros[&amp;quot;Stance&amp;quot;] = 1	
		end
	end
	
	SLASH_SETTALENTS1 = &amp;quot;/settalents&amp;quot;
	SLASH_SETTALENTS2 = &amp;quot;/settalent&amp;quot;
	function SlashCmdList.SETTALENTS(msg, editbox)
		CML_ToggleSwapper()
	end	
end

if SetTalentsTrue then 
	if _Spec == 1 then CML_TalentSwap(3,1,2,1,3,1) end
	if _Spec == 2 then CML_TalentSwap(1,1,2,2,1,3) end
	if _Spec == 3 then CML_TalentSwap(2,3,2,2,1,3) end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Functions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Functions --
if not NoFacingCheckCheck then
	uid = PQR_UnitInfo()
end

if not Functions then
	Functions = true
	
	CML_MeleeTarget = nil
	function CML_MeleeTarget(FacingCheck)
		return &amp;quot;target&amp;quot;, true
	end
	
	CML_Pause = nil
	function CML_Pause()
		if PauseKey
		  and PauseKeyCheck then
		   	Nova_Notify(&amp;quot;\124cFFFFFFFFRotation Paused&amp;quot;)
			return true
		end
	end
	
	CML_RangeTarget = nil
	function CML_RangeTarget(FacingCheck)
		if Facing then return &amp;quot;target&amp;quot;, true end
		return &amp;quot;No Target&amp;quot;, false
	end
	
	CML_UnitFacing = nil
	function CML_UnitFacing(Target1,Target2)
		if NoFacingCheckCheck then return Facing end
		if Target1 == nil then Target1 = &amp;quot;player&amp;quot; end
		if Target2 == nil then Target2 = &amp;quot;target&amp;quot; end
		if UnitExists(Target1) and UnitExists(Target2) then
			local targetGUID = UnitGUID(Target2) 
	 		if PQR_UnitFacing(Target1,targetGUID) then
				return true
	   		end
	  	end
	  	return false
	 end
	
	CML_ActiveCooldowns = nil
	function CML_ActiveCooldowns()
		if UnitExists(&amp;quot;target&amp;quot;) ~= 1 or Facing ~= true then return false end
		if Spells[_BerserkerRage].known and _SA(_BerserkerRage) and _Rage &amp;lt; 90 and not _Enraged then
			_Cast(_BerserkerRage, nil)
		end
		if not macros[&amp;quot;ActiveCooldowns&amp;quot;] == true then 
			CML_BloodFury()
			CML_Berserking()
			RunMacroText(&amp;quot;/use 10&amp;quot;)
		end
		if macros[&amp;quot;ActiveCooldowns&amp;quot;] then
			if CML_CombatCheck() == false then
				if _Spec == 1 then
					if ( CML_HaveBuff(&amp;quot;player&amp;quot;,_Bloodbath) or not Spells[_Bloodbath].known ) then
						CML_BloodFury()
						CML_Berserking()
						RunMacroText(&amp;quot;/use 10&amp;quot;)
						RunMacroText(&amp;quot;/use 13&amp;quot;)
						RunMacroText(&amp;quot;/use 14&amp;quot;)
						if RecklessnessCheck and Spells[_Recklessness].known and _SA(_Recklessness) and ( ( _Bloodbath or not Spells[_Bloodbath].known ) and ( GetSpellCD(_ColossusSmash) &amp;lt; 2 or CML_HaveDebuff(&amp;quot;target&amp;quot;,_ColossusSmash) == true ) or not NoExec ) then 
							_Cast(_Recklessness, &amp;quot;player&amp;quot;) 
						end
						if AvatarCheck and Spells[_Avatar].known and _SA(_Avatar) and CML_HaveBuff(&amp;quot;player&amp;quot;,_Recklessness) then 
							_Cast(_Avatar, &amp;quot;player&amp;quot;) 
						end	
						if Spells[_SkullBanner].known and _SA(_SkullBanner) and CML_HaveBuff(&amp;quot;player&amp;quot;,_Recklessness) then 
							_Cast(_SkullBanner, nil) 
						end	
					end
				end	
				if _Spec == 2 then
					if ( CML_HaveBuff(&amp;quot;player&amp;quot;,_Bloodbath) or not Spells[_Bloodbath].known ) and ( GetSpellCD(_ColossusSmash) &amp;lt; 2 or  CML_HaveDebuff(&amp;quot;target&amp;quot;,_ColossusSmash) == true ) then
						CML_BloodFury()
						CML_Berserking()
						RunMacroText(&amp;quot;/use 10&amp;quot;)
						RunMacroText(&amp;quot;/use 13&amp;quot;)
						RunMacroText(&amp;quot;/use 14&amp;quot;)
						if RecklessnessCheck and Spells[_Recklessness].known and _SA(_Recklessness) then 
							_Cast(_Recklessness, &amp;quot;player&amp;quot;) 
						end
						if AvatarCheck and Spells[_Avatar].known and _SA(_Avatar) and CML_HaveBuff(&amp;quot;player&amp;quot;,_Recklessness) then 
							_Cast(_Avatar, &amp;quot;player&amp;quot;) 
						end	
						if Spells[_SkullBanner].known and _SA(_SkullBanner) and CML_HaveBuff(&amp;quot;player&amp;quot;,_Recklessness) then 
							_Cast(_SkullBanner, nil) 
						end	
					end
				end	
				if _Spec == 3 then
					if ( CML_HaveBuff(&amp;quot;player&amp;quot;,_Bloodbath) or not Spells[_Bloodbath].known ) then
						CML_BloodFury()
						CML_Berserking()
						RunMacroText(&amp;quot;/use 10&amp;quot;)
						if RecklessnessCheck and Spells[_Recklessness].known and _SA(_Recklessness) then 
							_Cast(_Recklessness, &amp;quot;player&amp;quot;) 
						end
						if AvatarCheck and Spells[_Avatar].known and _SA(_Avatar) and CML_HaveBuff(&amp;quot;player&amp;quot;,_Recklessness) then 
							_Cast(_Avatar, &amp;quot;player&amp;quot;) 
						end	
						if Spells[_SkullBanner].known and _SA(_SkullBanner) and CML_HaveBuff(&amp;quot;player&amp;quot;,_Recklessness) then 
							_Cast(_SkullBanner, nil) 
						end	
					end
				end					
			end
		end
	end	

	APBonus = nil
	function APBonus()
		if OocAP == nil then OocAP = UnitAttackPower(&amp;quot;player&amp;quot;) end
		local ActiveAP, _, _ = UnitAttackPower(&amp;quot;player&amp;quot;)
		if ActiveAP &amp;gt; OocAP + 6000 then
			return true	
		else
			return false
		end
	end	
	
	CML_DPSPotion = nil
	function CML_DPSPotion(ItemID)
		if CML_HaveDebuff(&amp;quot;player&amp;quot;, 2825, 10) or CML_HaveDebuff(&amp;quot;player&amp;quot;,32182, 10) or CML_HaveDebuff(&amp;quot;player&amp;quot;,80353, 10) or CML_HaveDebuff(&amp;quot;player&amp;quot;,90355, 10) then 
			UseItemByName(ItemID)
		end
	end
		
	CML_Interrupts = nil
	function CML_Interrupts()
		-- Credit goes to Xelper for his interupt code. Thank you very much Xelper!!
		if RandomPummel == nil then
			if Pummel == 1 then RandomPummel = math.random(0,50) end
			if Pummel == 2 then RandomPummel = 30 end
			if Pummel == 3 then RandomPummel = 0 end
		end
		
		if not PummelCheck then 
			return false 
		end
		
		function PQR_InterruptSpell()
			if IsPlayerSpell(1766) and PQR_SpellAvailable(1766) then
				return 1766
			else
				return 0
			end    
		end   
		
		local PQR_InterruptPercent = Pummel
		local interruptSpell = PQR_InterruptSpell()
		local interruptName = GetSpellInfo(interruptSpell)
		
		InterruptTargetsList = { &amp;quot;target&amp;quot;, &amp;quot;focus&amp;quot;, &amp;quot;mouseover&amp;quot; }
		-- Interrupt Casts and Channels on Target and Focus.
		if interruptSpell ~= 0 then
			for i = 1, #InterruptTargetsList do
				
				local customTarget = InterruptTargetsList[i]
				local castName, _, _, _, castStartTime, castEndTime, _, _, castInterruptable = UnitCastingInfo(customTarget)
				local channelName, _, _, _, channelStartTime, channelEndTime, _, channelInterruptable = UnitChannelInfo(customTarget)
					
				if channelName ~= nil then
					--target is channeling a spell that is interruptable
					--load the channel variables into the cast variables to make logic a little easier.
					castName = channelName
					castStartTime = channelStartTime
					castEndTime = channelEndTime
					castInterruptable = channelInterruptable
					PQR_InterruptPercent = 0
					local IsChannel = true
				end
				
				--This is actually &amp;quot;Not Interruptable&amp;quot;... so lets swap it around to use in the positive.
				if castInterruptable == false then
					castInterruptable = true
				else
					castInterruptable = false
				end	
				
				if castInterruptable then
				  	local timeSinceStart = (GetTime() * 1000 - castStartTime) / 1000
					local timeLeft = ((GetTime() * 1000 - castEndTime) * -1) / 1000
					local castTime = castEndTime - castStartTime
					local currentPercent = timeSinceStart / castTime * 100000
				  	if IsSpellInRange(GetSpellInfo(1776), customTarget) ~= nil
				  	  and ( currentPercent &amp;gt; PQR_InterruptPercent or interruptSpell ~= 96231 )
				  	  and UnitCanAttack(&amp;quot;player&amp;quot;, customTarget) ~= nil then
					--target is casting something that is interruptable.
					--the following 2 variables are named logically... value is in seconds.
						if InteruptTimer == nil 
						  or InteruptTimer &amp;lt;= GetTime() - 1.25 then
						  	if currentPercent &amp;lt; RandomPummel and not IsChannel then return false end
							CastSpellByID(interruptSpell, customTarget)
							InteruptTimer = GetTime()
						end		
					end
				end
			end
		end
	end

	xrn:message(&amp;quot;\124cFF9E6720...CodeMyLife Warrior...&amp;quot;)
end

-- Convert Table to Var
if macros[&amp;quot;AoE&amp;quot;] == 3 then
	_AoE = true
end
if macros[&amp;quot;AoE&amp;quot;] == (1 or 2) then
	_AoE = false
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- PQI Config</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if _PQIConfigValue ~= nil then	
	if  ActivePQI ~= 2 then
		ActivePQI = 2
		local config = {
			name	= &amp;quot;Warrior&amp;quot;,
			author	= &amp;quot;CodeMyLife&amp;quot;,
			abilities = {
				{ 	name	= &amp;quot;Combat Check&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFUncheck for Aggressive Mode.&amp;quot;,
					enable	= true,
				},	
				{ 	name	= &amp;quot;No Facing Check&amp;quot;,
					tooltip	= &amp;quot;|cffC27E27Checking this |cffFFFFFFturns off Facing Checks and Multi-Target|cffC27E27. This is to be used only |cffFFFFFFif you experiment framerate issues|cffC27E27.&amp;quot;,
					enable	= false,
				},
				{ 	name	= &amp;quot;Feast Taker&amp;quot;,
					tooltip	= &amp;quot;|cffC27E27Toggle Automatic |cffFFFFFFFeast Taker.|cffC27E27Eperimental, might cause some loses on feasts. Includes |cffFFFFFFHealthStone Taker |cffC27E27.&amp;quot;,
					enable	= false,
				},	
				{ 	name	= &amp;quot;Player Status&amp;quot;, 
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Player Bar.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffC27E27Brown&amp;quot;,&amp;quot;|cff00CC00Colored&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffC27E27Choose |cffFFFFFFHealth Bar Color|cffC27E27.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Active Shouts&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFToggle Automatic |cffC27E27Shout.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values = {&amp;quot;|cffF00004Battle&amp;quot;,&amp;quot;|cff008CF0Commanding&amp;quot;},
						value = 1,
						width = 70,
						tooltip = &amp;quot;|cffC27E27Choose |cffFFFFFFShout |cffC27E27to use.&amp;quot;,	
					},
				},	
				{ 	name	= &amp;quot;Avatar&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Avatar.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Bloodbath&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Bloodbath.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Recklessness&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Recklessness.&amp;quot;,
					enable	= true,
				},									
				{ 	name	= &amp;quot;Shattering Throw&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Shattering Throw.&amp;quot;,
					enable	= true,
				},
				{ 	name	= &amp;quot;Storm Bolt&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Storm Bolt.&amp;quot;,
					enable	= true,
				},
				----  Healing  ----
				{ 	name	= &amp;quot;Enraged Regeneration&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Enraged Regeneration.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 20,
						step	= 5,
						tooltip	= &amp;quot;|cffF00004Health value |cffFFFFFFto use |cffC27E27Enraged Regeneration.&amp;quot;,
					},
				},
				{ 	name	= &amp;quot;Impending Victory&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Impending Victory/Victory Rush.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 80,
						step	= 5,
						tooltip	= &amp;quot;|cffF00004Health value |cffFFFFFFto cast |cffC27E27Impending Victory |cffFFFFFFor |cffC27E27Victory Rush. |cffFFFFFFSet to 100 |cffC27E27if you want |cffFFFFFFto use it regardless of |cffF00004Health.&amp;quot;,
					},
				},	
				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cff94F000Healthstone.&amp;quot;,
					enable	= true,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 25,
						step	= 5,
						tooltip	= &amp;quot;|cffF00004Health value |cffFFFFFFto use |cff94F000Healthstone.&amp;quot;,
					},
				},		
				----  Utility  ----						
				{ 	name	= &amp;quot;Last Stand&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Last Stand.&amp;quot;,
					enable	= false,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 15,
						step	= 5,
						tooltip	= &amp;quot;|cffF00004Health value |cffFFFFFFto cast |cffC27E27Last Stand.&amp;quot;,
					},
					
				},
				{ 	name	= &amp;quot;Shield Wall&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Shield Wall.&amp;quot;,
					enable	= false,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 15,
						step	= 5,
						tooltip	= &amp;quot;|cffF00004Health value |cffFFFFFFto cast |cffC27E27Shield Wall.&amp;quot;,
					},
					
				},
				{ 	name	= &amp;quot;Shield Block&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Shield Block.&amp;quot;,
					enable	= false,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 15,
						step	= 5,
						tooltip	= &amp;quot;|cffF00004Health value |cffFFFFFFto cast |cffC27E27Shield Block.&amp;quot;,
					},
					
				},
				{ 	name	= &amp;quot;Shield Barrier&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Shield Barrier.&amp;quot;,
					enable	= false,
					widget	= { type = &amp;quot;numBox&amp;quot;,
						value	= 15,
						step	= 5,
						tooltip	= &amp;quot;|cffF00004Health value |cffFFFFFFto cast |cffC27E27Shield Barrier.&amp;quot;,
					},
					
				},				
				{ 	name	= &amp;quot;Pummel&amp;quot;,
					tooltip	= &amp;quot;|cffFFFFFFEnables |cffC27E27Pummel.&amp;quot;,
					enable	= true,
					widget = { type = &amp;apos;select&amp;apos;,
						values 	= {&amp;quot;|cffC27E27Random&amp;quot;,&amp;quot;|cff00CC0030&amp;quot;,&amp;quot;|cff00CC000&amp;quot;},
						value	= 1,
						width	= 70,
						tooltip	= &amp;quot;|cffFFFFFFWhat % of cast you want to wait before using |cffC27E27Pummel|cffFFFFFF. The channels will always be instant.&amp;quot;,
					},
					newSection = true,
				},			
			},
			
			hotkeys = {
				{	name	= &amp;quot;Demoralizing Banner&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ra&amp;apos;},
					tooltip	= &amp;quot;|cffFFFFFFHold 1 sec to throw |cffC27E27Demoralizing Banner |cffFFFFFFon |cffF00004cursor.&amp;quot;,
				},
				{	name	= &amp;quot;Focus&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;ls&amp;apos;},
					tooltip	= &amp;quot;|cffFFFFFFHold 1 sec to set |cffF00004mouseover target |cffFFFFFFas |cffF00004focus.&amp;quot;,
				},
				{	name	= &amp;quot;Heroic Leap&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;lc&amp;apos;},
					tooltip	= &amp;quot;|cffFFFFFFHold 1 sec to |cffC27E27Heroic Leap |cffFFFFFFon |cffF00004cursor.&amp;quot;,
				},
				{	name	= &amp;quot;Mocking Banner&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;rc&amp;apos;},
					tooltip	= &amp;quot;|cffFFFFFFHold 1 sec to throw |cffC27E27Mocking Banner |cffFFFFFFon |cffF00004cursor.&amp;quot;,
				},
				{	name	= &amp;quot;Pause&amp;quot;,
					enable	= true,
					hotkeys	= {&amp;apos;la&amp;apos;},
					tooltip	= &amp;quot;|cffFFFFFFHold to |cffF00004Pause |cffFFFFFFrotation.&amp;quot;,
				},
			},
		}
		CODEMYLIFE_WARRIOR = PQI:AddRotation(config)
	end
end

-- OPTIONS -- 
ActiveShoutsCheck 			= PQI_CodeMyLifeWarrior_ActiveShouts_enable
ActiveShouts 				= PQI_CodeMyLifeWarrior_ActiveShouts_value

AvatarCheck					= PQI_CodeMyLifeWarrior_Avatar_enable

BloodbathCheck				= PQI_CodeMyLifeWarrior_Bloodbath_enable

CombatCheckCheck			= PQI_CodeMyLifeWarrior_CombatCheck_enable

EnragedRegeneration			= PQI_CodeMyLifeWarrior_EnragedRegeneration_value
EnragedRegenerationCheck	= PQI_CodeMyLifeWarrior_EnragedRegeneration_enable

FeastTakerCheck 			= PQI_CodeMyLifeWarrior_FeastTaker_enable

Healthstone					= PQI_CodeMyLifeWarrior_Healthstone_value
HealthstoneCheck			= PQI_CodeMyLifeWarrior_Healthstone_enable

ImpendingVictory			= PQI_CodeMyLifeWarrior_ImpendingVictory_value
ImpendingVictoryCheck		= PQI_CodeMyLifeWarrior_ImpendingVictory_enable

LastStandValue				= PQI_CodeMyLifeWarrior_LastStand_value
LastStandCheck				= PQI_CodeMyLifeWarrior_LastStand_enable

NoFacingCheckCheck			= PQI_CodeMyLifeWarrior_NoFacingCheck_enable

PlayerStatusCheck			= PQI_CodeMyLifeWarrior_PlayerStatus_enable
PlayerStatusValue			= PQI_CodeMyLifeWarrior_PlayerStatus_value

Pummel						= PQI_CodeMyLifeWarrior_Pummel_value
PummelCheck					= PQI_CodeMyLifeWarrior_Pummel_enable

RecklessnessCheck			= PQI_CodeMyLifeWarrior_Recklessness_enable

RaidingEventsCheck			= PQI_CodeMyLifeWarrior_RaidingEvents_enable

ShatteringThrowCheck		= PQI_CodeMyLifeWarrior_ShatteringThrow_enable

ShieldBarrierValue			= PQI_CodeMyLifeWarrior_ShieldBarrier_value
ShieldBarrierCheck			= PQI_CodeMyLifeWarrior_ShieldBarrier_enable

ShieldBlockValue			= PQI_CodeMyLifeWarrior_ShieldBlock_value
ShieldBlockCheck			= PQI_CodeMyLifeWarrior_ShieldBlock_enable


ShieldWallValue				= PQI_CodeMyLifeWarrior_ShieldWall_value
ShieldWallCheck				= PQI_CodeMyLifeWarrior_ShieldWall_enable

StormBoltCheck				= PQI_CodeMyLifeWarrior_StormBolt_enable

DemoralizingBannerKey		= PQI:IsHotkeys(PQI_CodeMyLifeWarrior_DemoralizingBanner_key)
DemoralizingBannerKeyCheck	= PQI_CodeMyLifeWarrior_DemoralizingBanner_enable

FocusKey					= PQI:IsHotkeys(PQI_CodeMyLifeWarrior_Focus_key)
FocusKeyCheck				= PQI_CodeMyLifeWarrior_Focus_enable

HeroicLeap					= PQI:IsHotkeys(PQI_CodeMyLifeWarrior_HeroicLeap_key)
HeroicLeapCheck				= PQI_CodeMyLifeWarrior_HeroicLeap_enable 

MockingBannerKey			= PQI:IsHotkeys(PQI_CodeMyLifeWarrior_MockingBanner_key)
MockingBannerKeyCheck		= PQI_CodeMyLifeWarrior_MockingBanner_enable

PauseKey					= PQI:IsHotkeys(PQI_CodeMyLifeWarrior_Pause_key)
PauseKeyCheck				= PQI_CodeMyLifeWarrior_Pause_enable

if Pummel == nil then return true end

if SpamToggle ~= true and SpamFilterCheck and ( SpamFilter == 3 or SpamFilter == 4 ) then
	SpamToggle = true
	RunMacroText(&amp;quot;/script UIErrorsFrame:Hide();&amp;quot;)
end

if SpamToggle ~= false and SpamFilterCheck and ( SpamFilter == 1 or SpamFilter == 2 )then
	SpamToggle = false
	RunMacroText(&amp;quot;/script UIErrorsFrame:Show();&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Stats</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Choose appropriate list based on type of group and number of players.
local playersNumber = GetNumGroupMembers()
if CML_Frames ~= nil then CML_Frames() end
if IsInRaid() then 
	if playersNumber &amp;lt;= 5 then 
		MyTargets = PartyTargets
	 elseif playersNumber &amp;lt;= 12 then
		MyTargets = Raid10Targets 
	elseif playersNumber &amp;gt; 12 then
		MyTargets = Raid25Targets 
	end		
elseif IsInGroup() then
	MyTargets = PartyTargets 
else 
	MyTargets = SingleTargets
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Tables</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Warrior
if not _AbilityList then
	_AbilityList = true

	--Spells
	_Avatar					= 107574
	_BattleShout			= 6673
	_BerserkerRage			= 18499
  	_Berserking  			= 26297
	_Bladestorm				= 46924
	_Bloodbath				= 12292
	_BloodFury				= 20572
 	_Bloodthirst			= 23881
	_Charge					= 100
	_Cleave					= 845
  	_ColossusSmash			= 86346
	_CommandingShout		= 469
	_DemoralizingBanner		= 114203
	_DemoralizingShout		= 1160
	_Devastate				= 20243
	_DieByTheSword			= 118038
	_Disarm					= 676
	_DisruptingShout		= 102060
	_DragonRoar				= 118000
	_EnragedRegeneration	= 55694
	_Execute				= 5308
	_Hamstring				= 1715
	_HeroicLeap				= 6544
	_HeroicStrike			= 78
	_HeroicThrow			= 57755
	_ImpendingVictory		= 103840
	_Intervene				= 3411
	_IntimidatingShout		= 5246
	_LastStand				= 12975
	_MassSpellReflection	= 114028
	_MockingBanner			= 114192
	_MortalStrike 			= 12294
	_Overpower				= 7384
	_PiercingHowl			= 12323
	_Pummel					= 6552
 	_RagingBlow				= 85288
	_RallyingCry			= 97462
	_Recklessness			= 1719
	_Revenge				= 6572
	_Safeguard				= 114029
	_ShatteringThrow		= 64382
	_ShieldBarrier			= 112048
	_ShieldBlock			= 2565
	_ShieldSlam				= 23922
	_ShieldWall				= 871
	_Shockwave				= 46968
	_SkullBanner			= 114207
	_Slam					= 1464
	_SpellReflection		= 23920
	_StaggeringShout		= 107566
	_StormBolt				= 107570
	_SweepingStrikes		= 12328
	_SwordandBoard			= 46953
	_Taunt					= 355
	_ThunderClap			= 6343
	_Ultimatum				= 122509
	_VictoryRush			= 34428
	_Vigilance				= 114030
 	_Vrushed				= 32216
 	_WeakBlows				= 115798
 	_Whirlwind				= 1680
 	_WildStrike				= 100130


	--Spell Table
 Spells = {
	[_Avatar]					= { known = IsPlayerSpell(107574)	},
	[_BattleShout]				= { known = IsPlayerSpell(6673)		},
	[_Berserking]      			= { known = IsPlayerSpell(26297) 	}, 
	[_BerserkerRage]			= { known = IsPlayerSpell(18499)	},
	[_Bladestorm]				= { known = IsPlayerSpell(46924)	},
	[_Bloodbath]				= { known = IsPlayerSpell(12292)	},
	[_BloodFury]      			= { known = IsPlayerSpell(20572) 	}, 
	[_Bloodthirst]				= { known = IsPlayerSpell(23881)	},
	[_Charge]					= { known = IsPlayerSpell(100)		},
	[_Cleave]					= { known = IsPlayerSpell(845)		},
	[_ColossusSmash]			= { known = IsPlayerSpell(86346)	},
	[_CommandingShout]			= { known = IsPlayerSpell(469)		},
	[_DemoralizingBanner]		= { known = IsPlayerSpell(114203)	},
	[_DemoralizingShout]		= { known = IsPlayerSpell(1160)		},
	[_Devastate]				= { known = IsPlayerSpell(20243)	},
	[_DieByTheSword]			= { known = IsPlayerSpell(118038)	},
	[_Disarm]					= { known = IsPlayerSpell(676)		},
	[_DisruptingShout]			= { known = IsPlayerSpell(102060)	},
	[_DragonRoar]				= { known = IsPlayerSpell(118000)	},
	[_EnragedRegeneration]		= { known = IsPlayerSpell(55694)	},
	[_Execute]					= { known = IsPlayerSpell(5308)		},
	[_Hamstring]				= { known = IsPlayerSpell(1715)		},
	[_HeroicStrike]				= { known = IsPlayerSpell(78)		},
	[_HeroicLeap]				= { known = IsPlayerSpell(6544)		},
	[_HeroicThrow]				= { known = IsPlayerSpell(57755)	},
	[_ImpendingVictory]			= { known = IsPlayerSpell(103840)	},
	[_Intervene]				= { known = IsPlayerSpell(3411)		},
	[_IntimidatingShout]		= { known = IsPlayerSpell(5246)		},
	[_LastStand]				= { known = IsPlayerSpell(12975)	},
	[_MassSpellReflection]		= { known = IsPlayerSpell(114028)	},
	[_MockingBanner]			= { known = IsPlayerSpell(114192)	},
	[_MortalStrike]				= { known = IsPlayerSpell(12294)	},
	[_Overpower]				= { known = IsPlayerSpell(7384)		},
	[_PiercingHowl]				= { known = IsPlayerSpell(12323)	},
	[_Pummel]					= { known = IsPlayerSpell(6552)		},	
	[_RagingBlow]				= { known = IsPlayerSpell(85288)	},
	[_RallyingCry]				= { known = IsPlayerSpell(97462)	},
	[_Recklessness]				= { known = IsPlayerSpell(1719)		},
	[_Revenge]					= { known = IsPlayerSpell(6572)		},
	[_Safeguard]				= { known = IsPlayerSpell(114029)	},
	[_ShatteringThrow]			= { known = IsPlayerSpell(64382)	},
	[_ShieldBarrier]			= { known = IsPlayerSpell(112048)	},
	[_ShieldBlock]				= { known = IsPlayerSpell(2565)		},
	[_ShieldSlam]				= { known = IsPlayerSpell(23922)	},
	[_ShieldWall]				= { known = IsPlayerSpell(871)		},
	[_Shockwave]				= { known = IsPlayerSpell(46968)	},
	[_Slam]						= { known = IsPlayerSpell(1464)		},
	[_StormBolt]				= { known = IsPlayerSpell(107570)	},
	[_SkullBanner]				= { known = IsPlayerSpell(114207)	},
	[_StaggeringShout]			= { known = IsPlayerSpell(107566)	},
	[_SpellReflection]			= { known = IsPlayerSpell(23920)	},
	[_SweepingStrikes]			= { known = IsPlayerSpell(12328)	},
	[_Taunt]					= { known = IsPlayerSpell(355)		},
	[_ThunderClap]				= { known = IsPlayerSpell(6343)		},
	[_VictoryRush]				= { known = IsPlayerSpell(34428)	},
	[_Vigilance]				= { known = IsPlayerSpell(114030)	},
	[_WildStrike]				= { known = IsPlayerSpell(100130)	},
	[_Whirlwind]				= { known = IsPlayerSpell(1680)		},	
 }
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Status</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if _TasteForBlood then
	if _TasteForBlood &amp;gt;= 1 then CML_VengeanceFrame.HP1Bar:Show() else CML_VengeanceFrame.HP1Bar:Hide() end
	if _TasteForBlood &amp;gt;= 2 then CML_VengeanceFrame.HP2Bar:Show() else CML_VengeanceFrame.HP2Bar:Hide() end
	if _TasteForBlood &amp;gt;= 3 then CML_VengeanceFrame.HP3Bar:Show() else CML_VengeanceFrame.HP3Bar:Hide() end
	if _TasteForBlood &amp;gt;= 4 then CML_VengeanceFrame.HP4Bar:Show() else CML_VengeanceFrame.HP4Bar:Hide() end
	if _TasteForBlood &amp;gt;= 5 then CML_VengeanceFrame.HP5Bar:Show() else CML_VengeanceFrame.HP5Bar:Hide() end
end	



-- Vengeance Status
if _Spec == 3 then
	CML_MyVengeance = CML_GetVengeance()/1000
	CML_MyMaxVengeance = math.floor(UnitHealthMax(&amp;quot;player&amp;quot;)/2000)
	CML_MyVengeancePercent = math.floor((CML_MyVengeance/CML_MyMaxVengeance)*100)
	CML_SotRFrame:SetValue(CML_MyVengeancePercent)
	CML_SotRFrame.Text:SetText(CML_MyVengeancePercent, 1, 1, 1, 0.7)
	CML_SotRFrame:GetStatusBarTexture():SetTexture(217/255, 0/255, 0/255,0.90,&amp;quot;OVERLAY&amp;quot;)
	CML_SotRFrame:SetMinMaxValues(0, 100)
	CML_SotRFrame:Show() 
end
-- Rage
CML_VengeanceFrame:GetStatusBarTexture():SetTexture(217/255, 0/255, 0/255,0.90,&amp;quot;OVERLAY&amp;quot;)
CML_VengeanceFrame:SetValue(_Rage)
CML_VengeanceFrame.Text:SetText(_Rage..&amp;quot;/&amp;quot;.._RageMax, 1, 1, 1, 0.7)
CML_VengeanceFrame:SetMinMaxValues(0, _RageMax)
-- Health Status
CML_HealthFrame:SetValue(_HP)
CML_HealthFrame.healthbartext:SetText(math.floor(_HP)..&amp;quot;%&amp;quot;, 1, 1, 1, 1)
CML_HealthFrame.healthbarnumbers:SetText(UnitHealth(&amp;quot;player&amp;quot;)..&amp;quot; / &amp;quot;..UnitHealthMax(&amp;quot;player&amp;quot;), 1, 1, 1, 1)
CML_HPYellowValue = math.abs((_HP/100)-1)

if PlayerStatusValue == 1 then
	IlikeMyBarsGreenColored = false
else
	IlikeMyBarsGreenColored = true
end

if IlikeMyBarsGreenColored then
	if _HP &amp;gt;= 91 then CML_HealthFrame:GetStatusBarTexture():SetTexture(45/255, 214/255, 0/255,0.85,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 90 and _HP &amp;gt;= 81 then CML_HealthFrame:GetStatusBarTexture():SetTexture(90/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 80 and _HP &amp;gt;= 71  then CML_HealthFrame:GetStatusBarTexture():SetTexture(135/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 70 and _HP &amp;gt;= 61 then CML_HealthFrame:GetStatusBarTexture():SetTexture(180/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 60 and _HP &amp;gt;= 51 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 214/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 50 and _HP &amp;gt;= 41  then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 180/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 40 and _HP &amp;gt;= 31 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 135/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 30 and _HP &amp;gt;= 21 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 90/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 20 and _HP &amp;gt;= 11  then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 45/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
	if _HP &amp;lt;= 10 then CML_HealthFrame:GetStatusBarTexture():SetTexture(214/255, 40/255, 0/255,1,&amp;quot;OVERLAY&amp;quot;) end
else	
	CML_HealthFrame:GetStatusBarTexture():SetTexture(163/255, 107/255, 34/255,0.85,&amp;quot;OVERLAY&amp;quot;) 
end

if not PlayerStatusCheck then
	CML_VengeanceFrame:Hide()
else
	CML_VengeanceFrame:Show()
end

if CML_HaveDebuff(&amp;quot;target&amp;quot;,_ColossusSmash,0.5,&amp;quot;target&amp;quot;) then
	_Burn = true
else
	_Burn = false
end

if macros[&amp;quot;Stance&amp;quot;] == 1 then
	CML_VengeanceFrame.healingmodebartext:SetText(&amp;quot;BS&amp;quot;, 1, 1, 1, 0.7)
	CML_VengeanceFrame.healingmodebar:SetTexture(217/255, 0/255, 0/255,0.90)
	CML_VengeanceFrame.healingmodebartext:SetTextColor(255/255, 255/255, 255/255,1)
else
	CML_VengeanceFrame.healingmodebartext:SetText(&amp;quot;DS&amp;quot;, 1, 1, 1, 0.7)
	CML_VengeanceFrame.healingmodebar:SetTexture(74/255,100/255,255/255,0.90)
	CML_VengeanceFrame.healingmodebartext:SetTextColor(255/255, 255/255, 255/255,1)
end

--if CML_GetDistance(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) == nil then
--	CurrentDistanceToTarget = &amp;quot;:)&amp;quot;
--else
--	CurrentDistanceToTarget = CML_GetDistance(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
--end

if macros[&amp;quot;ActiveCooldowns&amp;quot;] then
	CML_VengeanceFrame.rangebar:SetTexture(45/255, 214/255, 0/255,0.85)
	CML_VengeanceFrame.rangebartext:SetText(&amp;quot;ON&amp;quot;, 0, 1, 0, 0.7)
else
	CML_VengeanceFrame.rangebar:SetTexture(191/255,0/255,0/255,0.85)
	CML_VengeanceFrame.rangebartext:SetText(&amp;quot;OFF&amp;quot;, 0, 1, 0, 0.7)
end


if CML_Pause() or macros[&amp;quot;Pause&amp;quot;] == true then
	CML_VengeanceFrame.Border:SetTexture(0/255, 0/255, 0/255,0.35)
	CML_SotRFrame.Border:SetTexture(0/255, 0/255, 0/255,0.35)
elseif not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
	CML_VengeanceFrame.Border:SetTexture(163/255, 107/255, 34/255,0.35)
	CML_SotRFrame.Border:SetTexture(163/255, 107/255, 34/255,0.35)
elseif CML_UnitFacing() ~= true or IsSpellInRange(_GI(78),&amp;quot;target&amp;quot;) ~= 1 then
	CML_VengeanceFrame.Border:SetTexture(1,0,0,0.35)
	CML_SotRFrame.Border:SetTexture(1,0,0,0.35)
elseif _Spec == 2 and ( _Burn == true or CML_HaveBuff(&amp;quot;player&amp;quot;,12880,0.5) == true ) 
  or _Spec == 1 and macros[&amp;quot;AoE&amp;quot;] == 1 and ( _Burn == true or CML_HaveBuff(&amp;quot;player&amp;quot;,12880,0.5) == true )
  or _Spec == 1 and macros[&amp;quot;AoE&amp;quot;] == 2 and CML_HaveBuff(&amp;quot;player&amp;quot;,12328,0.5) == true then
	CML_VengeanceFrame.Border:SetTexture(255/255, 132/255, 0/255,0.35)
	CML_SotRFrame.Border:SetTexture(255/255, 132/255, 0/255,0.35)
else
	CML_VengeanceFrame.Border:SetTexture(0,1,0,0.35)
	CML_SotRFrame.Border:SetTexture(0,1,0,0.35)
end

-- Display AoE Status
if _Spec ~= 2 then
if macros[&amp;quot;AoE&amp;quot;] == 2 then
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;AoE&amp;quot;, 255/255,255/255,0/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(191/255,0/255,0/255,0.85)
elseif macros[&amp;quot;AoE&amp;quot;] == 3 then
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Mass&amp;quot;, 255/255,255/255,255/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(0/255, 0/255, 255/255,0.90)
else
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Single&amp;quot;,255/255,255/255,0/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(45/255, 214/255, 0/255,0.85)
end
end
if _Spec == 2 then
if macros[&amp;quot;AoE&amp;quot;] == 2 then
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;2&amp;quot;, 255/255,255/255,0/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(191/255,0/255,0/255,0.85)
elseif macros[&amp;quot;AoE&amp;quot;] == 3 then
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;3&amp;quot;, 255/255,255/255,0/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(191/255,0/255,0/255,0.85)
elseif macros[&amp;quot;AoE&amp;quot;] == 4 then
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Mass&amp;quot;, 255/255,255/255,255/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(0/255, 0/255, 255/255,0.90)
else
	CML_VengeanceFrame.aoebartext:SetText(&amp;quot;Single&amp;quot;,255/255,255/255,0/255)
	CML_VengeanceFrame.aoebartext:SetTextColor(255/255, 255/255, 255/255)
	CML_VengeanceFrame.aoebar:SetTexture(45/255, 214/255, 0/255,0.85)
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Protection</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CML_Interrupts()
CML_Facing()
-- Macros Queues
if macros[&amp;quot;DisarmQueue&amp;quot;] and ( not SlowDisarm or SlowDisarm &amp;lt;= GetTime() - 2.5 ) then
	if Spells[_Disarm].known and _SA(_Disarm) then
		_Cast(_Disarm, &amp;quot;target&amp;quot;)
		macros[&amp;quot;DisarmQueue&amp;quot;] = false
		SlowDisarm = GetTime()
	end
end
if macros[&amp;quot;ExecuteQueue&amp;quot;] then
	if Spells[_Execute].known and _SA(_Execute) then
		_Cast(_Execute, &amp;quot;target&amp;quot;)
	end
end
if macros[&amp;quot;IntimidatingShoutQueue&amp;quot;] then
	if Spells[_IntimidatingShout].known and _SA(_IntimidatingShout) then
		_Cast(_IntimidatingShout, &amp;quot;target&amp;quot;)
	end
end
if macros[&amp;quot;ShatteringThrowQueue&amp;quot;] then
	if Spells[_ShatteringThrow].known and _SA(_ShatteringThrow) then
		_Cast(_ShatteringThrow, &amp;quot;target&amp;quot;)
	end
end  

-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end
-- Mocking Banner
if MockingBannerKey 
  and MockingBannerKeyCheck then 
	CastSpellByName(GetSpellInfo(114192))
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end  
	return true 
end
-- Demoralizing Banner
if DemoralizingBannerKey 
  and DemoralizingBannerKeyCheck then 
	CastSpellByName(GetSpellInfo(114203))
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end  
	return true 
end
-- Heroic Leap
if HeroicLeapCheck and HeroicLeap then
	_Cast(_HeroicLeap)
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end
	return true
end

if _Melee and UnitExists(&amp;quot;target&amp;quot;) == 1 then
CML_ActiveCooldowns()
-- Shield Wall
if ShieldWallCheck and Spells[_ShieldWall].known and _SA(_ShieldWall) and _HP &amp;lt;= ShieldWallValue then
	_Cast(_ShieldWall, &amp;quot;player&amp;quot;)
end
-- Shield Block
if _ShieldBlockCheck and Spells[_ShieldBlock].known and _SA(_ShieldBlock) and _HP &amp;lt;= _ShieldBlockValue then
	_Cast(_ShieldBlock, &amp;quot;player&amp;quot;)
end
-- Shield Barrier
if _ShieldBarrierCheck and Spells[_ShieldBlock].known and _SA(_ShieldBarrier) and _HP &amp;lt;= _ShieldBarrierValue then
	_Cast(_ShieldBarrier, &amp;quot;player&amp;quot;)
end
-- Enraged Regeneration
if EnragedGenerationCheck and Spells[_EnragedRegeneration].known and _SA(_EnragedRegeneration) and _HP &amp;lt;= EnragedRegeneration and EnragedRegenerationCheck then
	_Cast(_EnragedRegeneration, &amp;quot;player&amp;quot;)
end	
-- Last Stand
if LastStandCheck and Spells[_LastStand].known and _SA(_LastStand) and _HP &amp;lt;= LastStandValue and LastStandCheck then
	_Cast(_LastStand, &amp;quot;player&amp;quot;)
end
-- Blood Bath
if BloodbathCheck and Spells[_Bloodbath].known and _SA(_Bloodbath) then
	_Cast(_Bloodbath, &amp;quot;player&amp;quot;)
end
-- dps_cds+=/dragon_roar,if=talent.dragon_roar.enabled
if Spells[_DragonRoar].known and _SA(_DragonRoar) then
	_Cast(_DragonRoar, &amp;quot;player&amp;quot;)
	return true
end
-- dps_cds+=/shattering_throw
if ShatteringThrowCheck and Spells[_ShatteringThrow].known and _SA(_ShatteringThrow) then
	_Cast(_ShatteringThrow, &amp;quot;target&amp;quot;)
	return true
end
-- dps_cds+=/storm_bolt,if=talent.storm_bolt.enabled
if StormBoltCheck and Spells[_StormBolt].known and _SA(_StormBolt) and macros[&amp;quot;AoE&amp;quot;] == 1 then
	_Cast(_StormBolt, &amp;quot;target&amp;quot;)
	return true
end
-- dps_cds+=/shockwave,if=talent.shockwave.enabled
if Spells[_Shockwave].known and _SA(_Shockwave) and macros[&amp;quot;AoE&amp;quot;] ~= 1 then
	_Cast(_Shockwave, &amp;quot;player&amp;quot;)
	return true
end
-- dps_cds+=/bladestorm,if=talent.bladestorm.enabled
if Spells[_Bladestorm].known and _SA(_Bladestorm) then
	_Cast(_Bladestorm, &amp;quot;player&amp;quot;)
	return true
end
-- Heroic Strike
if Spells[_HeroicStrike].known and _SA(_HeroicStrike) and ( CML_HaveBuff(&amp;quot;player&amp;quot;, _Ultimatum) or _Rage &amp;gt;= 80 ) and macros[&amp;quot;AoE&amp;quot;] == 1 then
	_Cast(_HeroicStrike, CML_MeleeTarget())
end
-- Cleave
if Spells[_Cleave].known and _SA(_Cleave) and macros[&amp;quot;AoE&amp;quot;] ~= 1 and ( CML_HaveBuff(&amp;quot;player&amp;quot;, _Ultimatum) or _Rage &amp;gt;= 80 ) then
	_Cast(_Cleave, CML_MeleeTarget())
end
-- normal_rotation=shield_slam
if _Spec == 3 and Spells[_ShieldSlam].known and ( _SA(_ShieldSlam) or CML_HaveBuff(&amp;quot;player&amp;quot;, _SwordandBoard) )then
	_Cast(_ShieldSlam, CML_MeleeTarget())
	return true
end
-- normal_rotation+=/revenge
if Spells[_Revenge].known and _SA(_Revenge) then
	_Cast(_Revenge, CML_MeleeTarget())
	return true
end
-- normal_rotation+=/battle_shout,if=rage&amp;lt;=rage.max-20
if Spells[_Shout].known and _SA(_Shout) and _Rage &amp;lt;= 80 and ActiveShoutsCheck then
	_Cast(_Shout, nil)
	return true
end
-- normal_rotation+=/thunder_clap,if=glyph.resonating_power.enabled|target.debuff.weakened_blows.down
if Spells[_ThunderClap].known and _SA(_ThunderClap) and (( macros[&amp;quot;AoE&amp;quot;] == 1 and CML_HaveDebuff(CML_MeleeTarget(),_WeakBlows,1,&amp;quot;PLAYER&amp;quot;) ~= true ) or macros[&amp;quot;AoE&amp;quot;] ~= 1 ) then
	_Cast(_ThunderClap, nil)
	return true
end
-- normal_rotation+=/demoralizing_shout
if Spells[_DemoralizingShout].known and _SA(_DemoralizingShout) and _HP &amp;lt;= 60 then
	_Cast(_DemoralizingShout, &amp;quot;player&amp;quot;)
	return true
end
-- normal_rotation+=/impending_victory,if=talent.impending_victory.enabled
if Spells[_ImpendingVictory].known and _SA(_ImpendingVictory) and _Rage &amp;gt;= 10 and _HP &amp;lt;= 80 and macros[&amp;quot;AoE&amp;quot;] == 1 then
	_Cast(_ImpendingVictory, CML_MeleeTarget())
	return true
end
-- normal_rotation+=/victory_rush,if=!talent.impending_victory.enabled
if Spells[_VictoryRush].known and _SA(_VictoryRush) and CML_HaveBuff(&amp;quot;player&amp;quot;, _Vrushed) and macros[&amp;quot;AoE&amp;quot;] == 1 then
	_Cast(_VictoryRush, CML_MeleeTarget())
	return true
end
-- normal_rotation+=/devastate
if Spells[_Devastate].known and _SA(_Devastate) then
	_Cast(_Devastate, CML_MeleeTarget())
	return true
end
-- Execute
if _Spec == 2 and Spells[_Execute].known and _SA(_Execute) and macros[&amp;quot;AoE&amp;quot;] == 1 and CML_GetHP(CML_MeleeTarget()) &amp;lt;= 20 then
	_Cast(_Execute, CML_MeleeTarget())
	return true
end
end
-- Heroic Throw
if Spells[_HeroicThrow].known and _SA(_HeroicThrow) then
	_Cast(_HeroicThrow, &amp;quot;target&amp;quot;)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Arms</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CML_Interrupts()
CML_Facing()
-- Macros Queues
if macros[&amp;quot;DisarmQueue&amp;quot;] and ( not SlowDisarm or SlowDisarm &amp;lt;= GetTime() - 2.5 ) then
	if Spells[_Disarm].known and _SA(_Disarm) then
		_Cast(_Disarm, &amp;quot;target&amp;quot;)
		macros[&amp;quot;DisarmQueue&amp;quot;] = false
		SlowDisarm = GetTime()
	end
end
if macros[&amp;quot;ExecuteQueue&amp;quot;] then
	if Spells[_Execute].known and _SA(_Execute) then
		_Cast(_Execute, &amp;quot;target&amp;quot;)
	end
end
if macros[&amp;quot;IntimidatingShoutQueue&amp;quot;] then
	if Spells[_IntimidatingShout].known and _SA(_IntimidatingShout) then
		_Cast(_IntimidatingShout, &amp;quot;target&amp;quot;)
	end
end
if macros[&amp;quot;ShatteringThrowQueue&amp;quot;] then
	if Spells[_ShatteringThrow].known and _SA(_ShatteringThrow) then
		_Cast(_ShatteringThrow, &amp;quot;target&amp;quot;)
	end
end  

-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end
-- Mocking Banner
if MockingBannerKey 
  and MockingBannerKeyCheck then 
	CastSpellByName(GetSpellInfo(114192))
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end  
	return true 
end
-- Shield Wall
if ShieldWallCheck and Spells[_ShieldWall].known and _SA(_ShieldWall) and _HP &amp;lt;= ShieldWallValue then
	_Cast(_ShieldWall, &amp;quot;player&amp;quot;)
end
-- Demoralizing Banner
if DemoralizingBannerKey 
  and DemoralizingBannerKeyCheck then 
	CastSpellByName(GetSpellInfo(114203))
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end  
	return true 
end
--Heroic Leap
if HeroicLeapCheck and HeroicLeap then
	_Cast(_HeroicLeap)
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end
	return true
end
-- Locals
_Enraged = CML_HaveBuff(&amp;quot;player&amp;quot;,12880,0.1)
_RecklessnessBuff = _UB(&amp;quot;player&amp;quot;,_Recklessness)
_SmashUP = CML_HaveDebuff(&amp;quot;target&amp;quot;,_ColossusSmash,0,&amp;quot;player&amp;quot;)
_SuddenExecute = select(4,_UB(&amp;quot;player&amp;quot;,_Execute))
_DeepWounds = CML_HaveDebuff(&amp;quot;target&amp;quot;,115767)
_BloodBathBuff = _UB(&amp;quot;player&amp;quot;,12292)
_Strikes = CML_HaveBuff(&amp;quot;player&amp;quot;,_SweepingStrikes,3)
if select(2,CML_MeleeTarget()) and CML_GetHP(&amp;quot;target&amp;quot;) &amp;gt; 20 then _NoExec = true end
local _TrueRage = _Rage
if _Melee then
if UnitLevel(&amp;quot;player&amp;quot;) &amp;gt; 80 and GetSpellCD(_ColossusSmash) &amp;lt; 6 and not _RecklessnessBuff then
	_Rage = _Rage - 30
elseif not _Enraged and not _SmashUP and not _RecklessnessBuff and UnitLevel(&amp;quot;player&amp;quot;) &amp;gt; 80 then
	_Rage = _Rage - 10
end
CML_ActiveCooldowns()
if macros[&amp;quot;AoE&amp;quot;] == 1 then
if _SweepingSlow then _SweepingSlow = nil end
-- single_target=heroic_strike,if=rage&amp;gt;115|(debuff.colossus_smash.up&amp;rage&amp;gt;60&amp;set_bonus.tier16_2pc_melee)
if Spells[_HeroicStrike].known and _SA(_HeroicStrike) and ( _TrueRage &amp;gt;= 115 or UnitLevel(&amp;quot;player&amp;quot;) &amp;lt; 90 and _TrueRage &amp;gt;= 60 ) then
	_Cast(_HeroicStrike, &amp;quot;target&amp;quot;)
end
-- Blood Bath
if BloodbathCheck and Spells[_Bloodbath].known and _SA(_Bloodbath) and GetSpellCD(_ColossusSmash) &amp;lt; 2 then
	_Cast(_Bloodbath, &amp;quot;player&amp;quot;)
end
-- single_target+=/colossus_smash,if=debuff.colossus_smash.remains&amp;lt;1.0
if Spells[_ColossusSmash].known and _SA(_ColossusSmash) and CML_HaveDebuff(&amp;quot;target&amp;quot;, _ColossusSmash, 1) ~= true then
	_Cast(_ColossusSmash, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/mortal_strike
if Spells[_MortalStrike].known and _SA(_MortalStrike) and ( GetSpellCD(_ColossusSmash) &amp;gt; 0.5 or _SmashUP or not Spells[_ColossusSmash].known ) then
	_Cast(_MortalStrike, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/storm_bolt,if=enabled&amp;debuff.colossus_smash.up
if Spells[_StormBolt].known and _SA(_StormBolt) and _SmashUP then
	_Cast(_StormBolt, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/dragon_roar,if=enabled&amp;!debuff.colossus_smash.up
if Spells[_DragonRoar].known and _SA(_DragonRoar) and not _SmashUP and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_DragonRoar, nil)
	return true
end
-- single_target+=/execute,if=buff.sudden_execute.down|buff.taste_for_blood.down|rage&amp;gt;90|target.time_to_die&amp;lt;12
if Spells[_Execute].known and _SA(_Execute) and not _NoExec and _SmashUP and _TrueRage &amp;gt;= 90 then
	_Cast(_Execute, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/slam,if=target.health.pct&amp;gt;=20-----------------------------------------
if Spells[_Slam].known and _SA(_Slam) and _SmashUP and _Rage &amp;gt; 50 then
	_Cast(_Slam, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/overpower,if=target.health.pct&amp;gt;=20&amp;rage&amp;lt;100|buff.sudden_execute.up
if Spells[_Overpower].known and _SA(_Overpower) and _NoExec and ( _Rage &amp;gt; 30 or _SmashUP ) then
	_Cast(_Overpower, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/battle_shout
if Spells[_Shout].known and _SA(_Shout) and _Rage &amp;lt;= 60 and ActiveShoutsCheck then
	_Cast(_Shout, nil)
	return true
end
-- single_target+=/heroic_throw
if Spells[_HeroicThrow].known and _SA(_HeroicThrow) and GetSpellCD(_ColossusSmash) &amp;gt;= 1.5 and GetSpellCD(_MortalStrike) &amp;gt;= 1.5 then
	_Cast(_HeroicThrow, &amp;quot;target&amp;quot;)
	return true
end
end

if macros[&amp;quot;AoE&amp;quot;] == 2 then
-- aoe=sweeping_strikes
if not _SweepingSlow then
	_SweepingSlow = GetTime()
elseif _SweepingSlow &amp;lt;= GetTime() - 2 then
	if Spells[_SweepingStrikes].known and _SA(_SweepingStrikes) and _Rage &amp;gt;= 70 and ( GetSpellCD(_ColossusSmash) &amp;gt; 7 or GetSpellCD(_ColossusSmash) &amp;lt; 3 ) then
		_Cast(_SweepingStrikes, nil)
		return true
	end
end
-- Bloodbath
if BloodbathCheck and Spells[_Bloodbath].known and _SA(_Bloodbath) and GetSpellCD(_ColossusSmash) &amp;lt; 2 then
	_Cast(_Bloodbath, &amp;quot;player&amp;quot;)
end
-- aoe+=/cleave,if=rage&amp;gt;110&amp;active_enemies&amp;lt;=4
if Spells[_Cleave].known and _SA(_Cleave) and _TrueRage &amp;gt;= 105 then
	_Cast(_Cleave, &amp;quot;target&amp;quot;)
end
-- aoe+=/bladestorm,if=enabled&amp;(buff.bloodbath.up|!talent.bloodbath.enabled)
if Spells[_Bladestorm].known and _SA(_Bladestorm) and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_Bladestorm, &amp;quot;player&amp;quot;)
	return true
end
-- aoe+=/dragon_roar,if=enabled&amp;debuff.colossus_smash.down
if Spells[_DragonRoar].known and _SA(_DragonRoar) and not SmashUP and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_DragonRoar, nil)
	return true
end
-- aoe+=/colossus_smash,if=debuff.colossus_smash.remains&amp;lt;1
if Spells[_ColossusSmash].known and _SA(_ColossusSmash) and not _SmashUP then
	_Cast(_ColossusSmash, &amp;quot;target&amp;quot;)
	return true
end
-- aoe+=/thunder_clap,target=2,if=dot.deep_wounds.attack_power*1.1&amp;lt;stat.attack_power
if Spells[_ThunderClap].known and _SA(_ThunderClap) and not _SmashUP and ( not _ThunderTime or  _ThunderTime  &amp;lt;= GetTime() - 12 ) then
	_Cast(_ThunderClap, nil)
	return true
end
-- aoe+=/mortal_strike,if=active_enemies=2|rage&amp;lt;50
if Spells[_MortalStrike].known and _SA(_MortalStrike) and _Rage &amp;lt; 50 then
	_Cast(_MortalStrike, &amp;quot;target&amp;quot;)
end
-- aoe+=/execute,if=buff.sudden_execute.down&amp;active_enemies=2
if Spells[_Execute].known and _SA(_Execute) and _SuddenExecute then
	_Cast(_Execute, &amp;quot;target&amp;quot;)
	return true
end
-- aoe+=/slam,if=buff.sweeping_strikes.up&amp;debuff.colossus_smash.up
if Spells[_Slam].known and _SA(_Slam) and _Strikes and _SmashUP then
	_Cast(_Slam, &amp;quot;target&amp;quot;)
	return true
end
-- aoe+=/overpower,if=active_enemies=2
if Spells[_Overpower].known and _SA(_Overpower) and _Rage &amp;gt; 100 then
	_Cast(_Overpower, &amp;quot;target&amp;quot;)
	return true
end
-- aoe+=/slam,if=buff.sweeping_strikes.up
if Spells[_Slam].known and _SA(_Slam) and ( _Strikes or ( _SmashUP and _Rage &amp;gt; 80 ) ) then
	_Cast(_Slam, &amp;quot;target&amp;quot;)
	return true
end
-- aoe+=/battle_shout
if Spells[_Shout].known and _SA(_Shout) and _Rage &amp;lt;= 70 and ActiveShoutsCheck then
	_Cast(_Shout, nil)
	return true
end
-- Storm Bolt
if Spells[_StormBolt].known and _SA(_StormBolt) and _SmashUP then
	_Cast(_StormBolt, &amp;quot;target&amp;quot;)
	return true
end
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Rotation Fury</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CML_Interrupts()
CML_Facing()
-- Macros Queues
if macros[&amp;quot;DisarmQueue&amp;quot;] and ( not SlowDisarm or SlowDisarm &amp;lt;= GetTime() - 2.5 ) then
	if Spells[_Disarm].known and _SA(_Disarm) then
		_Cast(_Disarm, &amp;quot;target&amp;quot;)
		macros[&amp;quot;DisarmQueue&amp;quot;] = false
		SlowDisarm = GetTime()
	end
end
if macros[&amp;quot;ExecuteQueue&amp;quot;] then
	if Spells[_Execute].known and _SA(_Execute) then
		_Cast(_Execute, &amp;quot;target&amp;quot;)
	end
end
if macros[&amp;quot;IntimidatingShoutQueue&amp;quot;] then
	if Spells[_IntimidatingShout].known and _SA(_IntimidatingShout) then
		_Cast(_IntimidatingShout, &amp;quot;target&amp;quot;)
	end
end
if macros[&amp;quot;ShatteringThrowQueue&amp;quot;] then
	if Spells[_ShatteringThrow].known and _SA(_ShatteringThrow) then
		_Cast(_ShatteringThrow, &amp;quot;target&amp;quot;)
	end
end  

-- HealthStone
if _HP &amp;lt;= Healthstone
  and HealthstoneCheck
  and select(2,GetItemCooldown(5512)) == 0 
  and GetItemCount(5512,false,true) &amp;gt; 0 then 
	UseItemByName(5512)
	return true
end
-- Shield Wall
if ShieldWallCheck and Spells[_ShieldWall].known and _SA(_ShieldWall) and _HP &amp;lt;= ShieldWallValue then
	_Cast(_ShieldWall, &amp;quot;player&amp;quot;)
end
-- Mocking Banner
if MockingBannerKey 
  and MockingBannerKeyCheck then 
	CastSpellByName(GetSpellInfo(114192))
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end  
	return true 
end
-- Demoralizing Banner
if DemoralizingBannerKey 
  and DemoralizingBannerKeyCheck then 
	CastSpellByName(GetSpellInfo(114203))
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end  
	return true 
end
--Heroic Leap
if HeroicLeapCheck and HeroicLeap then
	_Cast(_HeroicLeap)
	if SpellIsTargeting() then 
		CameraOrSelectOrMoveStart() 
		CameraOrSelectOrMoveStop() 
	end
	return true
end
-- Locals
local _Enraged = CML_HaveBuff(&amp;quot;player&amp;quot;,12880,0.1)
local _SmashUP = CML_HaveDebuff(&amp;quot;target&amp;quot;,_ColossusSmash,1,&amp;quot;target&amp;quot;)
local _RagingStacks = select(4,_UB(&amp;quot;player&amp;quot;,_RagingBlow))
local _BloodSurgeBuff = _UB(&amp;quot;player&amp;quot;,46916)
local _BloodBathBuff = _UB(&amp;quot;player&amp;quot;,12292)
local _MeatCleaverStacks = select(4,_UB(&amp;quot;player&amp;quot;,85739))
if select(2,&amp;quot;target&amp;quot;) and CML_GetHP(&amp;quot;target&amp;quot;) &amp;gt; 20 then _NoExec = true end
if _Melee then
CML_ActiveCooldowns()
if macros[&amp;quot;AoE&amp;quot;] == 1 then
if GetSpellCD(_ColossusSmash) &amp;lt; 6 then
	_Rage = _Rage - 50
elseif not _Enraged and not _SmashUP then
	_Rage = _Rage - 30
end
if GetSpellCD(_ColossusSmash) &amp;lt; 2 then CML_ActiveCooldowns() end
-- single_target=bloodbath,if=enabled&amp;(cooldown.colossus_smash.remains&amp;lt;2|debuff.colossus_smash.remains&amp;gt;=5|target.time_to_die&amp;lt;=20)
if BloodbathCheck and Spells[_Bloodbath].known and _SA(_Bloodbath) and GetSpellCD(_ColossusSmash) &amp;lt; 2 then
	_Cast(_Bloodbath, &amp;quot;player&amp;quot;)
end
-- single_target+=/heroic_strike,if=((debuff.colossus_smash.up&amp;rage&amp;gt;=40)&amp;target.health.pct&amp;gt;=20)|rage&amp;gt;=100&amp;buff.enrage.up
if Spells[_HeroicStrike].known and _SA(_HeroicStrike) and ( ( ( CML_HaveDebuff(&amp;quot;target&amp;quot;,86346) and CML_HaveDebuff(&amp;quot;target&amp;quot;,86346,1) ~= true and _Rage &amp;gt;= 30) or (_SmashUP and _Rage &amp;gt;= 40 ) and _NoExec ) or ( _Enraged and _Rage &amp;gt;= 40 ) or _Rage &amp;gt;= 45 ) then
	_Cast(_HeroicStrike, &amp;quot;target&amp;quot;)
	CML_Facing()
end
-- single_target+=/storm_bolt,if=enabled&amp;buff.cooldown_reduction.up&amp;debuff.colossus_smash.up
if Spells[_StormBolt].known and _SA(_StormBolt) and _SmashUP then
	_Cast(_StormBolt, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/raging_blow,if=buff.raging_blow.stack=2&amp;debuff.colossus_smash.up&amp;target.health.pct&amp;gt;=20
if Spells[_RagingBlow].known and _SA(_RagingBlow) and _RagingStacks == 2 and _SmashUP and _NoExec then
	_Cast(_RagingBlow, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/storm_bolt,if=enabled&amp;buff.cooldown_reduction.down&amp;debuff.colossus_smash.up
if Spells[_StormBolt].known and _SA(_StormBolt) and _SmashUP then
	_Cast(_StormBolt, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/bloodthirst,if=!(target.health.pct&amp;lt;20&amp;debuff.colossus_smash.up&amp;rage&amp;gt;=30&amp;buff.enrage.up)
if Spells[_Bloodthirst].known and _SA(_Bloodthirst) and not ( _NoExec == false and _SmashUP and _Rage &amp;gt;= 30 and _Enraged ) then
	_Cast(_Bloodthirst, &amp;quot;target&amp;quot;)
	CML_Facing()
	return true
end	

-- single_target+=/wild_strike,if=buff.bloodsurge.react&amp;target.health.pct&amp;gt;=20&amp;cooldown.bloodthirst.remains&amp;lt;=1
if Spells[_WildStrike].known and _SA(_WildStrike) and _BloodSurgeBuff and _NoExec and GetSpellCD(_Bloodthirst) &amp;lt;= 1 then
	_Cast(_WildStrike, &amp;quot;target&amp;quot;)
	return true
end	
-- single_target+=/wait,sec=cooldown.bloodthirst.remains,if=!(target.health.pct&amp;lt;20&amp;debuff.colossus_smash.up&amp;rage&amp;gt;=30&amp;buff.enrage.up)&amp;cooldown.bloodthirst.remains&amp;lt;=1&amp;cooldown.bloodthirst.remains
if not _NoExec and _SmashUP and _Enraged and GetSpellCD(_Bloodthirst) &amp;lt;= 1 then return true end

-- single_target+=/dragon_roar,if=enabled&amp;(!debuff.colossus_smash.up&amp;(buff.bloodbath.up|!talent.bloodbath.enabled))
if Spells[_DragonRoar].known and _SA(_DragonRoar) and not _SmashUP and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_DragonRoar, nil)
	return true
end
-- single_target+=/colossus_smash
if Spells[_ColossusSmash].known and _SA(_ColossusSmash) and not _SmashUP then
	_Cast(_ColossusSmash, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/storm_bolt,if=enabled&amp;buff.cooldown_reduction.down
if Spells[_StormBolt].known and _SA(_StormBolt) then
	_Cast(_StormBolt, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/execute,if=debuff.colossus_smash.up|rage&amp;gt;70|target.time_to_die&amp;lt;12
if Spells[_Execute].known and _SA(_Execute) and not _NoExec and ( _SmashUP or _Rage &amp;gt;= 70 ) then
	_Cast(_Execute, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/raging_blow,if=target.health.pct&amp;lt;20 or buff.raging_blow.stack=2 or (debuff.colossus_smash.up or(cooldown.bloodthirst.remains&amp;gt;=1&amp;buff.raging_blow.remains&amp;lt;=3))
if Spells[_RagingBlow].known and _SA(_RagingBlow) and ( not _NoExec or _SmashUP or GetSpellCD(_Bloodthirst) &amp;gt;= 1 and CML_HaveBuff(&amp;quot;player&amp;quot;,_RagingBlow,3) ~= true ) then 
	if select(4,_UB(&amp;quot;player&amp;quot;,131116)) == 1 then
		_Cast(_RagingBlow, &amp;quot;target&amp;quot;)
		return true
	end
end	
-- single_target+=/wild_strike,if=buff.bloodsurge.up
if Spells[_WildStrike].known and _SA(_WildStrike) and _BloodSurgeBuff then
	_Cast(_WildStrike, &amp;quot;target&amp;quot;)
	return true
end	
-- single_target+=/bladestorm,if=enabled&amp;cooldown.bloodthirst.remains&amp;gt;2
if Spells[_Bladestorm].known and _SA(_Bladestorm) and GetSpellCD(_Bloodthirst) &amp;gt; 2 then
	_Cast(_Bladestorm, &amp;quot;player&amp;quot;)
	return true
end
-- single_target+=/raging_blow,if=cooldown.colossus_smash.remains&amp;gt;=3
if Spells[_RagingBlow].known and _SA(_RagingBlow) and GetSpellCD(_ColossusSmash) &amp;gt;= 3 then 
	_Cast(_RagingBlow, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/shockwave,if=enabled
if Spells[_Shockwave].known and _SA(_Shockwave) and GetSpellCD(_ColossusSmash) &amp;gt;= 1 and GetSpellCD(_Bloodthirst) &amp;gt; 1 then
	_Cast(_Shockwave, &amp;quot;player&amp;quot;)
	return true
end
-- single_target+=/heroic_throw,if=debuff.colossus_smash.down&amp;rage&amp;lt;60
if Spells[_Shockwave].known and _SA(_Shockwave) and GetSpellCD(_ColossusSmash) &amp;gt;= 1 and GetSpellCD(_Bloodthirst) &amp;gt; 1 and _Rage &amp;lt; 60 then
	_Cast(_Shockwave, &amp;quot;player&amp;quot;)
	return true
end
-- single_target+=/battle_shout,if=rage&amp;lt;70&amp;!debuff.colossus_smash.up
if Spells[_Shout].known and _SA(_Shout) and _Rage &amp;lt;= 70 and ActiveShoutsCheck and not _SmashUP and GetSpellCD(_Bloodthirst) &amp;gt; 1 then
	_Cast(_Shout, nil)
	return true
end
-- single_target+=/battle_shout,if=rage&amp;lt;70
if Spells[_Shout].known and _SA(_Shout) and _Rage &amp;lt;= 70 and ActiveShoutsCheck then
	_Cast(_Shout, nil)
	return true
end
-- single_target+=/shattering_throw,if=cooldown.colossus_smash.remains&amp;gt;5
if ShatteringThrowCheck and Spells[_ShatteringThrow].known and _SA(_ShatteringThrow) and not PQR_IsMoving() and GetSpellCD(_ColossusSmash) &amp;gt; 5 and not _SmashUP then
	_Cast(_ShatteringThrow, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/wild_strike,if=cooldown.colossus_smash.remains&amp;gt;=2&amp;rage&amp;gt;=70&amp;target.health.pct&amp;gt;=20
if Spells[_WildStrike].known and _SA(_WildStrike) and ( ( _SmashUP and _Rage &amp;gt;= 90 ) or ( GetSpellCD(_ColossusSmash) &amp;gt; 2 and _Rage &amp;gt;= 20 ) ) and _NoExec then
	_Cast(_WildStrike, &amp;quot;target&amp;quot;)
	return true
end	
-- single_target+=/impending_victory,if=enabled&amp;target.health.pct&amp;gt;=20&amp;cooldown.colossus_smash.remains&amp;gt;=2
if Spells[_ImpendingVictory].known and _SA(_ImpendingVictory) and GetSpellCD(_ColossusSmash) &amp;gt; 2 and _NoExec then
	_Cast(_ImpendingVictory, &amp;quot;target&amp;quot;)
	return true
end

-- normal_rotation+=/victory_rush,if=!talent.impending_victory.enabled
if Spells[_VictoryRush].known and _SA(_VictoryRush) and GetSpellCD(_ColossusSmash) &amp;gt; 2 and _NoExec then
	_Cast(_VictoryRush, &amp;quot;target&amp;quot;)
	return true
end
end











if macros[&amp;quot;AoE&amp;quot;] == 2 then

-- two_targets=bloodbath,if=enabled&amp;buff.enrage.up
if BloodbathCheck and Spells[_Bloodbath].known and _SA(_Bloodbath) and _SmashUP then
	_Cast(_Bloodbath, &amp;quot;player&amp;quot;)
end
-- two_targets+=/cleave,if=(rage&amp;gt;=60&amp;debuff.colossus_smash.up)|rage&amp;gt;90
if Spells[_Cleave].known and _SA(_Cleave) and ( ( _SmashUP and _Rage &amp;gt;= 60 ) or _Rage &amp;gt;= 90  ) then
	_Cast(_Cleave, &amp;quot;target&amp;quot;)
end
-- two_targets+=/dragon_roar,if=enabled&amp;(!debuff.colossus_smash.up&amp;(buff.bloodbath.up|!talent.bloodbath.enabled))
if Spells[_DragonRoar].known and _SA(_DragonRoar) and not SmashUP and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_DragonRoar, nil)
	return true
end
-- two_targets+=/bladestorm,if=enabled&amp;buff.enrage.up&amp;(buff.bloodbath.up|!talent.bloodbath.enabled
if Spells[_Bladestorm].known and _SA(_Bladestorm) and _Enraged and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_Bladestorm, &amp;quot;player&amp;quot;)
	return true
end
-- two_targets+=/shockwave,if=enabled
if Spells[_Shockwave].known and _SA(_Shockwave) then
	_Cast(_Shockwave, &amp;quot;player&amp;quot;)
	return true
end
-- two_targets+=/colossus_smash
if Spells[_ColossusSmash].known and _SA(_ColossusSmash) and not _SmashUP and _Rage &amp;gt;= 40 then
	_Cast(_ColossusSmash, &amp;quot;target&amp;quot;)
	return true
end
-- two_targets+=/bloodthirst,cycle_targets=1,if=dot.deep_wounds.remains&amp;lt;5

-- two_targets+=/bloodthirst,if=!(target.health.pct&amp;lt;20&amp;debuff.colossus_smash.up&amp;rage&amp;gt;=30&amp;buff.enrage.up)
if Spells[_Bloodthirst].known and _SA(_Bloodthirst) and not ( _NoExec == false and _SmashUP and _Rage &amp;gt;= 30 and _Enraged ) then
	_Cast(_Bloodthirst, &amp;quot;target&amp;quot;)
	return true
end	
-- two_targets+=/storm_bolt,if=enabled
if Spells[_StormBolt].known and _SA(_StormBolt) then
	_Cast(_StormBolt, &amp;quot;target&amp;quot;)
	return true
end
-- two_targets+=/wait,sec=cooldown.bloodthirst.remains,if=!(target.health.pct&amp;lt;20&amp;debuff.colossus_smash.up&amp;rage&amp;gt;=30&amp;buff.enrage.up)&amp;cooldown.bloodthirst.remains&amp;lt;=1&amp;cooldown.bloodthirst.remains
if not _NoExec and _SmashUP and _Rage &amp;gt;= 30 and _Enraged and GetSpellCD(_Bloodthirst) &amp;lt;= 1 then return true end
-- two_targets+=/execute,if=debuff.colossus_smash.up
if Spells[_Execute].known and _SA(_Execute) and not _NoExec and _SmashUP and _Rage &amp;gt;= 40 then
	_Cast(_Execute, &amp;quot;target&amp;quot;)
	return true
end
-- two_targets+=/raging_blow,if=buff.meat_cleaver.up|target.health.pct&amp;lt;20
if Spells[_RagingBlow].known and _SA(_RagingBlow) and _MeatCleaverStacks ~= nil or not _NoExec then 
	_Cast(_RagingBlow, &amp;quot;target&amp;quot;)
	return true
end
-- two_targets+=/whirlwind,if=!buff.meat_cleaver.up
if Spells[_Whirlwind].known and _SA(_Whirlwind) and ( _MeatCleaverStacks ~= 3 or (CML_HaveBuff(&amp;quot;player&amp;quot;,85739) == true and CML_HaveBuff(&amp;quot;player&amp;quot;,85739,3) ~= true ) ) then 
	_Cast(_Whirlwind, &amp;quot;target&amp;quot;)
	return true
end
-- two_targets+=/battle_shout
if Spells[_Shout].known and _SA(_Shout) and ActiveShoutsCheck then
	_Cast(_Shout, nil)
	return true
end
-- single_target+=/wild_strike,if=cooldown.colossus_smash.remains&amp;gt;=2&amp;rage&amp;gt;=70&amp;target.health.pct&amp;gt;=20
if Spells[_WildStrike].known and _SA(_WildStrike) and GetSpellCD(_ColossusSmash) &amp;gt; 2 and _Rage &amp;gt;= 70 and _NoExec then
	_Cast(_WildStrike, &amp;quot;target&amp;quot;)
	return true
end	
-- two_targets+=/heroic_throw
if Spells[_HeroicThrow].known and _SA(_HeroicThrow) then
	_Cast(_HeroicThrow, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/wild_strike,if=cooldown.colossus_smash.remains&amp;gt;=2&amp;rage&amp;gt;=70&amp;target.health.pct&amp;gt;=20
if Spells[_WildStrike].known and _SA(_WildStrike) and _BloodSurgeBuff then
	_Cast(_WildStrike, &amp;quot;target&amp;quot;)
	return true
end	
end



if macros[&amp;quot;AoE&amp;quot;] == 3 then

-- three_targets=bloodbath,if=enabled&amp;buff.enrage.up
if BloodbathCheck and Spells[_Bloodbath].known and _SA(_Bloodbath) and _SmashUP then
	_Cast(_Bloodbath, &amp;quot;player&amp;quot;)
end
-- three_targets+=/cleave,if=(rage&amp;gt;=60&amp;debuff.colossus_smash.up)|rage&amp;gt;90
if Spells[_Cleave].known and _SA(_Cleave) and _SmashUP and _Rage &amp;gt;= 60 then
	_Cast(_Cleave, &amp;quot;target&amp;quot;)
end
-- three_targets+=/dragon_roar,if=enabled&amp;(!debuff.colossus_smash.up&amp;(buff.bloodbath.up|!talent.bloodbath.enabled))
if Spells[_DragonRoar].known and _SA(_DragonRoar) and not _SmashUP and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_DragonRoar, nil)
	return true
end
-- three_targets+=/shockwave,if=enabled
if Spells[_Shockwave].known and _SA(_Shockwave) then
	_Cast(_Shockwave, &amp;quot;player&amp;quot;)
	return true
end
-- three_targets+=/bladestorm,if=enabled&amp;buff.enrage.up&amp;(buff.bloodbath.up|!talent.bloodbath.enabled)
if Spells[_Bladestorm].known and _SA(_Bladestorm) and _Enraged and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_Bladestorm, &amp;quot;player&amp;quot;)
	return true
end
-- three_targets+=/colossus_smash
if Spells[_ColossusSmash].known and _SA(_ColossusSmash) and not _SmashUP then
	_Cast(_ColossusSmash, &amp;quot;target&amp;quot;)
	return true
end
-- three_targets+=/storm_bolt,if=enabled
if Spells[_StormBolt].known and _SA(_StormBolt) then
	_Cast(_StormBolt, &amp;quot;target&amp;quot;)
	return true
end
-- three_targets+=/raging_blow,if=buff.meat_cleaver.stack=2
if Spells[_RagingBlow].known and _SA(_RagingBlow) and _MeatCleaverStacks ~= nil and _MeatCleaverStacks &amp;gt;= 2 then 
	_Cast(_RagingBlow, &amp;quot;target&amp;quot;)
	return true
end
-- three_targets+=/bloodthirst,cycle_targets=1,if=!dot.deep_wounds.ticking
if Spells[_Bloodthirst].known and _SA(_Bloodthirst) then
	_Cast(_Bloodthirst, &amp;quot;target&amp;quot;)
	return true
end	
-- three_targets+=/whirlwind
if Spells[_Whirlwind].known and _SA(_Whirlwind) and _Rage &amp;gt;= 40 then 
	_Cast(_Whirlwind, &amp;quot;target&amp;quot;)
	return true
end
-- three_targets+=/raging_blow
if Spells[_RagingBlow].known and _SA(_RagingBlow) then 
	_Cast(_RagingBlow, &amp;quot;target&amp;quot;)
	return true
end
-- three_targets+=/battle_shout,if=rage&amp;lt;70
if Spells[_Shout].known and _SA(_Shout) and ActiveShoutsCheck then
	_Cast(_Shout, nil)
	return true
end
-- three_targets+=/heroic_throw
if Spells[_HeroicThrow].known and _SA(_HeroicThrow) then
	_Cast(_HeroicThrow, &amp;quot;target&amp;quot;)
	return true
end
-- single_target+=/wild_strike,if=cooldown.colossus_smash.remains&amp;gt;=2&amp;rage&amp;gt;=70&amp;target.health.pct&amp;gt;=20
if Spells[_WildStrike].known and _SA(_WildStrike) and _BloodSurgeBuff then
	_Cast(_WildStrike, &amp;quot;target&amp;quot;)
	return true
end	
end

if macros[&amp;quot;AoE&amp;quot;] == 4 then

-- aoe=bloodbath,if=enabled&amp;buff.enrage.up
if BloodbathCheck and Spells[_Bloodbath].known and _SA(_Bloodbath) then
	_Cast(_Bloodbath, &amp;quot;player&amp;quot;)
end
-- aoe+=/cleave,if=rage&amp;gt;110
if Spells[_Cleave].known and _SA(_Cleave) and _Rage &amp;gt;= 110 then
	_Cast(_Cleave, &amp;quot;target&amp;quot;)
end
-- aoe+=/dragon_roar,if=enabled&amp;!debuff.colossus_smash.up&amp;(buff.bloodbath.up|!talent.bloodbath.enabled)
if Spells[_DragonRoar].known and _SA(_DragonRoar) and not SmashUP and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_DragonRoar, nil)
	return true
end
-- aoe+=/bladestorm,if=enabled&amp;buff.enrage.up&amp;(buff.bloodbath.up|!talent.bloodbath.enabled)
if Spells[_Bladestorm].known and _SA(_Bladestorm) and _Enraged and ( _BloodBathBuff or not Spells[_Bloodbath].known ) then
	_Cast(_Bladestorm, &amp;quot;player&amp;quot;)
	return true
end
-- aoe+=/shockwave,if=enabled
if Spells[_Shockwave].known and _SA(_Shockwave) then
	_Cast(_Shockwave, &amp;quot;player&amp;quot;)
	return true
end
-- aoe+=/bloodthirst,cycle_targets=1,if=!dot.deep_wounds.ticking&amp;buff.enrage.down
if Spells[_Bloodthirst].known and _SA(_Bloodthirst) then
	_Cast(_Bloodthirst, &amp;quot;target&amp;quot;)
	return true
end	
-- aoe+=/raging_blow,if=buff.meat_cleaver.stack=3
if Spells[_RagingBlow].known and _SA(_RagingBlow) and _MeatCleaverStacks ~= nil and _MeatCleaverStacks &amp;gt;= 3 then 
	_Cast(_RagingBlow, &amp;quot;target&amp;quot;)
	return true
end
-- aoe+=/whirlwind
if Spells[_Whirlwind].known and _SA(_Whirlwind) and _Rage &amp;gt;= 40 then 
	_Cast(_Whirlwind, &amp;quot;target&amp;quot;)
	return true
end
-- aoe+=/colossus_smash
if Spells[_ColossusSmash].known and _SA(_ColossusSmash) and not _SmashUP then
	_Cast(_ColossusSmash, &amp;quot;target&amp;quot;)
	return true
end
-- aoe+=/battle_shout,if=rage&amp;lt;70
if Spells[_Shout].known and _SA(_Shout) and ActiveShoutsCheck and _Rage &amp;lt; 70 then
	_Cast(_Shout, nil)
	return true
end
-- single_target+=/wild_strike,if=cooldown.colossus_smash.remains&amp;gt;=2&amp;rage&amp;gt;=70&amp;target.health.pct&amp;gt;=20
if Spells[_WildStrike].known and _SA(_WildStrike) and _BloodSurgeBuff then
	_Cast(_WildStrike, &amp;quot;target&amp;quot;)
	return true
end	
end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Extras --	
-- Set Mouseover Focus
if FocusKey 
  and FocusKeyCheck then
	FocusUnit(&amp;quot;mouseover&amp;quot;)
end

if Facing == nil then Facing = true end

-- Feast Taker
if FeastTakerCheck then
	if not UnitBuffID(&amp;quot;player&amp;quot;, 104934)
	  and (not UnitBuffID(&amp;quot;player&amp;quot;, 104282) or not UnitBuffID(&amp;quot;player&amp;quot;, 104271))
	  and not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if  FeastTimer == nil then
			FeastTimer = GetTime()
		elseif GetTime() &amp;gt;= FeastTimer + 5 then
			RunMacroText(&amp;quot;/console Sound_EnableSFX 0&amp;quot;)
			InteractUnit(&amp;quot;Pandaren Banquet&amp;quot;)
			InteractUnit(&amp;quot;Great Pandaren Banquet&amp;quot;)
			RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
			RunMacroText(&amp;quot;/console Sound_EnableSFX 1&amp;quot;)
	 		FeastTimer = nil
		end		
	end
end

-- Shout Selector
if ActiveShouts == 2 then _Shout = _CommandingShout else _Shout = _BattleShout end

-- Soulwell Taker
if FeastTakerCheck 
  and GetItemCount(5512,false,true) &amp;lt; 3 then
	if not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if  SoulTimer == nil then
			SoulTimer = GetTime()
		elseif GetTime() &amp;gt; SoulTimer + 5 then
			RunMacroText(&amp;quot;/console Sound_EnableSFX 0&amp;quot;)
			InteractUnit(&amp;quot;Soulwell&amp;quot;)
			RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
			RunMacroText(&amp;quot;/console Sound_EnableSFX 1&amp;quot;)
	 		SoulTimer = nil
		end		
	end
end

if CML_StopAll() then return true end
--------- Combat Check ---------
if ( CombatCheckCheck and CML_CombatCheck() ) or CML_Pause() then return true end
CML_Facing()

if GetShapeshiftForm() ~= macros[&amp;quot;Stance&amp;quot;] then
	CastShapeshiftForm(macros[&amp;quot;Stance&amp;quot;])
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--- Updates</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CodeMyLife Warrior 1.03
- Implemented /stancedance macro.

CodeMyLife 1.02
- Some more tunings to better support leveling(Arms).

CodeMyLife 1.01 November 8, 2013
- Improvements to support leveling from level 1.
- Small adjustments to the Bar.
- Implemented /pause macro.

CodeMyLife 1.0 November 8, 2013
- Initial Release.</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARRIOR>