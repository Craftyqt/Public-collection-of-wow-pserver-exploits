<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>[             CONFIG             ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>---------------------------------------------------------------------			
-- CONFIG KEYBINDINGS AND OTHER OPTIONS HERE! ENJOY MY PROFILE :)  --
--__________                __           __   .__.__  .__          --
--\______   \_____ ________/  |_ ___.__.|  | _|__|  | |  | _____   --
-- |     ___/\__  \\_  __ \   __&amp;lt;   |  ||  |/ /  |  | |  | \__  \  --
-- |    |     / __ \|  | \/|  |  \___  ||    &amp;lt;|  |  |_|  |__/ __ \_--
-- |____|    (____  /__|   |__|  / ____||__|_ \__|____/____(____  /--
--                \/             \/          \/                 \/ --
-- PLEASE GIVE FEEDBACKS AND REP !! WANNA USE MY STUFF? ASK ME, TY --
---------------------------------------------------------------------
-------------------------------------------------------------
--________          __  .__                          
--\_____  \ _______/  |_|__| ____   ____   ______ /\ 
-- /   |   \\____ \   __\  |/  _ \ /    \ /  ___/ \/ 
--/    |    \  |_&amp;gt; &amp;gt;  | |  (  &amp;lt;_&amp;gt; )   |  \\___ \  /\ 
--\_______  /   __/|__| |__|\____/|___|  /____  &amp;gt; \/ 
--        \/|__|                       \/     \/     
TEXT 				= true	--Raid Warning Combat Log&amp;lt;3
intPctDelay			= 25	--Percentage of cast before interrupt.
useDR 				= true	--Automatically Use Dragon Roar
breakFearWithZerk	= true 	--Save Berserker&amp;apos;s Rage to break cc&amp;apos;s
ccTrinketUse		= false 	--Use CC Trinket? :)
autoDisarm			= true 	--Automatically Disarm
autoShieldWall		= true 	--Automatically Shield Wall
autoSpellReflect	= true 	--Automatically Spell Reflect
autoStance			= true 	--Force you in the correct stance
autoRally			= true 	--Automatic Rallying Cry
autoDieByTheSword	= true 	--Automatic Die By The Sword
autoHealthStone		= true 	--Automatic Healthstone Usage					
chargeInterrupt		= true	--if you&amp;apos;re NOT popping offensive cooldowns, auto charge to interrupt							
eatFocusTraps		= true	--If your focus is set to a friendly player will safeguard/intervene
							--to them when necessary to eat a hunter&amp;apos;s trap.
eatTrapMass			= true	--Eat traps also or alone with mass spell reflect
dpsTrinket			= 13	--Dps trinket slot
ccTrinket			= 14	--CC Trinket slot
healthTrinket  		= nil 	--Set to the number of your trinket for auto use. (13 or 14)
AutoPause 			= true	--
----------------------------------------------------------------------------------
-- ____  __.            ___.   .__            .___          
--|    |/ _|____ ___.__.\_ |__ |__| ____    __| _/______ /\ 
--|      &amp;lt;_/ __ &amp;lt;   |  | | __ \|  |/    \  / __ |/  ___/ \/ 
--|    |  \  ___/\___  | | \_\ \  |   |  \/ /_/ |\___ \  /\ 
--|____|__ \___  &amp;gt; ____| |___  /__|___|  /\____ /____  &amp;gt; \/ 
--        \/   \/\/          \/        \/      \/    \/   
  
bannerKey 			= IsLeftShiftKeyDown()
heroicLeapKey		= IsLeftControlKeyDown()
fearKey		    	= IsLeftAltKeyDown()
reflectKey			= IsRightShiftKeyDown()
shouttoggle			= IsRightControlKeyDown()
pauseKey			= IsRightAltKeyDown()
shockWaveKey		= IsMouseButtonDown(3)  --When you push down the scroll button on mouse(usually)
ccKey				= IsMouseButtonDown(4)  --MouseButton4 depends on mouse
burstKey			= IsMouseButtonDown(5)  --MouseButton5 depends on mouse
-------------------------------------------------------------------------------------
-- FixLag --
local ping = tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 2000) + .025
if ping &amp;lt; .05 then ping = .05 elseif ping &amp;gt; .3 then ping = .3 end
PQR_SpellAvailableTime = ping

--PauseKey
if pauseKey ~= nil
then return true end

GroupInfo() 
CastClick()


--Shout Toggle
if shouttime == nil then
	shouttime = 0
end

if shouttoggle then
if shouty == nil 
and not GetCurrentKeyBoardFocus()
 and GetTime() - shouttime &amp;gt; 1 then
	shouttime = GetTime()
	StaticPopup_Show (&amp;quot;CSS&amp;quot;)
	shouty = 1
end

if shouty == 1 
and not GetCurrentKeyBoardFocus() 
and GetTime() - shouttime &amp;gt; 1 then
	shouttime = GetTime()
	StaticPopup_Show (&amp;quot;BSS&amp;quot;)
	shouty = nil
end
end

--AutoPause
if AutoPause == true then
	if UnitBuffID(&amp;quot;player&amp;quot;, 104235)
	or UnitBuffID(&amp;quot;player&amp;quot;, 104262)
	or SpellIsTargeting()
	or UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
	or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;)
	or UnitBuffID(&amp;quot;player&amp;quot;, 41350)
then
	return true
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[     SINGEL TARGET      ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local overpower, _, _, sTack = UnitBuffID(&amp;quot;player&amp;quot;, 56636, &amp;quot;target&amp;quot;)
local sa,_,_,_,_,_,saExp = UnitDebuffID(&amp;quot;target&amp;quot;, 113746, &amp;quot;player&amp;quot;)

-- Storm Bolt vs Bosses
if UnitHealthMax(&amp;quot;target&amp;quot;) &amp;gt; UnitHealthMax(&amp;quot;player&amp;quot;)*5 and PQR_SpellAvailable(107570) then _castSpell(107570) end

if not isImmune(&amp;quot;target&amp;quot;) then stop = false end
if stop == true then return end

--Immune
if isImmune(&amp;quot;target&amp;quot;) then
stop = true
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cff00B4FF&amp;lt;!&amp;gt;Target is Immune&amp;lt;!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])	
RunMacroText(&amp;quot;/stopattack&amp;quot;)
return true end

--Immune
--if isImmune(&amp;quot;target&amp;quot;) then
--RunMacroText(&amp;quot;/stopattack&amp;quot;)
--return true end

if UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
	and not IsMounted() 
	and getHp(&amp;quot;target&amp;quot;) &amp;gt;= 21
	and inMelee() == true 
	and not isImmune(&amp;quot;target&amp;quot;)  
	then

	-- 1 Mortal Strike --
if PQR_SpellAvailable(12294) 
	then
	_castSpell(12294) -- Mortal Strike
	MortalStrikeText = true
	end
	
	-- 2 Heroic Strike --
if PQR_SpellAvailable(78)
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 85
	and UnitDebuffID(&amp;quot;target&amp;quot;, 86346)
	then
	_castSpell(78)
	HeroicStrikeText = true
	end
	
	-- 3 Colossus Smash --
if 	PQR_SpellAvailable(86346)
	and ( not cs or csExp - GetTime() &amp;lt;= 1.5 )
	then 
	_castSpell(86346)
	ColossusSmashText = true
	end
	
	-- 4 Storm Bolt --
if PQR_SpellAvailable(107570) 
	and 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) &amp;lt;= 25
	and not hasCC(&amp;quot;target&amp;quot;)
	and UnitDebuffID(&amp;quot;target&amp;quot;, 86346)
	then 
	_castSpell(107570)
	StormBoltText = true		
	end
	
	-- 5 Overpower --
if PQR_SpellAvailable(7384) 
	and not UnitDebuffID(&amp;quot;target&amp;quot;, 86346) --CS
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 10
	and not UnitBuffID(&amp;quot;player&amp;quot;,1719) --Rec
	or sTack == 5 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 10 and not UnitDebuffID(&amp;quot;target&amp;quot;,86346) and not UnitBuffID(&amp;quot;player&amp;quot;,1719) --Rec
	or sTack == 4 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 10 and not UnitDebuffID(&amp;quot;target&amp;quot;,86346) and not UnitBuffID(&amp;quot;player&amp;quot;,1719) --Rec
	then 
	_castSpell(7384)
	OverPowerText = true			
	end
	
	-- 6 Dragon Roar --
if useDR == true and IsSpellKnown(118000)
	and PQR_SpellAvailable(118000)
	then
	_castSpell(118000)
	DragonRoarText =  true
	
	end
	
	-- 7 Impending Victory --
if PQR_SpellAvailable(103840) and IsSpellKnown(103840) then
	if UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 90
	or getHp(&amp;quot;player&amp;quot;) &amp;lt;= 85
	then
	_castSpell(103840)
	ImpendingVictoryText = true
	end
	end
	
	-- 8 Slam --
if PQR_SpellAvailable(1464)
	then
	if UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 60
	or UnitBuffID(&amp;quot;player&amp;quot;,1719) and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 35
	or UnitDebuffID(&amp;quot;target&amp;quot;, 86346) and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 35
	then 
	_castSpell(1464)
	SlamText = true	
	end
	end
	
	-- 9 Sunder Armor --
if UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 25 then
if getHp(&amp;quot;target&amp;quot;) &amp;gt; 20 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 15
then

if PQR_SpellAvailable(7386) then
		--Sunder Armor 1--
	if ( sa == nil or saExp - GetTime() &amp;lt;= 8.5 )
	then 
	_castSpell(7386)
	SunderArmorText = true
	end
		--Sunder Armor 2--
	if ( sa == nil or saExp - GetTime() &amp;lt;= 15.5 ) and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 60
	then 
	_castSpell(7386)
	SunderArmorText = true
	end
end
end
end


end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[  EXECUTE ROTATION ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local cs,_,_,_,_,_,csExp = UnitDebuffID(&amp;quot;target&amp;quot;, 86346, &amp;quot;player&amp;quot;)

if UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
	and getHp(&amp;quot;target&amp;quot;) &amp;lt;= 20
	and inMelee() == true 
	and not isImmune(&amp;quot;target&amp;quot;)  
	then

	-- Colossus Smash --
if 	PQR_SpellAvailable(86346)
	and ( not cs or csExp - GetTime() &amp;lt;= 1.5 )
	then 
	_castSpell(86346)
	ColossusMashText = true
	end

			-- During Colossus Smash --
if cs
	then
	
	-- Execute --
	if UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 30 
	and PQR_SpellAvailable(5308)
	then
	_castSpell(5308)
	ExecuteText = true		
	end
	
	-- Dragon Roar --
	if PQR_SpellAvailable(118000) and IsSpellKnown(118000)
	then
	_castSpell(118000)
	DragonToarText = true
	end
	
	-- Storm Bolt --
	if PQR_SpellAvailable(107570) and IsSpellKnown(107570)
	and not hasCC(&amp;quot;target&amp;quot;) 
	then 
	_castSpell(107570)
	StormBoltText = true	
	end

end
			-- /During Colossus Smash/ --
			--  After Colossus Smash  --

	-- 1 Mortal Strike --
	if PQR_SpellAvailable(12294) 
	then
	_castSpell(12294) -- Mortal Strike
	MortalStrikeText = true		
	end

	-- Execute --
	if PQR_SpellAvailable(5308)
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 80
	or getHp(&amp;quot;target&amp;quot;) &amp;lt;= 6
	then
	_castSpell(5308)
	ExecuteText = true		
	end

	-- Sudden Execute --
	if UnitBuffID(&amp;quot;player&amp;quot;,139958)
	and PQR_SpellAvailable(7384)
	then
	_castSpell(7384)
	SuddenExecuteText = true		
	end

	-- Impending Victory --
	if PQR_SpellAvailable(103840) and IsSpellKnown(103840)
	then
	_castSpell(103840)
	ImpendingVictoryText = true	
	end
	
			-- /After Colossus Smash/ --
 end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[       INITIALIZE PVP      ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	  PQR_RotationStarted = false
		  if PQR_LoadLua ~= nil
			  then
 			  		if PQR_LoadLua(&amp;quot;PQR_WorldofWarriorcraft.lua&amp;quot;) == false
				   		then 
			      			PQR_WriteToChat(&amp;quot;Data file is missing! &amp;lt;PQR_WorldofWarriorcraft.lua&amp;gt;. OR You&amp;apos;ve corrupted it :S&amp;quot;, &amp;quot;Error&amp;quot;)
  		    			PQR_StopRotation()
    	   			return true
  				end
 			 end
			end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[            RBG AOE           ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local cs,_,_,_,_,_,csExp = UnitDebuffID(&amp;quot;target&amp;quot;, 86346, &amp;quot;player&amp;quot;)
local tc,_,_,_,_,_,tcExp = UnitDebuffID(&amp;quot;target&amp;quot;, 115798, &amp;quot;player&amp;quot;)
local ss,_,_,_,_,_,ssExp = UnitDebuffID(&amp;quot;target&amp;quot;, 12328, &amp;quot;player&amp;quot;)

--Immune
if isImmune(&amp;quot;target&amp;quot;) then
RunMacroText(&amp;quot;/stopattack&amp;quot;)
return true end

if UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
	and getHp(&amp;quot;target&amp;quot;) &amp;gt;= 21
	and inMelee() == true 
	and not isImmune(&amp;quot;target&amp;quot;)  
	then

	-- 0 Sweeping Strikes --
if PQR_SpellAvailable(12328) 
	and ( not ss or ssExp - GetTime() &amp;lt;= .5 )
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 30
	then
	_castSpell(12328)
	SweepingStrikesText = true
	end

	-- 1 Mortal Strike --
if PQR_SpellAvailable(12294) 
	then
	_castSpell(12294)
	MortalStrikeText = true
	end
	
	-- 2 Whirlwind --
if PQR_SpellAvailable(1680)
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= 60
	then
	_castSpell(1680)
	WhirlwindText = true		
	end
	
	-- 3 Colossus Smash --
if 	PQR_SpellAvailable(86346)
	and ( not cs or csExp - GetTime() &amp;lt;= 1.5 )
	then 
	_castSpell(86346)
	ColossusSmashText = true
	end
	
	-- 4 Thunder Clap --
if 	PQR_SpellAvailable(6343)
	and ( not tc or tcExp - GetTime() &amp;lt;= 15.5 )
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 30
	then 
	_castSpell(6343)
	ThunderClapText = true
	end
	
	-- 5 Overpower --
if PQR_SpellAvailable(7384) 
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 40
	and not UnitBuffID(&amp;quot;player&amp;quot;,1719)
	then 
	_castSpell(7384)
	OverPowerText = true	
	end
	
	-- 6 Dragon Roar --
if useDR == true
	and PQR_SpellAvailable(118000) and IsSpellKnown(118000)
	then
	_castSpell(118000)
	DragonRoarText = true
	end
	
	-- 7 Impending Victory --
if PQR_SpellAvailable(103840) and IsSpellKnown(103840)
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 60
	then
	_castSpell(103840)
	ImpendingVictoryText = true
	end
	
	-- 8 Slam --
if PQR_SpellAvailable(1464)
	and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 60
	or UnitBuffID(&amp;quot;player&amp;quot;,1719) and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; 25
	then 
	_castSpell(1464)
	SlamText = true
	end


end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[           TWEAKS             ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not IsMounted() --Preventing Dismounting
		then
		
-- Shattering Throw --
for i=1, #custTars do
if inCombat() ~= nil
and iDispel(custTars[i]) ~= nil
and IsSpellInRange(GetSpellInfo(57755),custTars[i]) == 1
and UnitExists(custTars[i]) ~= nil
and PQR_IsMoving() == false
	then
		PQR_CustomTarget = custTars[i]
		_castSpell(64382,PQR_CustomTarget)
	end
end

-- Kill Totemz --
local UCT = UnitCreatureType(&amp;quot;mouseover&amp;quot;) 

for i=1,#specialTars do
if UnitExists(&amp;quot;mouseover&amp;quot;) and  rangeCheck(57755,&amp;quot;mouseover&amp;quot;)
and UnitName(&amp;quot;mouseover&amp;quot;) == specialTars[i]
or UnitExists(&amp;quot;mouseover&amp;quot;) and UCT == &amp;quot;Totem&amp;quot; 
then
    _castSpell(12294,&amp;quot;mouseover&amp;quot;)
    	_castSpell(78,&amp;quot;mouseover&amp;quot;)
			_castSpell(7384,&amp;quot;mouseover&amp;quot;)
				_castSpell(57755,&amp;quot;mouseover&amp;quot;)
			RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFF7FFFD4\&amp;lt;Attempting to kill Totem&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	PQR_DelayRotation(0.2)
	elseif cdRemains(57755) &amp;gt; 0
	and rangeCheck(78,&amp;quot;mouseover&amp;quot;)
	then
		TargetUnit(&amp;quot;mouseover&amp;quot;)
	end
end

-- Shouts --
if shouty == nil
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and cdRemains(6673) == 0
and UnitPower(&amp;quot;player&amp;quot;) &amp;lt; 70
then CastSpellByName(GetSpellInfo(6673)) 
return true 
end

if shouty == 1
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and cdRemains(469) == 0
and UnitPower(&amp;quot;player&amp;quot;) &amp;lt; 70
then CastSpellByName(GetSpellInfo(469))
return true
 end
 
 -- Auto Stance --
if autoStance == true then
 if IsPlayerSpell(97462) == false
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) &amp;lt; 60
and GetShapeshiftForm() ~= 2
then
	CastShapeshiftForm(2)
end

if IsPlayerSpell(12975) == false
and UnitAffectingCombat(&amp;quot;player&amp;quot;)
and 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) &amp;gt;= 60
and GetShapeshiftForm() ~= 1
then
	CastShapeshiftForm(1)
end

if not GladiusBear then
	GladiusBear = CreateFrame(&amp;quot;FRAME&amp;quot;, nil, UIParent)
	GladiusBear:Hide()
end

function GladiusBear_OnEvent(self, event, ...)
	local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
	if event == &amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot; then
		if type == &amp;quot;SPELL_CAST_SUCCESS&amp;quot; then
			if destGUID == UnitGUID(&amp;quot;player&amp;quot;) then
				local spellId = select(12, ...)
				local listId = {
					110698,		-- Hammer of Justice (Paladin)
					1330,		-- Garrote - Silence
					108194,		-- Asphyxiate
					22570,		-- Maim
					5211,		-- Mighty Bash
					9005,		-- Pounce
					102546,		-- Pounce (Incarnation)
					91800,		-- Gnaw
					91797,		-- Monstrous Blow (Dark Transformation)
					44572,		-- Deep Freeze
					119381,		-- Leg Sweep
					105593,		-- Fist of Justice
					853,		-- Hammer of Justice
					1833,		-- Cheap Shot
					408,		-- Kidney Shot
					30283,		-- Shadowfury
					89766,		-- Axe Toss (Felguard/Wrathguard)
					132168		-- Shockwave
					
				}
				for i = 1, #listId do
					if listId[i] == spellId
					and GetShapeshiftForm() ~= 2 then
						CastShapeshiftForm(2)
						end
				end
			end
		end
	end
end

GladiusBear:SetScript(&amp;quot;OnEvent&amp;quot;, GladiusBear_OnEvent)
GladiusBear:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)

end

-- Avatar on CC --
if	poppedCDs(&amp;quot;player&amp;quot;) == true
and hasRoot(&amp;quot;player&amp;quot;) == true
then
		_castSpell(107574)
end

-- Break CC Racial / Zerk --
if breakFearWithZerk == true
and hasCC(&amp;quot;player&amp;quot;) == true
	then	if	PQR_SpellAvailable(18499) then
		_castSpell(18499)
				PQR_DelayRotation(1)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cbc33cbc3\&amp;lt;Breaking Fear with Zerk&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
			end
	elseif breakFearWithZerk == true
	and hasCC(&amp;quot;player&amp;quot;) == true 
	and cdRemains(18499) &amp;gt; 0 and cdRemains(18499) &amp;lt;= 28
	then
		_castSpell(7744)	--Wild of the Forsaken
		_castSpell(59752)	--Every Man for Himself
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cbc33cbc3\&amp;lt;Breaking CC with Racial&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		PQR_DelayRotation(0.5)
	end

-- CC Trinket --
if ccTrinketUse == true then
if PQR_SpellAvailable(59752) and not PQR_SpellAvailable(18499) or GetInventoryItemCooldown(14)==0 
	then
if trinket(&amp;quot;player&amp;quot;) == true
	then
		UseInventoryItem(ccTrinket)
			RunMacroText(&amp;quot;/cast Every Man for Himself&amp;quot;)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;Trinket!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
				PQR_DelayRotation(0.5)
	end
end
end

-- Eat Traps --
if eatFocusTraps == true
and UnitExists(&amp;quot;focus&amp;quot;) ~= nil
and UnitIsFriend(&amp;quot;player&amp;quot;,&amp;quot;focus&amp;quot;) ~= nil
and UnitDebuffID(&amp;quot;focus&amp;quot;,19503) ~= nil
and poppedCDs(&amp;quot;player&amp;quot;) == nil
then
	CastSpellByName(GetSpellInfo(3411),&amp;quot;focus&amp;quot;)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;Attempting to eat trap!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
end

-- Eat it with mass? --
if eatTrapMass == true then
if not JukeBoxHero then
	JukeBoxHero = CreateFrame(&amp;quot;FRAME&amp;quot;, nil, UIParent)
	JukeBoxHero:Hide()
end

function JukeBoxHero_OnEvent(self, event, ...)
	local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
	if event == &amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot; then
		if type == &amp;quot;SPELL_CAST_SUCCESS&amp;quot; then
			if ( select(2,GetSpellCooldown(114028))) == 0
			--and PQR_UnitDistance(&amp;quot;player&amp;quot;, sourceGUID) &amp;lt; 30
			then
		    for i=1, #cTar do
            if UnitExists(cTar[i])
            and UnitGUID(cTar[i]) == sourceGUID
            and UnitCanAttack(&amp;quot;player&amp;quot;, cTar[i])
            and PQR_UnitDistance(&amp;quot;player&amp;quot;, cTar[i]) &amp;lt; 30
            then
				local spellId = select(12, ...)
				local listId = {
					1499, --Freezing Trap
					60192 --Freezing Trap
				}
				for i = 1, #listId do
					if listId[i] == spellId then
						_castSpell(114028)
						PQR_DelayRotation(.5)
						return true
					end
				end
			end
		end
	end
end
end  --edit
end
JukeBoxHero:SetScript(&amp;quot;OnEvent&amp;quot;, JukeBoxHero_OnEvent)
JukeBoxHero:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
end

-- Mass Spell Reflect --
if UseMass == true then

for i = 1, #cTar do
if UnitExists(cTar[i])
and MaspellReflect(cTar[i]) == true
then
	 if UnitIsUnit(cTar[i]..&amp;quot;target&amp;quot;,&amp;quot;player&amp;quot;)
     and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
     then
     _castSpell(114028)
     end
     end
    end
	
for i = 1, #cTar do
if UnitExists(cTar[i]) 
and IsLineOfSight(cTar[i],1)
and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
and UnitIsUnit(cTar[i]..&amp;quot;target&amp;quot;,&amp;quot;player&amp;quot;)
and HaveDebuff(&amp;quot;player&amp;quot;,reflectSpellsMage(),-1,1)
and not PQR_SpellAvailable(23920)
then
_castSpell(114028)				
end

	if UnitExists(cTar[i]) 
	and IsLineOfSight(cTar[i],1)
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
	and not UnitIsUnit(cTar[i]..&amp;quot;target&amp;quot;,&amp;quot;player&amp;quot;)
	and HaveBuff(cTar[i],reflectSpellsDruid(),0)
	and rangeCheck(57755,cTar[i])
	and not PQR_SpellAvailable(23920)
	then
	_castSpell(114028)			
	end
end

if UnitExists(&amp;quot;target&amp;quot;) 
	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
	and HaveBuff(&amp;quot;target&amp;quot;,reflectSpellsWarlock(),0)
	and inMelee() == true
	and not PQR_SpellAvailable(23920)
	then
	_castSpell(114028)			
	end
end

-- Spell Reflect --
for i = 1, #cTar do
if UnitExists(cTar[i])
and spellReflect(cTar[i]) == true
then
	 if UnitIsUnit(cTar[i]..&amp;quot;target&amp;quot;,&amp;quot;player&amp;quot;)
     and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
     then
     _castSpell(23920)
     end
     end
    end
	
for i=1, #cTar do
if UnitExists(cTar[i]) 
and IsLineOfSight(cTar[i],1)
and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
and UnitIsUnit(cTar[i]..&amp;quot;target&amp;quot;,&amp;quot;player&amp;quot;)
and HaveDebuff(&amp;quot;player&amp;quot;,reflectSpellsMage(),-1,1)
then
_castSpell(23920)				
end

	if UnitExists(cTar[i]) 
	and IsLineOfSight(cTar[i],1)
	and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
	and not UnitIsUnit(cTar[i]..&amp;quot;target&amp;quot;,&amp;quot;player&amp;quot;)
	and HaveBuff(cTar[i],reflectSpellsDruid(),0)
	and rangeCheck(57755,cTar[i])
	then
	_castSpell(23920)			
	end
end

if UnitExists(&amp;quot;target&amp;quot;) 
	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) 
	and HaveBuff(&amp;quot;target&amp;quot;,reflectSpellsWarlock(),0)
	and inMelee() == true
	then
	_castSpell(23920)				
	end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[     INTERRUPTS &amp;lt;3      ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local castingTarget 	= nil
local immuneCastingTar	= nil

for i=1, #custTars do
	if spellReflect(custTars[i]) == nil
	and ( select(9,UnitCastingInfo(custTars[i]))==false 
		or select(8,UnitChannelInfo(custTars[i]))==false )
	then
			castingTarget = custTars[i]
	end
end


for i=1, #custTars do
	if spellReflect(custTars[i]) == nil
	and select(9,UnitCastingInfo(custTars[i]))==true
	then
			immuneCastingTar = custTars[i]
	end
end


--IMMUNE INTERRUPTS--
if immuneCastingTar ~= nil
and spellReflect(immuneCastingTar) == nil
and UnitBuffID(&amp;quot;player&amp;quot;,23920) == nil
then
	local cName, _, _, _, cStart,cEnd = UnitCastingInfo(immuneCastingTar)
	local chName, _, _, _, chStart,chEnd = UnitChannelInfo(immuneCastingTar)
	if chName ~= nil then
		cName = chName
		cStart = chStart
		cEnd = chEnd
	end
	local timeSinceStart = (GetTime() * 1000 - cStart) / 1000
	local timeLeft = ((GetTime() * 1000 - cEnd) * -1) / 1000 
    local castTime = cEnd - cStart 
    local currentPercent = timeSinceStart / castTime * 100000
    
--DisruptingShout--
if cdRemains(102060) == 0
	and CheckInteractDistance(immuneCastingTar,3) ~= nil
	and UnitIsEnemy(&amp;quot;player&amp;quot;,immuneCastingTar) ~= nil
	and ( PQR_IsOnInterruptList(cName) ~= nil or PQR_IsInterruptAll() ~= nil )
	and currentPercent &amp;gt; intPctDelay
			then
			_castSpell(102060)
			RaidNotice_AddMessage(RaidBossEmoteFrame, &amp;quot;\124cffEE82EE\&amp;lt;Interrupting: Disrupting Shout&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_BOSS_EMOTE&amp;quot;])
			PQR_DelayRotation(.5)
		end

--SB--
if (cdRemains(102060) &amp;gt; 0 or CheckInteractDistance(immuneCastingTar,3) == nil)
	and IsPlayerSpell(107570) == true
	and cdRemains(107570) == 0
	and rangeCheck(107570,immuneCastingTar) == true
	and UnitIsUnit(&amp;quot;target&amp;quot;,immuneCastingTar) == nil
	and ( PQR_IsOnInterruptList(cName) ~= nil or PQR_IsInterruptAll() ~= nil )
	and currentPercent &amp;gt; intPctDelay
		then
			_castSpell(107570,immuneCastingTar)
			RaidNotice_AddMessage(RaidBossEmoteFrame, &amp;quot;\124cffEE82EE\&amp;lt;Interrupting: Storm Bolt&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_BOSS_EMOTE&amp;quot;])
	end	
end
--END IMMUNE INTERRUPTS--



--NORMAL INTERRUPTS--
if castingTarget ~= nil
and spellReflect(castingTarget) == nil
and UnitBuffID(&amp;quot;player&amp;quot;,23920) == nil
then
	local cName, _, _, _, cStart,cEnd = UnitCastingInfo(castingTarget)
	local chName, _, _, _, chStart,chEnd = UnitChannelInfo(castingTarget)
	if chName ~= nil then
		cName = chName
		cStart = chStart
		cEnd = chEnd
	end
	local timeSinceStart = (GetTime() * 1000 - cStart) / 1000
	local timeLeft = ((GetTime() * 1000 - cEnd) * -1) / 1000 
    local castTime = cEnd - cStart 
    local currentPercent = timeSinceStart / castTime * 100000

	
--Pum--
	if cdRemains(6552) == 0
		and rangeCheck(6552,castingTarget) == true
		and ( PQR_IsOnInterruptList(cName) ~= nil or PQR_IsInterruptAll() ~= nil )
		and currentPercent &amp;gt;= intPctDelay
			then
			_castSpell(6552,castingTarget)	
			RaidNotice_AddMessage(RaidBossEmoteFrame, &amp;quot;\124cffEE82EE\&amp;lt;Interrupting: Pummel&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_BOSS_EMOTE&amp;quot;])		
			PQR_DelayRotation(.5)
		end
--DS--
	if (cdRemains(6552) &amp;gt; 0 or rangeCheck(6552,castingTarget) == nil)
	and cdRemains(102060) == 0
	and CheckInteractDistance(castingTarget,3) ~= nil
	and UnitIsEnemy(&amp;quot;player&amp;quot;,castingTarget) ~= nil
	and ( PQR_IsOnInterruptList(cName) ~= nil or PQR_IsInterruptAll() ~= nil )
	and currentPercent &amp;gt; intPctDelay
			then
			_castSpell(102060)
			RaidNotice_AddMessage(RaidBossEmoteFrame, &amp;quot;\124cffEE82EE\&amp;lt;Interrupting: Disrupting Shout&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_BOSS_EMOTE&amp;quot;])
			PQR_DelayRotation(.5)
		end
		
--ChargeInterrupt--
	if chargeInterrupt == true
	and (cdRemains(6552) &amp;gt; 0 or rangeCheck(6552,castingTarget) == nil)
	and (cdRemains(102060) &amp;gt; 0 or CheckInteractDistance(castingTarget,3) == nil)
	and cdRemains(100) == 0
	and rangeCheck(100,castingTarget) == true
	and poppedCDs(&amp;quot;player&amp;quot;) == nil
	and ( PQR_IsOnInterruptList(cName) ~= nil or PQR_IsInterruptAll() ~= nil )
	and currentPercent &amp;gt; intPctDelay
		then
			_castSpell(100,castingTarget)
			RaidNotice_AddMessage(RaidBossEmoteFrame, &amp;quot;\124cffEE82EE\&amp;lt;Interrupting: Charge&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_BOSS_EMOTE&amp;quot;])
			PQR_DelayRotation(1) --Delay while charging
		end

	
--SB--
	if (cdRemains(6552) &amp;gt; 0 or rangeCheck(6552,castingTarget) == nil)
	and (cdRemains(102060) &amp;gt; 0 or CheckInteractDistance(castingTarget,3) == nil)
	and (cdRemains(100) &amp;gt; 0 or rangeCheck(100,castingTarget) == nil or poppedCDs(&amp;quot;player&amp;quot;) == true or chargeInterrupt == false)
	and IsPlayerSpell(107570) == true
	and cdRemains(107570) == 0
	and UnitIsUnit(&amp;quot;target&amp;quot;,castingTarget) == nil
	and rangeCheck(107570,castingTarget) == true
	and ( PQR_IsOnInterruptList(cName) ~= nil or PQR_IsInterruptAll() ~= nil )
	and currentPercent &amp;gt; intPctDelay
		then
			RaidNotice_AddMessage(RaidBossEmoteFrame, &amp;quot;\124cffEE82EE\&amp;lt;Interrupting: Storm Bolt&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_BOSS_EMOTE&amp;quot;])
			_castSpell(107570,castingTarget)
	end	
end
--END NORMAL INTERRUPTS--</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[       &amp;lt;3 HAMSTRING      ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local shouldSlow = true
if inMelee() == true
and ( 
      isSlowed(&amp;quot;target&amp;quot;) ~= nil
      or immuneToSlow(&amp;quot;target&amp;quot;) ~= nil
      or getHp(&amp;quot;target&amp;quot;) &amp;lt; 20
    )
then
    shouldSlow = false
end

if shouldSlow == false
and UnitDebuffID(&amp;quot;target&amp;quot;,1715) ~= nil
then
    local hasHamstring, _, _, _, _, _, HendTimer = UnitDebuffID(&amp;quot;target&amp;quot;, 1715)
    if hasHamstring ~= nil then
        if HendTimer - GetTime() &amp;lt; 1 then
            _castSpell(1715)
        RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;Hamstring&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])  
        end
    end
end
        
if inMelee() == true 
and shouldSlow == true
then
    if UnitIsPlayer(&amp;quot;target&amp;quot;)
        then
    _castSpell(1715)
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;Hamstring&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])        
    end 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[           HOTKEYS            ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Heroic Leap --
if IsSpellKnown(6544)
and heroicLeapKey ~= nil 
 and not GetCurrentKeyBoardFocus()
  and not IsMouselooking()
then
    CastSpellByName(GetSpellInfo(6544))
        if SpellIsTargeting()
        then 
            CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() 
            return true
        end
end

-- Swifty --
if inMelee() == true then
if burstKey ~= nil
	then
		_castSpell(85730)
			_castSpell(1719)
				_castSpell(12292)
					_castSpell(107574)
						if UnitBuffID(&amp;quot;player&amp;quot;,12880) == nil
							then
								_castSpell(18499)
									end
							_castSpell(114207)
						CastSpellByName(GetSpellInfo(20572),nil)
					UseInventoryItem(dpsTrinket)
				SwiftyText = true
			PQR_DelayRotation(0.3) --Time to go to include everything for Reckstorm&amp;lt;3
		_castSpell(46924)
	end
end

-- CCKey --
if ccKey == 1
then
	if UnitExists(&amp;quot;focus&amp;quot;)
	then
		ccTar = &amp;quot;focus&amp;quot;
	elseif UnitExists(&amp;quot;target&amp;quot;)
	and not UnitExists(&amp;quot;focus&amp;quot;)
	then
		ccTar = &amp;quot;target&amp;quot;
	end

	if UnitExists(ccTar)
	and not hasCC(ccTar)
	and not isImmune(ccTar)
	and cdRemains(5246) == 0
	and cdRemains(100) == 0
	and rangeCheck(100,ccTar)
	and select(2,UnitClass(ccTar)) ~= &amp;quot;MONK&amp;quot;
	then
		_castSpell(100,ccTar)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;CCKey: Charing target!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		PQR_DelayRotation(1) --Time so that you dont fear while the opponent is dazed / warbringer--
	end
	
	if UnitExists(ccTar)
	and IsPlayerSpell(107570) == true
	and not hasCC(ccTar)
	and not isImmune(ccTar)
	and cdRemains(5246) &amp;gt; 0
	and cdRemains(107570) == 0
	and rangeCheck(107570,ccTar)
	then
			_castSpell(107570,ccTar)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;CCKey: Storm Bolting target!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	end
	
	
	if UnitExists(ccTar)
	and not hasCC(ccTar)
	and not isImmune(ccTar)
	and cdRemains(5246) == 0
	and rangeCheck(5246,ccTar)
	then
		_castSpell(5246,ccTar)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;CCKey: Fearing target!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		PQR_DelayRotation(.5) --Time for you to get away so dont break fear--
	end	
end

-- Banner --
if cdRemains(114203) == 0
and demoBannerKey ~= nil 
and GetCurrentKeyBoardFocus() == nil
then
	CastSpellByName(GetSpellInfo(114203))
		if SpellIsTargeting() ~= nil
		then 
			CameraOrSelectOrMoveStart()
			CameraOrSelectOrMoveStop()
		end
				RunMacroText(&amp;quot;/cleartarget&amp;quot;)
		_castSpell(114203)
end

-- Safeguard to banner --
if select(2,GetTotemInfo(1)) ~= nil
and bannerKey ~= nil
then
	if cdRemains(3411) == 0
	then
	TargetUnit(select(2,GetTotemInfo(1)))
	CastSpellByName(GetSpellInfo(3411),&amp;quot;target&amp;quot;)
	end
	if cdRemains(3411) &amp;gt; 0
	and UnitExists(&amp;quot;target&amp;quot;)
	and UnitIsFriend(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
	then
		RunMacroText(&amp;quot;/cleartarget&amp;quot;)
		RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
	end
end


-- MockingBanner Throw --
if cdRemains(114192) == 0 and ( cdRemains(114203) &amp;lt;= 150 and cdRemains(114203) &amp;gt; 0 )
and bannerKey ~= nil
and GetCurrentKeyBoardFocus() == nil
then
	CastSpellByName(GetSpellInfo(114192))
		if SpellIsTargeting()
		then 
			CameraOrSelectOrMoveStart()
			CameraOrSelectOrMoveStop()
		end
		_castSpell(114192)
		RunMacroText(&amp;quot;/cleartarget&amp;quot;)
end

-- DemoBanner Throw --
if cdRemains(114203) == 0
and bannerKey ~= nil 
and GetCurrentKeyBoardFocus() == nil
then
	CastSpellByName(GetSpellInfo(114203))
		if SpellIsTargeting() ~= nil
		then 
			CameraOrSelectOrMoveStart()
			CameraOrSelectOrMoveStop()
		end
		_castSpell(114203)
end
if select(2,GetTotemInfo(1)) ~= nil
and ( mockingBannerKey ~= nil or demoBannerKey ~= nil )
then
TargetUnit(select(2,GetTotemInfo(1)))
_castSpell(3411,&amp;quot;target&amp;quot;)--Safeguard
end

if select(2,GetTotemInfo(1)) ~= nil
and bannerKey ~= nil
then
    if cdRemains(3411) == 0
    then
    TargetUnit(select(2,GetTotemInfo(1)))
    CastSpellByName(GetSpellInfo(3411),&amp;quot;target&amp;quot;)--Intervane
    end
    if cdRemains(3411) &amp;gt; 0
    and UnitExists(&amp;quot;target&amp;quot;)
    and UnitIsFriend(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
    then
   		RunMacroText(&amp;quot;/cleartarget&amp;quot;)
        RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
    end
end

if select(2,GetTotemInfo(1)) ~= nil
and bannerKey ~= nil
then
    if cdRemains(3411) == 0
    then
    TargetUnit(select(2,GetTotemInfo(1)))
    CastSpellByName(GetSpellInfo(3411),&amp;quot;target&amp;quot;)
    end
    if cdRemains(3411) &amp;gt; 0
    and UnitExists(&amp;quot;target&amp;quot;)
    and UnitIsFriend(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
    then
  	  RunMacroText(&amp;quot;/cleartarget&amp;quot;)
        RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
    end
end

if cdRemains(114192) == 0 and ( cdRemains(114203) &amp;lt;= 150 and cdRemains(114203) &amp;gt; 0 )
and bannerKey ~= nil
and GetCurrentKeyBoardFocus() == nil
then
    CastSpellByName(GetSpellInfo(114192))
        if SpellIsTargeting()
        then 
            CameraOrSelectOrMoveStart()
            CameraOrSelectOrMoveStop()
        end
        _castSpell(114192)--Monkin Banner
        RunMacroText(&amp;quot;/cleartarget&amp;quot;)
end


if cdRemains(114203) == 0
and bannerKey ~= nil 
and GetCurrentKeyBoardFocus() == nil
then
    CastSpellByName(GetSpellInfo(114203))
        if SpellIsTargeting() ~= nil
        then 
            CameraOrSelectOrMoveStart()
            CameraOrSelectOrMoveStop()
        end
        _castSpell(114203)--Demo Banner
        RunMacroText(&amp;quot;/cleartarget&amp;quot;)
end



-- Fear --
if fearKey == 1
then
	if UnitExists(&amp;quot;focus&amp;quot;) == 1
	and hasCC(&amp;quot;focus&amp;quot;) == nil
	and UnitIsEnemy(&amp;quot;player&amp;quot;, &amp;quot;focus&amp;quot;) ~= nil
	then
		_castSpell(5246,&amp;quot;focus&amp;quot;)
	end
	
	if ( UnitExists(&amp;quot;focus&amp;quot;) == nil or UnitIsEnemy(&amp;quot;player&amp;quot;, &amp;quot;focus&amp;quot;) == nil )
	and UnitExists(&amp;quot;target&amp;quot;) == 1
	and hasCC(&amp;quot;target&amp;quot;) == nil
	then
		_castSpell(5246,&amp;quot;target&amp;quot;)
	end
end

-- Shockwave/Blade --
if shockWaveKey == 1
then
	if PQR_SpellAvailable(46968) and IsSpellKnown(46968)
	then
	_castSpell(46968)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cbc33cbc3\&amp;lt;Shockwave&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	elseif PQR_SpellAvailable(46924) and IsSpellKnown(46924)
	then
	_castSpell(46924)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cbc33cbc3\&amp;lt;Bladestorm&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	end
end

--Safeguard to banner--
if select(2,GetTotemInfo(1)) ~= nil
and bannerKey ~= nil
then
	if cdRemains(3411) == 0
	then
	TargetUnit(select(2,GetTotemInfo(1)))
	CastSpellByName(GetSpellInfo(3411),&amp;quot;target&amp;quot;)
	end
	if cdRemains(3411) &amp;gt; 0
	and UnitExists(&amp;quot;target&amp;quot;)
	and UnitIsFriend(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
	then
		RunMacroText(&amp;quot;/targetlasttarget&amp;quot;)
	end
end


--MockingBanner Throw--
if cdRemains(114192) == 0 and ( cdRemains(114203) &amp;lt;= 150 and cdRemains(114203) &amp;gt; 0 )
and bannerKey ~= nil
and GetCurrentKeyBoardFocus() == nil
then
	CastSpellByName(GetSpellInfo(114192))
		if SpellIsTargeting()
		then 
			CameraOrSelectOrMoveStart()
			CameraOrSelectOrMoveStop()
		end
		_castSpell(114192)
end

--DemoBanner Throw--
if cdRemains(114203) == 0
and bannerKey ~= nil 
and GetCurrentKeyBoardFocus() == nil
then
	CastSpellByName(GetSpellInfo(114203))
		if SpellIsTargeting() ~= nil
		then 
			CameraOrSelectOrMoveStart()
			CameraOrSelectOrMoveStop()
		end
		_castSpell(114203)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[           SURVIVAL          ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>UseMass = true
UseReflect = true

if HaveBuff(&amp;quot;player&amp;quot;, 23920) then UseMass = false end --Spell Reflection
if HaveBuff(&amp;quot;player&amp;quot;, 114028) then UseReflect = false end --Mass Spell Reflection

	-- Spell Reflect on Buffs --
--if reflectbuff(&amp;quot;target&amp;quot;) == true
if UnitBuffID(&amp;quot;target&amp;quot;,16689) or UnitBuffID(&amp;quot;target&amp;quot;,111397) or UnitBuffID(&amp;quot;target&amp;quot;,12043) then
if UseMass == true or UseReflect == true then
		if PQR_SpellAvailable(23920) == false and PQR_SpellAvailable(114028) == true then
			_castSpell(GetSpellInfo(114028),nil)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cbc33cbc3\&amp;lt;Reflect Rape&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
			PQR_DelayRotation(0.5)
		end
		if PQR_SpellAvailable(114028) == false and PQR_SpellAvailable(23920) == true then
			_castSpell(GetSpellInfo(23920),nil)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cbc33cbc3\&amp;lt;Reflect Rape&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
			PQR_DelayRotation(0.5)
		end
	end
end

-- Sheild Wall --
local shieldWall = false

if cdRemains(871) == 0
and getHp(&amp;quot;player&amp;quot;) &amp;lt;= 20
and autoShieldWall == true
or shieldWallKey == 1
then
	shieldWall = true
end

if shieldWall == true
and not UnitBuffID(&amp;quot;player&amp;quot;,871)
then
		CastSpellByName(GetSpellInfo(871),nil)
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cbc33cbc3\&amp;lt;Sheldwall&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
		return true
	end

-- Victory Rush --
local VictoryRushTime, _, _, _, _, _, VictoryRushExpireTime = UnitBuffID(&amp;quot;player&amp;quot;, 32216)
if inMelee() == true
and IsUsableSpell(34428)
and VictoryRushTime ~= nil then
VictoryRushTime = VictoryRushExpireTime - GetTime()
if VictoryRushTime &amp;lt; 4 then
   _castSpell(34428)
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cffff9900\&amp;lt;Healing: Victory Rush&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])		
end

if inMelee() == true
and IsUsableSpell(34428)
and UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;) * 100 &amp;lt; 75 then
_castSpell(34428)
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cffff9900\&amp;lt;Healing: Victory Rush&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])		
   end
end

-- Health Stone --
if autoHealthStone == true
and getHp(&amp;quot;player&amp;quot;) &amp;lt;= 25
and GetItemCount(5512) &amp;gt; 0 
and select(2,GetItemCooldown(5512)) == 0
then
   UseItemByName(tostring(GetItemInfo(5512)))
end

-- Rallying Cry --
if inCombat() == true 
and getHp(&amp;quot;player&amp;quot;) &amp;lt;= 25
and autoRally == true
then 
_castSpell(97462)
end

-- Die By Sword --
if inCombat()
and getHp(&amp;quot;player&amp;quot;) &amp;lt;= 35
and autoDieByTheSword == true
then
_castSpell(118038)
end

-- Disarm --
for i=1, #cTar do
if UnitExists(cTar[i]) 
and UnitIsPlayer(cTar[i])
and UnitCanAttack(&amp;quot;player&amp;quot;,cTar[i]) 
and UnitPowerMax(cTar[i]) &amp;lt; 200000
and isImmune(cTar[i]) == nil
and cdRemains(676) == 0
and shouldDisarm(cTar[i]) ~= nil 
and hasCC(cTar[i]) == nil
and rangeCheck(78,cTar[i])
then
PQR_CustomTarget = cTar[i]
CastSpellByName(GetSpellInfo(676),PQR_CustomTarget)
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;Disarming Target&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])	
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])	
end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[             H4XX0R            ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--__________                __           __   .__.__  .__          --
--\______   \_____ ________/  |_ ___.__.|  | _|__|  | |  | _____   --
-- |     ___/\__  \\_  __ \   __&amp;lt;   |  ||  |/ /  |  | |  | \__  \  --
-- |    |     / __ \|  | \/|  |  \___  ||    &amp;lt;|  |  |_|  |__/ __ \_--
-- |____|    (____  /__|   |__|  / ____||__|_ \__|____/____(____  /--
--                \/             \/          \/                 \/ --
-- PLEASE GIVE FEEDBACKS AND REP !! WANNA USE MY STUFF? ASK ME, TY --
                      --Creds to RedRussian!--
                      
			if not SIN_BoltFrame_created then
				SIN_BoltFrame_created	= true    
					local PowerBoltID		= {

-- Warrior
[107570] 	= true, --Storm Bolt
--[6544] 	= true, --Heroic Leap
--[114029]	= true, --Safeguard
--[3411]	= true, --Intervene
--[1719]	= true, --Recklessness
[46968]		= true, --Shockwave
[5246]		= true, --Intimidating Shout

-- Paladin
[115750]	= true, --Blinding Light
[10326]		= true, --Turn Evil
[105593]	= true, --Fist of Justice
[20066]		= true, --Repentance
[7328]		= true, --Redemption
[853]		= true, --Hammer of Justice

-- Hunter
[120360]	= true, --Barrage
--[109259]	= true, --Powershot
[3045]		= true, --Rapid Fire
[5384]		= true, --Feign Death
[109248]	= true, --Binding Shot
--[1499]		= true, --Freezing Trap
[19503]		= true, --Scatter Shot
[781]		= true, --Disengage

-- Rogue
[2094]		= true, --Blind
[1856]		= true, --Vanish
[76577]		= true, --Smoke Bomb
[408]		= true, --Kidny Shot
[1776]		= true, --Gouge
[114014]	= true, --Shuriken Toss
[121471]	= true, --Shadow Blades
[51690]		= true, --Killing Spree
[6770]		= true, --Sap
[51713]		= true, --Shadow Dance
[79140]		= true, --Vendetta
[108215]	= true, --Paralytic Poison
[108212]	= true, --Burst of Speed
[36554]		= true, --Shadowstep
[31224]		= true, --Cloak of Shadows
[13750]		= true, --Adrenaline Rush
[1833]		= true, --Cheap Shot
[2983]		= true, --Sprint

-- Priest
[108968]	= true, --Void Shift Disc/Holy
[142723]	= true, --Void Shift Shadow
[73325]		= true, --Leap of Faith
[64843]		= true, --Divine Hymn
[10060]		= true, --Power Infusion
[64044] 	= true, --Psychic Horror
[64901]		= true, --Hymn of Hope
[112833]	= true, --Spectral Guise
[109964]	= true, --Spirit Shell
[2006]		= true, --Resurrection
[605]		= true, --Dominate Mind
[8122]		= true, --Psychic Scream
[88625]		= true, --Holy Word: Chastise

-- Death Knight
[108194]	= true, --Asphyxiate
[49576]		= true, --Death Grip

-- Shaman
[114049]	= true, --Ascendance
[79206]		= true, --Spiritwalker&amp;apos;s Grace
[108281]	= true, --Ancestral Guidance
[51514]		= true, --Hex
[58875]		= true, --Spirit Walk
[16188]		= true, --Ancestral Swiftness
[8056]		= true, --Frost Shock

-- Mage
[114003]	= true, --Invocation
[108978]	= true, --Alter Time
[102051]	= true, --Frostjaw
[113724]	= true, --Ring of Frost
[108843]	= true, --Blazing Speed
[12043]		= true, --Presence of Mind
[118] 		= true, --Polymorph
[1953] 		= true, --Blink
[122] 		= true, --Frost Nova

-- Warlock
[113858] 	= true, --Dark Soul: Instability
[113861]	= true, --Dark Soul: Knowledge
[113860]	= true, --Dark Soul: Misery
[30283] 	= true, --Shadowfury
[5484] 		= true, --Howl of Terror
[48020]		= true, --Demonic Circle: Teleport

-- Monk
[115008] 	= true, --Chi Torpedo
[119996]	= true, --Transcendence: Transfer
[119381] 	= true, --Leg Sweep
[119392] 	= true, --Charging Ox Wave
[101545] 	= true, --Flying Serpent Kick
[109132] 	= true, --Roll
[113656] 	= true, --Fists of Fury

-- Druid
[106898] 	= true, --Stampeding Roar
[33786] 	= true, --Cyclone
[99] 		= true, --Disorienting Roar
[5211] 		= true, --Mighty Bash
[102793] 	= true, --Ursol&amp;apos;s Vortex
[740] 		= true, --Tranquility
[106731] 	= true, --Incarnation
[132469] 	= true, --Typhoon
[102280] 	= true, --Displacer Beast
[102401] 	= true, --Wild Charge
[50769] 	= true, --Revive
[132158] 	= true, --132158

-- Every Man for Himself
[59752] 	= true	}

local SIN_PlayerGUID = UnitGUID(&amp;quot;player&amp;quot;)
local SIN_InterruptFrame = SIN_InterruptFrame or CreateFrame(&amp;quot;FRAME&amp;quot;, nil, UIParent)
SIN_InterruptFrame:SetScript(&amp;quot;OnEvent&amp;quot;, function(self, event, _, type, _, sourceGUID, sourceName, _, _, destGUID, destName, _, _, spellID)
    if type == &amp;quot;SPELL_CAST_SUCCESS&amp;quot; and destGUID == SIN_PlayerGUID and PowerBoltID[spellID] then
        SpellStopCasting()
        RaidNotice_AddMessage(RaidBossEmoteFrame, &amp;quot;\124cffa335ee\&amp;lt;Attempt to PowerBolt &amp;quot;..sourceName..&amp;quot;.&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_BOSS_EMOTE&amp;quot;])
       if PQR_SpellAvailable(107570) then _castSpell(107570) end	-- Storm Bolt
    end
end
)
SIN_InterruptFrame:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
end

if not SIN_ReflectSpells_created then
SIN_ReflectSpells_created = true	
local reflectID = {
[118]		= true, --Sheep
[61305]		= true, --Sheep
[28272]		= true, --Sheep
[61721]		= true, --Sheep
[61780]		= true, --Sheep
[28271]		= true, --Sheep
[33786]		= true, --Cyclone
[113506]	= true, --Cyclone
[20066]		= true, --Repentance
[51514]		= true, --Hex
[116858]	= true, --Chaos bolt
[78674]		= true, --Starsurge
[47476]		= true, --Strangulate
[77575]		= true, --outbreak
[108194]	= true, --Asphyxiate
[339] 		= true, --Ent Roots
[102359] 	= true, --Mass Entanglement
[44572] 	= true, --Freeze
[33395] 	= true, --Freez
[63685] 	= true, --Freeze
[115078] 	= true, --Paralysis
[853] 		= true, --Hammer of Justice
[105593] 	= true, --Fist of justice
[32379] 	= true, --SWD
[120583] 	= true, --SWD glyph
[2944] 		= true, --plague
[88625] 	= true, --chastise
[51505] 	= true, --LB
[17877] 	= true, --
[6789] 		= true, --MC wl
[110301]	= true, -- Turn Evil
[145067]	= true, -- Turn Evil
[10326]		= true -- Turn Evil
}

local SIN_PlayerGUID = UnitGUID(&amp;quot;player&amp;quot;)
local SIN_ReflectSpells = SIN_ReflectSpells or CreateFrame(&amp;quot;FRAME&amp;quot;, nil, UIParent)
SIN_ReflectSpells:SetScript(&amp;quot;OnEvent&amp;quot;, function(self, event, _, type, _, sourceGUID, sourceName, _, _, destGUID, destName, _, _, spellID)
	if type == &amp;quot;SPELL_CAST_SUCCESS&amp;quot; 
	and destGUID == SIN_PlayerGUID 
	and reflectID[spellID] 
	and select(2,GetSpellCooldown(23920)) == 0 then -- Spell Reflect
		CastSpellByName(GetSpellInfo(23920),&amp;quot;player&amp;quot;)
        RaidNotice_AddMessage(RaidBossEmoteFrame, &amp;quot;\124cffa335ee\&amp;lt;Attempt to Power-Reflect spell on &amp;quot;..sourceName..&amp;quot;.&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_BOSS_EMOTE&amp;quot;])
		PQR_DelayRotation(0.3)
	end
end
)
SIN_ReflectSpells:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
end

--RedRussian&amp;apos;s &amp;quot;Stealthers&amp;apos; Bane&amp;quot;

local rescan_period = 2 --how often stealthed list is repopulated

local function IsStealthed(unit) --check if unit is stealthed
stealth, prowl, shadowmeld = 1784, 5215, 58984 --list of detectable stealth buffs may be incomplete!
	return ( UnitBuffID(unit, stealth) or UnitBuffID(unit, prowl) or UnitBuffID(unit, shadowmeld) )
end

local function Breaker() --instant stealth breaker, class dependent
	local _, playerClass = UnitClass(&amp;quot;player&amp;quot;)
	if playerClass == &amp;quot;WARRIOR&amp;quot; then
		return 107570 --Storm Bolt
	elseif playerClass == &amp;quot;PALADIN&amp;quot; then
		if PQR_SpellAvailable(879) then
			return 879 --Exorcism
		else	
			return 20271 --Judgment
		end	
	elseif playerClass == &amp;quot;HUNTER&amp;quot; then
		if UnitBuffID(&amp;quot;player&amp;quot;, 51753) and not UnitBuffID(&amp;quot;target&amp;quot;, 1130) then --Camouflage + Target isn&amp;apos;t marked
			return 1130 --Hunter&amp;apos;s Mark
		elseif not UnitBuffID(&amp;quot;player&amp;quot;, 51753) then
			return 1978 --Serpent Sting
		end	
	elseif playerClass == &amp;quot;ROGUE&amp;quot; then
		if IsStealthed(&amp;apos;player&amp;apos;) then
			return 6770 --Sap
		else
			return 121733 --Throw
		end
	elseif playerClass == &amp;quot;PRIEST&amp;quot; then
		return 589 --Shadow Word: Pain
	elseif playerClass == &amp;quot;DEATHKNIGHT&amp;quot; then
		return 45524 --Chains of Ice
	elseif playerClass == &amp;quot;SHAMAN&amp;quot; then
		return 8056 --Frost Shock
	elseif playerClass == &amp;quot;MAGE&amp;quot; then
		return 30455 --Ice Lance
	elseif playerClass == &amp;quot;WARLOCK&amp;quot; then
		return 77799 --Fel Flame
	elseif playerClass == &amp;quot;MONK&amp;quot; then
		return 115546 --Taunt
	elseif playerClass == &amp;quot;DRUID&amp;quot; then
		if IsStealthed(&amp;apos;player&amp;apos;) then
			return 0 --do nothing
		elseif ( not IsStealthed(&amp;apos;player&amp;apos;) and PQR_SpellAvailable(770) ) then
			return 770 --fairy fire
		elseif 	not ( IsStealthed(&amp;apos;player&amp;apos;) or PQR_SpellAvailable(770) ) then
			return 8921 --moonfire
		end
	else
		return 0 
	end
end

local breakername = GetSpellInfo(Breaker()) --localized breaker name for use with IsSpellInRange


------------------------BG/RBG--------------------------------
--get player&amp;apos;s faction
if ( not last_faction_check or GetTime()-last_faction_check &amp;gt;= 60 ) then
	local pname = UnitName(&amp;apos;player&amp;apos;) --player&amp;apos;s name
	for j=1,GetNumBattlefieldScores() do --get player faction to make profile work in rbgs and arenas
		local name, killingBlows, honorableKills, deaths, honorGained, faction, rank, race, class = GetBattlefieldScore(j) 
		if name == pname then 
			pfaction = faction
			break
		end 
	end
end

--get stealthed list
if ( not last_scan or GetTime()-last_scan &amp;gt;= rescan_period ) then --repopulate list every T seconds
	last_scan = GetTime()
	stealthed = {} --depopulate stealthed list
	local currtarget = UnitName(&amp;apos;target&amp;apos;) --get current target&amp;apos;s name

	for i=1,GetNumBattlefieldScores() do 
		local name, killingBlows, honorableKills, deaths, honorGained, faction, rank, race, class = GetBattlefieldScore(i)
		local matched_name = name:match(&amp;apos;[^-]+&amp;apos;) --filter out &amp;quot;-Realm&amp;quot; part
		if ( class == &amp;quot;DRUID&amp;quot; or class == &amp;quot;ROGUE&amp;quot; ) and faction ~= pfaction and not UnitChannelInfo(&amp;apos;player&amp;apos;) then --target change is fatal to channgeling
			TargetUnit(name)
			if ( UnitName(&amp;apos;target&amp;apos;) ~= matched_name or ( UnitName(&amp;apos;target&amp;apos;) == matched_name and IsStealthed(&amp;apos;target&amp;apos;) ) ) then --targeting attemp was unsuccessful or stealthed target was caught during list repopulation
				stealthed[name] = 1
			end
		end
		if ( currtarget and UnitName(&amp;apos;target&amp;apos;) ~= currtarget ) then --return to previous target after targeting stealther
			TargetLastTarget() 
		elseif not currtarget then 
			ClearTarget() 
		end	
	end
end

--look for stealthed
if PQR_SpellAvailable(Breaker()) then --CD/GCD check to prevent excessive spam. NOTE: spell with ID 0 is never avalaible
	local currtarget = UnitName(&amp;apos;target&amp;apos;) --get current target&amp;apos;s name
	local stealther_spotted = false
	for k,v in pairs(stealthed) do
		if ( not ( UnitCastingInfo(&amp;apos;player&amp;apos;) or UnitChannelInfo(&amp;apos;player&amp;apos;) ) and v == 1 ) then --not on GCD &amp; not casting &amp; not channeling
			TargetUnit(k)
			if UnitName(&amp;apos;target&amp;apos;) == k:match(&amp;apos;[^-]+&amp;apos;) then --k is matched to be the same format with UnitName(&amp;apos;target&amp;apos;)
				if ( IsStealthed(&amp;apos;target&amp;apos;) and IsSpellInRange(breakername, &amp;apos;target&amp;apos;) == 1 ) then --range check to prevent spam caused by stealth glitch
					CastSpellByID(Breaker(), &amp;apos;target&amp;apos;)
						if not UnitBuffID(&amp;quot;player&amp;quot;, 51753) then
							PetAttack() --hunter/mage/warlock - only. Really helps to spot stealthers who&amp;apos;are out of LoS
						end
					stealther_spotted = true --flag fixing your target on spotted stealther
					return true
				else
					stealthed[k] = nil	--exclude non-stealthed or too distant stealther from the list
				end
			end
		end
		if not stealther_spotted then	--return to previous target if no stealther was spotted, do nothing otherwise
			if ( currtarget and UnitName(&amp;apos;target&amp;apos;) ~= currtarget ) then 
				TargetLastTarget() 
			elseif not currtarget then 
				ClearTarget() 
			end
		end	
	end	
end
------------------------ARENA--------------------------------
for a=1,5 do
	local arenatarget = &amp;apos;arena&amp;apos;..a
	if IsStealthed(arenatarget) then
		CastSpellByID(Breaker(), arenatarget)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[      DEFEND FRIEND     ]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if helpFriendly then 

--	Rallying Cry --
if PQR_SpellAvailable(97462) 
	then
	_castSpell(97462) -- Mortal Strike
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;Friend need help: Rallying Cry!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
end


end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Combat Rotation Logg Test</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if TEXT == true then
										-- S t a r t ! --
if MortalStrikeText == true then
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cff00B4FF&amp;lt;Mortal Strike&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])	
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	MortalStrikeText = false
end

if HeroicStrikeText == true then
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFF00000\&amp;lt;Heroic Strike&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	HeroicStrikeText = false
end	

if ColossusSmashText == true then	
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFFFC0CB\&amp;lt;Colossus Smash&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	ColossusSmashText = false
end

if StormBoltText == true then	
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124caa88aa88\&amp;lt;Storm Bolt&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	StormBoltText = false
end

if OverPowerText == true then	
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cffffff00\124h&amp;lt;Overpower&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	OverPowerText = false	
end

if DragonRoarText == true then		
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFF808000\124h&amp;lt;Dragon Roar&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	DragonRoarText = false
end

if ImpendingVictoryText == true then		
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFFFFA07A\124h&amp;lt;Impending Victory&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])	
	ImpendingVictoryText = false
end

if SlamText == true then	
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124caa88aa88\&amp;lt;Slam&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])	
	SlamText = false
end

if SunderArmorText == true then
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cffff9900\&amp;lt;Sunder Armor&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	SunderArmorText = false
end

if SweepingStrikesText == true then
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cff736F6E&amp;lt;Sweeping Strikes&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])	
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	SweepingStrikesText = false
end

if WhirlwindText == true then
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFF00FF9A\&amp;lt;Whirlwind&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	WhirlwindText = false
end

if ThunderClapText == true then
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cFF00FFFF\&amp;lt;Thunder Clap&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	ThunderClapText = false
end

if SwiftyText == true then
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cff00cc33\&amp;lt;!&amp;gt;§wifty!&amp;lt;!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	SwiftyText = false
end

if ExecuteText == true then
	RaidNotice_AddMessage(RaidWarningFrame, &amp;quot;\124cffFF00FF\&amp;lt;!&amp;gt;Execute!&amp;lt;!&amp;gt;&amp;quot;, ChatTypeInfo[&amp;quot;RAID_WARNING&amp;quot;])
	ExecuteText = false
end


UIErrorsFrame:Clear()
PQR_DelayRotation(.321)	
--Finish!
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARRIOR>