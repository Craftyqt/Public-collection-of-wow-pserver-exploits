<?xml version="1.0" encoding="utf-8" ?><WARRIOR><Ability><Name>---Get in Melee Range---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not MeleeRange() then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heroic Leap</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Leap ~= 1 then return false end



local HLCD = HLCD

if HLCD &amp;lt; 1 then
  CastSpellByName(GetSpellInfo(6544)) 
  if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end 
  return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Cleave</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_AOE ~= 1 then return false end

local MaxRage = (UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= (UnitPowerMax(&amp;quot;player&amp;quot;) - 10))

if MaxRage then
CastSpellByName(GetSpellInfo(845))
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Globals---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>---No Time to Die---
if UnitExists(&amp;quot;target&amp;quot;) then 
local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)

NOT2D = false

Target = { 70235, 70247, 70212 }

for i=1, #Target do
   if targetGUID == Target[i] then NOT2D = true
   end
end
end

---Blacklist AoE Targets---
if UnitExists(&amp;quot;target&amp;quot;) then 
local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)

NoAoE = false

Name = { 62995 }

for i=1, #Name do
   if targetGUID == Name[i] then NoAoE = true
   end
end
end

--Melee Range---
function MeleeRange()
	if IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then 
	return true 
	else 
	return false
	end
end


function Buff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == &amp;quot;number&amp;quot; then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() &amp;gt; TimeLeft ) then return true end
    end
  end
end

function Debuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == &amp;quot;number&amp;quot; then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() &amp;gt; TimeLeft ) then return true end
    end
  end
end

function BattleBuff()
local AP = { 57330, 19506 }
for i=1,#AP do
	if UnitBuffID(&amp;quot;player&amp;quot;,AP[i]) ~= nil
		then
			return true
		end
	end
end
Rage = UnitPower(&amp;quot;player&amp;quot;)

Bloodbath,_,_,_,_,_,Bloodbathtimer = UnitBuffID(&amp;quot;player&amp;quot;, 12292)

SweepingStrikes,_,_,_,_,_,SweepingStrikestimer = UnitBuffID(&amp;quot;player&amp;quot;, 12328)

Avatar,_,_,_,_,_,Avatartimer = UnitBuffID(&amp;quot;player&amp;quot;, 107574)

ColossusSmash,_,_,_,_,_,ColossusSmashtimer = UnitDebuffID(&amp;quot;target&amp;quot;, 86346, &amp;quot;PLAYER&amp;quot;)

DeepWounds,_,_,_,_,_,DeepWoundstimer = UnitDebuffID(&amp;quot;target&amp;quot;, 115767, &amp;quot;PLAYER&amp;quot;)

Bloodsurge,_,_,_,_,_,Bloodsurgetimer = UnitBuffID(&amp;quot;player&amp;quot;, 46915)

Enrage,_,_,_,_,_,Enragetimer = UnitBuffID(&amp;quot;player&amp;quot;, 12880)

SuddenDeath,_,_,_,_,_,SuddenDeathtimer = UnitBuffID(&amp;quot;player&amp;quot;, 139958)

DeathSentence,_,_,_,_,_,DeathSentencetimer = UnitBuffID(&amp;quot;player&amp;quot;, 144442)

TfB,_,_,_,_,_,TfBtimer = UnitBuffID(&amp;quot;player&amp;quot;, 60503)

RB,_,_,_,_,_,RBtimer = UnitBuffID(&amp;quot;player&amp;quot;, 131116)

Recklessness,_,_,_,_,_,Recklessnesstimer = UnitBuffID(&amp;quot;player&amp;quot;, 1719)

RagingBlow,_,_,RagingBlowcount,_,_,expires = UnitBuffID(&amp;quot;player&amp;quot;,131116)

MeatCleaver,_,_,_,_,_,MeatCleavertimer = UnitBuffID(&amp;quot;player&amp;quot;, 85739)

MeatCount = select(4, UnitBuffID(&amp;quot;player&amp;quot;,85739))

TfBstacks = select(4, UnitBuffID(&amp;quot;player&amp;quot;,60503))

local StaggerStart, StaggerDuration = GetSpellCooldown(107566)
StaggerCD = StaggerStart + StaggerDuration - GetTime()

local PiercingStart, PiercingDuration = GetSpellCooldown(12323)
PiercingCD = PiercingStart + PiercingDuration - GetTime()

local DisruptingStart, DisruptingDuration = GetSpellCooldown(102060)
DisruptingCD = DisruptingStart + DisruptingDuration - GetTime()

local BBStart, BBDuration = GetSpellCooldown(12292)
BBCD = BBStart + BBDuration - GetTime()

local HLStart, HLDuration = GetSpellCooldown(6544)
HLCD = HLStart + HLDuration - GetTime()

local IVStart, IVDuration = GetSpellCooldown(103840)
IVCD = IVStart + IVDuration - GetTime()

local VStart, VDuration = GetSpellCooldown(34428)
VCD = VStart + VDuration - GetTime()

local BTStart, BTDuration = GetSpellCooldown(23881)
BTCD = BTStart + BTDuration - GetTime()

local CSStart, CSDuration = GetSpellCooldown(86346)
CSCD = CSStart + CSDuration - GetTime()

local SBStart, SBDuration = GetSpellCooldown(114207)
SBCD = SBStart + SBDuration - GetTime()

local DBStart, DBDuration = GetSpellCooldown(114203)
DBCD = DBStart + DBDuration - GetTime()

local MBStart, MBDuration = GetSpellCooldown(114192)
MBCD = MBStart + MBDuration - GetTime()

local ReckStart, ReckDuration = GetSpellCooldown(1719)
ReckCD = ReckStart + ReckDuration - GetTime()

local CommandingStart, CommandingDuration = GetSpellCooldown(469)
CommandingCD = CommandingStart + CommandingDuration - GetTime()


Staggering = false
Pierce = false
Disrupt = false
Victory = false

if select(2,GetTalentRowSelectionInfo(2)) == 6 then Victory = true end
if select(2,GetTalentRowSelectionInfo(3)) == 7 then Staggering = true end
if select(2,GetTalentRowSelectionInfo(3)) == 8 then Pierce = true end
if select(2,GetTalentRowSelectionInfo(3)) == 9 then Disrupt = true end

--------------------------------------PVP Tools----------------------------------------------------
function IsSlowed(unit)
local Slows = {
--WARLOCK--
18223,
--WARRIOR--
12323,
1715,
--PALADIN--
110300,                             
--DK--
45524,
50435,
--DRUID--
58180,
102355,
--HUNTER--
5116,
72217,
--MAGE--
7302,
116,
120,
44614,
--PRIEST--
124468,
15407,
--ROGUE--
26679,
3408,
--SHAMAN--
8056,
--MONK--
116095
              }
for i=1,#Slows do
        if UnitDebuffID(unit,Slows[i])
                then
                        return true
                end
        end
end

function SlowImmune(unit)
local Freedom = {
--Hand of Freedom--
1044,
--Dispersion--
47585
             }
for i=1,#Freedom do
        if UnitBuffID(unit,Freedom[i])
                then
                        return true
                end
        end
end

function IsImmune(unit)
local Immunity = {
110700, --Divine Shield
1022, --Hand of Protection
45438, --Ice Block
31224,--Cloak of Shadows
19263, --Deterrence
97417--BrittleBarrier
					}
for i=1,#Immunity do
        if UnitBuffID(unit,Immunity[i])
                then
                        return true
                end
        end
end



---Healthstone Cooldown---
HealthstoneCD = select(2,GetItemCooldown(5512))


--------------------------------------HEALTH/POWER TOOLS------------------------------------------
Playerhealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)

-------------------------------------BUFFS--------------------------------------------------------

---Bloodlust Check---
Bloodlust = UnitBuffID(&amp;quot;player&amp;quot;, 2825)  
or UnitBuffID(&amp;quot;player&amp;quot;, 32182) 
or UnitBuffID(&amp;quot;player&amp;quot;, 80353) 
or UnitBuffID(&amp;quot;player&amp;quot;, 90355)


---Is Target Disarmed---
Disarmed = false

Weapons = { 676, 51722, 91644, 64058, 117368 }

for y=1, #Weapons do
   if UnitDebuffID(&amp;quot;target&amp;quot;, Weapons[y]) then Disarmed = true
   end
end


-----------------------------------------GLYPHS--------------------------------------------------

----------------------------------------TALENTS----------------------------------------------------
AvatarTalent = false
BloodbathTalent = false

if select(2,GetTalentRowSelectionInfo(6)) == 16 then AvatarTalent = true end

if select(2,GetTalentRowSelectionInfo(6)) == 17 then BloodbathTalent = true end
------------------------------------------RACIALS(Death Knight)--------------------------------------------
---Race Check---
Troll = IsSpellKnown(26297)
Orc = IsSpellKnown(20572)
Goblin = IsSpellKnown(69041)
BloodElf = IsSpellKnown(25046)

---Cooldown Check---
local TrollStart,TrollDuration = GetSpellCooldown(26297)
TrollCD = TrollStart + TrollDuration - GetTime()
local OrcStart,OrcDuration = GetSpellCooldown(20572)
OrcCD = OrcStart + OrcDuration - GetTime()
local BloodElfStart,BloodElfDuration = GetSpellCooldown(25046)
BloodElfCD = BloodElfStart + BloodElfDuration - GetTime()
local GoblinStart,GoblinDuration = GetSpellCooldown(69041)
GoblinCD = GoblinStart + GoblinDuration - GetTime()



------------------------------------------POTIONS--------------------------------------------------
VirmenCD = select(2,GetItemCooldown(76089))
Virmen = GetItemCount(76089)

MoguCD = select(2,GetItemCooldown(76095))
Mogu = GetItemCount(76095)

SharkCD = select(2,GetItemCooldown(77589))
Shark = GetItemCount(77589)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Whirlwind</Name><Default>false</Default><SpellID>1680</SpellID><Actions></Actions><Lua>if Nova_AOE ~= 1 then return false end


local MeatCleaver = MeatCleaver

--if not MeatCleaver then
return true
--end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Raging Blow</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>if Nova_AOE ~= 1 then return false end


local RagingBlow, RagingBlowcount, MeatCleaver, MeatCount, CSCD, BTCD, ColossusSmash = 
RagingBlow, RagingBlowcount, MeatCleaver, MeatCount, CSCD, BTCD, ColossusSmash

if (RagingBlowcount &amp;gt;= 1 and MeatCleaver and MeatCount &amp;gt;= 3)
or (MeatCleaver and MeatCount &amp;gt;= 3 and (ColossusSmash
or CSCD &amp;gt;= 3
or (BTCD &amp;gt;= 1 and not Buff(&amp;quot;player&amp;quot;,131116,3)))) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shockwave</Name><Default>false</Default><SpellID>46968</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_Shockwave_enable then return false end

if PQI:IsHotkeys(PQI_SoapboxFury_Shockwave_key) 
and GetCurrentKeyBoardFocus() == nil then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Initialize---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- PQInterface
if not IsAddOnLoaded(&amp;quot;PQInterface&amp;quot;) then
		PQR_WriteToChat(&amp;quot;|cff9482C9The AddOn PQInterface is not loaded or installed!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9Version 2.22+ is required to run the profile.|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9You can get the latest version at this location:|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9http://pqrotation.wikia.com/wiki/PQInterface|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_StopRotation()
		return true
else
	local PQIver = tonumber(GetAddOnMetadata(&amp;quot;PQInterface&amp;quot;,&amp;quot;Version&amp;quot;))
	if PQIver &amp;lt; 2.22 then
		PQR_WriteToChat(&amp;quot;|cff9482C9Your PQInterface version is outdated!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9Version 2.22+ is required to run the profile, you have version &amp;quot;..PQIver..&amp;quot;!|cffffffff&amp;quot;,&amp;quot;Warning&amp;quot;)
		PQR_WriteToChat(&amp;quot;&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9You can get the latest version at this location:|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff9482C9http://pqrotation.wikia.com/wiki/PQInterface|cffffffff&amp;quot;,&amp;quot;Notice&amp;quot;)
		PQR_StopRotation()
		return true
	end
end

if PQR_RotationStarted then
	-- Load Data Files
	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_PQI.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffb73737PQR_PQI.lua failed to load. Make sure it&amp;apos;s in your Data folder!|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
	
	 
	 ---Chat Overlay---
	local function onUpdate(self,elapsed) 
	  if self.time &amp;lt; GetTime() - 2.8 then
	    if self:GetAlpha() == 0 then self:Hide() else self:SetAlpha(self:GetAlpha() - .05) end
	  end
	end
	xrn = CreateFrame(&amp;quot;Frame&amp;quot;,nil,ChatFrame1) 
	xrn:SetSize(ChatFrame1:GetWidth(),30)
	xrn:Hide()
	xrn:SetScript(&amp;quot;OnUpdate&amp;quot;,onUpdate)
	xrn:SetPoint(&amp;quot;TOP&amp;quot;,0,0)
	xrn.text = xrn:CreateFontString(nil,&amp;quot;OVERLAY&amp;quot;,&amp;quot;MovieSubtitleFont&amp;quot;)
	xrn.text:SetAllPoints()
	xrn.texture = xrn:CreateTexture()
	xrn.texture:SetAllPoints()
	xrn.texture:SetTexture(0,0,0,.50) 
	xrn.time = 0
	function xrn:message(message) 
	  self.text:SetText(message)
	  self:SetAlpha(1)
	  self.time = GetTime() 
	  self:Show() 
	end
	
	Nova_CustomT = { }
	
	
	
	
		-- Nova Notification Frame
	-- Update Debug Frame
	Nova_NotifyFrame = nil
	function Nova_NotifyFrame_OnUpdate()
		if (Nova_NotifyFrameTime &amp;lt; GetTime() - 0.2) then
			local alpha = Nova_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then Nova_NotifyFrame:SetAlpha(alpha - .5) end
			if (aplha == 0) then Nova_NotifyFrame:Hide() end
		end
	end
	-- Debug messages.
	function Nova_Notify(message)
		Nova_NotifyFrame.text:SetText(message)
		Nova_NotifyFrame:SetAlpha(1)
		Nova_NotifyFrame:Show()
		Nova_NotifyFrameTime = GetTime()
	end
	-- Debug Notification Frame
	Nova_NotifyFrame = CreateFrame(&amp;apos;Frame&amp;apos;)
	Nova_NotifyFrame:ClearAllPoints()
	Nova_NotifyFrame:SetHeight(300)
	Nova_NotifyFrame:SetWidth(300)
	Nova_NotifyFrame:SetScript(&amp;apos;OnUpdate&amp;apos;, Nova_NotifyFrame_OnUpdate)
	Nova_NotifyFrame:Hide()
	Nova_NotifyFrame.text = Nova_NotifyFrame:CreateFontString(nil, &amp;apos;BACKGROUND&amp;apos;, &amp;apos;PVPInfoTextFont&amp;apos;)
	Nova_NotifyFrame.text:SetAllPoints()
	Nova_NotifyFrame:SetPoint(&amp;apos;LEFT&amp;apos;, 40, - 75)
	Nova_NotifyFrameTime = 0
	
	function CastClick()
		if IsMouseButtonDown(1) 
	  	  and MainMenuBar:IsShown() then
	  		local mousefocus = GetMouseFocus()
			if mousefocus 
			  and mousefocus.feedback_action then 
		  		SpellCancelQueuedSpell() 
		  		PQR_DelayRotation(1) 
		  	end
		end 	
	end	
	
	  ----------------
  --Nova  Checks--
  ----------------
  if Nova_Cooldowns == 1 then
  PQR_WriteToChat(&amp;quot;Cooldowns: \124cFF15E615Active&amp;quot;) end
  if (Nova_AOE == nil or Nova_AOE == 0) then
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;) end
  if Nova_AOE == 1 and GetSpecialization(&amp;quot;player&amp;quot;) ~= 1 then			
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;AOE&amp;quot;,nil,&amp;quot;0698FF&amp;quot;) end
  if Nova_AOE == 1 and GetSpecialization(&amp;quot;player&amp;quot;) == 1 then			
  SetCVar(&amp;quot;Nova_AOE&amp;quot;, 0)
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;) end
  if Nova_Cleave == 1 then	
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Cleave&amp;quot;,nil,&amp;quot;0fffff&amp;quot;) end
  if Nova_SlamCleave == 1 and GetSpecialization(&amp;quot;player&amp;quot;) == 1 then	
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Slam-Cleave&amp;quot;,nil,&amp;quot;0fffff&amp;quot;) end
  if Nova_SlamCleave == 1 and GetSpecialization(&amp;quot;player&amp;quot;) ~= 1 then	
  SetCVar(&amp;quot;Nova_SlamCleave&amp;quot;, 0)
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;) end
  if Nova_ThreeCleave == 1 and GetSpecialization(&amp;quot;player&amp;quot;) == 2 then	
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;3 Target Cleave&amp;quot;,nil,&amp;quot;0fffff&amp;quot;) end
  if Nova_ThreeCleave == 1 and GetSpecialization(&amp;quot;player&amp;quot;) ~= 2 then	
  SetCVar(&amp;quot;Nova_ThreeCleave&amp;quot;, 0)
  PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;) end
  PQR_RotationStarted = false

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Cleave] Cleave</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave ~= 1 and Nova_Cleave ~= 1 then return false end


local MaxRage = (UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= (UnitPowerMax(&amp;quot;player&amp;quot;) - 10))
local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local ColossusSmash, Rage = ColossusSmash, Rage

if ((ColossusSmash and Rage &amp;gt;= 80)
and Targethealth &amp;gt;= 20)
or MaxRage then
CastSpellByName(GetSpellInfo(845))
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Cleave] Raging Blow</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>local RagingBlow, RagingBlowcount, MeatCleaver, MeatCount, CSCD, BTCD, ColossusSmash = 
RagingBlow, RagingBlowcount, MeatCleaver, MeatCount, CSCD, BTCD, ColossusSmash

if Nova_Cleave == 1 then
	if (RagingBlowcount &amp;gt;= 1 and MeatCleaver and MeatCount &amp;gt;= 1)
	or (MeatCleaver and MeatCount &amp;gt;= 1 and (ColossusSmash
	or CSCD &amp;gt;= 3
	or (BTCD &amp;gt;= 1 and not Buff(&amp;quot;player&amp;quot;,131116,3)))) then
	return true
	end
end

if Nova_ThreeCleave == 1 then
	if (RagingBlowcount &amp;gt;= 1 and MeatCleaver and MeatCount &amp;gt;= 2) then
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Cleave] Whirlwind</Name><Default>false</Default><SpellID>1680</SpellID><Actions></Actions><Lua>if Nova_Cleave == 1  then
	if not MeatCleaver then
	return true
	elseif MeatCleavertimer - GetTime() &amp;lt; 1.5 then
	return true
	end
end

if Nova_ThreeCleave == 1 then
	if not MeatCleaver then
	return true
	elseif MeatCount &amp;lt; 2 or MeatCleavertimer - GetTime() &amp;lt; 1.5 then
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Demoralizing Banner</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Demo ~= 1 then return false end



if DBCD &amp;lt; 1 then
  CastSpellByName(GetSpellInfo(114203)) 
  if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end 
  return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mocking Banner</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_MockingBanner_enable then return false end

local MBCD = MBCD

if PQI:IsHotkeys(PQI_SoapboxFury_MockingBanner_key) 
and GetCurrentKeyBoardFocus() == nil 
and MBCD &amp;lt; 1 then
  CastSpellByName(GetSpellInfo(114192)) 
  if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end 
  return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hamstring</Name><Default>false</Default><SpellID>1715</SpellID><Actions></Actions><Lua>if Nova_Hamstring ~= 1 then return false end
local SlowThem = true

if IsSlowed(&amp;quot;target&amp;quot;)
or SlowImmune(&amp;quot;target&amp;quot;)
then
SlowThem = false
end


if SlowThem == false
and UnitDebuffID(&amp;quot;target&amp;quot;,1715)
then
	local String, _, _, _, _, _, Stringtimer = UnitDebuffID(&amp;quot;target&amp;quot;, 1715)
	if String then
		if Stringtimer - GetTime() &amp;lt; 1 then
			return true
		end
	end
end
		
		
if SlowThem == true
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Intimidating Shout</Name><Default>false</Default><SpellID>5246</SpellID><Actions></Actions><Lua>if Nova_Intimidating ~= 1 then return false end
return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Healthstone</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if  Playerhealth &amp;lt;= 50
and HealthstoneCD &amp;lt; 1
then
UseItemByName(5512, &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Dragon Roar</Name><Default>false</Default><SpellID>118000</SpellID><Actions></Actions><Lua>if Nova_AOE ~= 1 then return false end
if Nova_AOETalent == 1 then
return true
end
if not PQI_SoapboxOffensiveSettings_AutoAOETalent_enable then return false end
local ColossusSmash, BloodbathTalent, Bloodbath = ColossusSmash, BloodbathTalent, Bloodbath

if ((BloodbathTalent == true and Bloodbath)
or BloodbathTalent == false) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Heroic Strike</Name><Default>false</Default><SpellID>78</SpellID><Actions></Actions><Lua>if Nova_AOE ~= 1 then return false end


local ColossusSmash, Rage = ColossusSmash, Rage

if ColossusSmash
and Rage &amp;gt;= 90 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Racials]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Troll, Orc, Goblin, BloodElf, TrollCD, OrcCD, BloodElfCD, GoblinCD, Rage, Bloodbath, 
Recklessness, Bloodlust = Troll, Orc, Goblin, BloodElf, TrollCD, OrcCD, BloodElfCD, GoblinCD, Rage,
Bloodbath, Recklessness, Bloodlust
if PQI_SoapboxOffensiveSettings_BossCooldowns_enable and not SpecialUnit() then return false end


--Troll Berserking--
if Troll == true then 
	if TrollCD &amp;lt; 1 
	and not UnitBuffID(&amp;quot;player&amp;quot;, 3045) 
	and not UnitBuffID(&amp;quot;player&amp;quot;, 2825)  
	and not UnitBuffID(&amp;quot;player&amp;quot;, 32182) 
	and not UnitBuffID(&amp;quot;player&amp;quot;, 80353) 
	and not UnitBuffID(&amp;quot;player&amp;quot;, 90355) then
	CastSpellByName(GetSpellInfo(26297),&amp;quot;player&amp;quot;)
	return true
	end
end

--Orc Blood Fury--
if Orc == true then 
	if OrcCD &amp;lt; 1 
	and (Bloodbath 
	or Bloodlust
	or Recklessness) then
	CastSpellByName(GetSpellInfo(20572),&amp;quot;player&amp;quot;)
	return true
	end
end

--Blood Elf Arcane Torrent--
if BloodElf == true then 
	if BloodElfCD &amp;lt; 1 
	and Rage &amp;lt; 40 then
	CastSpellByName(GetSpellInfo(25046),&amp;quot;player&amp;quot;)
	return true
	end
end

--Goblin Rocket Barrage--
if Goblin == true then 
	if GoblinCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(69041),&amp;quot;target&amp;quot;)
	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Potions]</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxFury_MoguPower_enable then return false end

local MoguCD, Mogu, Bloodlust = MoguCD, Mogu, Bloodlust

if Bloodlust
and MoguCD &amp;lt; 1 
and Mogu &amp;gt; 0 then
UseItemByName(76095, &amp;quot;player&amp;quot;)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Bloodthirst Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Targethealth = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
local RagingBlow, Rage, BTCD, ColossusSmash = Ragingblow, Rage, BTCD, ColossusSmash



if Targethealth &amp;lt; 20
and ColossusSmash
and Rage &amp;gt;= 30 then
return false
end




---old---
---if Targethealth &amp;lt; 20
---and ColossusSmash
---and (Rage &amp;gt;= 30 or (Rage &amp;gt;= 10 and RagingBlow ~= nil)) then
---return false
---end

if BTCD &amp;gt; 0
and BTCD &amp;lt;= 1 then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Victory Rush</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxDefensiveSettings_VictoryRush_enable then return false end
v = tonumber(PQI_SoapboxDefensiveSettings_VictoryRush_value)
if Playerhealth &amp;gt; v then return false end


	if IVCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(103840))
	end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[AoE] Bladestorm</Name><Default>false</Default><SpellID>46924</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave ~= 1 and Nova_AOE ~= 1 and Nova_Cleave ~= 1 then return false end
if Nova_AOETalent == 1 then
return true
end
if not PQI_SoapboxOffensiveSettings_AutoAOETalent_enable then return false end
local BloodbathTalent, Bloodbath = BloodbathTalent, Bloodbath

if RB then
	if MeatCleaver and MeatCount &amp;gt;= 3 then return false end
	if MeatCleaver and MeatCleavertimer - GetTime() &amp;lt; 7 then return false end
	if RB and RBtimer - GetTime() &amp;lt; 7 then return false end
end
--if not Enrage or (Enrage and Enragetimer - GetTime() &amp;lt; 2) then return false end

if (BloodbathTalent == true and Bloodbath) 
or BloodbathTalent == false then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(b) Storm Bolt</Name><Default>false</Default><SpellID>107570</SpellID><Actions>/use 10</Actions><Lua>if Nova_AOE == 1 and (RB and MeatCleaver and MeatCount &amp;gt;= 3) then return false end
if Nova_AOE == 1 and RB and MeatCleaver and MeatCleavertimer - GetTime() &amp;lt; 2 and Rage &amp;gt;= 30 then return false end

if not EEoG() then return false end
if ColossusSmash then
UseInventoryItem(10)
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Functions---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if sTimer == nil then
  sTimer = 0
 end
 if cTime == nil then
  cTime = 0
 end
 if UnitAffectingCombat(&amp;quot;player&amp;quot;) and sTimer == 0 then
   sTimer = GetTime()
 end
 if sTimer &amp;gt; 0 then
   cTime = (GetTime() - sTimer)
 end
 if not UnitAffectingCombat(&amp;quot;player&amp;quot;) and not UnitExists(&amp;quot;target&amp;quot;) then
  sTimer = 0
  cTime = 0
 end
 
 --Dummy 5min DPS Test
if UnitExists(&amp;quot;target&amp;quot;) then
if cTime &amp;gt;= 600 and dummy() then  
	StopAttack()
	ClearTarget()
	print(&amp;quot;5 Minute Dummy Test Concluded - Profile Stopped&amp;quot;)
	RunMacroText(&amp;quot;/run Screenshot()&amp;quot;)
	PQR_StopRotation()
end
end
function dummy()
	dummies = {
		31146, --Raider&amp;apos;s Training Dummy - Lvl ??
		67127, --Training Dummy - Lvl 90
		46647, --Training Dummy - Lvl 85
		32546, --Ebon Knight&amp;apos;s Training Dummy - Lvl 80
		31144, --Training Dummy - Lvl 80
		32667, --Training Dummy - Lvl 70
		32542, --Disciple&amp;apos;s Training Dummy - Lvl 65
		32666, --Training Dummy - Lvl 60
		32545, --Initiate&amp;apos;s Training Dummy - Lvl 55 
		32541, --Initiate&amp;apos;s Training Dummy - Lvl 55 (Scarlet Enclave) 
		54344
	}
	for i=1, #dummies do
		if UnitExists(&amp;quot;target&amp;quot;) then
			dummyID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(-13, -9), 16)
		else
			dummyID = 0
		end
		if dummyID == dummies[i] then
			return true
		end	
	end
end
 
 NoCS2 = nil
function NoCS2()
	if PQI_SoapboxOffensiveSettings_ColossusSmashTest_enable then
		for i=1,5 do
		local bossCheck = &amp;quot;boss&amp;quot;..i
			if UnitExists(bossCheck) then
				if UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck) then
				return false
				else
				return true
				end
			end
		end
	end
end

NoCS = nil
function NoCS()
	if PQI_SoapboxOffensiveSettings_ColossusSmashTest_enable then
		if UnitExists(&amp;quot;boss1&amp;quot;) or UnitExists(&amp;quot;boss2&amp;quot;) or UnitExists(&amp;quot;boss3&amp;quot;) or UnitExists(&amp;quot;boss4&amp;quot;) then
			if UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;boss1&amp;quot;) or UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;boss2&amp;quot;) or  UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;boss3&amp;quot;) or UnitIsUnit(&amp;quot;target&amp;quot;, &amp;quot;boss4&amp;quot;) then
			return false
			else
			return true
			end
		end
	end
end
	if IsInRaid() then group = &amp;quot;raid&amp;quot;
elseif IsInGroup() then group = &amp;quot;party&amp;quot;
else group = nil
end

-- Returns the number of items currently equipped from the given table.
itemCheck = nil
function itemCheck(tbl)
	local itemCount = 0
	for i=1,#tbl do
		if IsEquippedItem(tbl[i]) then itemCount = itemCount + 1 end
	end
	return itemCount
end

T16 = {
	99199,99198
}
---Crit Rating Check--

CritRating = GetSpellCritChance(6)*600-6
-- Boss Unit Function
BerserkUnit = nil
function BerserkUnit()
	local PQ_BerserkerUnits = PQ_BerserkerUnits
	
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		
		-- Dungeons &amp; Raids
		if UnitLevel(&amp;quot;target&amp;quot;) == -1 then
			for i=1,#PQ_BerserkerUnits do
				if PQ_BerserkerUnits[i] == npcID then return true end
			end
			return false
		end
	else return false end
end


-- Boss Unit Function
SpecialUnit = nil
function SpecialUnit()
	local PQ_BossUnits = PQ_BossUnits
	
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		
		-- Dungeons &amp; Raids
		if UnitLevel(&amp;quot;target&amp;quot;) == -1 then return true else
			for i=1,#PQ_BossUnits do
				if PQ_BossUnits[i] == npcID then return true end
			end
			return false
		end
	else return false end
end
-- Complete boss unit table (Dungeons/Heroics/Raids)
PQ_BossUnits = {
	-- Cataclysm Dungeons --
	-- Abyssal Maw: Throne of the Tides
	40586,		-- Lady Naz&amp;apos;jar
	40765,		-- Commander Ulthok
	40825,		-- Erunak Stonespeaker
	40788,		-- Mindbender Ghur&amp;apos;sha
	42172,		-- Ozumat
	-- Blackrock Caverns
	39665,		-- Rom&amp;apos;ogg Bonecrusher
	39679,		-- Corla, Herald of Twilight
	39698,		-- Karsh Steelbender
	39700,		-- Beauty
	39705,		-- Ascendant Lord Obsidius
	-- The Stonecore
	43438,		-- Corborus
	43214,		-- Slabhide
	42188,		-- Ozruk
	42333,		-- High Priestess Azil
	-- The Vortex Pinnacle
	43878,		-- Grand Vizier Ertan
	43873,		-- Altairus
	43875,		-- Asaad
	-- Grim Batol
	39625,		-- General Umbriss
	40177,		-- Forgemaster Throngus
	40319,		-- Drahga Shadowburner
	40484,		-- Erudax
	-- Halls of Origination
	39425,		-- Temple Guardian Anhuur
	39428,		-- Earthrager Ptah
	39788,		-- Anraphet
	39587,		-- Isiset
	39731,		-- Ammunae
	39732,		-- Setesh
	39378,		-- Rajh
	-- Lost City of the Tol&amp;apos;vir
	44577,		-- General Husam
	43612,		-- High Prophet Barim
	43614,		-- Lockmaw
	49045,		-- Augh
	44819,		-- Siamat
	-- Zul&amp;apos;Aman
	23574,		-- Akil&amp;apos;zon
	23576,		-- Nalorakk
	23578,		-- Jan&amp;apos;alai
	23577,		-- Halazzi
	24239,		-- Hex Lord Malacrass
	23863,		-- Daakara
	-- Zul&amp;apos;Gurub
	52155,		-- High Priest Venoxis
	52151,		-- Bloodlord Mandokir
	52271,		-- Edge of Madness
	52059,		-- High Priestess Kilnara
	52053,		-- Zanzil
	52148,		-- Jin&amp;apos;do the Godbreaker
	-- End Time
	54431,		-- Echo of Baine
	54445,		-- Echo of Jaina
	54123,		-- Echo of Sylvanas
	54544,		-- Echo of Tyrande
	54432,		-- Murozond
	-- Hour of Twilight
	54590,		-- Arcurion
	54968,		-- Asira Dawnslayer
	54938,		-- Archbishop Benedictus
	-- Well of Eternity
	55085,		-- Peroth&amp;apos;arn
	54853,		-- Queen Azshara
	54969,		-- Mannoroth
	55419,		-- Captain Varo&amp;apos;then
	
	-- Mists of Pandaria Dungeons --
	-- Scarlet Halls
	59303,		-- Houndmaster Braun
	58632,		-- Armsmaster Harlan
	59150,		-- Flameweaver Koegler
	-- Scarlet Monastery
	59789,		-- Thalnos the Soulrender
	59223,		-- Brother Korloff
	3977,		-- High Inquisitor Whitemane
	60040,		-- Commander Durand
	-- Scholomance
	58633,		-- Instructor Chillheart
	59184,		-- Jandice Barov
	59153,		-- Rattlegore
	58722,		-- Lilian Voss
	58791,		-- Lilian&amp;apos;s Soul
	59080,		-- Darkmaster Gandling
	-- Stormstout Brewery
	56637,		-- Ook-Ook
	56717,		-- Hoptallus
	59479,		-- Yan-Zhu the Uncasked
	-- Tempe of the Jade Serpent
	56448,		-- Wise Mari
	56843,		-- Lorewalker Stonestep
	59051,		-- Strife
	59726,		-- Peril
	58826,		-- Zao Sunseeker
	56732,		-- Liu Flameheart
	56762,		-- Yu&amp;apos;lon
	56439,		-- Sha of Doubt
	-- Mogu&amp;apos;shan Palace
	61444,		-- Ming the Cunning
	61442,		-- Kuai the Brute
	61445,		-- Haiyan the Unstoppable
	61243,		-- Gekkan
	61398,		-- Xin the Weaponmaster
	-- Shado-Pan Monastery
	56747,		-- Gu Cloudstrike
	56541,		-- Master Snowdrift
	56719,		-- Sha of Violence
	56884,		-- Taran Zhu
	-- Gate of the Setting Sun
	56906,		-- Saboteur Kip&amp;apos;tilak
	56589,		-- Striker Ga&amp;apos;dok
	56636,		-- Commander Ri&amp;apos;mok
	56877,		-- Raigonn
	-- Siege of Niuzao Temple
	61567,		-- Vizier Jin&amp;apos;bak
	61634,		-- Commander Vo&amp;apos;jak
	61485,		-- General Pa&amp;apos;valak
	62205,		-- Wing Leader Ner&amp;apos;onok
	
	-- Mists of Pandaria Heroic Scenarios --
	-- A Brewing Storm
	58739,		-- Borokhula the Destroyer
	-- Battle on the High Seas
	71303,		-- Whale Shark &amp;lt;Son of Whale Shark&amp;gt;
	71327,		-- Admiral Hodgson
	67426,		-- Admiral Hagman
	70893,		-- Lieutenant Blasthammer
	71329,		-- Lieutenant Boltblaster
	-- Blood in the Snow
	70468,		-- Bonechiller Barafu
	70474,		-- Farastu &amp;lt;The Living Ice&amp;gt;
	70544,		-- Hekima the Wise &amp;lt;Herald of Rastakhan&amp;gt;
	-- Crypt of the Forgotten Kings
	61707,		-- Abomination of Anger
	71492,		-- Maragor &amp;lt;Guardian of the Golden Doors&amp;gt;
	67081,		-- Forgotten King
	-- Dark Heart of Pandaria
	71123,		-- Echo of Y&amp;apos;Shaarj
	-- The Secrets of Ragefire
	70683,		-- Dark Shaman Xorenth
	71030,		-- Overseer Elaglo
	70665,		-- Kor&amp;apos;kron Dire Soldier

	-- Training Dummies --
	46647,		-- Level 85 Training Dummy
	67127,		-- Level 90 Training Dummy
	
	-- Pandaria Raid Adds --
	63346,		-- Tsulong: The Dark of Night
	62969,		-- Tsulong: Embodied Terror
	62977,		-- Tsulong: Frightspawn
	62919,		-- Tsulong: Unstable Sha
	61034,		-- Sha of Fear: Terror Spawn
	61003		-- Sha of Fear: Dread Spawn
}

PQ_BerserkerUnits = {

	71466,		-- Iron Juggernaut
	71529,		-- Thok
	71454,		-- Malkorok
	71865,		-- Garrosh
}

	
	
	-- DoT Mind Control Function
MindControlled = nil
function MindControlled(unit)
	if UnitDebuffID(unit, 145832) 
	or UnitDebuffID(unit, 145171) 
	or UnitDebuffID(unit, 145065) 
	or UnitDebuffID(unit, 145071) then
	return true
	else
	return false
	end
end
-- Target Validation Function
TargetValidation = nil
function TargetValidation(unit, spell)
	if UnitExists(unit)
		and IsPlayerSpell(spell)
		and UnitCanAttack(&amp;quot;player&amp;quot;, unit) == 1
		and not UnitIsDeadOrGhost(unit)
		and IsLineOfSight(unit, 5) then
			if IsSpellKnown(spell) then
				if PQR_SpellAvailable(spell) then
					if IsSpellInRange(GetSpellInfo(spell), unit) == 1 then return true else return false end
				else
					if spell == 8092 or spell == 32379 then
						local spellCD = select(2,GetSpellCooldown(spell)) + GetSpellCooldown(spell) - GetTime()
						if spellCD &amp;lt;= 0 then spellCD = 0 end
						if spellCD &amp;lt;= 0.5 then return true end
					end
					return false
				end
			else
				if select(2, GetSpellCooldown(spell)) == 0 then return true end
			end
	end
end


-- GetSpellCD will return actual Timer before we can use the ability, 0 if the ability is ready.
	GetSpellCD = nil
	function GetSpellCD(MySpell)
		if GetSpellCooldown(GetSpellInfo(MySpell)) == nil then
			return 0
		else
			local Start ,CD = GetSpellCooldown(MySpell)
			local MyCD = Start + CD - GetTime()
			return MyCD
		end
	end
QuickKill = nil
function QuickKill()
	local Quickness = Quickness
	if UnitExists(&amp;quot;target&amp;quot;) then
		local npcID = tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(6,10), 16)
		-- Dungeons &amp; Raids
		for i=1,#Quickness do
			if Quickness[i] == npcID then 
			return true
			end
		end
		return false
	else return false end
end
Quickness = {
--71606, --Deactivated Missile Turrets
--71751, --Deactivated Laser Turrets - 
--71694, --Deactivated Electromagnets - 
74009, --Crawler Mines
--71790, --Disassembled Crawler Mines - 
72172, --Reflections - 
71946, --Manifestation of Pride - 
71603, --Sha Puddles - 
71642, --Congealed Sha - 
71977, --Manifestation of Corruption - 
71976, --Essences of Corruption - 
72263, --Unleashed Essences of Corruption - 
72353, --Dragonmaw Flameslingers - 
72352, --Dragonmaw Ebon Stalkers - 
71825, --Foul Slimes - 
71519, --Kor&amp;apos;kron Warshamans - 
71517, --Kor&amp;apos;kron Arcweavers - 
71518, --Kor&amp;apos;kron Assassins - 
71433, --Sparks of Life - 
71378, --Quilen Guardians - 
71383, --Kor&amp;apos;thik Warcallers - 
71385, --Sri&amp;apos;thik Bombardiers - 
71397, --Zar&amp;apos;thik Amber Priests - 
71405, --Set&amp;apos;thik Wind Wielders - 
71427, --Ancient Brewmaster Spirits - 
71428, --Wise Mistweaver Spirits - 
71430, --Nameless Windwalker Spirits - 
71658, --Kor&amp;apos;kron Jailer - 
71425, --Mature Kunchongs - 
71420, --Hungry Kunchongs - 
71407, --Amber - 
71979, --Kor&amp;apos;kron Warbringer - 
71984, --Siege Engineers - 
72237, --Embodied Fears - 
72238, --Embodied Doubts - 
72236, --Embodied Despairs - 
72272  --Minions of Y&amp;apos;Shaarj - 
}

---Credits to Bu_ba for the line of code!---
if not IsLineOfSight then
 LoSTable = { }
 function IsLineOfSight(targetCheck, time)
  local time=time or 5
  targetGUID = UnitGUID(targetCheck) or 0 

   for i=1, #LoSTable do
    if time &amp;lt; (GetTime() - LoSTable[i].time) then
     table.remove(LoSTable, i)
     break
    end
  end

   function LoSCheck(self, event, ...)
    local targetGUID = targetGUID
    local Log = {...}
    local AlreadyTabled = false
    if Log[2] and Log[2] == &amp;quot;SPELL_CAST_FAILED&amp;quot; and targetGUID then
     if Log[4] and Log[4]==UnitGUID(&amp;quot;player&amp;quot;) then
      if Log[15] and Log[15]==SPELL_FAILED_LINE_OF_SIGHT then
       for j=1, #LoSTable do
        if targetGUID == LoSTable[j].unit then
         AlreadyTabled = true
         break
        end
       end
       if not AlreadyTabled then
        table.insert(LoSTable, { unit=targetGUID, time=GetTime() } )
        targetGUID = nil
        _G.NovaLineOfSight:UnregisterAllEvents()
       end
      end
     end
    end
    
   end

  if not NovaLineOfSight then
    frameLOS = CreateFrame(&amp;quot;frame&amp;quot;, &amp;quot;NovaLineOfSight&amp;quot;)
    frameLOS:SetScript(&amp;quot;OnEvent&amp;quot;, LoSCheck)
  end
  
   for k=1, #LoSTable do
     if targetGUID and targetGUID == LoSTable[k].unit then
     return false
    end
  end
  
  
  _G.NovaLineOfSight:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
  return true

 end
end
if sTimer == nil then
  sTimer = 0
 end
 if cTime == nil then
  cTime = 0
 end
 if UnitAffectingCombat(&amp;quot;player&amp;quot;) and sTimer == 0 then
   sTimer = GetTime()
 end
 if sTimer &amp;gt; 0 then
   cTime = (GetTime() - sTimer)
 end
 if not UnitAffectingCombat(&amp;quot;player&amp;quot;) and not UnitExists(&amp;quot;target&amp;quot;) then
  sTimer = 0
  cTime = 0
 end
 
 
if not T2D then
T2D = nil
function T2D(unit)
	-- If no target is given, return false.
	if unit == nil then return false end
	
	if UnitExists(unit) then
		-- Target present; Set initial values.
		if (guid ~= UnitGUID(unit)) or (guid == UnitGUID(unit) and UnitHealth(unit) == _firstLifeMax) then
			guid = UnitGUID(unit)
			_firstLife = UnitHealth(unit)
			_firstLifeMax = UnitHealthMax(unit)
			_firstTime = GetTime()
		end
		
		-- Fetch current values.
		_currentLife = UnitHealth(unit)
		_currentTime = GetTime()
		timeDiff = _currentTime - _firstTime
		hpDiff = _firstLife - _currentLife
		
		-- Calculate time to die.
		if hpDiff &amp;gt; 0 then
			fullTime = timeDiff*_firstLifeMax/hpDiff
			pastFirstTime = (_firstLifeMax - _firstLife)*timeDiff/hpDiff
			calcTime = _firstTime - pastFirstTime + fullTime - _currentTime
			if calcTime &amp;lt; 1 then calcTime = 1 end
			timeToDie = calcTime
		end
		
		-- New target; reset settings.
		if hpDiff &amp;lt;= 0 then
			guid = UnitGUID(unit)
			_firstLife = UnitHealth(unit)
			_firstLifeMax = UnitHealth(unit)
			_firstTime = GetTime()
		end
	            
		-- Training Dummy&amp;apos;s are bad
		if UnitHealthMax(unit) == 1 then timeToDie = 99 end
		
		-- Initialize
		if not timeToDie then timeToDie = 100 end
		if NOT2D == true then timeToDie = 1000 end
		return timeToDie
	end
end
end

if (GetInventoryItemID(&amp;quot;player&amp;quot;, 13) == 102298
or GetInventoryItemID(&amp;quot;player&amp;quot;, 14) == 102298) then
CooldownRedux = 0.4219
elseif (GetInventoryItemID(&amp;quot;player&amp;quot;, 13) == 104993
or GetInventoryItemID(&amp;quot;player&amp;quot;, 14) == 104993) then
CooldownRedux = 0.3342
elseif (GetInventoryItemID(&amp;quot;player&amp;quot;, 13) == 104744
or GetInventoryItemID(&amp;quot;player&amp;quot;, 14) == 104744) then
CooldownRedux = 0.3738
elseif (GetInventoryItemID(&amp;quot;player&amp;quot;, 13) == 105242
or GetInventoryItemID(&amp;quot;player&amp;quot;, 14) == 105242) then
CooldownRedux = 0.4461
elseif (GetInventoryItemID(&amp;quot;player&amp;quot;, 13) == 104495
or GetInventoryItemID(&amp;quot;player&amp;quot;, 14) == 104495) then
CooldownRedux = 0.4762
elseif (GetInventoryItemID(&amp;quot;player&amp;quot;, 13) == 105491
or GetInventoryItemID(&amp;quot;player&amp;quot;, 14) == 105491) then
CooldownRedux = 0.5036
else
CooldownRedux = 1
end

Eye = { 105491, 104495, 105242, 102298, 104744, 104993 }

EEoG = nil
	function EEoG()
	
		local Trinket1 = GetInventoryItemID(&amp;quot;player&amp;quot;, 13)
		local Trinket2 = GetInventoryItemID(&amp;quot;player&amp;quot;, 14)
		
		
		for i = 1, #Eye do
			if Trinket1 == Eye[i] or Trinket2 == Eye[i] then
				return true, Eye[i]
			end
		end
		
		return false, nil
		
	end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(k) Execute</Name><Default>false</Default><SpellID>5308</SpellID><Actions></Actions><Lua>if Nova_AOE == 1 then return false end

if ColossusSmash
or (DeathSentence and (ColossusSmash or (DeathSentencetimer - GetTime() &amp;lt; (GetSpellCD(86346) + 2))))
or Rage &amp;gt; 60
or T2D(&amp;quot;target&amp;quot;) &amp;lt; 12
--or Recklessness 
then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(d) Storm Bolt</Name><Default>false</Default><SpellID>107570</SpellID><Actions>/use 10</Actions><Lua>if not  EEoG() then return false end

if ColossusSmash then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(l) Raging Blow</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end

if (RagingBlowcount == 2 and GetSpellCD(86346) &amp;gt; 3)
or Targethealth &amp;lt;= 20
or ColossusSmash
or (RB and RBtimer - GetTime() &amp;lt;= 3) then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(c) Raging Blow</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end

if Targethealth &amp;lt;= 20 and not ColossusSmash and GetSpellCD(86346) &amp;gt; 0 then
return true
end

if RagingBlowcount == 2
and ColossusSmash
and Targethealth &amp;gt; 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(o) Raging Blow</Name><Default>false</Default><SpellID>85288</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end

	
if CSCD &amp;gt;= 3 then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(m) Bladestorm</Name><Default>false</Default><SpellID>46924</SpellID><Actions></Actions><Lua>if Nova_AOETalent == 1 then
return true
end

if Nova_ThreeCleave ~= 1 and Nova_AOE ~= 1 and Nova_Cleave ~= 1 and (not Enrage or (Enrage and Enragetimer - GetTime() &amp;lt; 2)) or ColossusSmash or GetSpellCD(86346) &amp;lt; 5 or Nova_Cooldowns ~= 1 or not PQI_SoapboxOffensiveSettings_AutoAOETalent_enable or not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end

if (BloodbathTalent == true and Bloodbath) 
or BloodbathTalent == false then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(n) Wild Strike</Name><Default>false</Default><SpellID>100130</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end

if Bloodsurge then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(8) Recklessness</Name><Default>false</Default><SpellID>1719</SpellID><Actions></Actions><Lua>if PQI_SoapboxOffensiveSettings_BossCooldowns_enable and not SpecialUnit() then return false end

if Nova_Cooldowns ~= 1 then return false end

-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end




if (ColossusSmash and ColossusSmashtimer - GetTime() &amp;gt;= 5)
or (IsPlayerSpell(122292) and Bloodbath and (T2D(&amp;quot;target&amp;quot;) &amp;gt; 192*CooldownRedux or Targethealth &amp;lt;= 20))
or (Targethealth &amp;lt;= 20 and T2D(&amp;quot;target&amp;quot;) &amp;lt;= 15) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(9) Avatar</Name><Default>false</Default><SpellID>107574</SpellID><Actions></Actions><Lua>if PQI_SoapboxOffensiveSettings_BossCooldowns_enable and not SpecialUnit() then return false end
if BossTime then return false end
if Nova_Cooldowns ~= 1 then return false end

-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end

if Recklessness
or T2D(&amp;quot;target&amp;quot;) &amp;lt;= 25 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(B) Synapse Springs</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxOffensiveSettings_SynapseSprings_enable then return false end


local TargetValidation = TargetValidation
local Gloves = GetInventoryItemID(&amp;quot;player&amp;quot;, 10)

-- If we don&amp;apos;t know Engineering. Don&amp;apos;t activate.
for i=1,9 do
	if select(7,GetProfessionInfo(i)) == 202 then hasEngi = true end
end

-- Don&amp;apos;t have Engineering.
if not hasEngi then return false end

-- Item not equipped?
if not IsEquippedItem(Gloves) then return false end

-- Don&amp;apos;t use it if it&amp;apos;s on cooldown as well!
if GetItemCooldown(Gloves) &amp;gt; 0 then return false end

-- Don&amp;apos;t use if Dark Soul is ready!
if not ColossusSmash then return false end

-- Cast Engineering Gloves
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end

UseItemByName(Gloves)</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(F) Berserker Rage</Name><Default>false</Default><SpellID>18499</SpellID><Actions></Actions><Lua>if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end

if cTime &amp;lt; 2 then return false end
if BerserkerRage then
	if not Enrage or (Enrage and Enragetimer - GetTime() &amp;lt; 1) then
		if (GetSpellCD(23881) &amp;gt; 0 and GetSpellCD(23881) &amp;lt; 3) 
		or (ColossusSmash and Targethealth &amp;lt;= 20) then
		return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(X) Bloodbath</Name><Default>false</Default><SpellID>12292</SpellID><Actions></Actions><Lua>-- Make sure we are in range to use abilities
if Nova_AOETalent == 1 then
	if Nova_AOE == 1 then
		if IsPlayerSpell(46924) then
			if GetSpellCD(46924) &amp;lt; 4 then
			return true
			end
		end
	end
end

if Nova_Cooldowns ~= 1 then return false end
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end
if Nova_AOE == 1 and IsPlayerSpell(46924) and not PQR_SpellAvailable(46924) then return false end
if Nova_AOE == 1 and IsPlayerSpell(46924) and PQR_SpellAvailable(46924) then
return true
end

if IsPlayerSpell(46924) then
if GetSpellCD(46924) &amp;gt; 1 then return false
end
end

if CSCD &amp;lt; 2 
or (ColossusSmash and ColossusSmashtimer - GetTime() &amp;gt;= 5)
or T2D(&amp;quot;target&amp;quot;) &amp;lt;= 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(Y) Heroic Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end
if not Enrage then return false end
local MaxRage = (UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= (UnitPowerMax(&amp;quot;player&amp;quot;) - 10))
local MaxRage2 = (UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= (UnitPowerMax(&amp;quot;player&amp;quot;)))

if (ColossusSmash and Targethealth &amp;gt; 20)
or (MaxRage and Targethealth &amp;gt; 20) 
or (MaxRage and not ColossusSmash) 
or (BerserkUnit() and Rage &amp;gt;= 40 and GetShapeshiftForm() == 3) 
then
CastSpellByName(GetSpellInfo(78))
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(e) Bloodthirst</Name><Default>false</Default><SpellID>23881</SpellID><Actions></Actions><Lua>if Nova_AOE == 1 then return false end
if Targethealth &amp;lt; 20
and ColossusSmash
and (Rage &amp;gt;= 30 or DeathSentence) then
return false
end
if ColossusSmash and Rage &amp;gt;= 30 and Targethealth &amp;lt;= 20 then return false end
return true


---old---
---if Targethealth &amp;lt; 20
---and ColossusSmash
---and (Rage &amp;gt;= 30 or (Rage &amp;gt;= 10 and RagingBlow ~= nil)) then
---return false
---end

---return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(f) Wild Strike</Name><Default>false</Default><SpellID>100130</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end
if GetSpellCD(86346) &amp;lt; 1 then return false end
if Bloodsurge
and Targethealth &amp;gt; 20
and BTCD &amp;lt;= 1 then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(g) Bloodthirst Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_AOE == 1 then return false end
if cTime &amp;lt; 10 then return false end
if ColossusSmash and Rage &amp;gt;= 30 and Targethealth &amp;lt;= 20 then return false end

if Targethealth &amp;lt;= 20
and ColossusSmash
and Rage &amp;gt;= 30 then
return false
end




---old---
---if Targethealth &amp;lt; 20
---and ColossusSmash
---and (Rage &amp;gt;= 30 or (Rage &amp;gt;= 10 and RagingBlow ~= nil)) then
---return false
---end

if BTCD &amp;gt; 0
and BTCD &amp;lt;= 1 then 
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(h) Dragon Roar</Name><Default>false</Default><SpellID>118000</SpellID><Actions></Actions><Lua>if Nova_AOETalent == 1 then
return true
end
if not PQI_SoapboxOffensiveSettings_AutoAOETalent_enable then return false end

if NoAoE == true then return false end

-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end

local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)

if not ColossusSmash 
and ((BloodbathTalent == true and Bloodbath)
or BloodbathTalent == false) 
or targetGUID == 60913 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(i) Colossus Smash</Name><Default>false</Default><SpellID>86346</SpellID><Actions>/use 10</Actions><Lua>if Nova_ColossusSmash == 1 then return true end
if not PQI_SoapboxOffensiveSettings_AutoColossusSmash_enable then return false end

if NoCS() then return false end
if Nova_AOE == 1 
and RB
and RagingBlowcount &amp;gt;= 1 
and MeatCleaver 
and MeatCleavertimer - GetTime() &amp;lt; 2 
and Rage &amp;gt;= 30 
then return false end

if Targethealth &amp;lt; 75 then
	if T2D(&amp;quot;target&amp;quot;) &amp;lt; 6 then
	return false
	end
end
				
if EEoG() then
if IsPlayerSpell(107570) then
	if Targethealth &amp;gt; 20 then
		if Nova_ThreeCleave ~= 1 and Nova_AOE ~= 1 and Nova_Cleave ~= 1 and GetSpellCD(107570) &amp;gt; 2 then
		return false
		end
	elseif Nova_ThreeCleave ~= 1 and Nova_AOE ~= 1 and Nova_Cleave ~= 1 and GetSpellCD(107570) &amp;gt; 3 then
	return false
	end
end
end
UseInventoryItem(10)
return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(j) Storm Bolt</Name><Default>false</Default><SpellID>107570</SpellID><Actions>/use 10</Actions><Lua>if Nova_AOE == 1 then return false end

if EEoG() then return false end


return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(a) Bloodthirst</Name><Default>false</Default><SpellID>23881</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, 12880) then return false end

if Nova_AOE == 1 
and RB
and RagingBlowcount &amp;gt;= 1 
and MeatCleaver 
and MeatCleavertimer - GetTime() &amp;lt; 2 
and Rage &amp;gt;= 30 
then return false end

return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(A) Skull Banner</Name><Default>false</Default><SpellID>114207</SpellID><Actions></Actions><Lua>if Nova_Skull == 1 then return true end
if PQI_SoapboxOffensiveSettings_BossCooldowns_enable and not SpecialUnit() then return false end


if not PQI_SoapboxOffensiveSettings_AutoSkullBanner_enable then return false end

if Nova_Cooldowns ~= 1 then return false end

-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end

if ((((ColossusSmash and ColossusSmashtimer - GetTime() &amp;gt;= 5)) and T2D(&amp;quot;target&amp;quot;) &amp;gt; 192 and EEoG())
or Recklessness) 
or (Targethealth &amp;lt;= 20 and T2D(&amp;quot;target&amp;quot;) &amp;lt;= 10) 
or Nova_Skull == 1 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(p) Shockwave</Name><Default>false</Default><SpellID>46968</SpellID><Actions></Actions><Lua>if Nova_AOETalent == 1 then
return true
end
if not PQI_SoapboxOffensiveSettings_AutoAOETalent_enable then return false end
-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end
if PQR_UnitFacing(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(q) Heroic Throw</Name><Default>false</Default><SpellID>57755</SpellID><Actions></Actions><Lua>if not ColossusSmash and Rage &amp;lt; 60 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(r) Shattering Throw</Name><Default>false</Default><SpellID>64382</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end

if PQR_IsMoving(0.3) then return false end

if not ColossusSmash and CSCD &amp;gt; 5 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(s) Wild Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end
if UnitBuffID(&amp;quot;player&amp;quot;, 131116) then return false end

if ColossusSmash and Targethealth &amp;gt; 20 then
	if UnitBuffID(&amp;quot;player&amp;quot;, 115317) then
	CastSpellByName(GetSpellInfo(1680))
	--return true
	else
	CastSpellByName(GetSpellInfo(100130))
	--return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(t) Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ColossusSmash then return false end

if Rage &amp;lt; 70 then
	if not BattleBuff() then
	CastSpellByName(GetSpellInfo(6673))
	elseif BattleBuff() then
		if CommandingCD &amp;lt; 1 then
		CastSpellByName(GetSpellInfo(469))
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(u) Wild Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end

if ColossusSmash then return false end
if CSCD &amp;gt;= 2
and Rage &amp;gt;= 50
and Targethealth &amp;gt; 20 then
	if UnitBuffID(&amp;quot;player&amp;quot;, 115317) then
	CastSpellByName(GetSpellInfo(1680))
--	return true
	else
	CastSpellByName(GetSpellInfo(100130))
--	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(v) Impending Victory</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CSCD &amp;lt; 2 or ColossusSmash then return false end

if Targethealth &amp;gt; 20 then
	if IVCD &amp;lt; 1 then
	CastSpellByName(GetSpellInfo(103840))
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Macro Table---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-------------------------------------------------------------------
--------------------------Macros Table-----------------------------
-------------------------------------------------------------------

  PQR_InterruptDelay =  0

	--------------------
	-- Register CVars --
	--------------------
	Nova_ValueCheck = {
		{	Var1 = nil,	Text = &amp;quot;Toggles&amp;quot;,				Var2 = nil		},
		{	Var1 = 0,	Text = &amp;quot;Cooldowns&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Cleave&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;ThreeCleave&amp;quot;,			Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;SlamCleave&amp;quot;,			Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;AOE&amp;quot;,					Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Thunderclap&amp;quot;,			Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;AOETalent&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Leap&amp;quot;,					Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Hamstring&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Intervene&amp;quot;,				Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Intimidating&amp;quot;,			Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Skull&amp;quot;,					Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Demo&amp;quot;,					Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;Shattering&amp;quot;,			Var2 = 1		},
		{	Var1 = 0,	Text = &amp;quot;ColossusSmash&amp;quot;,			Var2 = 1		}

	}		

	-----------------------------------------------
	-- Registering the CVars for the CustomFrame --
	-----------------------------------------------
	for i=1, #Nova_ValueCheck do
		if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text) == nil then 
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;), Nova_ValueCheck[i].Var1) 
		end
		if GetCVar(&amp;quot;Nova_&amp;quot;..Nova_ValueCheck[i].Text..&amp;apos;_Enabled&amp;apos;) == nil then 
			RegisterCVar(&amp;quot;Nova_&amp;quot;..string.gsub(Nova_ValueCheck[i].Text, &amp;quot;%s&amp;quot;, &amp;quot;_&amp;quot;)..&amp;apos;_Enabled&amp;apos;, Nova_ValueCheck[i].Var2) 
		end
	end


-- Latency Adjuster
local minValue = 0.05
local maxValue = 0.3
local curPing = tonumber((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000) + .025

if curPing &amp;lt; minValue then
	curPing = minValue
elseif curPing &amp;gt; maxValue then
	curPing = maxValue
end

PQR_SpellAvailableTime = curPing

----------------------------
-- To Integer from String --
----------------------------
for i=1, #Nova_ValueCheck do
	if Nova_ValueCheck[i].Var1 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)] = tonumber(GetCVar(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)))
	end
	if Nova_ValueCheck[i].Var2 ~= nil then
		_G[&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;Check&amp;apos;] = GetCVarBool(&amp;apos;Nova_&amp;apos;..string.gsub(Nova_ValueCheck[i].Text, &amp;apos;%s&amp;apos;, &amp;apos;_&amp;apos;)..&amp;apos;_Enabled&amp;apos;)
	end
end

--------------------
-- Slash Commands --
--------------------
if SlashMacros == nil then
	SlashMacros = true
	
	SLASH_COOLDOWNS1 = &amp;quot;/cooldowns&amp;quot;
	SLASH_COOLDOWNS2 = &amp;quot;/cooldown&amp;quot;
	function SlashCmdList.COOLDOWNS(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Cooldowns&amp;quot;) then
			xrn:message(&amp;quot;|cff9933ffCooldowns - Active.&amp;quot;)
			SetCVar(&amp;quot;Nova_Cooldowns&amp;quot;, 1)
		else			
			xrn:message(&amp;quot;|cff9933ffCooldowns - Inactive.&amp;quot;)
			SetCVar(&amp;quot;Nova_Cooldowns&amp;quot;, 0)
		end
	end
	SLASH_CLEAVE1 = &amp;quot;/cleave&amp;quot;
	function SlashCmdList.CLEAVE(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Cleave&amp;quot;) then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Cleave&amp;quot;,nil,&amp;quot;0fffff&amp;quot;)
			xrn:message(&amp;quot;\124cFFFFFFFFCleave Rotation&amp;quot;)
			SetCVar(&amp;quot;Nova_Cleave&amp;quot;, 1)
			SetCVar(&amp;quot;Nova_SlamCleave&amp;quot;, 0)
			SetCVar(&amp;quot;Nova_AOE&amp;quot;, 0)
			SetCVar(&amp;quot;Nova_ThreeCleave&amp;quot;, 0)
		else
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;)
		xrn:message(&amp;quot;\124cFFD4D4D4Single target Rotation&amp;quot;)
		SetCVar(&amp;quot;Nova_Cleave&amp;quot;, 0)
		SetCVar(&amp;quot;Nova_Thunderclap&amp;quot;, 0)
		end
	end	
	SLASH_THREECLEAVE1 = &amp;quot;/threecleave&amp;quot;
	function SlashCmdList.THREECLEAVE(msg, editbox)
	if GetSpecialization(&amp;quot;player&amp;quot;) ~= 2 then return false end
		if not GetCVarBool(&amp;quot;Nova_ThreeCleave&amp;quot;) then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;3 Target Cleave&amp;quot;,nil,&amp;quot;0fffff&amp;quot;)
			xrn:message(&amp;quot;\124cFFFFFFFF3 Target Cleave Rotation&amp;quot;)
			SetCVar(&amp;quot;Nova_ThreeCleave&amp;quot;, 1)
			SetCVar(&amp;quot;Nova_AOE&amp;quot;, 0)
			SetCVar(&amp;quot;Nova_Cleave&amp;quot;, 0)
		else
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;)
		xrn:message(&amp;quot;\124cFFD4D4D4Single Target Rotation&amp;quot;)
		SetCVar(&amp;quot;Nova_ThreeCleave&amp;quot;, 0)
		end
	end	
	SLASH_SLAMCLEAVE1 = &amp;quot;/slamcleave&amp;quot;
	function SlashCmdList.SLAMCLEAVE(msg, editbox)
	if GetSpecialization(&amp;quot;player&amp;quot;) ~= 1 then return false end
		if not GetCVarBool(&amp;quot;Nova_SlamCleave&amp;quot;) then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Slam-Cleave&amp;quot;,nil,&amp;quot;0fffff&amp;quot;)
			xrn:message(&amp;quot;\124cFFFFFFFFSlam-Cleave Rotation&amp;quot;)
			SetCVar(&amp;quot;Nova_SlamCleave&amp;quot;, 1)
			SetCVar(&amp;quot;Nova_AOE&amp;quot;, 0)
			SetCVar(&amp;quot;Nova_Cleave&amp;quot;, 0)
		else
		PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;)
		xrn:message(&amp;quot;\124cFFD4D4D4Single target Rotation&amp;quot;)
		SetCVar(&amp;quot;Nova_SlamCleave&amp;quot;, 0)
		SetCVar(&amp;quot;Nova_Thunderclap&amp;quot;, 0)
		end
	end	
	SLASH_THUNDERCLAP1 = &amp;quot;/thunderclap&amp;quot;
	function SlashCmdList.THUNDERCLAP(msg, editbox)
	if GetSpecialization(&amp;quot;player&amp;quot;) ~= 1 then return false end
		if not GetCVarBool(&amp;quot;Nova_Thunderclap&amp;quot;) then
			xrn:message(&amp;quot;\124cFFFFFFFFThunder Clap - Enabled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Thunderclap&amp;quot;, 1)
		else
		xrn:message(&amp;quot;\124cFFD4D4D4Thunder Clap - Disabled.&amp;quot;)
		SetCVar(&amp;quot;Nova_Thunderclap&amp;quot;, 0)
		end
	end	
	SLASH_AOE1 = &amp;quot;/aoe&amp;quot;
	function SlashCmdList.AOE(msg, editbox)
	if GetSpecialization(&amp;quot;player&amp;quot;) == 1 then return false end
		if not GetCVarBool(&amp;quot;Nova_AOE&amp;quot;) then
			PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;AOE&amp;quot;,nil,&amp;quot;0698FF&amp;quot;)
			xrn:message(&amp;quot;\124cFF3BB0FFArea of Effect Rotation&amp;quot;)
			SetCVar(&amp;quot;Nova_AOE&amp;quot;, 1)
			SetCVar(&amp;quot;Nova_Cleave&amp;quot;, 0)
			SetCVar(&amp;quot;Nova_SlamCleave&amp;quot;, 0)
			SetCVar(&amp;quot;Nova_ThreeCleave&amp;quot;, 0)
		else
			PQR_Event(&amp;quot;PQR_Text&amp;quot;,&amp;quot;Single Target&amp;quot;,nil,&amp;quot;FFFFFF&amp;quot;)
			xrn:message(&amp;quot;\124cFFD4D4D4Single target Rotation&amp;quot;) 
			SetCVar(&amp;quot;Nova_AOE&amp;quot;, 0)
		end
	end
	SLASH_AOETALENT1 = &amp;quot;/aoetalent&amp;quot;
	function SlashCmdList.AOETALENT(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_AOETalent&amp;quot;) then
			xrn:message(&amp;quot;\124cFF0000FFLevel 60 AOE - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_AOETalent&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFF0000FFLevel 60 AOE - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_AOETalent&amp;quot;, 0)
		end
	end
	SLASH_LEAP1 = &amp;quot;/leap&amp;quot;
	function SlashCmdList.LEAP(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Leap&amp;quot;) then
			xrn:message(&amp;quot;\124cFFCC9900Heroic Leap - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Leap&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC9900Heroic Leap - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Leap&amp;quot;, 0)			
		end
	end	
	SLASH_HAMSTRING1 = &amp;quot;/hamstring&amp;quot;
	function SlashCmdList.HAMSTRING(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Hamstring&amp;quot;) then
			xrn:message(&amp;quot;\124cFFFFFFFFHamstring Maintenance - Enabled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Hamstring&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFHamstring Maintenance - Disabled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Hamstring&amp;quot;, 0)
		end
	end
	SLASH_INTERVENE1 = &amp;quot;/intervene&amp;quot;
	function SlashCmdList.INTERVENE(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Intervene&amp;quot;) then
			xrn:message(&amp;quot;\124cFFFFFFFFIntervene - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Intervene&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFIntervene - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Intervene&amp;quot;, 0)
		end
	end
	SLASH_INTIMIDATING1 = &amp;quot;/intimidating&amp;quot;
	function SlashCmdList.INTIMIDATING(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Intimidating&amp;quot;) then
			xrn:message(&amp;quot;\124cFFFFFFFFIntimidating Shout - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Intimidating&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFIntimidating Shout - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Intimidating&amp;quot;, 0)
		end
	end
	SLASH_SKULL1 = &amp;quot;/skull&amp;quot;
	function SlashCmdList.SKULL(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Skull&amp;quot;) then
			xrn:message(&amp;quot;\124cFFFFFFFFSkull Banner - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Skull&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFSkull Banner - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Skull&amp;quot;, 0)
		end
	end
	SLASH_DEMO1 = &amp;quot;/demo&amp;quot;
	function SlashCmdList.DEMO(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Demo&amp;quot;) then
			xrn:message(&amp;quot;\124cFFFFFFFFDemo Banner - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Demo&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFDemo Banner - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Demo&amp;quot;, 0)
		end
	end
		SLASH_SHATTERING1 = &amp;quot;/shattering&amp;quot;
	function SlashCmdList.SHATTERING(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_Shattering&amp;quot;) then
			xrn:message(&amp;quot;\124cFFFFFFFFShattering Throw - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_Shattering&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFShattering Throw - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_Shattering&amp;quot;, 0)
		end
	end
	SLASH_COLOSSUS1 = &amp;quot;/colossus&amp;quot;
	function SlashCmdList.COLOSSUS(msg, editbox)
		if not GetCVarBool(&amp;quot;Nova_ColossusSmash&amp;quot;) then
			xrn:message(&amp;quot;\124cFFFFFFFFColossus Smash - Queued.&amp;quot;)
			SetCVar(&amp;quot;Nova_ColossusSmash&amp;quot;, 1)
		else
			xrn:message(&amp;quot;\124cFFCC99FFColossus Smash - Canceled.&amp;quot;)
			SetCVar(&amp;quot;Nova_ColossusSmash&amp;quot;, 0)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Success---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if CombatLog == nil then
    BuBa_CombatLog = CreateFrame(&amp;apos;Frame&amp;apos;)
    BuBa_CombatLog:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)

 function OnSuccessfulCast(self, event, ...)
  local type, _, sourceGUID, sourceNAME, _, _, destGUID, destNAME = select(2, ...)
  if (event==&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;) then
  			if (type==&amp;quot;SPELL_CAST_SUCCESS&amp;quot;) then
  				if sourceGUID == UnitGUID(&amp;quot;player&amp;quot;) then
  					if select(12, ...) == 23881 then
					BerserkerRage = false
					elseif select(12, ...) ~= 23881 then
					BerserkerRage = true
					end
				end
			end
            if (type==&amp;quot;SPELL_CAST_SUCCESS&amp;quot;) 
             or (type==&amp;quot;SPELL_CAST_START&amp;quot;) then
                if sourceGUID == UnitGUID(&amp;quot;player&amp;quot;) then
		if select(12, ...) == 52174 then
		SetCVar(&amp;quot;Nova_Leap&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Heroic Leap: \124cFFE61515Casted&amp;quot;) 
		elseif select(12, ...) == 64382 then
		SetCVar(&amp;quot;Nova_Shattering&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Shattering Throw: \124cFFE61515Casted&amp;quot;) 
		elseif select(12, ...) == 86346	and Nova_ColossusSmash == 1 then
		SetCVar(&amp;quot;Nova_ColossusSmash&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Colossus Smash: \124cFFE61515Casted&amp;quot;) 
		elseif (select(12, ...) == 118000 or select(12, ...) == 46968 or select(12, ...) == 46924)  and Nova_AOETalent == 1 then
		SetCVar(&amp;quot;Nova_AOETalent&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;AOE Talent: \124cFFE61515Casted&amp;quot;)
		elseif select(12, ...) == 114203 and Nova_Demo == 1 then
		SetCVar(&amp;quot;Nova_Demo&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Demo Banner: \124cFFE61515Casted&amp;quot;)
		elseif select(12, ...) == 5246 and Nova_Intimidating == 1 then
		SetCVar(&amp;quot;Nova_Intimidating&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Intimidating Shout: \124cFFE61515Casted&amp;quot;)
		elseif select(12, ...) == 114207 and Nova_Skull == 1 then
		SetCVar(&amp;quot;Nova_Skull&amp;quot;, 0)
		PQR_WriteToChat(&amp;quot;Skull Banner: \124cFFE61515Casted&amp;quot;)
      end
     end
    end
   end
  end

 BuBa_CombatLog:SetScript(&amp;apos;OnEvent&amp;apos;, OnSuccessfulCast)

    CombatLog = true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Combat Pause---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;) == nil
or UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) == nil
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Auto-Target---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxOffensiveSettings_AutoTargetNextEnemy_enable then return false end
if (UnitExists(&amp;quot;Target&amp;quot;) == nil 
or (UnitExists(&amp;quot;Target&amp;quot;) and UnitIsDead(&amp;quot;Target&amp;quot;)))
and UnitAffectingCombat(&amp;quot;Player&amp;quot;)
then TargetNearestEnemy() end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Fury- (X) Bloodbath</Name><Default>false</Default><SpellID>12292</SpellID><Actions></Actions><Lua>-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end
if Nova_AOE == 1 and IsPlayerSpell(46924) and not PQR_SpellAvailable(46924) then return false end
if Nova_AOE == 1 and IsPlayerSpell(46924) and PQR_SpellAvailable(46924) then
return true
end


if CSCD &amp;lt; 2 
or (ColossusSmash and ColossusSmashtimer - GetTime() &amp;gt;= 5)
or T2D(&amp;quot;target&amp;quot;) &amp;lt;= 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (F) Bloodbath</Name><Default>false</Default><SpellID>12292</SpellID><Actions></Actions><Lua>-- Make sure we are in range to use abilities

if Nova_AOETalent == 1 then
		if IsPlayerSpell(46924) then
			if GetSpellCD(46924) &amp;lt; 4 then
			return true
			end
	end
end

if not PQI_SoapboxOffensiveSettings_AutoAOETalent_enable and IsPlayerSpell(46924) then
return false end
if PQI_SoapboxOffensiveSettings_AutoAOETalent_enable and IsPlayerSpell(46924) then
	if GetSpellCD(46924) &amp;gt; 2 then 
	return false 
	end
end

if Nova_Cooldowns ~= 1 then return false end
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end
if (Nova_Cleave == 1 or Nova_SlamCleave == 1) and IsPlayerSpell(46924) and not PQR_SpellAvailable(46924) then return false end
if (Nova_Cleave == 1 or Nova_SlamCleave == 1) and PQR_SpellAvailable(46924) then
return true
end


if CSCD &amp;lt; 4 
or ColossusSmash
or T2D(&amp;quot;target&amp;quot;) &amp;lt;= 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (G) Berserker Rage</Name><Default>false</Default><SpellID>18499</SpellID><Actions></Actions><Lua>local Enrage = Enrage

-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end
if not ColossusSmash then return false end
if not Enrage or (Enrage and Enragetimer - GetTime() &amp;lt;0.5) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (W) Heroic Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_Cleave == 1 or Nova_AOE == 1 then return false end
local MaxRage = (UnitPower(&amp;quot;player&amp;quot;) &amp;gt;= (UnitPowerMax(&amp;quot;player&amp;quot;) - 5))
if itemCheck(T16) &amp;gt; 1 and not ColossusSmash then
return false end
if (ColossusSmash and Rage &amp;gt; 60 and itemCheck(T16) &amp;gt; 1) 
or MaxRage 
or (BerserkUnit() and Rage &amp;gt;= 40 and GetShapeshiftForm() == 3) then
CastSpellByName(GetSpellInfo(78))
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (X) Mortal Strike</Name><Default>false</Default><SpellID>12294</SpellID><Actions></Actions><Lua>if not DeepWounds 
or (DeepWounds and DeepWoundstimer - GetTime() &amp;lt; 1)
or not Enrage
or Rage &amp;lt; 10 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (Z) Mortal Strike</Name><Default>false</Default><SpellID>12294</SpellID><Actions></Actions><Lua>return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (Y) Colossus Smash</Name><Default>false</Default><SpellID>86346</SpellID><Actions>/use 10</Actions><Lua>if IsPlayerSpell(107570) then
	if Targethealth &amp;gt; 20 then
		if Nova_AOE ~= 1 and Nova_Cleave ~= 1 and GetSpellCD(107570) &amp;gt; 2 then
		return false
		end
	elseif Nova_AOE ~= 1 and Nova_Cleave ~= 1 and GetSpellCD(107570) &amp;gt; 3 then
	return false
	end
end

if not ColossusSmash or (ColossusSmash and ColossusSmashtimer - GetTime() &amp;lt; 1) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (a) Storm Bolt</Name><Default>false</Default><SpellID>107570</SpellID><Actions>/use 10</Actions><Lua>if ColossusSmash then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (b) Dragon Roar</Name><Default>false</Default><SpellID>118000</SpellID><Actions></Actions><Lua>--if Nova_AOETalent == 1 then
--return true
--end
if not PQI_SoapboxOffensiveSettings_AutoAOETalent_enable then return false end

if NoAoE == true then return false end

-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end

--local targetGUID = tonumber((UnitGUID(&amp;quot;target&amp;quot;)):sub(-12, -9), 16)

if not ColossusSmash then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (c) Execute</Name><Default>false</Default><SpellID>5308</SpellID><Actions></Actions><Lua>if itemCheck(T16) &amp;gt; 1 then
		if not SuddenDeath or (SuddenDeath and SuddenDeathtimer - GetTime() &amp;lt; 3 and GetSpellCD(86346) &amp;lt; 2 and not ColossusSmash) then
			if (Rage &amp;lt; 40 and ColossusSmash) 
			or (GetSpellCD(86346) &amp;lt; 2 and not ColossusSmash) then
			return true
			end
		end
	end


if Nova_SlamCleave == 1 then return false end


if Nova_Cleave ~= 1 then
if itemCheck(T16) &amp;gt; 1 and TfB and ColossusSmash then
return false end end
if not TfB
--or DeathSentence
or Rage &amp;gt; 90 
or T2D(&amp;quot;target&amp;quot;) &amp;lt; 12
--or Recklessness 
then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (d) Slam</Name><Default>false</Default><SpellID>1464</SpellID><Actions></Actions><Lua>if not ColossusSmash and Rage &amp;lt; 80 then return false end

if Nova_Cleave ~= 1 then
	if not ColossusSmash and Rage &amp;gt;= 100 and itemCheck(T16) &amp;gt; 1 then 
	return true 
	end


	if Nova_Cleave ~= 1 and Nova_SlamCleave ~= 1 then
		if itemCheck(T16) &amp;gt; 1 and TfB then
		return false 
		end
	end
end

if Targethealth &amp;gt; 20 and (CritRating &amp;gt; 25000 or Recklessness) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (e) Overpower</Name><Default>false</Default><SpellID>7384</SpellID><Actions></Actions><Lua>if Nova_SlamCleave == 1 then return false end

if Nova_Cleave ~= 1 then
if not ColossusSmash and (not TfB or (TfB and TfBstacks &amp;lt; 4)) then 
return false end
end
if (Targethealth &amp;gt; 20 and Rage &amp;lt; 100) or itemCheck(T16) &amp;gt; 1 or SuddenDeath then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (f) Slam</Name><Default>false</Default><SpellID>1464</SpellID><Actions></Actions><Lua>if not ColossusSmash and Rage &amp;lt; 100 then return false end

if Nova_Cleave ~= 1 then
if not ColossusSmash and Rage &amp;gt;= 100 and itemCheck(T16) &amp;gt; 1 then 
return true end

end

if Targethealth &amp;gt; 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (g) Shout</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if ColossusSmash then return false end
if not BattleBuff() then
	CastSpellByName(GetSpellInfo(6673))
	elseif BattleBuff() then
		if CommandingCD &amp;lt; 1 then
		CastSpellByName(GetSpellInfo(469))
		end
	end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- (h) Heroic Throw</Name><Default>false</Default><SpellID>57755</SpellID><Actions></Actions><Lua>return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- Sweeping Strikes</Name><Default>false</Default><SpellID>12328</SpellID><Actions></Actions><Lua>if Nova_Cleave ~= 1 and Nova_AOE ~= 1 and Nova_SlamCleave ~= 1 then return false end

if not SweepingStrikes or (SweepingStikes and SweepingStikestimer - GetTime() &amp;lt; 3) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- Slam-Cleave</Name><Default>false</Default><SpellID>1464</SpellID><Actions></Actions><Lua>if Rage &amp;lt; 25 then return false end

if Nova_SlamCleave ~= 1 then return false end

if SweepingStrikes then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- Thunderclap</Name><Default>false</Default><SpellID>6343</SpellID><Actions></Actions><Lua>if Nova_Thunderclap ~= 1 then return false end

return true</Lua><RecastDelay>13000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- Slam-Cleave(CS)</Name><Default>false</Default><SpellID>1464</SpellID><Actions></Actions><Lua>if Rage &amp;lt; 25 then return false end

if Nova_SlamCleave ~= 1 then return false end

if SweepingStrikes and ColossusSmash then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-Arms- Cleave Bladestorm</Name><Default>false</Default><SpellID>46924</SpellID><Actions></Actions><Lua>if Nova_Cleave ~= 1 and Nova_SlamCleave ~= 1 then return false end
if Nova_AOETalent == 1 then
return true
end
if not PQI_SoapboxOffensiveSettings_AutoAOETalent_enable then return false end
local BloodbathTalent, Bloodbath = BloodbathTalent, Bloodbath

if (BloodbathTalent == true and Bloodbath) 
or BloodbathTalent == false then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shattering Throw MACRO</Name><Default>false</Default><SpellID>64382</SpellID><Actions></Actions><Lua>if PQR_IsMoving(0.3) then return false end

if Nova_Shattering == 1 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Rotation Check---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if GetSpecialization() == 1 then
	Spec = &amp;quot;Arms&amp;quot;
	PQR_SwapRotation(&amp;quot;Arms (Soapbox Warrior Serial FA2013)&amp;quot;) 
elseif GetSpecialization() == 2 then
	Spec = &amp;quot;Fury&amp;quot;
	PQR_SwapRotation(&amp;quot;Fury (Soapbox Warrior Serial FA2013)&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Boss Function: Warrior---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQI_SoapboxOffensiveSettings_BossFunctions_enable then return false end


BossTime = false
--Implement PQR_resumeAttack.. this is used to prevent
--abilities lower in the rotation from being cast.
if PQR_resumeAttack == nil then
	PQR_resumeAttack = 0
elseif PQR_resumeAttack &amp;gt; GetTime() then
	return true
else
	PQR_resumeAttack = 0
end

if UnitExists(&amp;quot;target&amp;quot;) then
	if UnitBuffID(&amp;quot;target&amp;quot;, 148452) and PQR_UnitFacing(&amp;quot;target&amp;quot;, &amp;quot;player&amp;quot;) then
	return true
	end
end
--IMPORTANT: Change this if you have any cleaves that would do damage to a secondary target
--as part of your single target rotation. Better to be safe than sorry! 
--Used for : Spirit Kings
local cleaveClass = false
local isAOE = strmatch(strupper(PQR_RotationName), &amp;quot;AOE&amp;quot;) --checks if we are in AOE mode.

for i=1,4 do
	local bossCheck = &amp;quot;boss&amp;quot;..i

	if UnitExists(bossCheck) then
		
		local npcID = tonumber(UnitGUID(bossCheck):sub(6,10), 16)
	local	 bossCasting,_,_,_,_,castEnd = UnitCastingInfo(bossCheck)
		local playerCasting,_,_,_,_,PlayercastEnd = UnitCastingInfo(&amp;quot;player&amp;quot;)
		
		if npcID == 62511 or npcID == 62711 then --Amber-Shaper Un&amp;apos;sok or Amber Monstrosity
			local reshapeName = GetSpellInfo(122370)
			local reshapeLife = UnitDebuff(&amp;quot;player&amp;quot;, reshapeName)
			
			if reshapeLife ~= nil then
				local playerCasting = UnitCastingInfo(&amp;quot;vehicle&amp;quot;)
				local playerCasting2 = UnitCastingInfo(&amp;quot;player&amp;quot;)
				--grab spell names for abilities:
				local amberExplosion = GetSpellInfo(122402)
				
				--interrupt self if casting amber explosion
				if playerCasting == amberExplosion then
					--Press the 2nd button (Struggle for Control)
					RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
					return true
				end
				
				--interrupt self if casting amber explosion
				if playerCasting2 == amberExplosion then
					--Press the 2nd button (Struggle for Control)
					RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
					return true
				end
				
				--interrupt the target if casting amber explosion
				if bossCasting and bossCasting == amberExplosion then
					TargetUnit(bossCheck)
					--Press the 1st button (Amber Strike)
					RunMacroText(&amp;quot;/click OverrideActionBarButton1&amp;quot;)
					return true
				end
				
				if UnitExists(&amp;quot;boss2&amp;quot;) then
					if bossCheck == &amp;quot;boss2&amp;quot; then 
						return true --prevent the rotation from executing while reshaped
					end
				else
					return true
				end

			end
			
		elseif npcID == 60709 then --Spirit Kings: Qiang. (Impervious Shield)
			--Stop all attacks until 0.2 seconds after cast time ends and until buff (Impervious Shield) is gone.
			
			--only continue checking if we are targetting the boss or have no target.
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
				local impName = GetSpellInfo(117961)
				local impShieldBuff = UnitBuffID(bossCheck, 117961)
				
				if (bossCasting and bossCasting == impName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.2
					return true
				end
				
				if impShieldBuff then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end
			
		elseif npcID == 60710 then --Spirit Kings: Subetai. (Sleight of Hand)
			--Stop all attacks when casting Sleight of Hand, and until 0.2 seconds after cast time ends.
			--Also stop attacks if not stunned.
			
			--only continue checking if we are targetting the boss or have no target.
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
				local sleightName = GetSpellInfo(118162)
				local sleightBuff = UnitBuffID(bossCheck, 118162)
				--				  HoJ,   FoJ,  Kidney  
				local stunList = { 853, 105593, 408 }
				local isStunned = nil
				for _,v in ipairs(stunList) do
					local debuffCheck = UnitDebuffID(bossCheck, v)
					if debuffCheck then
						isStunned = true
					end
				end
				
				if (bossCasting and bossCasting == sleightName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.2
					return true
				end
				
				if sleightBuff and not isStunned then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end

		elseif npcID == 60701 then --Spirit Kings: Zian. (Shield of Darkness)
			--Stop all attacks until 0.5 seconds after cast time ends and until buff (Shield of Darkness) is gone.
						
			if (not UnitExists(&amp;quot;target&amp;quot;)) or (UnitIsUnit(&amp;quot;target&amp;quot;, bossCheck)) or (cleaveClass or isAOE) then
				local sodName = GetSpellInfo(117697)
				local sodBuff = UnitBuffID(bossCheck, 117697)
				
				if (bossCasting and bossCasting == sodName) then
					StopAttack()
					SpellStopCasting()
					local delayAdd = (castEnd/1000) - GetTime() --the number of seconds remaining on the cast.
					PQR_resumeAttack = GetTime() + delayAdd + 0.5 --0.5 to account for lag... REALLY do not want to set this off.
					return true
				end
				
				if sodBuff then
					StopAttack()
					SpellStopCasting()
					return true
				end
			end
		elseif npcID == 71161 or npcID == 71157 or npcID == 71156 or npcID == 71155 or npcID == 71160 or npcID == 71154 or npcID == 71152 or npcID == 71158 or npcID == 71153 then ---Klaxxi
			if UnitBuffID(&amp;quot;player&amp;quot;,141857) and not UnitBuffID(&amp;quot;player&amp;quot;,143373) then
			BossTime = true
				if PQR_SpellAvailable(143373) then
					if IsPlayerSpell(107574) then
						if Avatar or GetSpellCD(107574) &amp;gt; 29 then
						RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
						elseif GetSpellCD(107574) &amp;lt; 1 then
						CastSpellByName(GetSpellInfo(107574))
						return true
						end
					else 
					RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
					end
				end
			end
			if UnitBuffID(&amp;quot;player&amp;quot;,143373) then
				if UnitDebuffID(&amp;quot;target&amp;quot;,144276) and PQR_SpellAvailable(144275) then
				RunMacroText(&amp;quot;/click OverrideActionBarButton2&amp;quot;)
				return true
				elseif not UnitDebuffID(&amp;quot;target&amp;quot;,144276) and PQR_SpellAvailable(144276) then
				RunMacroText(&amp;quot;/click OverrideActionBarButton3&amp;quot;)
				return true
				elseif PQR_SpellAvailable(144274) then
				RunMacroText(&amp;quot;/click OverrideActionBarButton1&amp;quot;)
				return true
				elseif PQR_SpellAvailable(144181) then
				RunMacroText(&amp;quot;/click OverrideActionBarButton4&amp;quot;)
				return true
				end
			end
		end
	end
end

--click button to leave.
--Gara&amp;apos;jal isn&amp;apos;t a boss while in the Spirit Realm.
local returnSoul = select(7,UnitDebuffID(&amp;quot;player&amp;quot;,116161))
if returnSoul and returnSoul - GetTime() &amp;lt; 2 then 
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;) 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(K) Wild Strike</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if Nova_ThreeCleave == 1 or Nova_Cleave == 1 or Nova_AOE == 1 then return false end

if ColossusSmash then return false end
if CSCD &amp;gt;= 2
and Rage &amp;gt;= 110
and Targethealth &amp;gt; 20 then
	if UnitBuffID(&amp;quot;player&amp;quot;, 115317) then
	CastSpellByName(GetSpellInfo(1680))
--	return true
	else
	CastSpellByName(GetSpellInfo(100130))
--	return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>(KPB) Skull Banner</Name><Default>false</Default><SpellID>114207</SpellID><Actions></Actions><Lua>if PQI_SoapboxOffensiveSettings_BossCooldowns_enable and not SpecialUnit() then return false end


if not PQI_SoapboxOffensiveSettings_AutoSkullBanner_enable then return false end

if Nova_Cooldowns ~= 1 then return false end

-- Make sure we are in range to use abilities
if not IsSpellInRange(GetSpellInfo(78), &amp;quot;target&amp;quot;) == 1 then return false end

if cTime &amp;lt; 12 and PQR_SpellAvailable(118000) then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>---Config---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if SOAPBOX_WARRIOR_DEF then return false end
if SOAPBOX_WARRIOR_OFF then return false end

		local Defensive = {
			name	= &amp;quot;Defensive Settings&amp;quot;,
			author	= &amp;quot;Soapbox&amp;quot;,
			abilities = {
				{ 	name	= &amp;quot;Healthstone&amp;quot;,
					enable	= true,
					widget	= {	type = &amp;quot;numBox&amp;quot;,
						value	= 50,
						step	= 5,
					},
				},
				{  name = &amp;quot;Victory Rush&amp;quot;,
			enable = false,
			widget = { type = &amp;apos;numBox&amp;apos;,
				value = 20,
				step = 5,
			},
		},
			},
		}
		local Offensive = {
			name	= &amp;quot;Offensive Settings&amp;quot;,
			author	= &amp;quot;Soapbox&amp;quot;,
			abilities = {
				{ 	name	= &amp;quot;Colossus Smash Test&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;Will only use Colossus Smash on Boss Targets during boss encounters, this is untested please provide feedback&amp;quot;,
					newSection  = true,
				},
				{ 	name	= &amp;quot;Auto Colossus Smash&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;Controls the usage of colossus smash. If this is unchecked, use /colossus to queue colossus smash.&amp;quot;,
					newSection  = true,
				},
				{ 	name	= &amp;quot;Boss Functions&amp;quot;,
					enable	= true,
				--	tooltip = &amp;quot;Will only use cooldowns on boss targets&amp;quot;,
					newSection  = true,
				},
			  	{ 	name	= &amp;quot;Boss Cooldowns&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;Will only use cooldowns on boss targets&amp;quot;,
					newSection  = true,
				},
			  	{ 	name	= &amp;quot;Auto Target Next Enemy&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;Will automatically select the closest target and begin attacking when your target has died&amp;quot;,
					newSection  = true,
				},
			  	{ 	name	= &amp;quot;Auto AOE Talent&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;.&amp;quot;,
					newSection  = true,
				},
				{ 	name	= &amp;quot;Auto Skull Banner&amp;quot;,
					enable	= true,
					tooltip = &amp;quot;.&amp;quot;,
					newSection  = true,
				},
			},
		}
		SOAPBOX_WARRIOR_DEF = PQI:AddRotation(Defensive)
		SOAPBOX_WARRIOR_OFF = PQI:AddRotation(Offensive)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARRIOR>