if not PQR_LoadedDataFile then
	PQR_LoadedDataFile = 1
	print("|cffFFBE69Cpoworks Priest PvP Data File - v1.9 - October 5, 2013|cffffffff")
end
PQR_Spec = GetSpecialization()




if not PQILoaded then
	PQILoaded = true	
	
	if PQR_Spec == 1 then
		-- PQInterface Settings
		local config = {
			name	= "Disc PvP Config Settings",
			author	= "Cpoworks",
			abilities	= {
				{ 	name	= "Accecpt Queues", 
					enable	= true, 
				}, 
				{ 	name	= "SWD Instants", 
					enable	= true, 
				}, 
				{ 	name	= "Use Offencive Dispels", 
					enable	= true, 
				}, 
				{ 	name	= "Use Defencive Dispels", 
					enable	= true, 
				},
				{ 	name	= "Grip Traps", 
					enable	= true, 
				},
				{ 	name	= "Auto Fear Ward", 
					enable	= true, 
				}, 
				{	name	= "Inner Fire/Will Selector", 
					tooltip	= "Select Inner Fire or Inner Will.",
					enable	= true,
					widget	= { type = "select",
						tooltip	="Select a Spell.",
						value 	= 1,
						values 	= {[1]="Inner Fire",[2]="Inner Will"},
						width 	= 130},
				},
				{ 	name	= "Battlemasters",  newSection = true,
					enable	= false,
					tooltip = "Battlemasters trinket must be in the top trinket slot.",
					widget	= { type = "numBox",
						value	= 30,
						step	= 5, 
					},
				},
				{ 	name	= "Healthstone", 
					enable	= true,
					widget	= { type = "numBox",
						value	= 40,
						step	= 5,
						tooltip	= "Set automatic Healthstone usage.",
					},
				},
				{ 	name	= "Desperate Prayer",
					enable	= true,
					widget	= { type = "numBox",
						value	= 30,
						step	= 5, 
					},
				},
				{ 	name	= "Void Shift",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 20,
						step	= 5, 
					},
				}, 
				{ 	name	= "Pain Sup",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 35,
						step	= 5, 
					},
				},
				{ 	name	= "Shadowfiend Mana",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 50,
						step	= 5, 
					},
				},
			},
			hotkeys = {
				{	name	= "Pause Rotation",
					enable	= true,
					hotkeys	= {'la'},
				},
				{	name	= "Life Grip",
					enable	= true,
					hotkeys	= {'rs'},
				},
				{	name	= "Mass Dispel",
					enable	= true,
					hotkeys	= {'ls'},
				},
				{	name	= "Barrier",
					enable	= true,
					hotkeys	= {'lc'},
				},   
				{	name	= "DPS Key", 
					enable	= false,
					hotkeys	= {'ra'},
				},
				{	name	= "Fear Key",
					enable	= false,
					hotkeys	= {'ra'},
				}, 
				{	name	= "Level 15 Talent Key",
					enable	= false,
					hotkeys	= {'ra'},
				}, 
			},
		}
		
		
			-- PQInterface Settings
		local config2 = {
			name	= "Disc PvP Heal Settings",
			author	= "Cpoworks",
			abilities	= {
				{ 	name	= "Power word Shield", newSection = true,
					enable	= true,
					widget	= { type = "numBox",
						value	= 95,
						step	= 5, 
					},
				}, 
				{ 	name	= "Prayer of Mending",
					enable	= true,
					widget	= { type = "numBox",
						value	= 90,
						step	= 5, 
					},
				}, 
				{ 	name	= "Renew",
					enable	= true,
					widget	= { type = "numBox",
						value	= 98,
						step	= 2, 
					},
				}, 
				{ 	name	= "Penance",
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				}, 
				{ 	name	= "Heal",
					enable	= true,
					widget	= { type = "numBox",
						value	= 95,
						step	= 5, 
					},
				}, 
				{ 	name	= "Flash Heal",
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				}, 
				{ 	name	= "Binding Heal",
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				}, 
				{ 	name	= "Greater Heal",
					enable	= false,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				},  
				{ 	name	= "Archangel",
					enable	= true,
					widget	= { type = "numBox",
						value	= 70,
						step	= 5, 
					},
				}, 
			},
		}
		
		CPOWORKS_DISCPVPHEAL = PQI:AddRotation(config2)
		CPOWORKS_DISCPVPCONFIG = PQI:AddRotation(config)
	end
	
	if PQR_Spec == 2 then
		-- PQInterface Settings
		local config3 = {
			name	= "Holy PvP Config Settings",
			author	= "Cpoworks",
			abilities	= {
				{ 	name	= "Accecpt Queues", 
					enable	= HolyPriest_DefaultSettings["AccecptQueues"], 
				}, 
				{ 	name	= "Offencive Dispells", 
					enable	= HolyPriest_DefaultSettings["OffenciveDispells"], 
				}, 
				{ 	name	= "Defencive Dispells", 
					enable	= HolyPriest_DefaultSettings["DefenciveDispells"], 
				},
				{ 	name	= "Grip Smoke Bombs", 
					enable	= HolyPriest_DefaultSettings["GripSmokeBombs"], 
				},
				{ 	name	= "Grip Traps", 
					enable	= HolyPriest_DefaultSettings["GripTraps"], 
				}, 
				{ 	name	= "Auto Void Shift", 
					enable	= HolyPriest_DefaultSettings["AutoVoidShift"], 
				},
				{ 	name	= "Auto Guardian", 
					enable	= HolyPriest_DefaultSettings["AutoGuardian"], 
				},
				{ 	name	= "Use Battle Master", 
					enable	= HolyPriest_DefaultSettings["UseBattleMaster"],
					tooltip	= "Enables the use of BattleMasters trinkets. Must be in top trinket slot.", 
				},
				{	name	= "Inner Fire/Will Selector", 
					tooltip	= "Select Inner Fire or Inner Will.",
					enable	= true,
					widget	= { type = "select",
						tooltip	="Select a Spell.",
						value 	= 1,
						values 	= {[1]="Inner Fire",[2]="Inner Will"},
						width 	= 130},
				},
				{ 	name	= "Battlemasters HP",  newSection = true,
					enable	= true,
					tooltip = "Battlemasters trinket must be in the top trinket slot.",
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["BattlemasterHP"],
						step	= 5, 
					},
				},
				{ 	name	= "Healthstone HP", 
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["HealthstoneHP"],
						step	= 5,
						tooltip	= "Set automatic Healthstone usage.",
					},
				},
				{ 	name	= "Desperate Prayer HP",
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["DesperatePrayerHP"],
						step	= 5, 
					},
				},
				{ 	name	= "Void Shift HP",  
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["VoidShiftHP"],
						step	= 5, 
					},
				}, 
				{ 	name	= "Guardian HP",  
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["GuardianHP"],
						step	= 2, 
					},
				},
				{ 	name	= "Shadowfiend Mana",  
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["ShadowfiendMana"],
						step	= 5, 
					},
				},
			},
			hotkeys = {
				{	name	= "Pause Key",
					enable	= true,
					hotkeys	= {'la'},
				},
				{	name	= "Life Grip Key",
					enable	= true,
					hotkeys	= {'rs'},
				},
				{	name	= "Mass Dispel Key",
					enable	= true,
					hotkeys	= {'ls'},
				},
				{	name	= "Lightwell Key",
					enable	= true,
					hotkeys	= {'lc'},
				},   
				{	name	= "DPS Key", 
					enable	= false,
					hotkeys	= {'ra'},
				},
				{	name	= "Fear Key",
					enable	= false,
					hotkeys	= {'ra'},
				}, 
				{	name	= "Level 15 Talent Key",
					enable	= false,
					hotkeys	= {'ra'},
				}, 
			},
		}
		
		
			-- PQInterface Settings
		local config4 = {
			name	= "Holy PvP Heal Settings",
			author	= "Cpoworks",
			abilities	= {
				{ 	name	= "Power Word Shield HP", newSection = true,
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["PowerWordShieldHP"],
						step	= 5, 
					},
				}, 
				{ 	name	= "Prayer of Mending HP",
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["PrayerofMendingHP"],
						step	= 5, 
					},
				}, 
				{ 	name	= "Renew HP",
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["RenewHP"],
						step	= 5, 
					},
				}, 
				{ 	name	= "Holy Word Serenity HP",
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["HolyWordSerenityHP"],
						step	= 5, 
					},
				},
				{ 	name	= "Circle of Healing HP",
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["CircleofHealingHP"],
						step	= 2, 
					},
				},
				{ 	name	= "Flash Heal HP",
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["FlashHealHP"],
						step	= 2, 
					},
				}, 
				{ 	name	= "Binding Heal HP",
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["BindingHealHP"],
						step	= 2, 
					},
				}, 
				{ 	name	= "Greater Heal HP",
					enable	= true,
					widget	= { type = "numBox",
						value	= HolyPriest_DefaultSettings["GreaterHealHP"],
						step	= 2, 
					},
				},   
			},
		}
		
		CPOWORKS_HOLYPVPHEAL = PQI:AddRotation(config4)
		CPOWORKS_HOLYPVPCONFIG = PQI:AddRotation(config3)
	end
	
	
	if PQR_Spec == 3 then
		-- PQInterface Settings
		local config3 = {
			name	= "Shadow PvP",
			author	= "Cpoworks",
			abilities	= {
				{ 	name	= "Auto Fear Ward", 
					enable	= true, 
				}, 
				{ 	name	= "Auto Shadowform", 
					enable	= true, 
				}, 
				{ 	name	= "Auto Devouring Plague", newSection = true,
					enable	= true, 
				}, 
				{ 	name	= "Mouseover Shadow Word Pain", 
					enable	= true, 
				}, 
				{ 	name	= "Mouseover Vampiric Touch", 
					enable	= true, 
				}, 
				{ 	name	= "Healthstone", newSection = true,
					enable	= true,
					widget	= { type = "numBox",
						value	= 40,
						step	= 5,
						tooltip	= "Set automatic Healthstone usage.",
					},
				},
				{ 	name	= "Dispersion",
					enable	= true,
					widget	= { type = "numBox",
						value	= 50,
						step	= 5, 
					},
				}, 
				{ 	name	= "Void Shift",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 20,
						step	= 5, 
					},
				},
				{ 	name	= "Heal Others", newSection = true,
					enable	= false, 
				}, 
				{ 	name	= "Power Word Shield", 
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				}, 
				{ 	name	= "Prayer of Mending",
					enable	= true,
					widget	= { type = "numBox",
						value	= 70,
						step	= 5, 
					},
				}, 
				{ 	name	= "Renew",
					enable	= true,
					widget	= { type = "numBox",
						value	= 50,
						step	= 5, 
					},
				}, 
				{ 	name	= "Vamperic Embrace",
					enable	= true,
					widget	= { type = "numBox",
						value	= 80,
						step	= 5, 
					},
				}, 
				{ 	name	= "Flash Heal",
					enable	= false,
					widget	= { type = "numBox",
						value	= 60,
						step	= 5, 
					},
				},
			},
			hotkeys = {
				{	name	= "Pause Rotation",
					enable	= true,
					hotkeys	= {'ls'},
				},
				{	name	= "Pyschic Horror",
					enable	= true,
					hotkeys	= {'lc'},
				},
				{	name	= "Life Grip",
					enable	= true,
					hotkeys	= {'rs'},
				},
				{	name	= "Mass Dispel",
					enable	= true,
					hotkeys	= {'rc'},
				},
				{	name	= "Level 90 Talents Key",
					enable	= true,
					hotkeys	= {'ra'},
				}, 
				{	name	= "Dispersion Key",
					enable	= false,
					hotkeys	= {'ra'},
				},
				{	name	= "Burst Key", 
					enable	= false,
					hotkeys	= {'ra'},
				},
				{	name	= "Fear Key",
					enable	= false,
					hotkeys	= {'ra'},
				}, 
				{	name	= "Level 15 Talents Key",
					enable	= false,
					hotkeys	= {'ra'},
				}, 
			},
		}
		CPOWORKS_SHADOW = PQI:AddRotation(config3)
	end
	
end

if not tLOS then tLOS={} end
if not fLOS then fLOS=CreateFrame("Frame") end

	function LineOfSight(target)
		local updateRate=1
		fLOS:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
		function fLOSOnEvent(self,event,...)
			if event=="COMBAT_LOG_EVENT_UNFILTERED" then
				local cLOG={...}
				if cLOG[2]=="SPELL_CAST_FAILED" then
					if cLOG[4]==UnitGUID("player") then 
						if cLOG[15]==SPELL_FAILED_LINE_OF_SIGHT then
							tinsert(tLOS,{unit=target,time=GetTime()})
						end
					end
				else
					table.sort(tLOS,function(x,y) return x.time>y.time end)
					for i=1,#tLOS do
						local time=tLOS[i].time or GetTime()
						if GetTime()>time+updateRate then
							tremove(tLOS,i)
						end
					end
				end
			end
		end
		fLOS:SetScript("OnEvent",fLOSOnEvent)
		for i=1,#tLOS do
			if tLOS[i].unit==target then
				return true
			end
		end
	end

	
if not cTar
then
	cTar = {"target","focus","mouseover","arena1","arena2","arena3","arena4","arena5","arenapet1","arenapet2","arenapet3","arenapet4","arenapet5","pettarget"}
end

--Custom Target Tables--							
arenaTars				= { "arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
							}

function ResetMacros()
  macros["chastise"]=false
  macros["toggle"]=false 
end


function GetOptionValue(option)
	if PQInterfaceLoaded then
		local PQI_String = "PQI_CpoworksHolyPvPConfigSettings_"
		local PQI_Option_Enable = _G[PQI_String .. option .. "_enable"]
		local PQI_Option_Value = _G[PQI_String .. option .. "_value"]
		if PQI_Option_Enable then
			return ((PQI_Option_Value) and PQI_Option_Value or PQI_Option_Enable)
		else
			return false
		end
	else
		return HolyPriest_DefaultSettings[option]
	end
end


function GetOptionEnable(option)
	if PQInterfaceLoaded then
		local PQI_String = "PQI_CpoworksHolyPvPConfigSettings_"
		local PQI_Option_Enable = _G[PQI_String .. option .. "_enable"]
		if PQI_Option_Enable then
			return PQI_Option_Enable
		else
			return false
		end
	else
		if HolyPriest_DefaultSettings[option] == true then
			return true
		elseif HolyPriest_DefaultSettings[option] == false then
			return false
		else
			return true
		end
	end
end

function GetHealValue(option)
	if PQInterfaceLoaded then
		local PQI_String = "PQI_CpoworksHolyPvPHealSettings_"
		local PQI_Option_Enable = _G[PQI_String .. option .. "_enable"]
		local PQI_Option_Value = _G[PQI_String .. option .. "_value"]
		if PQI_Option_Enable then
			return ((PQI_Option_Value) and PQI_Option_Value or PQI_Option_Enable)
		else
			return false
		end
	else
		return HolyPriest_DefaultSettings[option]
	end
end

function GetHealEnable(option)
	if PQInterfaceLoaded then
		local PQI_String = "PQI_CpoworksHolyPvPHealSettings_"
		local PQI_Option_Enable = _G[PQI_String .. option .. "_enable"]
		if PQI_Option_Enable then
			return PQI_Option_Enable
		else
			return false
		end
	else
		if HolyPriest_DefaultSettings[option] == true then
			return true
		elseif HolyPriest_DefaultSettings[option] == false then
			return false
		else
			return true
		end
	end
end

function StringSplicer(s,sep)
  sep=sep or","
  local table={}
  local i=1;
  for s in string.gmatch(s,"([^"..sep.."!%s]+)")do 
    table[i]=s;
    i=i+1 
  end 
  return table 
end 



function IsLeftMouseButtonKeyDown() return IsMouseButtonDown(1) end 
function IsRightMouseButtonKeyDown()return IsMouseButtonDown(2)end 
function IsMiddleMouseButtonKeyDown()return IsMouseButtonDown(3)end
function IsMouseButton4KeyDown()return IsMouseButtonDown(4)end
function IsMouseButton5KeyDown()return IsMouseButtonDown(5)end 

function IsKeyDown(Key)
    if GetCurrentKeyBoardFocus() then 
      return false 
    end
    
    if PQInterfaceLoaded then 
    	if Key == "DPSKey" then
    		if not PQI_CpoworksHolyPvPConfigSettings_DPSKey_enable then 
				keything = _G['Is'..HolyPriest_DefaultHotkeys[Key]..'KeyDown'] 
				return keything()
			else 
			 	return PQI:IsHotkeys(PQI_CpoworksHolyPvPConfigSettings_DPSKey_key)
			end
		elseif Key == "FearKey" then
			if not PQI_CpoworksHolyPvPConfigSettings_FearKey_enable then 
				keything = _G['Is'..HolyPriest_DefaultHotkeys[Key]..'KeyDown'] 
				return keything()
			else 
			 	return PQI:IsHotkeys(PQI_CpoworksHolyPvPConfigSettings_FearKey_key)
			end
		
		elseif Key == "Level15TalentKey" then
			if not PQI_CpoworksHolyPvPConfigSettings_Level15TalentKey_enable then 
				keything = _G['Is'..HolyPriest_DefaultHotkeys[Key]..'KeyDown'] 
				return keything()
			else 
			 	return PQI:IsHotkeys(PQI_CpoworksHolyPvPConfigSettings_Level15TalentKey_key)
			end
		else
		    local optionstring="PQI_CpoworksHolyPvPConfigSettings_"
		    if _G[optionstring..Key.."_enable"]then 
		      return PQI:IsHotkeys(_G[optionstring..Key.."_key"])
		    else 
		      return false 
		    end 
		end
    else 	
      	if HolyPriest_DefaultHotkeys[Key] then 
        	keything = _G['Is'..HolyPriest_DefaultHotkeys[Key]..'KeyDown'] 
			
	        if not keything then 
	          	PQR_WriteToChat("|cffb73737You're hotkey settings are invalid! The Rotation has been stopped.|cffffffff","Error")
	            PQR_StopRotation()
	            return false 
	        end
	        return keything()
    	end
    return false 
    end
 end

--CastSpell--
function _castSpell(spellid,tar)
	if UnitCastingInfo("player") == nil
	and UnitChannelInfo("player") == nil
	and IsPlayerSpell(spellid) == true
	and cdRemains(spellid) == 0
	then
		if tar ~= nil
		and rangeCheck(spellid,tar) == nil
			then
			return false
		elseif tar ~= nil
		and rangeCheck(spellid,tar) == true
			then
			CastSpellByName(GetSpellInfo(spellid),tar)
			return true
		elseif tar == nil
			then
			CastSpellByName(GetSpellInfo(spellid))
			return true
		else
	return false
	end
end
end


--Combat Check--
function inCombat()
if UnitAffectingCombat("player") ~= nil
	then
		return true
	end
end

--Get HP simple--
function getHp(unit)
if UnitExists(unit) ~= nil
	then
		return 100 * UnitHealth(unit) / UnitHealthMax(unit)
	end
end

--Range Check Simple--
function rangeCheck(spellid,unit)
if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
then
	return true
end
end


--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) > 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end



function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) + incomingheals ) / UnitHealthMax(t)
end

function CanHeal(t)
  	if not UnitIsCharmed(t) 
  	and not UnitIsDeadOrGhost(t) 
  	and not UnitDebuffID(t, 33786) then --Clone
  		return true 
  	end 
end

function GroupInfo()
  members, group = { { Unit = "player", HP = CalculateHP("player"), IsPlayer = true } }, { low = 0, tanks = { } } 
  group.type = IsInRaid() and "raid" or "party" 
  group.number = GetNumGroupMembers()
  for i=1,group.number do if CanHeal(group.type..i) then 
    local unit, hp = group.type..i, CalculateHP(group.type..i) 
    table.insert( members,{ Unit = unit, HP = hp, IsPlayer = true } ) 
    if hp <= 94 then group.low = group.low + 1 end 
    if UnitGroupRolesAssigned(unit) == "TANK" then table.insert(group.tanks,unit) end   
  end end 
  if group.type == "raid" and #members > 1 then table.remove(members,1) end 
  
  
 -- Checking Pets in the group
 for i=1,group.number do
		if CanHeal(group.type..i.."pet") then
			local memberpet, memberpethp = nil, nil
			if UnitAffectingCombat("player") then
				 memberpet = group.type..i.."pet" 
				 memberpethp = CalculateHP(group.type..i.."pet") 
			else
				 memberpet = group.type..i.."pet"
				 memberpethp = CalculateHP(group.type..i.."pet")
			end
			
			table.insert(members, { Unit = memberpet, HP = memberpethp, IsPlayer = false } )
		end
  end
  
  
  table.sort(members, function(x,y) return x.HP < y.HP end)
  local customtarget = CanHeal("target") and "target" -- or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
  if customtarget then table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) end 
end

GroupInfo()

--------------------------------------------------
GlyphCheck = nil
function GlyphCheck(glyphid)
	for i=1, 6 do
		if select(4, GetGlyphSocketInfo(i)) == glyphid then
			return true
		end
	end
	return false
end



--Function Check if unit is CC'ed--
local dispellableCCids 			= {  
	110698,		-- Hammer of Justice  
	44572,		-- Deep Freeze
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	122,		-- Frost Nova
	82691,		-- Ring of Frost
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	118905,		-- Static Charge 
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	3355		-- Freezing Trap
}
function dispellableCC(unit)
	for i=1,#dispellableCCids do
		if UnitDebuffID(unit,dispellableCCids[i]) ~= nil then
			return true
		end
	end
end	
  
  
  --Function Check Snares--
local PvPslows 			= {
	45524,		-- Chains of Ice
	50435,		-- Chilblains
	115000,		-- Remorseless Winter
	50259,		-- Dazed 
	58180,		-- Infected Wounds
	61391,		-- Typhoon
	127797,		-- Ursol's Vortex
	82941,		-- Ice Trap (Hunter)
	135299,		-- IceTrap Debuff
	35101,		-- Concussive Barrage
	5116,		-- Concussive Shot
	61394,		-- Frozen Wake 
	13810,		-- Ice Trap
	50433,		-- Ankle Crack 
	54644,		-- Frost Breath 
	121288,		-- Chilled 
	120,		-- Cone of Cold
	116,		-- Frostbolt
	44614,		-- Frostfire Bolt
	113092,		-- Frost Bomb
	31589,		-- Slow
	116095,		-- Disable
	118585,		-- Leer of the Ox
	123727,		-- Dizzying Haze
	123586,		-- Flying Serpent Kick
	110300,		-- Burden of Guilt
	63529,		-- Dazed - Avenger's Shield
	20170,		-- Seal of Justice
	15407,		-- Mind Flay
	3409,		-- Crippling Poison
	26679,		-- Deadly Throw
	119696,		-- Debilitation
	3600,		-- Earthbind 
	77478,		-- Earthquake 
	8034,		-- Frostbrand Attack
	8056,		-- Frost Shock
	51490,		-- Thunderstorm
	18223,		-- Curse of Exhaustion
	47960,		-- Shadowflame
	1715,		-- Hamstring
	12323,		-- Piercing Howl
	1604		-- Dazed 

				}
function isSlowed(unit)
for i=1,#PvPslows do
	if UnitDebuffID(unit,PvPslows[i]) ~= nil
		then
			return true
		end
	end
end


--Function check if rooted--
local roots				= {
						96294,	--Chains Of Ice
						91807,	--ShamblingRush
						339,		-- Entangling Roots
						19975,		-- Entangling Roots (Nature's Grasp)
						45334,		-- Immobilized (Wild Charge - Bear)
						102359,		-- Mass Entanglement
						110693,		-- Frost Nova (Mage)
						19185,		-- Entrapment
						128405,		-- Narrow Escape
						50245,		-- Pin (Crab)
						54706,		-- Venom Web Spray (Silithid)
						4167,		-- Web (Spider)
						122,		-- Frost Nova
						111340,		-- Ice Ward
						116706,		-- Disable
						113275,		-- Entangling Roots (Symbiosis)
						123407,		-- Spinning Fire Bloss
						113275,		-- Entangling Roots (Symbiosis)
						87194,		-- Glyph of Mind Blast
						114404,		-- Void Tendril's Grasp
						115197,		-- Partial Paralysis
						64695,		-- Earthgrab (Earthgrab Totem)
						63685,		-- Freeze (Frozen Power)
						107566,		-- Staggering Shout
						39965,		-- Frost Grenade
						55536,		-- Frostweave Net
						13099		-- Net-o-Matic
}
function hasRoot(unit)
for i=1,#roots do
	if UnitDebuffID(unit,roots[i]) ~= nil
		then
			return true
		end
	end
end