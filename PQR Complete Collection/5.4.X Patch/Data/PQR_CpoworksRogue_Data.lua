if not PQR_LoadedDataFile then
	PQR_LoadedDateFile = true
	print("|cffFFBE69Cpoworks Rogue Data File v1.2 - May 7, 2013|cffffffff")
end


-- PQInterface Settings
local config = {
	name	= 'Rogue',
	author	= 'Cpoworks',
	abilities = {
		{	name = "Deadly Poison",
			enable = true,
		},
		{	name = "Wound Poison",
			enable = false,
		},
		{	name = "Leeching Poison",	newSection = true,
			enable = false,
		},
		{	name = "Crippling Poison",
			enable = false,
		},
		{	name = "Mind Numbing Poison",
			enable = false,
		},
		{	name = "Paralytic Poison",
			enable = true,
		},
		{  name = "Shadow Blades",	newSection = true,
			enable = true,
		},
		{	name = "Vanish",
			enable = true,
		},
		{	name = "Preparation",
			enable = true,
		},
		{	name = "Vendetta",
			enable = true,
		},
		{	name = "Tricks Target",		newSection = true,
			enable = true,
			widget = { type = 'txtBox',
			value = "Name",
			},
		}, 
		{  name = "Recuperate",			newSection = true,
			enable = false,
			widget = { type = 'numBox',
				value = 50,
				step = 5,
			},
		}, 
		{  name = "Healthstone",
			enable = true,
			widget = { type = 'numBox',
				value = 35,
				step = 5,
			},
		}, 
	},
	hotkeys = {
	    { name = "Pause Rotation",    enable = true, hotkeys = {'la'}, },
		{ name = "AoE Mode",    enable = true, hotkeys = {'lc'}, }, 
		{ name = "Cooldowns",    enable = true, hotkeys = {'rc'}, }, 
	},
}
CPOWORKS_ROGUE = PQI:AddRotation(config)

-------------------------------------------
--Functions
-------------------------------------------
function PQR_status()
	PQR_WriteToChat("Current Cooldown/AoE Status")
	if UseCD then
		PQR_WriteToChat("Cooldowns: |cFF00FF00Enabled")
		PQR_Event("PQR_Text","Cooldowns: Enabled",nil,"00FF00")
	else
		PQR_WriteToChat("Cooldowns: |cFFFF0000Disabled")
		PQR_Event("PQR_Text","Cooldowns: Disabled",nil,"FF0000")
	end
	if AoE == false then
		PQR_WriteToChat("AoE: |cFFFF0000Disabled")
		PQR_Event("PQR_Text","AoE: Disabled",nil,"FF0000")
	else
		PQR_WriteToChat("AoE: |cFF00FF00Enabled")
		PQR_Event("PQR_Text","AoE: Enabled",nil,"00FF00")
	end
end

--CastSpell--
function _castSpell(spellid,tar)
	if UnitCastingInfo("player") == nil
	and UnitChannelInfo("player") == nil
	and IsPlayerSpell(spellid) == true
	and cdRemains(spellid) == 0
	then
		if tar ~= nil
		and rangeCheck(spellid,tar) == nil
			then
			return false
		elseif tar ~= nil
		and rangeCheck(spellid,tar) == true
			then
			CastSpellByName(GetSpellInfo(spellid),tar)
			return true
		elseif tar == nil
			then
			CastSpellByName(GetSpellInfo(spellid))
			return true
		else
	return false
	end
end
end

--Combat and Melee Check--
function inMelee()
	if UnitAffectingCombat("player") ~= nil
	and IsSpellInRange(GetSpellInfo(2098),"target") == 1
	and UnitExists("target") ~= nil
	and UnitCanAttack("player","target") ~= nil
	then return true
	end
end

--Combat Check--
function inCombat()
if UnitAffectingCombat("player") ~= nil
	then
		return true
	end
end

--Get HP simple--
function getHp(unit)
if UnitExists(unit) ~= nil
	then
		return 100 * UnitHealth(unit) / UnitHealthMax(unit)
	end
end

--Range Check Simple--
function rangeCheck(spellid,unit)
if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
then
	return true
end
end


--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) > 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end




function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) + incomingheals ) / UnitHealthMax(t)
end

function CanHeal(t)
  if UnitInRange(t) and UnitCanCooperate("player",t) and not UnitIsEnemy("player",t) 
  and not UnitIsCharmed(t) and not UnitIsDeadOrGhost(t) and not PQR_IsOutOfSight(t) 
  and UnitExists(t)
  then return true end 
end

function GroupInfo()
  members, group = { { Unit = "player", HP = CalculateHP("player") } }, { low = 0, tanks = { } } 
  group.type = IsInRaid() and "raid" or "party" 
  group.number = GetNumGroupMembers()
  for i=1,group.number do if CanHeal(group.type..i) then 
    local unit, hp = group.type..i, CalculateHP(group.type..i) 
    table.insert( members,{ Unit = unit, HP = hp } ) 
    if hp <= 94 then group.low = group.low + 1 end 
    if UnitGroupRolesAssigned(unit) == "TANK" then table.insert(group.tanks,unit) end 
  end end 
  if group.type == "raid" and #members > 1 then table.remove(members,1) end 
  table.sort(members, function(x,y) return x.HP < y.HP end)
  local customtarget = CanHeal("target") and "target" -- or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
  if customtarget then table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) end 
end

function CastClick()
  if IsMouseButtonDown(1) and MainMenuBar:IsShown() then 
    local mousefocus = GetMouseFocus() 
    if mousefocus and mousefocus.feedback_action 
    then SpellCancelQueuedSpell() PQR_DelayRotation(1) end
  end
end

GroupInfo() 

--- Time to Die
function ttd(unit)
	unit = unit or "target";
	if UnitExists(unit) and not UnitIsDeadOrGhost(unit) then
		if currtar ~= UnitGUID(unit) then
			priortar = currtar
			currtar = UnitGUID(unit)
		end
		if thpstart==0 and timestart==0 then
			thpstart = UnitHealth(unit)
			timestart = GetTime()
		else
			thpcurr = UnitHealth(unit)
			timecurr = GetTime()
			if thpcurr >= thpstart then
				thpstart = thpcurr
				timeToDie = 999
			else
				timeToDie = round2(thpcurr/((thpstart - thpcurr) / (timecurr - timestart)),2)
			end
		end
	elseif not UnitExists(unit) or currtar ~= UnitGUID(unit) then
		currtar = 0 
		priortar = 0
		thpstart = 0
		timestart = 0
		timeToDie = 0
	end
	return timeToDie
end	


  
  
  
  
  