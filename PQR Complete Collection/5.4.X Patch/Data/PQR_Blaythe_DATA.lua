function SpecialAggro(t)
  local mob
  if GetLocale() == "deDE" then
    mob = { "Trainingsattrappe", "Trainingsattrappe des Schlachtzuges", "Verzerrter Geist", "Brutwächter der Amani'shi", 
            "Hakkars Ketten", "Freigelegter Kopf von Magmaul", "Schlachtfeldverwüster", "Ozumat", 
            "Rechter Fuß", "Linker Fuß", "Eisiges Grab", "Auferstandener Ghul", "Manaleere", "Brennende Sehnen", 
            "Schwingententakel", "Armtentakel", "Zwielichtkampfdrache", "Goriona", "Eisgrab", 
            "Zwielichtpionier", "Schwächender Schreckenslord", "Blasiges Tentakel" } 
  elseif GetLocale() == "frFR" then
    mob = { "Mannequin d'entraînement", "Mannequin d'entraînement d'écumeur de raids", "Esprit tordu", "Perce-coque amani'shi", 
            "Chaînes d'Hakkar", "Tête exposée de Magmagueule", "Démolisseur de champ de bataille", "Ozumat", 
            "Pied droit", "Pied gauche", "Tombe glaciale", "Goule ressuscitée", "Vide de mana", "Tendons brûlants", 
            "Tentacule d’aile", "Tentacule de patte", "Drake d’assaut du Crépuscule", "Goriona", "Tombeau de glace", 
           a "Sapeur du Crépuscule", "Seigneur de l’effroi débilitant", "Tentacule caustique" } 
  elseif GetLocale() == "esES" then
	mob = { "Muñeco de entrenamiento", "Muñeco de entrenamiento de asaltante", "Espíritu alterado", "Criador Amani'shi",
			"Cadenas de Hakkar", "Cabeza de Faucemagma expuesta", "Demoledor del campo de batalla", "Ozumat",
			"Pie derecho", "Pie izquierdo", "Tumba helada", "Necrófago resucitado", "Vacío de maná", "Tendones ardientes",
			"Tentáculo del ala", "Tentáculo", "Draco de asalto Crepuscular", "Goriona", "Tumba de hielo",
			"Zapador Crepuscular", "Señor del Terror debilitador", "Tentáculo virulento", "Parásito corruptor",
			"Foco empíreo", "Pterror alado Zandalari", "Esbirro enigmático", "Protector celestial",
			"Carga de energía", "Flecha perforadora", "Tótem de espíritu", "Espíritu persuadellamas", "Esencia odiosa",
			"Pata de Garalon", "Punto débil", "Aguas corruptas", "Engendro de terror" } 
  elseif GetLocale() == "ruRU" then
    mob = { "Тренировочный манекен", "Тренировочный манекен рейдера", "Искаженный дух", "Смотритель кладки из племени Амани", 
            "Цепи Хаккара", "Голова Магмаря", "Боевой разрушитель", "Озумат", 
            "Правая нога", "Левая нога", "Ледяная гробница", "Восставший вурдалак", "Магическая воронка", "Горящие сухожилия", 
            "Крыло", "Громадное щупальце", "Сумеречный штурмовой дракон", "Гориона", "Ледяной склеп", 
            "Сумеречный сапер", "Повелитель ужаса - истощитель", "Раскаленное щупальце" } 
  else
    mob = { "Training Dummy", "Raider's Training Dummy", "Twisted Spirit", "Amani´shi Hatcher", 
            "Hakkar's Chains", "Exposed Head of Magmaw", "Battleground Demolisher", "Ozumat", 
            "Right Foot", "Left Foot", "Icy Tomb", "Risen Ghoul", "Mana Void", "Burning Tendons", 
            "Wing Tentacle", "Arm Tentacle", "Twilight Assault Drake", "Goriona", "Ice Tomb", 
            "Twilight Sapper", "Dreadlord Debilitator", "Blistering Tentacle", "Corrupting Parasite",
            "Empyreal Focus", "Zandalari Pterror Wing", "Shadowy Minion", "Celestial Protector",
            "Energy Charge", "Pinning Arrow", "Spirit Totem", "Flamecoaxing Spirit", "Hateful Essence",
            "Garalon's Leg", "Weak Spot", "Corrupted Waters", "Terror Spawn", "Soul Fragment", "Severer of Souls",
            "Melee Target", "Smash Hoofstomp", "Titan Spark", "Eye of Warding", "Minion of Fear", "Living Fluid",
            "Mature Egg of Ji-Kun", "Juvenile" } 
  end
  for i=1, #mob do if UnitName(t) == mob[i] then return true end end
end

function CheckAura(UnitID,SpellID,Filter,TimeLeft) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitAura(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function InMelee()
	if UnitAffectingCombat("player") ~= nil
	and IsSpellInRange(GetSpellInfo(78),"target") == 1
	and UnitExists("target") ~= nil
	and UnitCanAttack("player","target") ~= nil
	then return true
	end
end

function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) and UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) + incomingheals ) / UnitHealthMax(t)
end

function CanHeal(t)
  if UnitInRange(t) 
   and UnitCanCooperate("player",t) 
   and not UnitIsCharmed(t) 
   and not UnitIsDeadOrGhost(t) 
   and not PQR_IsOutOfSight(t) 
   and UnitIsConnected(t)
   and UnitDebuffID(t,104451) == nil -- Ice Tomb
   and UnitDebuffID(t,76577) == nil -- Smoke Bomb
  then return true end 
end

function GroupInfo()
  members, group = { { Unit = "player", HP = CalculateHP("player") } }, { low = 0, tanks = { } } 
  group.type = IsInRaid() and "raid" or "party" 
  group.number = GetNumGroupMembers()
  for i=1,group.number do 
  if CanHeal(group.type..i) then 
    local unit, hp = group.type..i, CalculateHP(group.type..i) 
    table.insert( members,{ Unit = unit, HP = hp } ) 
    if hp < 90 then group.low = group.low + 1 end 
    if UnitGroupRolesAssigned(unit) == "TANK" then table.insert(group.tanks,unit) end 
  end end 
  if group.type == "raid" and #members > 1 then table.remove(members,1) end 
  table.sort(members, function(x,y) return x.HP < y.HP end)
  local customtarget = CanHeal("target") and "target" or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
  if customtarget then table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) end 
end

function AssistTank() 
  local tank = group.tanks[1] 
  if tank and group.type == "party" 
  and not UnitExists("target") 
  and UnitAffectingCombat(tank) 
  and UnitAffectingCombat(tank.."target") 
  and UnitCanAttack("player",tank.."target")
  then TargetUnit(tank.."target") end
end

function CastClick()
  if IsMouseButtonDown(1) and MainMenuBar:IsShown() then 
    local mousefocus = GetMouseFocus() 
    if mousefocus and mousefocus.feedback_action 
    then SpellCancelQueuedSpell() PQR_DelayRotation(1) end
  end
end

local colors = RAID_CLASS_COLORS[select(2,UnitClass("player"))] 

local ImmuneList = {
	642,45438,31224,23920,33786,19263,97417,97977,105256,105409,
	105465
}

function TargetImmune(tar)
	for i=1,#ImmuneList do
		if UnitExists(tar) and UnitBuffID(tar,ImmuneList[i])
		then
			return true
		end
	end
end

function SpellCheck(spell, target)
    	if 	UnitExists(target) 
    		and PQR_SpellAvailable(spell)
    		and IsSpellInRange(GetSpellInfo(spell), target) == 1
			and UnitCanAttack("player", target) == 1  
		--	and not TargetImmune(target)
			and not UnitIsDeadOrGhost(target)
			and not PQR_IsOutOfSight(target, 1)
    	then
    		return true
    	else
    		return false
    	end
end

function MageBombCheck(spell, target)
    	if 	UnitExists(target) 
    		and PQR_SpellAvailable(spell)
    		and UnitCanAttack("player", target) == 1  
			and not UnitIsDeadOrGhost(target)
			and not PQR_IsOutOfSight(target, 1)
    	then
    		return true
    	else
    		return false
    	end
end

local stamBuff = { 6307, 103127, 90364, 21562} -- stam buff checks

function hasSTABuff()
	for i=1,#stamBuff do
		if UnitBuffID("player",stamBuff[i]) ~= nil then
			return true
		end
	end
	return false
end

LastSSTarget = nil
PetSB = nil
SBSSMouseover = nil
SBSoC = nil
-- Player Bloodlust Check.
SoulSwapGlyphed = 0
HasBloodlust = nil
BossTable = {}
spearcheck = false
focuscast = true

function HasBloodlust()
	if UnitBuffID("player",2825)
		or UnitBuffID("player",32182)
		or UnitBuffID("player",80353)
		or UnitBuffID("player",90355)
	then 
		return true
	else
		return false
	end
end

------------------------------------------
-- Temporary Buffs & Procs List
PQ_Lightweave		= 125487
PQ_PowerTorrent		= 74241
PQ_VolcanicPotion	= 79476
PQ_SynapseSprings	= 96230
PQ_BloodLust		= 2825
PQ_Heroism			= 32182
PQ_TimeWarp			= 80353
PQ_Hysteria			= 90355
PQ_Zerk				= 26297
------------------------------------------

-- Temporary Bloodlust
Nova_Lust = {PQ_Bloodlust,PQ_Heroism,PQ_TimeWarp,PQ_Hysteria}

-- Temporary Buff Table
PQ_TemporaryBuffs = {
	{spellID = PQ_Lightweave, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_PowerTorrent, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_VolcanicPotion, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_SynapseSprings, check = true, hasBuff = false, endTime = nil}
}

BossListMoP = {
			-- List taken from Bosslist.cs in Honourbuddy's CLU, all credits to them --
            -- Temple of the Jade Serpent http:
            56448, -- Wise Mari 
            58826, -- Zao Sunseeker
            59051, -- Strife
            59726, -- Peril
            56732, -- Liu Flameheart 
            56762, -- Yu'lon 
            56439, -- Sha of Doubt

            -- Stormstout Brewery http:
            56637, -- Ook-Ook
            56717, -- Hoptallus
            59479, -- Yan-Zhu the Uncasked

            -- Shado-Pan Monastery http:
            56747, -- Gu Cloudstrike
            56754, -- Azure Serpent, Phase 2 of Gu Cloudstrike
            56541, -- Master Snowdrift
            64387, -- Master Snowdrift(2)
            56713, -- Master Snowdrift(3)
            56870, -- Master Snowdrift(4)
            56719, -- Sha of Violence
            56884, -- Taran Zhu 

            -- Gate of the Setting Sun http:
            56906, -- Saboteur Kip'tilak
            56589, -- Striker Ga'dok
            56636, -- Commander Ri'mok
            61177, -- Raigonn
            56877, -- Raigonn
            56895, -- Raigonn

            -- Mogu'shan Palace http:
            61442, -- Kuai the Brute
            61444, -- Ming the Cunning
            61445, -- Haiyan the Unstoppable
            61243, -- Gekkan
            61337, -- Glintrok Ironhide
            61338, -- Glintrok Skulker
            61339, -- Glintrok Oracle
            61340, -- Glintrok Hexxer
            61398, -- Xin the Weaponmaster 

            -- Siege of Niuzao Temple http:
            61567, -- Vizier Jin'bak
            61634, -- Commander Vo'jak
            61485, -- General Pa'valak
            62205, -- Wing Leader Ner'onok

            -- Scarlet Halls http:
            59303, -- Houndsmaster Braun
            58632, -- Armsmaster Harlan
            59150, -- Flameweaver Koegler

            -- Scarlet Monastry http:
            59789, -- Thalnos the Soulrender
            59223, -- Brother Korloff
            3977, -- High Inquisitor Whitemane
            60040, -- Commander Durand

            -- Scholomance http:
            58633, -- Instructor Chillheart
            59184, -- Jandice Barov
            59153, -- Rattlegore
            58722, -- Lilian Moss
            59080, -- Darkmaster Gandling

            -- POSSIBLE DUNGEONS
            -- Crypt of Forgotten Kings
            -- The Perfect Storm
            -- Temple of the Red Crane
            -- Temple of the White Tiger

            -- Mogu'shan Vaults
            60047, -- Amethyst Guardian
            60051, -- Cobalt Guardian
            60043, -- Jade Guardian
            59915, -- Jasper Guardian
            60009, -- Feng the Accursed 
            60143, -- Gara'jal the Spiritbinder
            61429, -- Meng the Demented 
            61421, -- Zian of the Endless Shadow
            61423, -- Qiang the Merciless
            61427, -- Subetai the Swift
            60410, -- Elegon
         --   60913, -- Energyspark at Elegon
            60400, -- Jan-xi 
            60399, -- Qin-xi

            -- Heart of Fear
            66791, -- Imperial Vizier Zor'lok 
            62543, -- Blade Lord Ta'yak
            62164, -- Garalon
            65501, -- Wind Lord Mel'jarak
            63666, -- Amber-Shaper Un'sok
            62837, -- Grand Empress Shek'zeer
            63591, -- Empress reaver
			65405, -- Amber Trapper on Wind Lord
			62408, -- Mender
			62402, -- Blade master
			
            -- Terrace of Endless Spring
            60583, -- Protector Kaolan
            60586, -- Elder Asani
            60585, -- Elder Regail
            60491, -- Sha of Anger
            62346, -- Galleon
            62442, -- Tsulong
            63099, -- Lei Shi
            60999, -- Sha of Fear
            61038, -- Yang Guoshi
            61042, -- Cheng Kang
            61046, -- Jinlun Kun
            31146,  -- Raiders Training dummy
            -------------5.2 ToT Bosses ---------------
            68036, --Durumu the Forgotten
			69427, --Dark Animus
			69078, --Sul the Sandcrawler
			69132, --High Prestess Mar'li
			69131, --Frost King Malakk
			69134, --Kazra'jin
			68476, --Horridon
			68079, --Ro'shak
			68080, --Quet'zal
			68081, --Dam'ren 
			68078, --Iron Qon 
			69712, --JiKun
			69465, --JinRokh
			68397, --LeiShen
			70212, --flaming
			70235, --Frozen 
			70247, --Venomous
			68065, --Megaera
			69017, --Primordius
			69070, --Viscous Horror
			69069, --good ooze
			70579, --bad ooze
			62983, --Raden
			67977, --Tortos
			68905, --Lu'lin 
			68904  --Suen
}

NoHeavyDPSList = {
			
            60885, -- Protectors Minion of fear 
            62919, -- Tsulong Unstable Sha 
            63346, -- Tsulong The Dark of the night
            60913, -- Elegon energy charge
            69172, -- Horridon Stonegazer
            69173, -- Faraki Skirmisher
            69167, -- Gurubashi Bloodlord
            69164, -- Gurubashi Venom Priest
            69184, -- Risen Drakkari Warrior
            69185, -- Risen Drakkari Champion
            69169, -- Amanishi Protector
            69168, -- Amanishi Flame Caster
            69177, -- Amani Warbear
            69176, -- Amanishi Beast Shaman
            69221, -- Zandalari Dinomancer
            69480, -- Blessed Loa Spirit
            69628, -- mature-egg-of-ji-kun
            70095 -- juvenile
}

NoHeavyDPStarget = nil
function NoHeavyDPStarget(targ)
	local NoHeavyDPSList = NoHeavyDPSList
	if UnitExists(targ) then
		local CTargetGUID = tonumber(UnitGUID(targ):sub(6,10), 16)
		for i=1,#NoHeavyDPSList do
			if NoHeavyDPSList[i] == CTargetGUID then return true end
		end
		return false
	end
	return false
end

IsTargetMoPBoss = nil
function IsTargetMoPBoss()
	local BossListMoP = BossListMoP
	if UnitExists("target") and UnitLevel("target") == -1 then return true end
	if UnitExists("target") then
		local CTargetGUID = tonumber(UnitGUID("target"):sub(6,10), 16)
		for i=1,#BossListMoP do
			if BossListMoP[i] == CTargetGUID then return true end
		end
		return false
	end
	return false
end

function NilremFrame_OnEvent(frame, event, ...)
		if event == "COMBAT_LOG_EVENT" then
			local subEvent = select(2, ...)
			local sourceGUID = select(4, ...)
			local sourceName = select(5, ...)
			local destGUID = select(8, ...)
			local destName = select(9, ...)
			local spellID = select(12, ...)
			local spellName = select(13, ...)
			local spellAmount = select(15, ...)
			local spellCrit = select(21, ...)
			if destGUID ~= UnitGUID("player") then 
				LogParser(subEvent,spellID,destGUID)
			end
		end
		if event == "PLAYER_DAMAGE_DONE_MODS" or subEvent == "COMBAT_RATING_UPDATE" or subEvent == "SPELL_POWER_CHANGED" or subEvent == "UNIT_STATS" then
			CalcDoTDmg()
		end
		if event == "PLAYER_REGEN_ENABLED" then
			ClearTargetGUID(false)
		end
		if event == "PLAYER_ALIVE" or event == "PLAYER_ENTERING_WORLD" then
			me = UnitGUID("player")
			InitFrames()
		end
		if event == "PLAYER_LOGIN" then
			InitFrames()
			me = UnitGUID("player")
		end
end

function onUpdate(self,elapsed)
    timer = timer + elapsed
    if timer >= 0.1 then
		for k,v in pairs(DotTrackFrames) do
			CompareDot(DotTrackFrames[k])
		end
        timer = 0
    end
end