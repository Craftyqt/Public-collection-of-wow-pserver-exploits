if not PQR_LoadedDataFile then
	PQR_LoadedDataFile = 1
	print("|cffFFBE69ShamanPvP Data File v1.1 - June 16, 2013|cffffffff")
end


if not cTar
then
	cTar = {"target","focus","mouseover","arena1","arena2","arena3","arena4","arena5","arenapet1","arenapet2","arenapet3","arenapet4","arenapet5","pettarget"}
end
PQR_Spec = GetSpecialization()
if PQR_Spec == 2 then
-- PQInterface Settings TwosFocus UseNSBURST
	local config = { 
		name	= "Shammy Sig",
		author	= "Arne",
		abilities = {	 
			{ 	name	= "Auto Focus",
				tooltip	= "Enable/Disable AutoFocus.",
				enable	= false,
			},  
			{ 	name	= "UseNSBURST",
				tooltip	= "Enable/Disable Use NS for Burst.",
				enable	= false,
			},  
			{ 	name	= "Twos Focus",
				tooltip	= "Enable/Disable Twos Focus.",
				enable	= false,
			},  
			{ 	name	= "Auto Sham Rage",
				tooltip	= "Enable/Disable Automatic use of Sham rage to get out of CC.",
				enable	= false,
			},
			{ 	name	= "Lightning Bolt",
				tooltip	= "Enable/Disable Lightning bolt",
				enable	= false,
			},
			{ 	name	= "Auto Spirit Walk",
				tooltip	= "Enable/Disable Automatic use of Spirit Walk to get out of Slows/cc.",
				enable	= false,
			},
			{ 	name	= "Healing Stream",
				enable	= true,
				widget	= { type = "numBox",
					value	= 80,
					step	= 5,
					tooltip	= "HP to cast Healing Stream.",
				},
			},
			{ 	name	= "Healing Tide",
				enable	= true,
				widget	= { type = "numBox",
					value	= 80,
					step	= 5,
					tooltip	= "HP to cast Healing Tide.",
				},
			},
			{ 	name	= "SBT",
				enable	= true,
				widget	= { type = "numBox",
					value	= 80,
					step	= 5,
					tooltip	= "HP FUCKING TOTEM..TOM.",
				},
			},
			{ 	name	= "Healing Surge",
				enable	= true,
				widget	= { type = "numBox",
					value	= 80,
					min     = 0,
					max     = 105,
					step	= 5,
					tooltip	= "HP FUCKING TOTEM..TOM.",
				},
			},
			{ 	name	= "Healthstone",
				enable	= true,
				widget	= { type = "numBox",
					value	= 60,
					step	= 5,
					tooltip	= "Set automatic Healthstone usage.",
				},
			},
		},
		hotkeys = { 
			{	name	= "Burst Key",
				enable	= false,
				hotkeys	= {'ra'},
			},
		},
	}
		ARNE_SHAMMYSIG = PQI:AddRotation(config)
end		


  -------------------------------------------
--Functions
-------------------------------------------


if not tLOS then tLOS={} end
if not fLOS then fLOS=CreateFrame("Frame") end

	function LineOfSight(target)
		local updateRate=1
		fLOS:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
		function fLOSOnEvent(self,event,...)
			if event=="COMBAT_LOG_EVENT_UNFILTERED" then
				local cLOG={...}
				if cLOG[2]=="SPELL_CAST_FAILED" then
					local player=UnitGUID("player") or ""
					if cLOG[4]==player then 
						if cLOG[15]==SPELL_FAILED_LINE_OF_SIGHT then
							tinsert(tLOS,{unit=target,time=GetTime()})
						end
					end
				else
					table.sort(tLOS,function(x,y) return x.time>y.time end)
					for i=1,#tLOS do
						local time=tLOS[i].time or GetTime()
						if GetTime()>time+updateRate then
							tremove(tLOS,i)
						end
					end
				end
			end
		end
		fLOS:SetScript("OnEvent",fLOSOnEvent)
		for i=1,#tLOS do
			if tLOS[i].unit==target then
				return true
			end
		end
	end






--
--Totem Range Check
local Blacklist = {
    120668,
    2062,
    2894

}

function totemDistance()
 if not (totemX and totemY) then
 	totemX,totemY = 0,0
 end
 for i=1, #Blacklist do
     local totemName = select(2,GetTotemInfo(1)) or select(2,GetTotemInfo(2))
     local blackList = GetSpellInfo(Blacklist[i])
 
     if totemX ~= (0 or nil) and totemY ~= (0 or nil) and totemName ~= blackList then
         local a,b,c,d,e,f,g,h,i,j = GetAreaMapInfo(GetCurrentMapAreaID())
         local a1 , b1 = GetPlayerMapPosition("Player")
         local x1 , y1 = a1 * 1000, b1 * 1000
         local a2 , b2 = totemX, totemY
         local x2 , y2 = a2 * 1000, b2 * 1000
         local w = (d - e)
         local h = (f - g)
         local distance = sqrt(min(x1 - x2, w - (x1 - x2))^2 + min(y1 - y2, h - (y1-y2))^2)
         
         return distance
     else
         return 0
     end
 end
end

-- burst



-- nova

Nova_CastingInfo = nil
function Nova_CastingInfo(PQ_Unit)
	local PQ_Casting = nil
	local percentRemaining = nil
	local secondsRemaining = nil

	if UnitCastingInfo(PQ_Unit) then
		local spellName,_,_,_,startTimer,endTimer = UnitCastingInfo(PQ_Unit)
		local durationTimer = ((endTimer) - (startTimer))
		local timeRemaining = (endTimer - GetTime() * 1000)
		percentRemaining = (100 - ((timeRemaining/durationTimer) * 100))
		secondsRemaining = endTimer/1000 - GetTime()
		PQ_Casting = spellName
		
		-- Name of spell, % remaining on spell, seconds remaining on spell
		return PQ_Casting, percentRemaining, secondsRemaining, durationTimer --edit
	else return false end
end



--CastSpell--
function _castSpell(spellid,tar)
	if IsPlayerSpell(spellid) == true
	--and GCDCheck(spellid)
	then
		if tar ~= nil
		and rangeCheck(spellid,tar) == nil
			then
			return false
		elseif tar ~= nil
		and rangeCheck(spellid,tar) == true
			then
			CastSpellByName(GetSpellInfo(spellid),tar)
			return true
		elseif tar == nil
			then
			CastSpellByName(GetSpellInfo(spellid))
			return true
		else
	return false
	end
end
end


function GCDCheck(SpellID)
if (GetSpellCooldown(GetSpellInfo(SpellID))+select(2,GetSpellCooldown(GetSpellInfo(SpellID)))-GetTime()< 0.1)
then 
return true
else
return false
end
end

--Combat and Melee Check--
function inMelee()
	if UnitAffectingCombat("player") ~= nil
	and IsSpellInRange(GetSpellInfo(73899),"target") == 1
	and UnitExists("target") ~= nil
	and UnitCanAttack("player","target") ~= nil
	then return true
	end
end

--Combat Check--
function inCombat()
if UnitAffectingCombat("player") ~= nil
	then
		return true
	end
end

--Get HP simple--
function getHp(unit)
if UnitExists(unit) ~= nil
	then
		return 100 * UnitHealth(unit) / UnitHealthMax(unit)
	end
end

--Range Check Simple--
function rangeCheck(spellid,unit)
if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
then
	return true
end
end


--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) > 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end

--Function Check if unit is CC'ed--
local dispellableCCids 			= {  
	110698,		-- Hammer of Justice  
	44572,		-- Deep Freeze
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	122,		-- Frost Nova
	82691,		-- Ring of Frost
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	118905,		-- Static Charge 
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	5246,		-- Intimidating Shout 
	20511,		-- Intimidating Shout 
	3355		-- Freezing Trap
}
function dispellableCC(unit)
for i=1,#dispellableCCids do
	if UnitDebuffID(unit,dispellableCCids[i]) ~= nil
		then
			return true
		end
	end
end


--Function Check Snares--
local PvPslows 			= {
	45524,		-- Chains of Ice
	50435,		-- Chilblains
	115000,		-- Remorseless Winter
	50259,		-- Dazed 
	58180,		-- Infected Wounds
	61391,		-- Typhoon
	127797,		-- Ursol's Vortex
	82941,		-- Ice Trap (Hunter)
	135299,		-- IceTrap Debuff
	35101,		-- Concussive Barrage
	5116,		-- Concussive Shot
	61394,		-- Frozen Wake 
	13810,		-- Ice Trap
	50433,		-- Ankle Crack 
	54644,		-- Frost Breath 
	121288,		-- Chilled 
	120,		-- Cone of Cold
	116,		-- Frostbolt
	44614,		-- Frostfire Bolt
	113092,		-- Frost Bomb
	31589,		-- Slow
	116095,		-- Disable
	118585,		-- Leer of the Ox
	123727,		-- Dizzying Haze
	123586,		-- Flying Serpent Kick
	110300,		-- Burden of Guilt
	63529,		-- Dazed - Avenger's Shield
	20170,		-- Seal of Justice
	15407,		-- Mind Flay
	3409,		-- Crippling Poison
	26679,		-- Deadly Throw
	119696,		-- Debilitation
	3600,		-- Earthbind 
	77478,		-- Earthquake 
	8034,		-- Frostbrand Attack
	8056,		-- Frost Shock
	51490,		-- Thunderstorm
	18223,		-- Curse of Exhaustion
	47960,		-- Shadowflame
	1715,		-- Hamstring
	12323,		-- Piercing Howl
	1604		-- Dazed 

				}
function isSlowed(unit)
for i=1,#PvPslows do
	if UnitDebuffID(unit,PvPslows[i]) ~= nil
		then
			return true
		end
	end
end


--Function Check Slow Immunes--
local immuneToSlowID 	= {
					-- DEATH KNIGHT
					-- DRUID
					-- HUNTER (Master's Call / Bestial Wrath)
						54216,
						19574,
					-- MAGE (Ice Block)
						45438,
					-- MONK
					-- PALADIN (Hand of Freedom / Hand of Protection / Divine Shield)
						1044,
						1022,
						642,
					-- PRIEST (Dispersion)
						47585,
					-- ROGUE
					-- SHAMAN (Windwalk Totem)
						114896,
					-- WARLOCK
					-- WARRIOR (Bladestorm)
						46924
				}
function immuneToSlow(unit)
for i=1,#immuneToSlowID do
	if UnitBuffID(unit,immuneToSlowID[i]) ~= nil
		then
			return true
		end
	end
end



local immunDMG = {
33786, -- Cyclone
113506, -- Cyclone
45438,	-- Ice Block
122464,		-- Dematerialize
122470,		-- touch of karma
110700,		-- Divine Shield (Paladin)
110696,		-- Ice Block (Mage)
19263,		-- Deterrence
45438,		-- Ice Block
642		-- Divine Shield
}
function iDMG()
return immunDMG
end

--Function Check Immunities--
local immuneID			= {
						110700, --Divine Shield
						1022, 	--Hand of Protection
						45438, 	--Ice Block
						31224,	--Cloak of Shadows
						19263, 	--Deterrence
						97417	--BrittleBarrier
}
function isImmune(unit)
	for i=1,#immuneID do
		if UnitBuffID(unit,immuneID[i]) ~= nil
			then
				return true
			end
		end
end


--Function Check Attack Power Buff--
local apBuff 			= {
							57330,	--Horn of Winter
							19506	--Trueshot Aura
							}
function hasApBuff()
for i=1,#apBuff do
	if UnitBuffID("player",apBuff[i]) ~= nil
		then
			return true
		end
	end
end

--Function Check if unit is CC'ed--
local ccIDs 			= { 
	108194,		-- Asphyxiate
	115001,		-- Remorseless Winter
	91800,		-- Gnaw
	91797,		-- Monstrous Blow (Dark Transformation)
	102795,		-- Bear Hug
	33786,		-- Cyclone
	99,			-- Disorienting Roar
	2637,		-- Hibernate
	22570,		-- Maim
	5211,		-- Mighty Bash
	9005,		-- Pounce
	110698,		-- Hammer of Justice 
	113004,		-- Intimidating Roar 
	113056,		-- Intimidating Roar 
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	1513,		-- Scare Beast
	19503,		-- Scatter Shot
	19386,		-- Wyvern Sting
	90337,		-- Bad Manner 
	24394,		-- Intimidation
	50519,		-- Sonic Blast 
	56626,		-- Sting 
	118271,		-- Combustion Impact
	44572,		-- Deep Freeze
	31661,		-- Dragon's Breath
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	82691,		-- Ring of Frost
	123393,		-- Breath of Fire 
	126451,		-- Clash
	122242,		-- Clash 
	119392,		-- Charging Ox Wave
	119381,		-- Leg Sweep
	115078,		-- Paralysis
	105421,		-- Blinding Light
	115752,		-- Blinding Light 
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	119072,		-- Holy Wrath
	20066,		-- Repentance
	10326,		-- Turn Evil
	113506,		-- Cyclone 
	605,		-- Dominate Mind
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	9484,		-- Shackle Undead
	87204,		-- Sin and Punishment
	2094,		-- Blind
	1833,		-- Cheap Shot
	1776,		-- Gouge
	408,		-- Kidney Shot
	113953,		-- Paralysis 
	6770,		-- Sap
	76780,		-- Bind Elemental
	77505,		-- Earthquake
	51514,		-- Hex
	118905,		-- Static Charge 
	118345,		-- Pulverize
	710,		-- Banish
	54786,		-- Demonic Leap
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	6789,		-- Mortal Coil
	30283,		-- Shadowfury
	104045,		-- Sleep 
	89766,		-- Axe Toss 
	115268,		-- Mesmerize 
	6358,		-- Seduction 
	7922,		-- Charge Stun
	118895,		-- Dragon Roar
	5246,		-- Intimidating Shout 
	20511,		-- Intimidating Shout 
	132168,		-- Shockwave
	105771,		-- Warbringer
	107079,		-- Quaking Palm
	13327,		-- Reckless Charge
	20549		-- War Stomp
}
function hasCC(unit)
for i=1,#ccIDs do
	if UnitDebuffID(unit,ccIDs[i]) ~= nil
		then
			return true
		end
	end
end					

--Function check if rooted--
local roots				= {
						96294,	--Chains Of Ice
						91807,	--ShamblingRush
						339,		-- Entangling Roots
						19975,		-- Entangling Roots (Nature's Grasp)
						45334,		-- Immobilized (Wild Charge - Bear)
						102359,		-- Mass Entanglement
						110693,		-- Frost Nova (Mage)
						19185,		-- Entrapment
						128405,		-- Narrow Escape
						50245,		-- Pin (Crab)
						54706,		-- Venom Web Spray (Silithid)
						4167,		-- Web (Spider)
						122,		-- Frost Nova
						111340,		-- Ice Ward
						116706,		-- Disable
						113275,		-- Entangling Roots (Symbiosis)
						123407,		-- Spinning Fire Bloss
						113275,		-- Entangling Roots (Symbiosis)
						87194,		-- Glyph of Mind Blast
						114404,		-- Void Tendril's Grasp
						115197,		-- Partial Paralysis
						64695,		-- Earthgrab (Earthgrab Totem)
						63685,		-- Freeze (Frozen Power)
						107566,		-- Staggering Shout
						39965,		-- Frost Grenade
						55536,		-- Frostweave Net
						13099		-- Net-o-Matic
}
function hasRoot(unit)
for i=1,#roots do
	if UnitDebuffID(unit,roots[i]) ~= nil
		then
			return true
		end
	end
end


local Stun = {
	-- Death Knight
	108194,		-- Asphyxiate
	115001,		-- Remorseless Winter
	-- Death Knight Ghoul
	91800,		-- Gnaw
	91797,		-- Monstrous Blow (Dark Transformation)
	-- Druid
	102795,		-- Bear Hug
	33786,		-- Cyclone
	99,		-- Disorienting Roar
	2637,		-- Hibernate
	22570,		-- Maim
	5211,		-- Mighty Bash
	9005,		-- Pounce
	--[dontknow] = "Snare",		-- Wild Mushroom: Detonate
	-- Druid Symbiosis
	110698,		-- Hammer of Justice (Paladin)
	113004,		-- Intimidating Roar [Fleeing in fear] (Warrior)
	113056,		-- Intimidating Roar [Cowering in fear] (Warrior)
	-- Hunter
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	1513,		-- Scare Beast
	19503,		-- Scatter Shot
	19386,		-- Wyvern Sting
	-- Hunter Pets
	90337,		-- Bad Manner (Monkey)
	24394,		-- Intimidation
	50519,		-- Sonic Blast (Bat)
	56626,		-- Sting (Wasp)
	-- Mage
	118271,		-- Combustion Impact
	44572,		-- Deep Freeze
	31661,		-- Dragon's Breath
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	82691,		-- Ring of Frost
	-- Monk
	123393,		-- Breath of Fire (Glyph of Breath of Fire)
	126451,		-- Clash
	122242,		-- Clash (not sure which one is right)
	119392,		-- Charging Ox Wave
	119381,		-- Leg Sweep
	115078,		-- Paralysis
	-- Paladin
	105421,		-- Blinding Light
	115752,		-- Blinding Light (Glyph of Blinding Light)
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	119072,		-- Holy Wrath
	20066,		-- Repentance
	10326,		-- Turn Evil
	-- Priest
	113506,		-- Cyclone (Symbiosis)
	605,		-- Dominate Mind
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror (Psyfiend)
	9484,		-- Shackle Undead
	87204,		-- Sin and Punishment
	-- Rogue
	2094,		-- Blind
	1833,		-- Cheap Shot
	1776,		-- Gouge
	408,		-- Kidney Shot
	113953,		-- Paralysis (Paralytic Poison)
	6770,		-- Sap
	-- Shaman
	76780,		-- Bind Elemental
	77505,		-- Earthquake
	51514,		-- Hex
	118905,		-- Static Charge (Capacitor Totem)
	-- Shaman Primal Earth Elemental
	118345,		-- Pulverize
	-- Warlock
	710,		-- Banish
	111397,		-- Blood Fear - is this actually used? please test
	54786,		-- Demonic Leap (Metamorphosis)
	--5782,		-- Fear
	118699,		-- Fear
	5484,		-- Howl of Terror
	6789,		-- Mortal Coil
	30283,		-- Shadowfury
	104045,		-- Sleep (Metamorphosis)
	-- Warlock Pets
	89766,		-- Axe Toss (Felguard/Wrathguard)
	115268,		-- Mesmerize (Shivarra)
	6358,		-- Seduction (Succubus)
	-- Warrior
	7922,		-- Charge Stun
	--96273,		-- Charge Stun?
	118895,		-- Dragon Roar
	5246,		-- Intimidating Shout (Cowering in fear)
	20511,		-- Intimidating Shout (Cowering in fear)
	--97933,		-- Intimidating Shout (Cowering in fear) - used?
	--97934,		-- Intimidating Shout (Intimidated) - used?
	--46968,		-- Shockwave?
	132168,		-- Shockwave
	105771,		-- Warbringer
	-- Other
	30217,		-- Adamantite Grenade
	67769,		-- Cobalt Frag Bomb
	30216,		-- Fel Iron Bomb
	107079,		-- Quaking Palm
	13327,		-- Reckless Charge
	20549		-- War Stomp
}

local cccheck1 = {
108194,		-- Asphyxiate
	115001,		-- Remorseless Winter
	91800,		-- Gnaw
	91797,		-- Monstrous Blow (Dark Transformation)
	102795,		-- Bear Hug
	33786,		-- Cyclone
	99,			-- Disorienting Roar
	2637,		-- Hibernate
	22570,		-- Maim
	5211,		-- Mighty Bash
	9005,		-- Pounce
	110698,		-- Hammer of Justice 
	113004,		-- Intimidating Roar 
	113056,		-- Intimidating Roar 
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	1513,		-- Scare Beast
	19503,		-- Scatter Shot
	19386,		-- Wyvern Sting
	90337,		-- Bad Manner 
	24394,		-- Intimidation
	50519,		-- Sonic Blast 
	56626,		-- Sting 
	118271,		-- Combustion Impact
	44572,		-- Deep Freeze
	31661,		-- Dragon's Breath
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	82691,		-- Ring of Frost
	123393,		-- Breath of Fire 
	126451,		-- Clash
	122242,		-- Clash 
	119392,		-- Charging Ox Wave
	119381,		-- Leg Sweep
	115078,		-- Paralysis
	105421,		-- Blinding Light
	115752,		-- Blinding Light 
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	119072,		-- Holy Wrath
	20066,		-- Repentance
	10326,		-- Turn Evil
	113506,		-- Cyclone 
	605,		-- Dominate Mind
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	9484,		-- Shackle Undead
	87204,		-- Sin and Punishment
	2094,		-- Blind
	1833,		-- Cheap Shot
	1776,		-- Gouge
	408,		-- Kidney Shot
	113953,		-- Paralysis 
	6770,		-- Sap
	76780,		-- Bind Elemental
	77505,		-- Earthquake
	51514,		-- Hex
	118905,		-- Static Charge 
	118345,		-- Pulverize
	710,		-- Banish
	54786,		-- Demonic Leap
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	6789,		-- Mortal Coil
	30283,		-- Shadowfury
	104045,		-- Sleep 
	89766,		-- Axe Toss 
	115268,		-- Mesmerize 
	6358,		-- Seduction 
	7922,		-- Charge Stun
	118895,		-- Dragon Roar
	5246,		-- Intimidating Shout 
	20511,		-- Intimidating Shout 
	132168,		-- Shockwave
	105771,		-- Warbringer
	107079,		-- Quaking Palm
	13327,		-- Reckless Charge
	20549		-- War Stomp
}

function cccheck()
return cccheck1
end

local druidcheck1 = {
783,
768,
5487,
49039,
33891,
}

function druidcheck()
return druidcheck1
end


function hasStun(unit)
for i=1,#Stun do
	if UnitDebuffID(unit,Stun[i]) ~= nil
		then
			return true
		end
	end
end






local GroundCast		= { 
					-- DEATH KNIGHT
					-- DRUID
						33786,		-- Cyclone 
					-- HUNTER
					-- MAGE
						28272,		-- Pig
						118,		-- Sheep
						61305,		-- Cat
						61721,		-- Rabbit
						61780,		-- Turkey
						28271,		-- Turtle  
					-- MONK
					-- PALADIN
						20066,		-- Repentance 
					-- PRIEST  
					-- ROGUE
					-- SHAMAN
						51514,		-- Hex  
					-- WARLOCK
						5782,		-- Fear
						118699,		-- Fear
						116858		-- Chaos Bolt 
					-- WARRIOR
}
	

function UseGrounding(unit)
	if UnitCastingInfo(unit) ~= nil
	and UnitIsEnemy("player", unit) ~= nil  
	and select(2,GetSpellCooldown(8177)) == 0  then
		for i=1, #GroundCast do
			if UnitCastingInfo(unit) == GetSpellInfo(GroundCast[i]) then
				return true
			end
		end 
	end
end




--Custom Target Tables--							
arenaTars				= { "arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
							}
custTars 				= {"target",
							"focus",
							"arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
						 }					 
totemTars 				= {"Spirit Link Totem",
						"Healing Tide Totem",
						"Mana Tide Totem",
						"Capacitor Totem",
						"Earthgrab Totem",
						"Earthbind Totem",
						"Stone Bulwark Totem"
						}
						
---GroupInfo--
function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end
 
 
function CanHeal(t)
  if UnitCanCooperate("player",t)
  and not UnitIsEnemy("player",t) 
  and not UnitIsCharmed(t)
  and not UnitIsDeadOrGhost(t)
  and not PQR_IsOutOfSight(t,1)
  and not UnitDebuffID(t,33786) 
  and not UnitDebuffID(t,122370)
  then
  	return true
  end 
end

function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) ) / UnitHealthMax(t)
end

function IsHealer(t)
local class = select(2, UnitClass(t))
if (class == "DRUID" or class =="PALADIN" or class =="PRIEST" or class =="MONK" or class =="SHAMAN")
and UnitPowerMax(t) >= 290000
and not UnitBuffID(t, 24858)
and not UnitBuffID(t, 15473)
and not UnitBuffID(t, 324)
then
return true
end
end

  

--function GroupInfo()
--  members, group = { { Unit = "player", HP = CalculateHP("player"), UTT = "playertarget" } }, { low = 0 } 
--  group.type = IsInRaid() and "raid" or "party" 
--  group.number = GetNumGroupMembers()
--  for i=1,group.number do
--  if CanHeal(group.type..i)
--  then 
--    local unit, hp, utt = group.type..i, CalculateHP(group.type..i), group.type..i.."target" 
--    table.insert( members,{ Unit = unit, HP = hp , UTT = utt} ) 
--    if hp < 98
--    then
--   	group.low = group.low + 1 
--   end 
--  end
--  end 
--  if group.type == "raid"
--  and #members > 1
--  then 
-- 	table.remove(members,1) 
--  end 
--  table.sort(members, function(x,y) return x.HP < y.HP end)
--  local customtarget = CanHeal("target") and ("target") -- or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
--  	if customtarget
--  	then
--	  table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) 
--	end 
--end

function GroupInfo()
  members, group = { { Unit = "player", HP = CalculateHP("player"), IsPlayer = true } }, { low = 0, tanks = { } } 
  group.type = IsInRaid() and "raid" or "party" 
  group.number = GetNumGroupMembers()
  for i=1,group.number do if CanHeal(group.type..i) then 
    local unit, hp = group.type..i, CalculateHP(group.type..i) 
    table.insert( members,{ Unit = unit, HP = hp, IsPlayer = true } ) 
    if hp <= 94 then group.low = group.low + 1 end 
    if UnitGroupRolesAssigned(unit) == "TANK" then table.insert(group.tanks,unit) end   
  end end 
  if group.type == "raid" and #members > 1 then table.remove(members,1) end 
  
  
 -- Checking Pets in the group
 for i=1,group.number do
		if CanHeal(group.type..i.."pet") then
			local memberpet, memberpethp = nil, nil
			if UnitAffectingCombat("player") then
				 memberpet = group.type..i.."pet" 
				 memberpethp = CalculateHP(group.type..i.."pet") 
			else
				 memberpet = group.type..i.."pet"
				 memberpethp = CalculateHP(group.type..i.."pet")
			end
			
			table.insert(members, { Unit = memberpet, HP = memberpethp, IsPlayer = false } )
		end
  end
  
  
  table.sort(members, function(x,y) return x.HP < y.HP end)
  local customtarget = CanHeal("target") and "target" -- or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
  if customtarget then table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) end 
end

GroupInfo()

---EndGroupInfo
  

  -- Checks if our Cleanse will have a valid Debuff to Cleanse
  function ValidDispel(t)
  	local HasValidDispel = false
  	local i = 1
  	local debuff = UnitDebuff(t, i)
  	while debuff do
  		local debuffType = select(5, UnitDebuff(t, i))
  		if debuffType == "Curse" then
  			HasValidDispel = true
  		end
  		i = i + 1
  		debuff = UnitDebuff(t, i)
  	end
  	return HasValidDispel
  end
  
if SetFunctions == nil then


	-- Nova Notification Frame
	-- Update Debug Frame
	Nova_NotifyFrame = nil
	function Nova_NotifyFrame_OnUpdate()
		if (Nova_NotifyFrameTime < GetTime() - 0.2) then
			local alpha = Nova_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then Nova_NotifyFrame:SetAlpha(alpha - .5) end
			if (aplha == 0) then Nova_NotifyFrame:Hide() end
		end
	end
	-- Debug messages.
	function Nova_Notify(message)
		Nova_NotifyFrame.text:SetText(message)
		Nova_NotifyFrame:SetAlpha(1)
		Nova_NotifyFrame:Show()
		Nova_NotifyFrameTime = GetTime()
	end
	-- Debug Notification Frame
	Nova_NotifyFrame = CreateFrame('Frame')
	Nova_NotifyFrame:ClearAllPoints()
	Nova_NotifyFrame:SetHeight(300)
	Nova_NotifyFrame:SetWidth(300)
	Nova_NotifyFrame:SetScript('OnUpdate', Nova_NotifyFrame_OnUpdate)
	Nova_NotifyFrame:Hide()
	Nova_NotifyFrame.text = Nova_NotifyFrame:CreateFontString(nil, 'BACKGROUND', 'PVPInfoTextFont')
	Nova_NotifyFrame.text:SetAllPoints()
	Nova_NotifyFrame:SetPoint('LEFT', 40, - 75)
	Nova_NotifyFrameTime = 0
	
	function CastClick()
		if IsMouseButtonDown(1) 
	  	  and MainMenuBar:IsShown() then
	  		local mousefocus = GetMouseFocus()
			if mousefocus 
			  and mousefocus.feedback_action then 
		  		SpellCancelQueuedSpell() 
		  		PQR_DelayRotation(1) 
		  	end
		end 	
	end
	
	-- xrn Chat Overlay 
	local function onUpdate(self,elapsed) 
	  if self.time < GetTime() - 2.8 then
	    if self:GetAlpha() == 0 then self:Hide() else self:SetAlpha(self:GetAlpha() - .05) end
	  end
	end
	xrn = CreateFrame("Frame",nil,ChatFrame1) 
	xrn:SetSize(ChatFrame1:GetWidth(),30)
	xrn:Hide()
	xrn:SetScript("OnUpdate",onUpdate)
	xrn:SetPoint("TOP", UIParent, "TOP", 0, -200)
	xrn.text = xrn:CreateFontString(nil,"OVERLAY","MovieSubtitleFont")
	xrn.text:SetAllPoints()
	xrn.texture = xrn:CreateTexture()
	xrn.texture:SetAllPoints()
	xrn.texture:SetTexture(0,0,0,.50) 
	xrn.time = 0
	function xrn:message(message) 
	  self.text:SetText(message)
	  self:SetAlpha(1)
	  self.time = GetTime() 
	  self:Show() 
	end
	
		local function onUpdate(self,elapsed) 
	  if self.time < GetTime() - 2.8 then
	    if self:GetAlpha() == 0 then self:Hide() else self:SetAlpha(self:GetAlpha() - .05) end
	  end
	end
	cokx = CreateFrame("Frame",nil,ChatFrame1) 
	cokx:SetSize(ChatFrame1:GetWidth(),40)
	cokx:Hide()
	cokx:SetScript("onUpdate",onUpdate)
	cokx:SetPoint("TOP",0,60)
	cokx.text = cokx:CreateFontString(nil,"OVERLAY","ZoneTextFont")
	cokx.text:SetAllPoints()
	cokx.text:SetTextHeight(15)
	cokx.texture = cokx:CreateTexture()
	cokx.texture:SetAllPoints()
	cokx.texture:SetTexture(0,0,0,0.3) 
	cokx.time = 0
	function cokx:message(message) 
	  self.text:SetText(message)
	  self:SetAlpha(1)
	  self.time = GetTime() 
	  self:Show() 
	end
	
	Nova_CustomT = { }
	
	  SetFunctions = true

end
  
local immunSpell = {
48707,	-- Anti-Magic Shell
110570,	-- Anti-Magic Shell (Death Knight)
110788,	-- Cloak of Shadows (Rogue)
113002,	-- Spell Reflection (Warrior)
115760,	-- Glyph of Ice Block
131523,	-- Zen Meditation
114239,	-- Phantasm
31224,	-- Cloak of Shadows
8178,	-- Grounding Totem Effect (Grounding Totem)
23920,	-- Spell Reflection
114028	-- Mass Spell Reflection
}
function iSpell()
return immunSpell
end

function onOff(Question)
if Question == 1 then
return "\124cA500EE00On\124r" else return "\124cA5FF0000Off\124r" end
end

function IsMelee(Ctarget)
local class = select(2, UnitClass(Ctarget))
if (class == "DRUID" or class =="PALADIN" or class =="WARRIOR" or class =="MONK" or class =="SHAMAN" or class =="DEATHKNIGHT" or class =="ROGUE" )
and UnitPowerMax(Ctarget) < 70000
then
return true
end
end