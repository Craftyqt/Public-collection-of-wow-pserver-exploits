if not PQR_LoadedDataFile then
	PQR_LoadedDataFile = 1
	print("|cffFFBE69Cpoworks Paladin PvP Data File - v1.0 - Augest 20, 2013|cffffffff")
end
PQR_Spec = GetSpecialization()




if not PQILoaded then
	PQILoaded = true	
	
	
		-- PQInterface Settings
		local config = {
			name	= "Ret PvP Config Settings",
			author	= "Cpoworks",
			abilities	= {
				{ 	name	= "Auto Freedom",
					enable	= true,
				}, 
				{ 	name	= "Auto Emancipate",
					enable	= true,
				}, 
				{ 	name	= "Auto Interupt",
					enable	= true,
				}, 
				{ 	name	= "Divine Protection", newSection = true,
					enable	= true,
					widget	= { type = "numBox",
						value	= 50,
						step	= 5, 
					},
				}, 
				{ 	name	= "Bubble",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 35,
						step	= 5, 
					},
				},
				{ 	name	= "Healthstone", 
					enable	= true,
					widget	= { type = "numBox",
						value	= 40,
						step	= 5,
						tooltip	= "Set automatic Healthstone usage.",
					},
				}, 
				{ 	name	= "Word of Glory HP", newSection = true,
					enable	= true,
					widget	= { type = "numBox",
						value	= 80,
						step	= 5, 
					},
				}, 
				{ 	name	= "Fol Selfless Healer HP", 
					enable	= true,
					widget	= { type = "numBox",
						value	= 80,
						step	= 5, 
					},
				}, 
			},
			hotkeys = {
				{	name	= "Pause Rotation",
					enable	= true,
					hotkeys	= {'ls'},
				},
				{	name	= "Flash of Light",
					enable	= true,
					hotkeys	= {'la'},
				},
				{	name	= "Bop Key",
					enable	= true,
					hotkeys	= {'lc'},
				},  
				{	name	= "Burst Key", 
					enable	= false,
					hotkeys	= {'ra'},
				},
				{	name	= "HoJ Key",
					enable	= false,
					hotkeys	= {'ra'},
				}, 
				{	name	= "Blind Key",
					enable	= false,
					hotkeys	= {'ra'},
				}, 
			},
		}
		
		
		-- PQInterface Settings
		local config2 = {
			name	= "Sac and Bop Settings",
			author	= "Cpoworks",
			abilities	= {
				{ 	name	= "Auto Sac", newSection = true,
					enable	= true,
				}, 
				{	name = "Sac Target",
					enable = false,
					widget = { 
						type = 'txtBox',
						value = "Name",
					},
				},
				{ 	name	= "Trap",
					enable	= true,
				}, 
				{ 	name	= "Sheep",
					enable	= true,
				}, 
				{ 	name	= "Fear",
					enable	= true,
				}, 
				{ 	name	= "HoJ",
					enable	= true,
				}, 
				{ 	name	= "Auto BoP", newSection = true,
					enable	= true,
				}, 
				{ 	name	= "Blind",
					enable	= true,
				}, 
				{ 	name	= "Low HP BoP",
					enable	= true,
					widget	= { type = "numBox",
						value	= 30,
						step	= 5, 
					},
				}, 
			},
		}
		
		CPOWORKS_RETPVPHEAL = PQI:AddRotation(config2)
		CPOWORKS_RETPVPCONFIG = PQI:AddRotation(config)
	

	
end

if not tLOS then tLOS={} end
if not fLOS then fLOS=CreateFrame("Frame") end

	function LineOfSight(target)
		local updateRate=1
		fLOS:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
		function fLOSOnEvent(self,event,...)
			if event=="COMBAT_LOG_EVENT_UNFILTERED" then
				local cLOG={...}
				if cLOG[2]=="SPELL_CAST_FAILED" then
					if cLOG[4]==UnitGUID("player") then 
						if cLOG[15]==SPELL_FAILED_LINE_OF_SIGHT then
							tinsert(tLOS,{unit=target,time=GetTime()})
						end
					end
				else
					table.sort(tLOS,function(x,y) return x.time>y.time end)
					for i=1,#tLOS do
						local time=tLOS[i].time or GetTime()
						if GetTime()>time+updateRate then
							tremove(tLOS,i)
						end
					end
				end
			end
		end
		fLOS:SetScript("OnEvent",fLOSOnEvent)
		for i=1,#tLOS do
			if tLOS[i].unit==target then
				return true
			end
		end
	end

	
if not cTar
then
	cTar = {"target","focus","mouseover","arena1","arena2","arena3","arena4","arena5","arenapet1","arenapet2","arenapet3","arenapet4","arenapet5","pettarget"}
end

--Custom Target Tables--							
arenaTars				= { "arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
							}

GlyphCheck = nil
function GlyphCheck(glyphid)
	for i=1, 6 do
		if select(4, GetGlyphSocketInfo(i)) == glyphid then
			return true
		end
	end
	return false
end
 
  
--Variables--
local PvPslows 			= {
	45524,		-- Chains of Ice
	50435,		-- Chilblains
	115000,		-- Remorseless Winter
	50259,		-- Dazed 
	58180,		-- Infected Wounds
	61391,		-- Typhoon
	127797,		-- Ursol's Vortex
	82941,		-- Ice Trap (Hunter)
	135299,		-- IceTrap Debuff
	35101,		-- Concussive Barrage
	5116,		-- Concussive Shot
	61394,		-- Frozen Wake 
	13810,		-- Ice Trap
	50433,		-- Ankle Crack 
	54644,		-- Frost Breath 
	121288,		-- Chilled 
	120,		-- Cone of Cold
	116,		-- Frostbolt
	44614,		-- Frostfire Bolt
	113092,		-- Frost Bomb
	31589,		-- Slow
	116095,		-- Disable
	118585,		-- Leer of the Ox
	123727,		-- Dizzying Haze
	123586,		-- Flying Serpent Kick
	110300,		-- Burden of Guilt
	63529,		-- Dazed - Avenger's Shield
	20170,		-- Seal of Justice
	15407,		-- Mind Flay
	3409,		-- Crippling Poison
	26679,		-- Deadly Throw
	119696,		-- Debilitation
	3600,		-- Earthbind 
	77478,		-- Earthquake 
	8034,		-- Frostbrand Attack
	8056,		-- Frost Shock
	51490,		-- Thunderstorm
	18223,		-- Curse of Exhaustion
	47960,		-- Shadowflame
	1715,		-- Hamstring
	12323,		-- Piercing Howl
	1604		-- Dazed 

				}		
local immuneToSlowID 	= {
					-- DEATH KNIGHT
					-- DRUID
					-- HUNTER (Master's Call / Bestial Wrath)
						54216,
						19574,
					-- MAGE (Ice Block)
						45438,
					-- MONK
					-- PALADIN (Hand of Freedom / Hand of Protection / Divine Shield)
						1044,
						1022,
						642,
					-- PRIEST (Dispersion)
						47585,
					-- ROGUE
					-- SHAMAN (Windwalk Totem)
						114896,
					-- WARLOCK
					-- WARRIOR (Avatar / Bladestorm)
						107574,
						46924
				}					


local immuneID			= {
						110700, --Divine Shield
						1022, --Hand of Protection
						45438, --Ice Block
						31224,--Cloak of Shadows
						19263, --Deterrence
						97417--BrittleBarrier
}
local apBuff 			= {
57330,--Horn of Winter
19506--Trueshot Aura
}
local ccIDs 			= { 
	108194,		-- Asphyxiate
	115001,		-- Remorseless Winter
	91800,		-- Gnaw
	91797,		-- Monstrous Blow (Dark Transformation)
	102795,		-- Bear Hug
	33786,		-- Cyclone
	99,			-- Disorienting Roar
	2637,		-- Hibernate
	22570,		-- Maim
	5211,		-- Mighty Bash
	9005,		-- Pounce
	110698,		-- Hammer of Justice 
	113004,		-- Intimidating Roar 
	113056,		-- Intimidating Roar 
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	1513,		-- Scare Beast
	19503,		-- Scatter Shot
	19386,		-- Wyvern Sting
	90337,		-- Bad Manner 
	24394,		-- Intimidation
	50519,		-- Sonic Blast 
	56626,		-- Sting 
	118271,		-- Combustion Impact
	44572,		-- Deep Freeze
	31661,		-- Dragon's Breath
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	82691,		-- Ring of Frost
	123393,		-- Breath of Fire 
	126451,		-- Clash
	122242,		-- Clash 
	119392,		-- Charging Ox Wave
	119381,		-- Leg Sweep
	115078,		-- Paralysis
	105421,		-- Blinding Light
	115752,		-- Blinding Light 
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	119072,		-- Holy Wrath
	20066,		-- Repentance
	10326,		-- Turn Evil
	113506,		-- Cyclone 
	605,		-- Dominate Mind
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	9484,		-- Shackle Undead
	87204,		-- Sin and Punishment
	2094,		-- Blind
	1833,		-- Cheap Shot
	1776,		-- Gouge
	408,		-- Kidney Shot
	113953,		-- Paralysis 
	6770,		-- Sap
	76780,		-- Bind Elemental
	77505,		-- Earthquake
	51514,		-- Hex
	118905,		-- Static Charge 
	118345,		-- Pulverize
	710,		-- Banish
	54786,		-- Demonic Leap
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	6789,		-- Mortal Coil
	30283,		-- Shadowfury
	104045,		-- Sleep 
	89766,		-- Axe Toss 
	115268,		-- Mesmerize 
	6358,		-- Seduction 
	7922,		-- Charge Stun
	118895,		-- Dragon Roar
	5246,		-- Intimidating Shout 
	20511,		-- Intimidating Shout 
	132168,		-- Shockwave
	105771,		-- Warbringer
	107079,		-- Quaking Palm
	13327,		-- Reckless Charge
	20549		-- War Stomp
}

local dispellableCC = {
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	105593,		-- Fist of Justice
	110698,		-- Hammer of Justice 
	113004,		-- Intimidating Roar 
	113056,		-- Intimidating Roar 
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
}



local roots				= {
						96294,	--Chains Of Ice
						91807,	--ShamblingRush
						339,		-- Entangling Roots
						19975,		-- Entangling Roots (Nature's Grasp)
						45334,		-- Immobilized (Wild Charge - Bear)
						102359,		-- Mass Entanglement
						110693,		-- Frost Nova (Mage)
						19185,		-- Entrapment
						128405,		-- Narrow Escape
						50245,		-- Pin (Crab)
						54706,		-- Venom Web Spray (Silithid)
						4167,		-- Web (Spider)
						122,		-- Frost Nova
						111340,		-- Ice Ward
						116706,		-- Disable
						113275,		-- Entangling Roots (Symbiosis)
						123407,		-- Spinning Fire Bloss
						113275,		-- Entangling Roots (Symbiosis)
						87194,		-- Glyph of Mind Blast
						114404,		-- Void Tendril's Grasp
						115197,		-- Partial Paralysis
						64695,		-- Earthgrab (Earthgrab Totem)
						63685,		-- Freeze (Frozen Power)
						107566,		-- Staggering Shout
						39965,		-- Frost Grenade
						55536,		-- Frostweave Net
						13099		-- Net-o-Matic
}


custTars 				= {"target",
							"focus",
							"arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
							}
totemTars 			= {"Spirit Link Totem",
						"Healing Tide Totem",
						"Mana Tide Totem",
						"Capacitor Totem",
						"Earthgrab Totem"
						}
					



function inMelee()
	if UnitAffectingCombat("player") ~= nil
	and IsSpellInRange(GetSpellInfo(35395),"target") == 1
	and UnitExists("target") ~= nil
	and UnitCanAttack("player","target") ~= nil
	then return true
	end
end


function hasDispellableCC(unit)
for i=1,#dispellableCC do
	if UnitDebuffID(unit,dispellableCC[i]) ~= nil
	and UnitName(unit) ~= UnitName("player")
	and select(7,UnitDebuffID(unit,dispellableCC[i])) - GetTime() > 3
		then
			return true
		end
	end
end

function hasCC(unit)
for i=1,#ccIDs do
	if UnitDebuffID(unit,ccIDs[i]) ~= nil
		then
			return true
		end
	end
end


function isSlowed(unit)
for i=1,#PvPslows do
	if UnitDebuffID(unit,PvPslows[i]) ~= nil
		then
			return true
		end
	end
end

function hasRoot(unit)
for i=1,#roots do
	if UnitDebuffID(unit,roots[i]) ~= nil
		then
			return true
		end
	end
end


function immuneToSlow(unit)
for i=1,#immuneToSlowID do
	if UnitBuffID(unit,immuneToSlowID[i]) ~= nil
		then
			return true
		end
	end
end





function isImmune(unit)
	for i=1,#immuneID do
		if UnitBuffID(unit,immuneID[i]) ~= nil
			then
				return true
			end
		end
end

--CastSpell--
function _castSpell(spellid,tar)
	if UnitCastingInfo("player") == nil
	and UnitChannelInfo("player") == nil
	and IsPlayerSpell(spellid) == true
	and cdRemains(spellid) == 0
	then
		if tar ~= nil
		and rangeCheck(spellid,tar) == nil
			then
			return false
		elseif tar ~= nil
		and rangeCheck(spellid,tar) == true
			then
			CastSpellByName(GetSpellInfo(spellid),tar)
			return true
		elseif tar == nil
			then
			CastSpellByName(GetSpellInfo(spellid))
			return true
		else
	return false
	end
end
end


--Combat Check--
function inCombat()
if UnitAffectingCombat("player") ~= nil
	then
		return true
	end
end

--Get HP simple--
function getHp(unit)
if UnitExists(unit) ~= nil
	then
		return 100 * UnitHealth(unit) / UnitHealthMax(unit)
	end
end

--Range Check Simple--
function rangeCheck(spellid,unit)
if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
then
	return true
end
end


--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) > 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end



function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) + incomingheals ) / UnitHealthMax(t)
end

function CanHeal(t)
  if UnitInRange(t) and UnitCanCooperate("player",t) and not UnitIsEnemy("player",t) 
  and not UnitIsCharmed(t) and not UnitIsDeadOrGhost(t) and not PQR_IsOutOfSight(t) 
  and UnitExists(t)
  then return true end 
end

function GroupInfo()
  members, group = { { Unit = "player", HP = CalculateHP("player") } }, { low = 0, tanks = { } } 
  group.type = IsInRaid() and "raid" or "party" 
  group.number = GetNumGroupMembers()
  for i=1,group.number do if CanHeal(group.type..i) then 
    local unit, hp = group.type..i, CalculateHP(group.type..i) 
    table.insert( members,{ Unit = unit, HP = hp } ) 
    if hp <= 94 then group.low = group.low + 1 end 
    if UnitGroupRolesAssigned(unit) == "TANK" then table.insert(group.tanks,unit) end 
  end end 
  if group.type == "raid" and #members > 1 then table.remove(members,1) end 
  table.sort(members, function(x,y) return x.HP < y.HP end)
  local customtarget = CanHeal("target") and "target" -- or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
  if customtarget then table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) end 
end

function CastClick()
  if IsMouseButtonDown(1) and MainMenuBar:IsShown() then 
    local mousefocus = GetMouseFocus() 
    if mousefocus and mousefocus.feedback_action 
    then SpellCancelQueuedSpell() PQR_DelayRotation(1) end
  end
end

GroupInfo() 

  -- Checks if our Cleanse will have a valid Debuff to Cleanse
  function ValidDispel(t)
  		local HasValidDispel = false
  		local i = 1
  		local debuff = UnitDebuff(t, i)
  		while debuff do
  			local debuffType = select(5, UnitDebuff(t, i))
  			if debuffType == "Poison" 
  			or debuffType == "Disease" then
  				HasValidDispel = true
  			end
  			i = i + 1
  			debuff = UnitDebuff(t, i)
  		end
  		return HasValidDispel
 	 end

 	 
 	 
local SacSheepIDs = {
					118,
					61305,
					28272,
					61721,
					61780,
					28271,
				}
				
function SacSheeps(t)
	for i = 1, #SacSheepIDs do
		local CC, _, _, _, _, Dur = UnitDebuffID(t, SacSheepIDs[i])
		if CC
		and Dur >= 6 then 
			return true				
		end
	end	
end

	
local SacTarpIDs = {
					3355
				}
				
function SacTraps(t)
	for i = 1, #SacTarpIDs do
		local CC, _, _, _, _, Dur = UnitDebuffID(t, SacTarpIDs[i])
		if CC
		and Dur >= 6 then 
			return true				
		end
	end	
end
	
	
local SacFearIDs = {
					8122,
					5782,
					118699,
					5484
				}
				
function SacFears(t)
	for i = 1, #SacFearIDs do
		local CC, _, _, _, _, Dur = UnitDebuffID(t, SacFearIDs[i])
		if CC
		and Dur >= 6 then 
			return true				
		end
	end	
end	
	
	
local SacHojIDs = {
					105593,
					853
				}
				
function SacHojs(t)
	for i = 1, #SacHojIDs do
		local CC, _, _, _, _, Dur = UnitDebuffID(t, SacHojIDs[i])
		if CC
		and Dur >= 6 then 
			return true				
		end
	end	
end 	 
 	 
 	 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	