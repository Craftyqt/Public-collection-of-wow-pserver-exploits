if not PQR_LoadedDataFile then
	PQR_LoadedDataFile = 1
	print("|cffFFBE69SigHunterPvP Data File FULL PIKK, 2013|cffffffff")
      print("|cffFFBE69  Stopp pikken Ã¦i vil av|cffffffff")
end


if not cTar
then
	cTar = {"target","focus","mouseover","arena1","arena2","arena3","arena4","arena5","arenapet1","arenapet2","arenapet3","arenapet4","arenapet5","pettarget"}
end

PQR_Spec = GetSpecialization()
class = select(2, UnitClass("player"))
if PQR_Spec == 1 
or PQR_Spec == 3
or PQR_Spec == 2
and class == "HUNTER" then
-- PQInterface Settings
	local config = {
		name	= "Hunter",
		author	= "Sig",
		abilities = {	 
			{ 	name	= "Auto Target",
				tooltip	= "Enable/Disable Target Tank Target",
				enable	= false,
			},
			{ 	name	= "Auto Focus",
				tooltip	= "Enable/Disable Auto Focus Healers in range",
				enable	= false,
			},
			{ 	name	= "Full Pikk",
				tooltip	= "Enable/Disable Use all Cds available With Beastial Wrath",
				enable	= false,
			},
			{ 	name	= "Auto Wyvern",
				tooltip	= "Enable/Disable Auto Wyvern sting on Focus after trap",
				enable	= false,
			},
			{ 	name	= "Auto Beast",
				tooltip	= "Enable/Disable Auto Beast CC",
				enable	= false,
			},
			{ 	name	= "Healthstone",
				enable	= true,
				widget	= { type = "numBox",
					value	= 30,
					step	= 5,
					tooltip	= "Healthstone",
				},
			}, 
			{ 	name	= "Pet Follow",
				enable	= true,
				widget	= { type = "numBox",
					value	= 15,
					step	= 5,
					max = 105,
                    min = 0,
					tooltip	= "Auto Follow Pet when low hp",
				},
			}, 
			{ 	name	= "Exhilaration",
				enable	= true,
				widget	= { type = "numBox",
					value	= 30,
					step	= 5,
					tooltip	= "HP to cast Exhilaration",
				},
			}, 
			{ 	name	= "Exhilaration Pet",
				enable	= true,
				widget	= { type = "numBox",
					value	= 80,
					step	= 5,
					tooltip	= "HP to Exhilaration Pet.",
				},
			},
		},
		hotkeys = {   
			{	name	= "Burst Key",
				enable	= true,
				hotkeys	= {'lc'},
			},
			{	name	= "Aoe Key",
				enable	= true,
				hotkeys	= {'la'},
			},
		},
	}
		Sig_Hunter = PQI:AddRotation(config)
end		


if not IsLineOfSight then
        LoSTable = { }
        function IsLineOfSight(targetCheck, time)
            local time=time or 3
            targetGUID = UnitGUID(targetCheck) or 0    
    
             for i=1, #LoSTable do
                 if time < (GetTime() - LoSTable[i].time) then
                     table.remove(LoSTable, i)
                     break
                 end
            end
    
             function LoSCheck(self, event, ...)
                 local targetGUID = targetGUID
                 local Log = {...}
                 local AlreadyTabled = false
                 if Log[2] and Log[2] == "SPELL_CAST_FAILED" and targetGUID then
                     if Log[4] and Log[4]==UnitGUID("player") then
                         if Log[15] and Log[15]==SPELL_FAILED_LINE_OF_SIGHT then
                             for j=1, #LoSTable do
                                 if targetGUID == LoSTable[j].unit then
                                     AlreadyTabled = true
                                     break
                                 end
                             end
                             if not AlreadyTabled then
                                 table.insert(LoSTable, { unit=targetGUID, time=GetTime() } )
                                 targetGUID = nil
                                 _G.NovaLineOfSight:UnregisterAllEvents()
                             end
                         end
                     end
                 end
                 
             end
    
            if not NovaLineOfSight then
                 frameLOS = CreateFrame("frame", "NovaLineOfSight")
                 frameLOS:SetScript("OnEvent", LoSCheck)
            end
            
             for k=1, #LoSTable do
                  if targetGUID and targetGUID == LoSTable[k].unit then
                     return false
                 end
            end
            
            
            _G.NovaLineOfSight:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
            return true
    
        end
    end  

--if not tLOS then tLOS={} end
--if not fLOS then fLOS=CreateFrame("Frame") end

--	function LineOfSight(target)
--		local updateRate=1
--		fLOS:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
--		function fLOSOnEvent(self,event,...)
--			if event=="COMBAT_LOG_EVENT_UNFILTERED" then
--				local cLOG={...}
--				if cLOG[2]=="SPELL_CAST_FAILED" then
--					local player=UnitGUID("player") or ""
--					if cLOG[4]==player then 
--						if cLOG[15]==SPELL_FAILED_LINE_OF_SIGHT then
--							tinsert(tLOS,{unit=target,time=GetTime()})
--						end
--					end
--				else
--					table.sort(tLOS,function(x,y) return x.time>y.time end)
--					for i=1,#tLOS do
--						local time=tLOS[i].time or GetTime()
--						if GetTime()>time+updateRate then
--							tremove(tLOS,i)
--						end
--					end
--				end
--			end
--		end
--		fLOS:SetScript("OnEvent",fLOSOnEvent)
--		for i=1,#tLOS do
--			if tLOS[i].unit==target then
--				return true
--			end
--		end
--	end



-- nova

Nova_CastingInfo = nil
function Nova_CastingInfo(PQ_Unit)
	local PQ_Casting = nil
	local percentRemaining = nil
	local secondsRemaining = nil

	if UnitCastingInfo(PQ_Unit) then
		local spellName,_,_,_,startTimer,endTimer = UnitCastingInfo(PQ_Unit)
		local durationTimer = ((endTimer) - (startTimer))
		local timeRemaining = (endTimer - GetTime() * 1000)
		percentRemaining = (100 - ((timeRemaining/durationTimer) * 100))
		secondsRemaining = endTimer/1000 - GetTime()
		PQ_Casting = spellName
		
		-- Name of spell, % remaining on spell, seconds remaining on spell
		return PQ_Casting, percentRemaining, secondsRemaining
	else return false end
end



--CastSpell--
function _castSpell(spellid,tar)
	if GCDCheck(spellid)
	and IsPlayerSpell(spellid) == true
	and cdRemains(spellid) == 0
	then
		if tar ~= nil
		and rangeCheck(spellid,tar) == nil
			then
			return false
		elseif tar ~= nil
		and rangeCheck(spellid,tar) == true
			then
			CastSpellByName(GetSpellInfo(spellid),tar)
			return true
		elseif tar == nil
			then
			CastSpellByName(GetSpellInfo(spellid))
			return true
		else
	return false
	end
end
end

--Range Check Simple--
function rangeCheck(spellid,unit)
if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
then
	return true
end
end

if SetFunctions == nil then


	-- Nova Notification Frame
	-- Update Debug Frame
	Nova_NotifyFrame = nil
	function Nova_NotifyFrame_OnUpdate()
		if (Nova_NotifyFrameTime < GetTime() - 0.2) then
			local alpha = Nova_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then Nova_NotifyFrame:SetAlpha(alpha - .5) end
			if (aplha == 0) then Nova_NotifyFrame:Hide() end
		end
	end
	-- Debug messages.
	function Nova_Notify(message)
		Nova_NotifyFrame.text:SetText(message)
		Nova_NotifyFrame:SetAlpha(1)
		Nova_NotifyFrame:Show()
		Nova_NotifyFrameTime = GetTime()
	end
	-- Debug Notification Frame
	Nova_NotifyFrame = CreateFrame('Frame')
	Nova_NotifyFrame:ClearAllPoints()
	Nova_NotifyFrame:SetHeight(300)
	Nova_NotifyFrame:SetWidth(300)
	Nova_NotifyFrame:SetScript('OnUpdate', Nova_NotifyFrame_OnUpdate)
	Nova_NotifyFrame:Hide()
	Nova_NotifyFrame.text = Nova_NotifyFrame:CreateFontString(nil, 'BACKGROUND', 'PVPInfoTextFont')
	Nova_NotifyFrame.text:SetAllPoints()
	Nova_NotifyFrame:SetPoint('LEFT', 40, - 75)
	Nova_NotifyFrameTime = 0
	
	function CastClick()
		if IsMouseButtonDown(1) 
	  	  and MainMenuBar:IsShown() then
	  		local mousefocus = GetMouseFocus()
			if mousefocus 
			  and mousefocus.feedback_action then 
		  		SpellCancelQueuedSpell() 
		  		PQR_DelayRotation(1) 
		  	end
		end 	
	end
	
	-- xrn Chat Overlay 
	local function onUpdate(self,elapsed) 
	  if self.time < GetTime() - 2.8 then
	    if self:GetAlpha() == 0 then self:Hide() else self:SetAlpha(self:GetAlpha() - .05) end
	  end
	end
	xrn = CreateFrame("Frame",nil,ChatFrame1) 
	xrn:SetSize(ChatFrame1:GetWidth(),50)
	xrn:Hide()
	xrn:SetScript("OnUpdate",onUpdate)
	xrn:SetPoint("TOP", UIParent, "TOP", 0, -200)
	xrn.text = xrn:CreateFontString(nil,"OVERLAY","MovieSubtitleFont")
	xrn.text:SetAllPoints()
	xrn.texture = xrn:CreateTexture()
	xrn.texture:SetAllPoints()
	xrn.texture:SetTexture(0,0,0,.50) 
	xrn.time = 0
	function xrn:message(message) 
	  self.text:SetText(message)
	  self:SetAlpha(1)
	  self.time = GetTime() 
	  self:Show() 
	end
	
	Nova_CustomT = { }
	
	  SetFunctions = true

end

--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) > 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end

local immunDMG = {
33786, -- Cyclone
113506, -- Cyclone
45438,	-- Ice Block
110700,		-- Divine Shield (Paladin)
110696,		-- Ice Block (Mage)
19263,		-- Deterrence
45438,		-- Ice Block
642		-- Divine Shield
}
function iDMG()
return immunDMG
end

function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end

Nova_TargetInfo = nil
function Nova_TargetInfo(t)
	local THealthActual = UnitHealth(t)
	local THealth = 100 * UnitHealth(t) / UnitHealthMax(t) 
	return THealth, THealthActual
end

-- lag fix
Nova_SpellAvailableTime = nil
function Nova_SpellAvailableTime()
	local lag = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)
	if lag < .05 then
		lag = .05
	elseif lag > .4 then
		lag = .4
	end
	return lag
end

-- Player info.
Nova_UnitInfo = nil
function Nova_UnitInfo(t)
	local TManaActual = UnitPower(t)
	local TMaxMana = UnitPowerMax(t)
	local TMana = 100 * UnitPower(t) / TMaxMana
	local THealthActual = UnitHealth(t)
	local THealth = 100 * UnitHealth(t) / UnitHealthMax(t)
	local myClassPower = 0
	local PQ_Class = select(2, UnitClass(t))
	local PQ_UnitLevel = UnitLevel(t)
	local PQ_CombatCheck = UnitAffectingCombat(t)
	local PQ_Spec = GetSpecialization()
	
	if TMaxMana == 0 then TMaxMana = 1 end
	
	if PQ_Class == "PALADIN" then
		myClassPower = UnitPower("player", 9)
		if UnitBuffID("player", 90174) then
			myClassPower = myClassPower + 3
		end
	elseif PQ_Class == "PRIEST" then myClassPower = UnitPower("player", 13)
	elseif PQ_Class == "WARLOCK" then
		if PQ_Spec == 3 then
			myClassPower = UnitPower("player", 14)	-- Destruction: Burning Embers
		elseif PQ_Spec == 2 then
			myClassPower = UnitPower("player", 15)	-- Demonology: Demonic Fury
		elseif PQ_Spec == 1 then
			myClassPower = UnitPower("player", 7)	-- Affliction: Soul Shards
		end
	elseif PQ_Class == "DRUID" and PQ_Class == 2 then myClassPower = UnitPower("player", 8)
	elseif PQ_Class == "MONK"  then myClassPower = UnitPower("player", 12)
	elseif PQ_Class == "ROGUE" and t ~= "player" then myClassPower = GetComboPoints("player", t) end
	
	return THealth, THealthActual, TMana, TManaActual, myClassPower, PQ_Class, PQ_UnitLevel, PQ_CombatCheck
end

local cccheck1 = {
108194,		-- Asphyxiate
	115001,		-- Remorseless Winter
	91800,		-- Gnaw
	91797,		-- Monstrous Blow (Dark Transformation)
	102795,		-- Bear Hug
	33786,		-- Cyclone
	99,			-- Disorienting Roar
	2637,		-- Hibernate
	22570,		-- Maim
	5211,		-- Mighty Bash
	9005,		-- Pounce
	110698,		-- Hammer of Justice 
	113004,		-- Intimidating Roar 
	113056,		-- Intimidating Roar 
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	1513,		-- Scare Beast
	19503,		-- Scatter Shot
	19386,		-- Wyvern Sting
	90337,		-- Bad Manner 
	24394,		-- Intimidation
	50519,		-- Sonic Blast 
	56626,		-- Sting 
	118271,		-- Combustion Impact
	44572,		-- Deep Freeze
	31661,		-- Dragon's Breath
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	82691,		-- Ring of Frost
	123393,		-- Breath of Fire 
	126451,		-- Clash
	122242,		-- Clash 
	119392,		-- Charging Ox Wave
	119381,		-- Leg Sweep
	115078,		-- Paralysis
	105421,		-- Blinding Light
	115752,		-- Blinding Light 
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	119072,		-- Holy Wrath
	20066,		-- Repentance
	10326,		-- Turn Evil
	113506,		-- Cyclone 
	605,		-- Dominate Mind
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	9484,		-- Shackle Undead
	87204,		-- Sin and Punishment
	2094,		-- Blind
	1833,		-- Cheap Shot
	1776,		-- Gouge
	408,		-- Kidney Shot
	113953,		-- Paralysis 
	6770,		-- Sap
	76780,		-- Bind Elemental
	77505,		-- Earthquake
	51514,		-- Hex
	118905,		-- Static Charge 
	118345,		-- Pulverize
	710,		-- Banish
	54786,		-- Demonic Leap
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	6789,		-- Mortal Coil
	30283,		-- Shadowfury
	104045,		-- Sleep 
	89766,		-- Axe Toss 
	115268,		-- Mesmerize 
	6358,		-- Seduction 
	7922,		-- Charge Stun
	118895,		-- Dragon Roar
	5246,		-- Intimidating Shout 
	20511,		-- Intimidating Shout 
	132168,		-- Shockwave
	105771,		-- Warbringer
	107079,		-- Quaking Palm
	19386,       -- Sting
	13327,		-- Reckless Charge
	20549		-- War Stomp
}

function cccheck()
return cccheck1
end

--Custom Target Tables--							
arenaTars				= { "arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
							}
custTars 				= {"target",
							"focus",
							"arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
						 }					 
totemTars 				= {"Spirit Link Totem",
						"Healing Tide Totem",
						"Mana Tide Totem",
						"Capacitor Totem",
						"Earthgrab Totem",
						"Earthbind Totem",
						"Stone Bulwark Totem"
						}
						
						
local PvPslows 			= {
	45524,		-- Chains of Ice
	50435,		-- Chilblains
	115000,		-- Remorseless Winter
	50259,		-- Dazed 
	58180,		-- Infected Wounds
	61391,		-- Typhoon
	127797,		-- Ursol's Vortex
	82941,		-- Ice Trap (Hunter)
	135299,		-- IceTrap Debuff
	35101,		-- Concussive Barrage
	5116,		-- Concussive Shot
	61394,		-- Frozen Wake 
	13810,		-- Ice Trap
	50433,		-- Ankle Crack 
	54644,		-- Frost Breath 
	121288,		-- Chilled 
	120,		-- Cone of Cold
	116,		-- Frostbolt
	44614,		-- Frostfire Bolt
	113092,		-- Frost Bomb
	31589,		-- Slow
	116095,		-- Disable
	118585,		-- Leer of the Ox
	123727,		-- Dizzying Haze
	123586,		-- Flying Serpent Kick
	110300,		-- Burden of Guilt
	63529,		-- Dazed - Avenger's Shield
	20170,		-- Seal of Justice
	15407,		-- Mind Flay
	3409,		-- Crippling Poison
	26679,		-- Deadly Throw
	119696,		-- Debilitation
	3600,		-- Earthbind 
	77478,		-- Earthquake 
	8034,		-- Frostbrand Attack
	8056,		-- Frost Shock
	51490,		-- Thunderstorm
	18223,		-- Curse of Exhaustion
	47960,		-- Shadowflame
	1715,		-- Hamstring
	12323,		-- Piercing Howl

				}
function isSlowed(unit)
for i=1,#PvPslows do
	if UnitDebuffID(unit,PvPslows[i]) ~= nil
		then
			return true
		end
	end
end

local roots				= {
						96294,	--Chains Of Ice
						91807,	--ShamblingRush
						339,		-- Entangling Roots
						19975,		-- Entangling Roots (Nature's Grasp)
						45334,		-- Immobilized (Wild Charge - Bear)
						102359,		-- Mass Entanglement
						110693,		-- Frost Nova (Mage)
						19185,		-- Entrapment
						128405,		-- Narrow Escape
						50245,		-- Pin (Crab)
						54706,		-- Venom Web Spray (Silithid)
						4167,		-- Web (Spider)
						122,		-- Frost Nova
						111340,		-- Ice Ward
						116706,		-- Disable
						113275,		-- Entangling Roots (Symbiosis)
						123407,		-- Spinning Fire Bloss
						113275,		-- Entangling Roots (Symbiosis)
						87194,		-- Glyph of Mind Blast
						114404,		-- Void Tendril's Grasp
						115197,		-- Partial Paralysis
						64695,		-- Earthgrab (Earthgrab Totem)
						63685,		-- Freeze (Frozen Power)
						107566,		-- Staggering Shout
						39965,		-- Frost Grenade
						55536,		-- Frostweave Net
						13099		-- Net-o-Matic
}
function hasRoot(unit)
for i=1,#roots do
	if UnitDebuffID(unit,roots[i]) ~= nil
		then
			return true
		end
	end
end


function GCDCheck(SpellID)
if (GetSpellCooldown(GetSpellInfo(SpellID))+select(2,GetSpellCooldown(GetSpellInfo(SpellID)))-GetTime()< 0.1)
then 
return true
else
return false
end
end

function _getNumAuras(unit)
	local n=0;
	for i=1,40 do
		if UnitAura(unit, i, "HARMFUL") then n=n+1; end
	end
	return n;
end

--Function Check Slow Immunes--
local immuneToSlowID 	= {
					-- DEATH KNIGHT
					-- DRUID
					-- HUNTER (Master's Call / Bestial Wrath)
						54216,
						19574,
					-- MAGE (Ice Block)
						45438,
					-- MONK
					-- PALADIN (Hand of Freedom / Hand of Protection / Divine Shield)
						1044,
						1022,
						642,
					-- PRIEST (Dispersion)
						47585,
					-- ROGUE
					-- SHAMAN (Windwalk Totem)
						114896,
					-- WARLOCK
					-- WARRIOR (Bladestorm)
						46924
				}
function immuneToSlow(unit)
for i=1,#immuneToSlowID do
	if UnitBuffID(unit,immuneToSlowID[i]) ~= nil
		then
			return true
		end
	end
end

function IsHealer(t)
local class = select(2, UnitClass(t))
if (class == "DRUID" or class =="PALADIN" or class =="PRIEST" or class =="MONK" or class =="SHAMAN")
and UnitPowerMax(t) >= 290000
and not UnitBuffID(t, 24858)
and not UnitBuffID(t, 15473)
and not UnitBuffID(t, 324)
then
return true
end
end

function IsMelee(Ctarget)
local class = select(2, UnitClass(Ctarget))
if (class == "DRUID" or class =="PALADIN" or class =="WARRIOR" or class =="MONK" or class =="SHAMAN" or class =="DEATHKNIGHT" or class =="ROGUE" )
and UnitPowerMax(Ctarget) < 70000
then
return true
end
end

if facetime == nil then
facetime = 0
function Faceinface(Targut)
if GetTime() - facetime > 1
and PQR_UnitFacing("player",Targut)
then
print("sukkksesss")
facetime = GetTime()
return YES
elseif GetTime() - facetime > 1
then
facetime = GetTime()
print("FOR HELVETE")
return NO
end
end
end

function FaceCheck(Starget)
if UnitExists(Starget)
and PQR_UnitFacing("player",Starget)
then
return true
end
end

local ImmuneCCs = {
33786, -- Cyclone
113506 -- Cyclone
}
function ImmuneCC(unit)
for i=1,#ImmuneCCs do
	if UnitBuffID(unit,ImmuneCCs[i]) ~= nil
		then
			return true
		end
	end
end

local PvPCSLOW 			= {
	45524,		-- Chains of Ice
	50435,		-- Chilblains
	115000,		-- Remorseless Winter
	50259,		-- Dazed 
	58180,		-- Infected Wounds
	61391,		-- Typhoon
	127797,		-- Ursol's Vortex
	82941,		-- Ice Trap (Hunter)
	135299,		-- IceTrap Debuff
	35101,		-- Concussive Barrage
	5116,		-- Concussive Shot
	61394,		-- Frozen Wake 
	13810,		-- Ice Trap
	50433,		-- Ankle Crack 
	54644,		-- Frost Breath 
	121288,		-- Chilled 
	120,		-- Cone of Cold
	116,		-- Frostbolt
	44614,		-- Frostfire Bolt
	113092,		-- Frost Bomb
	31589,		-- Slow
	116095,		-- Disable
	118585,		-- Leer of the Ox
	123727,		-- Dizzying Haze
	123586,		-- Flying Serpent Kick
	110300,		-- Burden of Guilt
	63529,		-- Dazed - Avenger's Shield
	20170,		-- Seal of Justice
	15407,		-- Mind Flay
	3409,		-- Crippling Poison
	26679,		-- Deadly Throw
	119696,		-- Debilitation
	3600,		-- Earthbind 
	77478,		-- Earthquake 
	8034,		-- Frostbrand Attack
	8056,		-- Frost Shock
	51490,		-- Thunderstorm
	18223,		-- Curse of Exhaustion
	47960,		-- Shadowflame
	1715,		-- Hamstring
	12323,		-- Piercing Howl
	96294,	--Chains Of Ice
	91807,	--ShamblingRush
	339,		-- Entangling Roots
	19975,		-- Entangling Roots (Nature's Grasp)
	45334,		-- Immobilized (Wild Charge - Bear)
	102359,		-- Mass Entanglement
	110693,		-- Frost Nova (Mage)
	19185,		-- Entrapment
	128405,		-- Narrow Escape
	50245,		-- Pin (Crab)
	54706,		-- Venom Web Spray (Silithid)
	4167,		-- Web (Spider)
	122,		-- Frost Nova
        111340,		-- Ice Ward
	116706,		-- Disable
	113275,		-- Entangling Roots (Symbiosis)
	123407,		-- Spinning Fire Bloss
	113275,		-- Entangling Roots (Symbiosis)
	87194,		-- Glyph of Mind Blast
	114404,		-- Void Tendril's Grasp
	115197,		-- Partial Paralysis
	64695,		-- Earthgrab (Earthgrab Totem)
	63685,		-- Freeze (Frozen Power)
	107566,		-- Staggering Shout
	39965,		-- Frost Grenade
	55536,		-- Frostweave Net
	13099		-- Net-o-Matic

				}
function isCCS(unit)
for i=1,#PvPCSLOW do
	if UnitDebuffID(unit,PvPCSLOW[i]) ~= nil
		then
			return true
		end
	end
end