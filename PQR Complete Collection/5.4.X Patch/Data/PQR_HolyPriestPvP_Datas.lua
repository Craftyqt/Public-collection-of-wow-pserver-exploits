if not PQR_LoadedDataFile then
	PQR_LoadedDataFile = 1
	print("|cffFFBE69Max Pikk ut 2013! Kanskje deler av 2014!|cffffffff")
end
PQR_Spec = GetSpecialization()




	
	if PQR_Spec == 2 
	or PQR_Spec == 1 then
		-- PQInterface Settings AntiStealth AutoFlagE
		local config = {
			name	= "HolyPvPSIG",
			author	= "ArneWerkland",
			abilities	= {
			--	{ 	name	= "Use Defencive Dispels", 
					enable	= true, 
			--	},
				{ 	name	= "Auto Fear Ward", 
					enable	= true, 
				},  
				{ 	name	= "Auto Flag", 
					enable	= true, 
				},  
				{ 	name	= "DispellRoot", 
					enable	= true, 
				},  
				{ 	name	= "Anti Stealth", 
					enable	= true, 
				},  
				{ 	name	= "Battlemasters",  newSection = true,
					enable	= false,
					tooltip = "Battlemasters trinket must be in the top trinket slot.",
					widget	= { type = "numBox",
						value	= 30,
						step	= 5, 
					},
				},
				{ 	name	= "Use Defencive Dispels",  newSection = true,
					enable	= true,
					tooltip = "Beta PQR Brain Swag Sig.",
					widget	= { type = "numBox",
						value	= 0.5,
						step	= 0.1, 
						max     = 2,
						min     = 0.5,
					},
				},
				{ 	name	= "Healthstone", 
					enable	= true,
					widget	= { type = "numBox",
						value	= 40,
						step	= 5,
						tooltip	= "Set automatic Healthstone usage.",
					},
				},
				{ 	name	= "Void Shift",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 20,
						step	= 5, 
					},
				}, 
				{ 	name	= "Guardian",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 20,
						step	= 5, 
					},
				}, 
				{ 	name	= "Shadowfiend Mana",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 50,
						step	= 5, 
					},
				},
				{ 	name	= "Power Infusion",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 35,
						step	= 5, 
					},
				},
				{ 	name	= "Renew High",  newSection = true,
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				},
				{ 	name	= "Renew Low",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 35,
						step	= 5, 
					},
				},
				{ 	name	= "PoM",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				},
				{ 	name	= "PwS",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 70,
						step	= 5, 
					},
				},
				{ 	name	= "Flash Heal",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				},
				{ 	name	= "DivineStar",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				},
				{ 	name	= "CoH High",  
					enable	= true,
					widget	= { type = "numBox",
						value	= 85,
						step	= 5, 
					},
				},
			--	{ 	name	= "CoH Low",  
			--		enable	= true,
			--		widget	= { type = "numBox",
			--			value	= 50,
			--			step	= 5, 
			--		},
			--	},
			},
			hotkeys = { 
				{	name	= "Mass Dispel",
					enable	= true,
					hotkeys	= {'ls'},
				},
				{	name	= "Feather",
					enable	= true,
					hotkeys	= {'lc'},
				},
			},
		}
		ArneWerkland_HolyPvPSIG = PQI:AddRotation(config)
end	

	


if not tLOS then tLOS={} end
if not fLOS then fLOS=CreateFrame("Frame") end

	function LineOfSight(target)
		local updateRate=1
		fLOS:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
		function fLOSOnEvent(self,event,...)
			if event=="COMBAT_LOG_EVENT_UNFILTERED" then
				local cLOG={...}
				if cLOG[2]=="SPELL_CAST_FAILED" then
					if cLOG[4]==UnitGUID("player") then 
						if cLOG[15]==SPELL_FAILED_LINE_OF_SIGHT then
							tinsert(tLOS,{unit=target,time=GetTime()})
						end
					end
				else
					table.sort(tLOS,function(x,y) return x.time>y.time end)
					for i=1,#tLOS do
						local time=tLOS[i].time or GetTime()
						if GetTime()>time+updateRate then
							tremove(tLOS,i)
						end
					end
				end
			end
		end
		fLOS:SetScript("OnEvent",fLOSOnEvent)
		for i=1,#tLOS do
			if tLOS[i].unit==target then
				return true
			end
		end
	end

	
if not cTar
then
	cTar = {"target","focus","mouseover","arena1","arena2","arena3","arena4","arena5","arenapet1","arenapet2","arenapet3","arenapet4","arenapet5","pettarget"}
end

--Custom Target Tables--							
arenaTars				= { "arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
							}




--CastSpell--
function _castSpell(spellid,tar)
	if IsPlayerSpell(spellid) == true
	--and GCDCheck(spellid)
	then
		if tar ~= nil
		and rangeCheck(spellid,tar) == nil
			then
			return false
		elseif tar ~= nil
		and rangeCheck(spellid,tar) == true
			then
			CastSpellByName(GetSpellInfo(spellid),tar)
			return true
		elseif tar == nil
			then
			CastSpellByName(GetSpellInfo(spellid))
			return true
		else
	return false
	end
end
end

function GCDCheck(SpellID)
if (GetSpellCooldown(GetSpellInfo(SpellID))+select(2,GetSpellCooldown(GetSpellInfo(SpellID)))-GetTime()< 0.1)
then 
return true
else
return false
end
end


--Combat Check--
function inCombat()
if UnitAffectingCombat("player") ~= nil
	then
		return true
	end
end

--Get HP simple--
function getHp(unit)
if UnitExists(unit) ~= nil
	then
		return 100 * UnitHealth(unit) / UnitHealthMax(unit)
	end
end

--Range Check Simple--
function rangeCheck(spellid,unit)
if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
then
	return true
end
end


--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) > 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end



function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) ) / UnitHealthMax(t)
end

function CanHeal(t)
  	if not UnitIsCharmed(t) 
  	--and UnitInRange(t)
  	and rangeCheck(2061,t)
  	and not UnitIsDeadOrGhost(t) 
  	and not UnitDebuffID(t, 33786) then --Clone
  		return true 
  	end 
end

function GroupInfo()
  members, group = { { Unit = "player", HP = CalculateHP("player"), IsPlayer = true } }, { low = 0, tanks = { } } 
  group.type = IsInRaid() and "raid" or "party" 
  group.number = GetNumGroupMembers()
  for i=1,group.number do if CanHeal(group.type..i) then 
    local unit, hp = group.type..i, CalculateHP(group.type..i) 
    table.insert( members,{ Unit = unit, HP = hp, IsPlayer = true } ) 
    if hp <= 94 then group.low = group.low + 1 end 
    if UnitGroupRolesAssigned(unit) == "TANK" then table.insert(group.tanks,unit) end   
  end end 
  if group.type == "raid" and #members > 1 then table.remove(members,1) end 
  
  
 -- Checking Pets in the group
-- for i=1,group.number do
	--	if CanHeal(group.type..i.."pet") then
	--		local memberpet, memberpethp = nil, nil
	--		if UnitAffectingCombat("player") then
	--			 memberpet = group.type..i.."pet" 
	--			 memberpethp = CalculateHP(group.type..i.."pet") 
	--		else
		--		 memberpet = group.type..i.."pet"
		--		 memberpethp = CalculateHP(group.type..i.."pet")
		--	end
		--	
		--	table.insert(members, { Unit = memberpet, HP = memberpethp, IsPlayer = false } )
	--	end
 -- end
  
  
  table.sort(members, function(x,y) return x.HP < y.HP end)
  --local customtarget = CanHeal("target") and "target" -- or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
  --if customtarget then table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) end 
end

GroupInfo()

--------------------------------------------------
GlyphCheck = nil
function GlyphCheck(glyphid)
	for i=1, 6 do
		if select(4, GetGlyphSocketInfo(i)) == glyphid then
			return true
		end
	end
	return false
end



--Function Check if unit is CC'ed--
local dispellableCCids 			= {  
	110698,		-- Hammer of Justice  
	44572,		-- Deep Freeze
	109298,
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	122,		-- Frost Nova
	82691,		-- Ring of Frost
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	118905,		-- Static Charge 
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	3355		-- Freezing Trap
}
function dispellableCC(unit)
	for i=1,#dispellableCCids do
		if UnitDebuffID(unit,dispellableCCids[i]) ~= nil then
			return true
		end
	end
end	
  
  
  --Function Check Snares--
local PvPslows 			= {
	45524,		-- Chains of Ice
	50435,		-- Chilblains
	115000,		-- Remorseless Winter
	50259,		-- Dazed 
	58180,		-- Infected Wounds
	61391,		-- Typhoon
	127797,		-- Ursol's Vortex
	82941,		-- Ice Trap (Hunter)
	135299,		-- IceTrap Debuff
	35101,		-- Concussive Barrage
	5116,		-- Concussive Shot
	61394,		-- Frozen Wake 
	13810,		-- Ice Trap
	50433,		-- Ankle Crack 
	54644,		-- Frost Breath 
	121288,		-- Chilled 
	120,		-- Cone of Cold
	116,		-- Frostbolt
	44614,		-- Frostfire Bolt
	113092,		-- Frost Bomb
	31589,		-- Slow
	116095,		-- Disable
	118585,		-- Leer of the Ox
	123727,		-- Dizzying Haze
	123586,		-- Flying Serpent Kick
	110300,		-- Burden of Guilt
	63529,		-- Dazed - Avenger's Shield
	20170,		-- Seal of Justice
	15407,		-- Mind Flay
	3409,		-- Crippling Poison
	26679,		-- Deadly Throw
	119696,		-- Debilitation
	3600,		-- Earthbind 
	77478,		-- Earthquake 
	8034,		-- Frostbrand Attack
	8056,		-- Frost Shock
	51490,		-- Thunderstorm
	18223,		-- Curse of Exhaustion
	47960,		-- Shadowflame
	1715,		-- Hamstring
	12323,		-- Piercing Howl
	1604		-- Dazed 

				}
function isSlowed(unit)
for i=1,#PvPslows do
	if UnitDebuffID(unit,PvPslows[i]) ~= nil
		then
			return true
		end
	end
end


--Function check if rooted--
local roots				= {
						96294,	--Chains Of Ice
						91807,	--ShamblingRush
						339,		-- Entangling Roots
						19975,		-- Entangling Roots (Nature's Grasp)
						45334,		-- Immobilized (Wild Charge - Bear)
						102359,		-- Mass Entanglement
						110693,		-- Frost Nova (Mage)
						19185,		-- Entrapment
						128405,		-- Narrow Escape
						50245,		-- Pin (Crab)
						54706,		-- Venom Web Spray (Silithid)
						4167,		-- Web (Spider)
						122,		-- Frost Nova
						111340,		-- Ice Ward
						116706,		-- Disable
						113275,		-- Entangling Roots (Symbiosis)
						123407,		-- Spinning Fire Bloss
						113275,		-- Entangling Roots (Symbiosis)
						87194,		-- Glyph of Mind Blast
						114404,		-- Void Tendril's Grasp
						115197,		-- Partial Paralysis
						64695,		-- Earthgrab (Earthgrab Totem)
						63685,		-- Freeze (Frozen Power)
						107566,		-- Staggering Shout
						39965,		-- Frost Grenade
						55536,		-- Frostweave Net
						13099		-- Net-o-Matic
}
function hasRoot(unit)
for i=1,#roots do
	if UnitDebuffID(unit,roots[i]) ~= nil
		then
			return true
		end
	end
end

if SetFunctions == nil then


	-- Nova Notification Frame
	-- Update Debug Frame
	Nova_NotifyFrame = nil
	function Nova_NotifyFrame_OnUpdate()
		if (Nova_NotifyFrameTime < GetTime() - 0.2) then
			local alpha = Nova_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then Nova_NotifyFrame:SetAlpha(alpha - .5) end
			if (aplha == 0) then Nova_NotifyFrame:Hide() end
		end
	end
	-- Debug messages.
	function Nova_Notify(message)
		Nova_NotifyFrame.text:SetText(message)
		Nova_NotifyFrame:SetAlpha(1)
		Nova_NotifyFrame:Show()
		Nova_NotifyFrameTime = GetTime()
	end
	-- Debug Notification Frame
	Nova_NotifyFrame = CreateFrame('Frame')
	Nova_NotifyFrame:ClearAllPoints()
	Nova_NotifyFrame:SetHeight(300)
	Nova_NotifyFrame:SetWidth(300)
	Nova_NotifyFrame:SetScript('OnUpdate', Nova_NotifyFrame_OnUpdate)
	Nova_NotifyFrame:Hide()
	Nova_NotifyFrame.text = Nova_NotifyFrame:CreateFontString(nil, 'BACKGROUND', 'PVPInfoTextFont')
	Nova_NotifyFrame.text:SetAllPoints()
	Nova_NotifyFrame:SetPoint('LEFT', 40, - 75)
	Nova_NotifyFrameTime = 0
	
	function CastClick()
		if IsMouseButtonDown(1) 
	  	  and MainMenuBar:IsShown() then
	  		local mousefocus = GetMouseFocus()
			if mousefocus 
			  and mousefocus.feedback_action then 
		  		SpellCancelQueuedSpell() 
		  		PQR_DelayRotation(1) 
		  	end
		end 	
	end
	
	-- xrn Chat Overlay 
	local function onUpdate(self,elapsed) 
	  if self.time < GetTime() - 2.8 then
	    if self:GetAlpha() == 0 then self:Hide() else self:SetAlpha(self:GetAlpha() - .05) end
	  end
	end
	xrn = CreateFrame("Frame",nil,ChatFrame1) 
	xrn:SetSize(ChatFrame1:GetWidth(),30)
	xrn:Hide()
	xrn:SetScript("OnUpdate",onUpdate)
	xrn:SetPoint("TOP", UIParent, "TOP", 0, -200)
	xrn.text = xrn:CreateFontString(nil,"OVERLAY","MovieSubtitleFont")
	xrn.text:SetAllPoints()
	xrn.texture = xrn:CreateTexture()
	xrn.texture:SetAllPoints()
	xrn.texture:SetTexture(0,0,0,.50) 
	xrn.time = 0
	function xrn:message(message) 
	  self.text:SetText(message)
	  self:SetAlpha(1)
	  self.time = GetTime() 
	  self:Show() 
	end
	
		local function onUpdate(self,elapsed) 
	  if self.time < GetTime() - 2.8 then
	    if self:GetAlpha() == 0 then self:Hide() else self:SetAlpha(self:GetAlpha() - .05) end
	  end
	end
	cokx = CreateFrame("Frame",nil,ChatFrame1) 
	cokx:SetSize(ChatFrame1:GetWidth(),40)
	cokx:Hide()
	cokx:SetScript("onUpdate",onUpdate)
	cokx:SetPoint("TOP",0,60)
	cokx.text = cokx:CreateFontString(nil,"OVERLAY","ZoneTextFont")
	cokx.text:SetAllPoints()
	cokx.text:SetTextHeight(15)
	cokx.texture = cokx:CreateTexture()
	cokx.texture:SetAllPoints()
	cokx.texture:SetTexture(0,0,0,0.3) 
	cokx.time = 0
	function cokx:message(message) 
	  self.text:SetText(message)
	  self:SetAlpha(1)
	  self.time = GetTime() 
	  self:Show() 
	end
	
	Nova_CustomT = { }
	
	  SetFunctions = true

end

local dispelRoot = {
	339,		-- Entangling Roots
	19975,		-- Entangling Roots (Nature's Grasp)
	102359,		-- Mass Entanglement
	110693,		-- Frost Nova (Mage)
	19185,		-- Entrapment
	122,		-- Frost Nova
	109298,		-- Narrow Escape
	111340,		-- Ice Ward
	33395,		-- Freeze
	113275,		-- Entangling Roots (Symbiosis)
	113275,		-- Entangling Roots (Symbiosis)
	87194,		-- Glyph of Mind Blast
	64695,		-- Earthgrab (Earthgrab Totem)
	63685		-- Freeze (Frozen Power)
	}
function dRoot()
return dispelRoot
end


local cccheck1 = {
108194,		-- Asphyxiate
	115001,		-- Remorseless Winter
	91800,		-- Gnaw
	91797,		-- Monstrous Blow (Dark Transformation)
	102795,		-- Bear Hug
	33786,		-- Cyclone
	99,			-- Disorienting Roar
	2637,		-- Hibernate
	22570,		-- Maim
	5211,		-- Mighty Bash
	9005,		-- Pounce
	110698,		-- Hammer of Justice 
	113004,		-- Intimidating Roar 
	113056,		-- Intimidating Roar 
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	1513,		-- Scare Beast
	19503,		-- Scatter Shot
	19386,		-- Wyvern Sting
	90337,		-- Bad Manner 
	24394,		-- Intimidation
	50519,		-- Sonic Blast 
	56626,		-- Sting 
	118271,		-- Combustion Impact
	44572,		-- Deep Freeze
	31661,		-- Dragon's Breath
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	82691,		-- Ring of Frost
	123393,		-- Breath of Fire 
	126451,		-- Clash
	122242,		-- Clash 
	119392,		-- Charging Ox Wave
	119381,		-- Leg Sweep
	115078,		-- Paralysis
	105421,		-- Blinding Light
	115752,		-- Blinding Light 
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	119072,		-- Holy Wrath
	20066,		-- Repentance
	10326,		-- Turn Evil
	113506,		-- Cyclone 
	605,		-- Dominate Mind
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	9484,		-- Shackle Undead
	87204,		-- Sin and Punishment
	2094,		-- Blind
	1833,		-- Cheap Shot
	1776,		-- Gouge
	408,		-- Kidney Shot
	113953,		-- Paralysis 
	6770,		-- Sap
	76780,		-- Bind Elemental
	77505,		-- Earthquake
	51514,		-- Hex
	118905,		-- Static Charge 
	118345,		-- Pulverize
	710,		-- Banish
	54786,		-- Demonic Leap
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	6789,		-- Mortal Coil
	30283,		-- Shadowfury
	104045,		-- Sleep 
	89766,		-- Axe Toss 
	115268,		-- Mesmerize 
	6358,		-- Seduction 
	7922,		-- Charge Stun
	118895,		-- Dragon Roar
	5246,		-- Intimidating Shout 
	20511,		-- Intimidating Shout 
	132168,		-- Shockwave
	105771,		-- Warbringer
	107079,		-- Quaking Palm
	19386,       -- Sting
	13327,		-- Reckless Charge
	20549		-- War Stomp
}

function cccheck()
return cccheck1
end

if modtime3 == nil then
modtime3 = 0
end
function targetswitch(Penis)
--local spell123 = select(1, UnitCastingInfo("player"))
--if spell123 == GetSpellInfo(SpellSSID)
if GetTime() - modtime3 > .2
and UnitIsPlayer(Penis)
and not IsMouseButtonDown(3)
and Nova_MaxDps == 0
--and not UnitIsEnemy("player","target")
and not UnitIsUnit(Penis, "target")
then 
modtime3 = GetTime()
TargetUnit(Penis)
end
end

function onOff(Question)
if Question == 1 then
return "\124cA500EE00On\124r" else return "\124cA5FF0000Off\124r" end
end

function IsHealer(t)
local class = select(2, UnitClass(t))
if (class == "DRUID" or class =="PALADIN" or class =="PRIEST" or class =="MONK" or class =="SHAMAN")
and UnitPowerMax(t) >= 290000
and not UnitBuffID(t, 24858)
and not UnitBuffID(t, 15473)
and not UnitBuffID(t, 324)
then
return true
end
end

function IsMelee(Ctarget)
local class = select(2, UnitClass(Ctarget))
if (class == "DRUID" or class =="PALADIN" or class =="WARRIOR" or class =="MONK" or class =="SHAMAN" or class =="DEATHKNIGHT" or class =="ROGUE" )
and UnitPowerMax(Ctarget) < 70000
then
return true
end
end

--Custom Target Tables--							
arenaTars				= { "arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
							}
custTars 				= {"target",
							"focus",
							"arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
						 }					 
totemTars 				= {"Spirit Link Totem",
						"Healing Tide Totem",
						"Mana Tide Totem",
						"Capacitor Totem",
						"Earthgrab Totem",
						"Earthbind Totem",
						"Stone Bulwark Totem"
						}