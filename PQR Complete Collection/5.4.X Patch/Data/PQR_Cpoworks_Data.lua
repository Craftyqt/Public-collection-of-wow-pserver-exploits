if not PQR_LoadedDataFile then
	PQR_LoadedDateFile = 1
	print("|cffFFBE69Cpoworks Data File v2.2 - May 23, 2013|cffffffff")
end
PQR_Spec = GetSpecialization()
		
if PQR_Spec == 2 then
-- PQInterface Settings
	local config = {
		name	= "Enhancement",
		author	= "Cpoworks",
		abilities = {		
			{ 	name	= "Disable CDs after leaving Combat", 
				enable	= false,
			}, 
			{ 	name	= "Enable Healing",
				tooltip	= "Enable/Disable the usage of Healing spells",
				enable	= false,
			}, 
			{ 	name	= "AoE Chain Lightning",
				tooltip	= "Enable/Disable the usage of Chain Lightning in AoE Mode",
				enable	= true,
			},
			{ 	name	= "Flame Shock Mouse Over",
				tooltip	= "Enable/Disable the usage of Mouse Over Flame Shock in AoE Mode",
				enable	= false,
			},
			{ 	name	= "Enable Stormlash", newSection = true,
				tooltip	= "Enable/Disable Automatic use of Stormlash.",
				enable	= false,
			}, 
			{ 	name	= "Enable Fire Ele", 
				tooltip	= "Enable/Disable the usage of Fire Ele",
				enable	= true,
			},
			{ 	name	= "Enable Earth Ele", 
				tooltip	= "Enable/Disable the usage of Earth Ele",
				enable	= true,
			},
			{ 	name	= "Use Gloves", 
				tooltip	= "Enable/Disable the usage of Engi Gloves",
				enable	= true,
			},
			{ 	name	= "Use Pot During Lust", 
				tooltip	= "Enable/Disable the usage of Pots During Lust",
				enable	= true,
			},
			{	name	= "Heal Selector", newSection=true,
				tooltip	= "Select what heal you would like to use on Mouse button 4.",
				enable	= true,
				widget	= { type = "select",
					tooltip	="Select a Healing Spell.",
					value 	= 1,
					values 	= {[1]="Healing Rain",[2]="Chain Heal Auto",[3]="Chain Heal Mouseover"},
					width 	= 130},
			},
			{ 	name	= "Healing Surge", newSection = true,
				enable	= true,
				widget	= { type = "numBox",
					value	= 60,
					step	= 5,
					tooltip	= "HP to cast Healing Surge.",
				},
			}, 
			{ 	name	= "Healing Stream",
				enable	= true,
				widget	= { type = "numBox",
					value	= 80,
					step	= 5,
					tooltip	= "HP to cast Healing Tide.",
				},
			},
			{ 	name	= "Healthstone",
				enable	= true,
				widget	= { type = "numBox",
					value	= 35,
					step	= 5,
					tooltip	= "Set automatic Healthstone usage.",
				},
			},
		},
		hotkeys = {
			{	name	= "AoEMode",
				enable	= true,
				hotkeys	= {'lc'},
			},
			{	name	= "Pause",
				enable	= true,
				hotkeys	= {'la'},
			},
			{	name	= "Defensives",
				enable	= true,
				hotkeys	= {'ls'},
			},
			{	name	= "Cooldowns Key",
				enable	= true,
				hotkeys	= {'rc'},
			},
			{	name	= "Totemic Projection",
				enable	= false,
				hotkeys	= {'ra'},
			},
		},
	}
		CPOWORKS_ENHANCEMENT = PQI:AddRotation(config)
end		

-------------------------------------------
--Functions
-------------------------------------------
function PQR_status()
	PQR_WriteToChat("Current Cooldown/AoE Status")
	if UseCD then
		PQR_WriteToChat("Cooldowns: |cFF00FF00Enabled")
		PQR_Event("PQR_Text","Cooldowns: Enabled",nil,"00FF00")
	else
		PQR_WriteToChat("Cooldowns: |cFFFF0000Disabled")
		PQR_Event("PQR_Text","Cooldowns: Disabled",nil,"FF0000")
	end
	if AoE == false then
		PQR_WriteToChat("AoE: |cFFFF0000Disabled")
		PQR_Event("PQR_Text","AoE: Disabled",nil,"FF0000")
	else
		PQR_WriteToChat("AoE: |cFF00FF00Enabled")
		PQR_Event("PQR_Text","AoE: Enabled",nil,"00FF00")
	end
end

--CastSpell--
function _castSpell(spellid,tar)
	if UnitCastingInfo("player") == nil
	and UnitChannelInfo("player") == nil
	and IsPlayerSpell(spellid) == true
	and cdRemains(spellid) == 0
	then
		if tar ~= nil
		and rangeCheck(spellid,tar) == nil
			then
			return false
		elseif tar ~= nil
		and rangeCheck(spellid,tar) == true
			then
			CastSpellByName(GetSpellInfo(spellid),tar)
			return true
		elseif tar == nil
			then
			CastSpellByName(GetSpellInfo(spellid))
			return true
		else
	return false
	end
end
end


--Combat Check--
function inCombat()
if UnitAffectingCombat("player") ~= nil
	then
		return true
	end
end

--Get HP simple--
function getHp(unit)
if UnitExists(unit) ~= nil
	then
		return 100 * UnitHealth(unit) / UnitHealthMax(unit)
	end
end

--Range Check Simple--
function rangeCheck(spellid,unit)
if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
then
	return true
end
end


--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) > 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end


function inMelee()
	if UnitAffectingCombat("player") ~= nil
	and IsSpellInRange(GetSpellInfo(73899),"target") == 1
	and UnitExists("target") ~= nil
	and UnitCanAttack("player","target") ~= nil
	then return true
	end
end


function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) + incomingheals ) / UnitHealthMax(t)
end

function CanHeal(t)
  if UnitInRange(t) and UnitCanCooperate("player",t) and not UnitIsEnemy("player",t) 
  and not UnitIsCharmed(t) and not UnitIsDeadOrGhost(t) and not PQR_IsOutOfSight(t) 
  and UnitExists(t)
  then return true end 
end

function GroupInfo()
  members, group = { { Unit = "player", HP = CalculateHP("player") } }, { low = 0, tanks = { } } 
  group.type = IsInRaid() and "raid" or "party" 
  group.number = GetNumGroupMembers()
  for i=1,group.number do if CanHeal(group.type..i) then 
    local unit, hp = group.type..i, CalculateHP(group.type..i) 
    table.insert( members,{ Unit = unit, HP = hp } ) 
    if hp <= 94 then group.low = group.low + 1 end 
    if UnitGroupRolesAssigned(unit) == "TANK" then table.insert(group.tanks,unit) end 
  end end 
  if group.type == "raid" and #members > 1 then table.remove(members,1) end 
  table.sort(members, function(x,y) return x.HP < y.HP end)
  local customtarget = CanHeal("target") and "target" -- or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
  if customtarget then table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) end 
end

function CastClick()
  if IsMouseButtonDown(1) and MainMenuBar:IsShown() then 
    local mousefocus = GetMouseFocus() 
    if mousefocus and mousefocus.feedback_action 
    then SpellCancelQueuedSpell() PQR_DelayRotation(1) end
  end
end

GroupInfo() 

  -- Checks if our Cleanse will have a valid Debuff to Cleanse
  function ValidDispel(t)
  	local HasValidDispel = false
  	local i = 1
  	local debuff = UnitDebuff(t, i)
  	while debuff do
  		local debuffType = select(5, UnitDebuff(t, i))
  		if debuffType == "Curse" then
  			HasValidDispel = true
  		end
  		i = i + 1
  		debuff = UnitDebuff(t, i)
  	end
  	return HasValidDispel
  end
  
  
  
  
  