<?xml version="1.0" encoding="utf-8" ?><DRUID><Ability><Name>Single Target Rotation</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not BalanceInit then
			BalanceInit = true
			--Spells
			Moonfire = 48463
			InsectSwarm = 48468
			Wrath = 48461
			Starfire = 48465
			Starfall = 53201
			MarkOfTheWild = 48469
			Barkskin = 22812
			Cyclone = 33786
			ForceOfNature = 33831
			Innervate = 29166
			FaerieFire = 770

			AoE = false
			UseCD = false

			--Bools
			CastWrath = false
			CastStarfire =  false

		end -- end of init


		--Precombat

		--Mark of the Wild
		if cdRemains(MarkOfTheWild) == 0
		and not UnitBuffID(&amp;quot;player&amp;quot;, MarkOfTheWild) then
			DebugPrint(&amp;quot;Casting Battle Shout&amp;quot;)
			_castSpell(MarkOfTheWild)
		end

		if not UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		 	CastWrath = true
			CastStarfire =false
		end

		--Combat Check
		if IsMounted()
		or SpellIsTargeting()
		or UnitInVehicle(&amp;quot;player&amp;quot;)
		or UnitIsDead(&amp;quot;target&amp;quot;) 
		or UnitIsDead(&amp;quot;player&amp;quot;)
		or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
		or not UnitExists(&amp;quot;target&amp;quot;) then
			return true
		end


		--Single Target Rotation
		SolarEclipse = UnitBuffID(&amp;quot;player&amp;quot;, 48517)
		LunarEclipse = UnitBuffID(&amp;quot;player&amp;quot;, 48518)

		--Eclipse logic
		if CastWrath == false
		and CastStarfire == false then
			DebugPrint(&amp;quot;both are false&amp;quot;)
			CastWrath = true
			CastStarfire =false
		elseif SolarEclipse 
			and CastWrath == false then
			DebugPrint(&amp;quot;SolarEclipse&amp;quot;)
			CastWrath = true
			CastStarfire = false
		elseif LunarEclipse 
			and CastStarfire == false then
			DebugPrint(&amp;quot;LunarEclipse&amp;quot;)
			CastWrath = false
			CastStarfire =true
		end	

		--Force of Nature
		if cdRemains(ForceOfNature) == 0 
		and (not GetCurrentKeyBoardFocus() and IsLeftControlKeyDown()) then
			DebugPrint(&amp;quot;Casting Force of Nature&amp;quot;)
			_castSpell(ForceOfNature)
			if SpellIsTargeting() then CameraOrSelectOrMoveStart() CameraOrSelectOrMoveStop() end 
			return true
		end	



		--FaerieFire
		if cdRemains(FaerieFire) == 0 
		and not UnitDebuffID(&amp;quot;target&amp;quot;, FaerieFire) then
			DebugPrint(&amp;quot;Casting Faerie fire&amp;quot;)
			_castSpell(FaerieFire,&amp;quot;target&amp;quot;)
			return true
		end	

		--Moonfire
		if CastStarfire
		and	cdRemains(Moonfire) == 0 
		and not UnitDebuffID(&amp;quot;target&amp;quot;, Moonfire) then
			DebugPrint(&amp;quot;Casting Moonfire&amp;quot;)
			_castSpell(Moonfire,&amp;quot;target&amp;quot;)
			return true
		end

		--InsectSwarm
		if CastWrath
		and	cdRemains(InsectSwarm) == 0 
		and not UnitDebuffID(&amp;quot;target&amp;quot;, InsectSwarm) then
			DebugPrint(&amp;quot;Casting InsectSwarm&amp;quot;)
			_castSpell(InsectSwarm,&amp;quot;target&amp;quot;)
			return true
		end

		--CDs
		if UseCD then
			--Trinkets
			if GetInventoryItemCooldown(&amp;quot;player&amp;quot;,13) == 0 then 
				UseInventoryItem(13)
			end
			if GetInventoryItemCooldown(&amp;quot;player&amp;quot;,14) == 0 then 
				UseInventoryItem(14)
			end
			
			--Starfall
			if cdRemains(Starfall) == 0 then
				DebugPrint(&amp;quot;Casting Starfall&amp;quot;)
				_castSpell(Starfall)
				return true
			end

		end
			
		--Wrath
		if CastWrath
		and	cdRemains(Wrath) == 0 then
			DebugPrint(&amp;quot;Casting Wrath&amp;quot;)
			_castSpell(Wrath,&amp;quot;target&amp;quot;)
			return true
		end

		--Starfire
		if CastStarfire
		and	cdRemains(Starfire) == 0 then
			DebugPrint(&amp;quot;Casting Starfire&amp;quot;)
			_castSpell(Starfire,&amp;quot;target&amp;quot;)
			return true
		end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Functions</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not FuncLoaded then
	FuncLoaded = true

	function DebugPrint(s)
		if debug then
			PQR_WriteToChat(s)
		end
	end
	
	function CalculateHP(t)
		local ActualWithIncoming = 100 * UnitHealth(t) / UnitHealthMax(t)
		if ActualWithIncoming then
			return ActualWithIncoming
		else
			return 100
		end
	end
		
	function CanHeal(t)
		if not UnitIsCharmed(t) 
		and not UnitIsDeadOrGhost(t) 
		and not UnitDebuffID(t, 33786) then --Clone
			return true 
		end 
	end

	--New Healing Engine
	function SheuronEngine(MO, TARGETHEAL, LOWHP, HEALPET)
		local MouseoverCheck = MO or false
		local LowHPTarget = LOWHP or 80
		local TargetHealCheck = TARGETHEAL or false
		local HEALPET = HEALPET or true
		lowhpmembers = 0
		
		playerHP = CalculateHP(&amp;quot;player&amp;quot;)
			
		members = { { 	
			Unit = &amp;quot;player&amp;quot;, 
			HP = playerHP, 
			GUID = UnitGUID(&amp;quot;player&amp;quot;), 
			IsPlayer = true, 
			} } 
			
		--Adding player to low hp table
		if playerHP &amp;lt; LowHPTarget then
			lowhpmembers = lowhpmembers + 1
		end	
			
			
		local group = &amp;quot;party&amp;quot;
		local groupmembers = GetNumPartyMembers()

		if GetNumRaidMembers() &amp;gt; 0 then
			group = &amp;quot;raid&amp;quot;
			groupmembers = GetNumRaidMembers()
		end
			
			
		for i = 1, groupmembers do 
			local member, memberhp, uidmember = group..i, CalculateHP(group..i), UnitGUID(group..i)	
			-- Checking all Party/Raid Members for Range/Health
			if ((UnitExists(member) and CanHeal(member)) or UnitIsUnit(&amp;quot;player&amp;quot;,member))
			and member ~= nil and memberhp ~= nil and uidmember ~= nil then 	
				table.insert( members,{ Unit = member, HP = memberhp, GUID = uidmember, IsPlayer = true } ) 
					
				-- Setting Low HP Members variable for AoE Healing
				if memberhp &amp;lt; LowHPTarget then
					lowhpmembers = lowhpmembers + 1
				end	
			end 
				
			-- Checking Pets in the group
			if HEALPET and lowhpmembers == 0 and UnitExists(group..i..&amp;quot;pet&amp;quot;) and CanHeal(group..i..&amp;quot;pet&amp;quot;) then
				local memberpet, memberpethp,  uidmemberpet = nil, nil, nil
				memberpet = group..i..&amp;quot;pet&amp;quot; 
				memberpethp = CalculateHP(memberpet)		
				uidmemberpet = UnitGUID(memberpet)
						
				if memberpet ~= nil and memberpethp ~= nil and uidmemberpet ~= nil then
					table.insert(members, { Unit = memberpet, HP = memberpethp, GUID = uidmemberpet, IsPlayer = false } )
				end			
			end
		end 
		-- Checking Priority Targeting
		if TargetHealCheck and CanHeal(&amp;quot;target&amp;quot;) then
			table.sort(members, function(x) return UnitIsUnit(&amp;quot;target&amp;quot;,x.Unit) end)
		elseif MouseoverCheck and CanHeal(&amp;quot;mouseover&amp;quot;) and GetMouseFocus() ~= WorldFrame then
			table.sort(members, function(x) return UnitIsUnit(&amp;quot;mouseover&amp;quot;,x.Unit) end)
		end
	end


	--CastSpell--
	function _castSpell(spellid,tar)
		if UnitCastingInfo(&amp;quot;player&amp;quot;) == nil
		and UnitChannelInfo(&amp;quot;player&amp;quot;) == nil
		--and IsPlayerSpell(spellid) == true
		and cdRemains(spellid) == 0
		then
			if tar ~= nil
			and rangeCheck(spellid,tar) == nil
				then
				return false
			elseif tar ~= nil
			and rangeCheck(spellid,tar) == true
				then
				CastSpellByID(spellid, tar)
				return true
			elseif tar == nil
				then
				CastSpellByID(spellid)
				return true
			else
		return false
		end
	end
	end
	
	
	--Combat Check--
	function inCombat()
	if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil
		then
			return true
		end
	end
	
	--Get HP simple--
	function getHp(unit)
	if UnitExists(unit) ~= nil
		then
			return 100 * UnitHealth(unit) / UnitHealthMax(unit)
		end
	end
	
	--Range Check Simple--
	function rangeCheck(spellid,unit)
	if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
	then
		return true
	end
	end
	
	
--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) &amp;gt; 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end


function inMelee()
	if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil
	and IsSpellInRange(GetSpellInfo(47450),&amp;quot;target&amp;quot;) == 1
	and UnitExists(&amp;quot;target&amp;quot;) ~= nil
	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) ~= nil
	then return true
	end
end

--End for FuncLoad
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Hotkeys</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--Cooldowns
if not cdkeydown then cdkeydown = 0 end
if not GetCurrentKeyBoardFocus() and IsRightControlKeyDown() and GetTime() - cdkeydown &amp;gt; 1 then
	cdkeydown = GetTime()
  	if UseCD  then 
   		UseCD = false 
		PQR_WriteToChat(&amp;quot;Cooldowns: |cFFFF0000Disabled&amp;quot;)	
	else 
		UseCD = true 
		PQR_WriteToChat(&amp;quot;Cooldowns: |cFF00FF00Enabled&amp;quot;)
  	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability></DRUID>