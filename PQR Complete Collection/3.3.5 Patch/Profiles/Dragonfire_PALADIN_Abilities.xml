<?xml version="1.0" encoding="utf-8" ?><PALADIN><Ability><Name>-- Loader --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQ_PaladinFunctionLoaded then

print(&amp;apos;Loading Paladin stuff&amp;apos;)

PQ_DivinePurpose   = 90174
PQ_AvengingWrath   = 31884
PQ_ArtOfWar        = 59578
PQ_SealOfTruth     = 31801
PQ_SealOfRight     = 20154
PQ_Inquisition     = 84963
--PQ_BlessingOfMight = 79101 , 79102 -- There are two buffids i came across and if i do it by &amp;apos;Blessing of Might&amp;apos; there will be localzation errors 


PQ_Buffs = { 
   [PQ_DivinePurpose] = {check = true, hasBuff = false, endTime = nil},
   [PQ_AvengingWrath] = {check = true, hasBuff = false, endTime = nil},
   [PQ_ArtOfWar]      = {check = true, hasBuff = false, endTime = nil},
   [PQ_SealOfTruth]   = {check = true, hasBuff = false, endTime = nil},
   [PQ_SealOfRight]   = {check = true, hasBuff = false, endTime = nil},
   [PQ_Inquisition]   = {check = true, hasBuff = false, endTime = nil}
}


function PQ_CheckForAllBuffs()

	for k, v in pairs(PQ_Buffs) do
	
		if PQ_Buffs[k].check == true and UnitBuffID(&amp;apos;player&amp;apos;, k) then
		
			PQ_Buffs[k].hasBuff = true
			PQ_Buffs[k].endTime = (select(7, UnitBuffID(&amp;quot;player&amp;quot;, k)))
--			print(&amp;quot;\124cFFDBFA2APlayer has buff &amp;quot; .. GetSpellLink(k))
			
		end
	
	end


end

function PQ_PallyBuffHandler(spellID, hasBuffNow)
   if PQ_Buffs[spellID] and PQ_Buffs[spellID].check == true then
      PQ_Buffs[spellID].hasBuff = hasBuffNow   
      if hasBuffNow == true then
         PQ_Buffs[spellID].endTime = (select(7, UnitBuffID(&amp;quot;player&amp;quot;, spellID)))
--         print(&amp;quot;\124cFFDBFA2AGained buff \124cFFFA652A&amp;quot; .. GetSpellLink(spellID))
         return
      end
--      print(&amp;quot;\124cFFFA652ALost buff &amp;quot; .. GetSpellLink(spellID))
      
   end
   
end
--    }

--Debuffs--
--booleans
PQ_HasLossOfControl = false
--59752--[[Every Man for Himself]]
PQ_HasEveryManSpell     = IsSpellKnown(59752)
PQ_DebuffList = {}

PQ_DebuffList.BreakOnDamage = {
   19503--[[Scatter Shot]],
   1499--[[Freezing Trap]],
   6358--[[Seduction]],
   9484--[[Shackle Undead]],
   6770--[[Sap]],
   118--[[Polymorph]],
   51514--[[Hex]],
   2094--[[Blind]],
   2637--[[Hibernate]],
   76780--[[Bind Elemental]]
}
PQ_DebuffList.Fear = {
   5782--[[Fear]],
   5484--[[Howl of Terror]],
   8122--[[Psychic Scream]],
   1513--[[Scare Beast]],
   10326--[[Turn Evil]],
   5246--[[Intimidating Shout]]
}
PQ_DebuffList.Root = {
   339--[[Entangling Roots]],
   122--[[Frost Nova]],
   45524--[[Chains of Ice]],
   16979--[[Feral Charge - Bear]]
}
PQ_DebuffList.Raid = {}
PQ_DebuffList.MovementImpairing = {
   5116--[[Concussive Shot]],
   2974--[[Wing Clip]],
   13809--[[Ice Trap]],
   116--[[Frostbolt]],
   120--[[Cone of Cold]],
   11113--[[Blast Wave]],
   31589--[[Slow]],
   15407--[[Mind Flay]],
   3408--[[Crippling Poison]],
   26679--[[Deadly Throw]],
   8056--[[Frost Shock]],
   2484--[[Earthbind Totem]],
   18223--[[Curse of Exhaustion]],
   1715--[[Hamstring]],
   12323--[[Piercing Howl]]
}
--Only check for Fear/Root/BreakOnDamage is player has Every Mand for Himself since Hand of Freedom only breaks Movement Impairing effects--
PQ_Debuffs = {
   [&amp;apos;Fear&amp;apos;]               = {check = PQ_HasEveryManSpell, debuffList = PQ_DebuffList.Fear , spellid = nil, hasDebuff = false, endTime = nil},
   [&amp;apos;Root&amp;apos;]              = {check = PQ_HasEveryManSpell, debuffList = PQ_DebuffList.Root , spellid = nil, hasDebuff = false, endTime = nil},
   [&amp;apos;BreakOnDamage&amp;apos;]      = {check = PQ_HasEveryManSpell, debuffList = PQ_DebuffList.BreakOnDamage , spellid = nil, hasDebuff = false, endTime = nil},
   [&amp;apos;MovementImpairing&amp;apos;] = {check = true, debuffList = PQ_DebuffList.MovementImpairing , spellid = nil, hasDebuff = false, endTime = nil},
   [&amp;apos;Raid&amp;apos;]              = {check = false, debuffList = PQ_DebuffList.Raid , spellid = nil, hasDebuff = false, endTime = nil}
}

--So in Hand of Freedom ability just check `if (PQ_Debuffs[&amp;apos;MovementImpairing&amp;apos;].hasDebuff == true) then return true end`
--For Every Man for Himself check if ([Fear].hasDebuff or [Root].hasDebuff or [BreakOnDamage].hasDebuff or [MovementImpairing].hasDebuff) then return true end
function PQ_PallyDebuffHandler(spellID, hasDebuffNow)
   --    {
   for type, debuffInfo in pairs(PQ_Debuffs) do
      --        {    
      if (debuffInfo.check) then
         --            {                
         for k, debuff in pairs(debuffInfo.debuffList) do
            --                {                    
            if (debuff == spellID) then
               PQ_Debuffs[type].hasDebuff = hasDebuffNow
               
               if (hasDebuffNow) then --Has debuff spellID of type
                  PQ_Debuffs[type].spellid = spellID
                  PQ_Debuffs[type].endTime = select(7, UnitDebuffID(&amp;quot;player&amp;quot;, spellID))
--                  print(&amp;quot;\124cFFDBFA2AGained debuff &amp;quot; .. GetSpellLink(spellID) .. &amp;apos;\124cFFDBFA2A of type: \124cFFFA652A&amp;apos; .. type)
               else --Debuff being removed
                  PQ_Debuffs[type].spellid = nil
                  PQ_Debuffs[type].endTime = nil
--                  print(&amp;quot;\124cFFFA652ALost debuff &amp;quot; .. GetSpellLink(spellID) .. &amp;apos;\124cFFFA652A of type: \124cFFDBFA2A&amp;apos; .. type)
               end --end If debuff is being applied(true) or removed(false)
               
               return --return so we only match once
            end --end check if spellid matched in list
            
         end--End for loop that looped through the spellid list of a certain type
         --                }            
      end--End If that checked to make sure we want to catch debuffs of this type
      --            }            
   end--End For Loop that looped through debuff types
   --        }    
end--End function PallyDebuffHandler
--  } 


function PQ_GetTimeLeftBuff(buff)

	return PQ_Buffs[buff].endTime - GetTime()

end

function PQ_GetTimeLeftDebuff(debuff)

	return select(7,UnitDebuffID(&amp;quot;player&amp;quot;,debuff)) - GetTime()

end

PQ_PaladinFunctionLoaded = true

end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Decurse</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Define what we&amp;apos;d like to decurse
Decurse = { &amp;quot;Living Bomb&amp;quot; }

-- Define the spell, just for range etc. checks
DecurseSpell = 2782

-- Check we&amp;apos;ve got something to decurse
if IsShiftKeyDown() then

	print(&amp;apos;Loaded:&amp;apos;)
	print(loaded)
	print(&amp;apos;LibLoaded:&amp;apos;)
	print(libloaded)
end</Lua><RecastDelay>1000</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Functions --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Make sure we&amp;apos;re only declaring once
if not functions then

  -- FUNCTION: spellCheck
  -- ACCEPTS: SpellID or Name and Unit
  -- PERFORMS: Various range, afinity and other checks to ensure a spell should be cast
  -- RETURNS: 1 or 0 depending on the check results
  function spellCheck(spell, target)

    local Cast = true;
    local SpellName = GetSpellInfo(spell)

    if UnitExists(target) == nil or
      UnitIsDeadOrGhost(target) or
      UnitCanCooperate(&amp;quot;player&amp;quot;, target) == nil or
      IsSpellInRange(SpellName, target) == 0 or
      UnitChannelInfo(&amp;quot;player&amp;quot;) ~= nil or 
      PQR_IsOutOfSight(target)
    then Cast = false end

    return Cast

  end

  -- FUNCTION: classColor
  -- ACCEPTS: String Name, Boolean use [ ] around name?
  -- PERFORMS: Builds a class coloured hyperlink to be used in chat
  -- RETURNS: A hyperlink string
  function classColor(name, brackets)
 
    local str = name

    if UnitExists(name) then
      local playerClass, englishClass = UnitClass(name)
      local color = RAID_CLASS_COLORS[englishClass]
      str = Hex(color)..&amp;quot;|Hplayer:&amp;quot;..name..&amp;quot;|h&amp;quot;
      if brackets == true then str = str..&amp;quot;[&amp;quot;..name..&amp;quot;]|h|r&amp;quot; else str = str..name..&amp;quot;|h|r&amp;quot; end
    end

    return str

  end

  -- FUNCTION: Hex
  -- ACCEPTS: table r of r,g,b colors, or seperate r,g,b values
  -- PERFORMS: takes the input colours and turns them into a hex value for coloring chat
  -- RETURNS: Hex string
  function Hex(r, g, b)

    if(type(r) == &amp;quot;table&amp;quot;) then if(r.r) then r, g, b = r.r, r.g, r.b else r, g, b = unpack(r) end end
    if(not r or not g or not b) then r, g, b = 1, 1, 1 end
    return format(&amp;quot;|cff%02x%02x%02x&amp;quot;, tonumber(r*255), tonumber(g*255), tonumber(b*255))

  end

  -- FUNCTION: table.find
  -- ACCEPTS: table name, value to find
  -- PERFORMS: Searches the given table for the value
  -- RETURNS: position if found, false on not
  function tableFind(table, value)
  
    if type(table) == &amp;quot;table&amp;quot; and value then 
      for k, val in pairs(table) do 
        if val:lower() == value:lower() then return true end
      end
    end

    return false
  end

  -- Stop multiple loads
  functions = true

end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>--Loader2--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Make sure we&amp;apos;re only loading once
if not libloaded then

  print(&amp;apos;Loading Library stuff&amp;apos;)

  -- Stop multiple loads
  libloaded = true

end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>PrintDebug</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Define what we&amp;apos;d like to decurse
Decurse = { &amp;quot;Living Bomb&amp;quot; }

-- Define the spell, just for range etc. checks
DecurseSpell = 2782

-- Check we&amp;apos;ve got something to decurse
if IsShiftKeyDown() then

	print(&amp;apos;Loaded:&amp;apos;)
	print(loaded)
	print(&amp;apos;LibLoaded:&amp;apos;)
	print(libloaded)
	print(&amp;apos;Events Registered:&amp;apos;)
	print(load_events)
end</Lua><RecastDelay>1000</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>--Event Loader--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>---------------------------START--------------------------

if not PQ_EventHandlerLoaded then

local frame, events = CreateFrame(&amp;quot;Frame&amp;quot;), {};

print(&amp;apos;Loading Event Handlers&amp;apos;)


function events:COMBAT_LOG_EVENT(...)
	  -- Check for a buff/debuff applied to PLAYER (yourself)
	  if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
	  then
	  		if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
	        	PQ_PallyDebuffHandler(select(12, ...),true)
	  			--RaidDeBuffEvent(select(12, ...),select(9, ...))
	  		end
	  		
	  		if select(15, ...) == &amp;apos;BUFF&amp;apos; then
	        	PQ_PallyBuffHandler(select(12, ...),true)
	  			--RaidDeBuffEvent(select(13, ...),select(12, ...),select(9, ...))
	  		end
	  end
	  
	  if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
	  then
	  		if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
	        	PQ_PallyDebuffHandler(select(12, ...),true)
	  			--RaidDeBuffEvent(select(12, ...),select(9, ...))
	  		end
	  		
	  		if select(15, ...) == &amp;apos;BUFF&amp;apos; then
	        	PQ_PallyBuffHandler(select(12, ...),true)
	  			--RaidDeBuffEvent(select(13, ...),select(12, ...),select(9, ...))
	  		end
	  end
	  
	  -- Check for a buff/debuff removed from PLAYER (yourself)
	  if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
	  then
	  		if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
	        	PQ_PallyDebuffHandler(select(12, ...),false)
	  			--RaidDeBuffEvent(select(12, ...),select(9, ...))
	  		end
	  		
	  		if select(15, ...) == &amp;apos;BUFF&amp;apos; then
	        	PQ_PallyBuffHandler(select(12, ...),false)
	  			--RaidDeBuffEvent(select(13, ...),select(12, ...),select(9, ...))
	  		end	
	  end  
end


function events:PLAYER_REGEN_DISABLED(...)

	PQ_InCombat = true

end

function events:PLAYER_REGEN_ENABLED(...)

	PQ_InCombat = false

end

function events:PLAYER_CONTROL_LOST(...)

	if PQ_InCombat then
		PQ_HasLossOfControl = true
	end
	
end

function events:PLAYER_CONTROL_GAINED(...)

	if PQ_HasLossOfControl then
		PQ_HasLossOfControl = false
	end

end

function events:MODIFIER_STATE_CHANGED(...)
--Change state on key release since people could hold key down so tap to change state
	local key, state = ...
	
	if key == &amp;apos;LCTRL&amp;apos; and state == 0 then
		
		if PQ_AOESwitchState then 
   			PQ_AOESwitchState = nil 
    		print(&amp;apos;Rotation mode: \124cFFDBFA2ASingle target&amp;apos;)
  		else 
    		PQ_AOESwitchState = 1 
    		print(&amp;apos;Rotation mode: \124cFFFA652AArea of Effect&amp;apos;)
		end
	end

end

function events:UNIT_POWER(...)

	local unitID, strResource = ...
	
	if unitID == &amp;apos;player&amp;apos; and strResource == &amp;apos;HOLY_POWER&amp;apos; then
	
		PQ_HolyPower = UnitPower(&amp;apos;player&amp;apos;, 9)
	
	end

end

function PQ_Init()

	PQ_AOESwitchState = nil 
	print(&amp;apos;Rotation mode: \124cFFDBFA2ASingle target&amp;apos;)
	PQ_HolyPower = UnitPower(&amp;apos;player&amp;apos;, 9)

	PQ_CheckForAllBuffs()
	
end

function PQ_GetPlayerHP()
	hp,hpmax = UnitHealth(&amp;apos;player&amp;apos;),UnitHealthMax(&amp;apos;player&amp;apos;)
	
	if hp and hpmax then 
		return hp / hpmax * 100
	else 
		return 0
	end
end

function PQ_GetPlayerUP()
	up,upmax = UnitPower(&amp;apos;player&amp;apos;),UnitPowerMax(&amp;apos;player&amp;apos;)
	
	if up and upmax then 
		return up / upmax * 100
	else 
		return 0
	end
end

function PQ_GetTargetHP()
	hp,hpmax = UnitHealth(&amp;apos;target&amp;apos;),UnitHealthMax(&amp;apos;target&amp;apos;)
	
	if hp and hpmax then 
		return hp / hpmax * 100
	else 
		return 0
	end
end

frame:SetScript(&amp;quot;OnEvent&amp;quot;, function(self, event, ...) events[event](self, ...); end);

for k, v in pairs(events) do
 frame:RegisterEvent(k); -- Register all events for which handlers have been defined
end

PQ_Init()

PQ_EventHandlerLoaded = true

end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Crusader Strike</Name><Default>false</Default><SpellID>35395</SpellID><Actions>/startattack</Actions><Lua>if IsSpellInRange(&amp;quot;Crusader Strike&amp;quot;, &amp;quot;target&amp;quot;) ~= 1 then
 return false
end 

if PQ_HolyPower &amp;lt; 3  then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Judgement</Name><Default>false</Default><SpellID>20271</SpellID><Actions>/startattack</Actions><Lua> 
if IsSpellInRange(&amp;quot;Judgement&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end

if PQ_Buffs[PQ_SealOfTruth].hasBuff or PQ_Buffs[PQ_SealOfRight].hasBuff then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Hammer of Wrath</Name><Default>false</Default><SpellID>24275</SpellID><Actions>/startattack</Actions><Lua>
if IsSpellInRange(&amp;quot;Hammer of Wrath&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end

if PQ_Buffs[PQ_AvengingWrath].hasBuff or PQ_GetTargetHP() &amp;lt;= 20 then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Templar&amp;apos;s Verdict</Name><Default>false</Default><SpellID>85256</SpellID><Actions></Actions><Lua>if IsSpellInRange(&amp;quot;Templar&amp;apos;s Verdict&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end
	
if PQ_HolyPower == 3 or PQ_Buffs[PQ_DivinePurpose].hasBuff then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Crusader Aura</Name><Default>false</Default><SpellID>32223</SpellID><Actions></Actions><Lua>local Aura = GetShapeshiftForm(&amp;quot;player&amp;quot;)

if Aura ~= 5 and IsMounted() then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Inquisition</Name><Default>false</Default><SpellID>84963</SpellID><Actions>/startattack</Actions><Lua>if PQ_Buffs[PQ_Inquisition].hasBuff then
	if PQ_GetTimeLeftBuff(PQ_Inquisition) &amp;lt; 4 then
		if PQ_HolyPower== 3 or PQ_Buffs[PQ_DivinePurpose].hasBuff then
			return true
		end
	end
else
	if PQ_HolyPower== 3 or PQ_Buffs[PQ_DivinePurpose].hasBuff then
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Consecration</Name><Default>false</Default><SpellID>26573</SpellID><Actions>/startattack</Actions><Lua>
if IsSpellInRange(&amp;quot;Crusader Strike&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 or PQR_IsMoving(2)  then
	return false
end

if PQ_GetPlayerUP() &amp;gt; 70 then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Exorcism if Art of War</Name><Default>false</Default><SpellID>879</SpellID><Actions></Actions><Lua>

if IsSpellInRange(&amp;quot;Exorcism&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end

if PQ_Buffs[PQ_ArtOfWar].hasBuff then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Zealotry</Name><Default>false</Default><SpellID>85696</SpellID><Actions>/startattack</Actions><Lua>if IsSpellInRange(&amp;quot;Crusader Strike&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end
	
if PQ_HolyPower &amp;lt; 2 or PQ_Buffs[PQ_DivinePurpose].hasBuff or PQ_Buffs[PQ_AvengingWrath].hasBuff then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Word of Glory</Name><Default>false</Default><SpellID>85673</SpellID><Actions></Actions><Lua>

if PQ_GetPlayerHP() &amp;lt; 50 and PQ_HolyPower == 3 then
    return true
end</Lua><RecastDelay>0</RecastDelay><Target>False</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Flash of Light &amp;lt; 25% HP</Name><Default>false</Default><SpellID>19750</SpellID><Actions>/startattack</Actions><Lua>

if PQ_Buffs[PQ_AvengingWrath].hasBuff ~= nil then
	return true
else
	if PQ_GetPlayerHP() &amp;lt;= 20 then
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Word of Glory &amp;lt; 60%</Name><Default>false</Default><SpellID>85673</SpellID><Actions>/cancelaura Divine Plea</Actions><Lua>

if PQ_GetPlayerHP() &amp;lt; 60 and PQ_HolyPower == 3 then
    return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Holy Shield</Name><Default>false</Default><SpellID>20925</SpellID><Actions></Actions><Lua>return true</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Divine Plea</Name><Default>false</Default><SpellID>54428</SpellID><Actions>/cancelaura Divine Plea</Actions><Lua>

if PQ_GetPlayerHP() &amp;lt; 40 and PQ_HolyPower ~= 3 then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Word of Glory &amp;lt; 100%</Name><Default>false</Default><SpellID>85673</SpellID><Actions>/cancelaura Divine Plea</Actions><Lua>

if PQ_GetPlayerHP() &amp;lt; 100 and PQ_HolyPower == 3 then
    return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Avenging Wrath</Name><Default>false</Default><SpellID>31884</SpellID><Actions></Actions><Lua>if IsSpellInRange(&amp;quot;Crusader Strike&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end

return true</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Rebuke</Name><Default>false</Default><SpellID>96231</SpellID><Actions></Actions><Lua>if IsShiftKeyDown() then
return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Lay on Hands &amp;lt; %15</Name><Default>false</Default><SpellID>633</SpellID><Actions></Actions><Lua>return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Lay on Hands &amp;lt; %15</Name><Default>false</Default><SpellID>633</SpellID><Actions></Actions><Lua>local unithealth = 100 * UnitHealth(&amp;quot;player&amp;quot;) / UnitHealthMax(&amp;quot;player&amp;quot;)

if PQ_GetPlayerHP() &amp;lt;= 15 then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>GoAK</Name><Default>false</Default><SpellID>86150</SpellID><Actions></Actions><Lua>if IsSpellInRange(&amp;quot;Crusader Strike&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end

return true</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Hammer of Justice MO</Name><Default>false</Default><SpellID>853</SpellID><Actions></Actions><Lua>if IsLeftAltKeyDown()  then
	if IsSpellInRange(&amp;quot;Hammer of Justice&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
		return false
	end

	if UnitIsEnemy(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) then
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Pause</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsShiftKeyDown() then
StopAttack()
return true
end</Lua><RecastDelay>3000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Divine Storm (w/AOE switch)</Name><Default>false</Default><SpellID>53385</SpellID><Actions>/startattack</Actions><Lua>if PQ_AOESwitchState then
  return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Retribution Aura</Name><Default>false</Default><SpellID>7294</SpellID><Actions></Actions><Lua>local Aura = GetShapeshiftForm(&amp;quot;player&amp;quot;)

if Aura ~= 2 and IsMounted() == nil then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Seal of Righteousness (If AOE)</Name><Default>false</Default><SpellID>20154</SpellID><Actions>/startattack</Actions><Lua>

if PQ_AOESwitchState and not PQ_Buffs[PQ_SealOfRight].hasBuff then
  return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Crusader Strike (w/AOE switch)</Name><Default>false</Default><SpellID>35395</SpellID><Actions>/startattack</Actions><Lua>if PQ_AOESwitchState then
  return false
end

if IsSpellInRange(&amp;quot;Crusader Strike&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end

if PQ_HolyPower &amp;lt; 3  then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Seal of Truth (If Not AOE)</Name><Default>false</Default><SpellID>31801</SpellID><Actions>/startattack</Actions><Lua> 

if PQ_AOESwitchState then
  return false
end
		
if not PQ_Buffs[PQ_SealOfTruth].hasBuff then
   return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Dont&amp;apos; Dismount</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsMounted() then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>--Offensive Spells--</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local buff = { 642, 45438, 31224, 23920, 33786, 19263, 97417, 97977 }
local mob = { &amp;quot;Training Dummy&amp;quot;, &amp;quot;Raider&amp;apos;s Training Dummy&amp;quot;, &amp;quot;Twisted Spirit&amp;quot;, &amp;quot;Amani´shi Hatcher&amp;quot;, &amp;quot;Crystal Prison&amp;quot;, &amp;quot;Hakkar&amp;apos;s Chains&amp;quot;, &amp;quot;Exposed Head of Magmaw&amp;quot;, &amp;quot;Battleground Demolisher&amp;quot;, &amp;quot;Ozumat&amp;quot;, &amp;quot;Right Foot&amp;quot;, &amp;quot;Left Foot&amp;quot; }
local noaggromobs = nil
local immunity = nil

for i,v in ipairs(buff) do
  if UnitBuffID(&amp;quot;target&amp;quot;,v) then immunity = 1 end
end

for i,v in ipairs(mob) do
  if UnitName(&amp;quot;target&amp;quot;) == v then noaggromobs = 1 end
end

if UnitIsDead(&amp;quot;target&amp;quot;)
or immunity
or UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) == nil
or (UnitAffectingCombat(&amp;quot;target&amp;quot;) == nil and noaggromobs == nil and UnitIsPlayer(&amp;quot;target&amp;quot;) == nil)
or tonumber(UnitGUID(&amp;quot;target&amp;quot;):sub(5,5),16) == 4
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Hand Of Freedom</Name><Default>false</Default><SpellID>1044</SpellID><Actions></Actions><Lua>
 if PQ_Debuffs[&amp;apos;MovementImpairing&amp;apos;].hasDebuff then return true end
</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Blessing of Might</Name><Default>false</Default><SpellID>19740</SpellID><Actions></Actions><Lua>BoM = UnitBuffID(&amp;quot;player&amp;quot;, &amp;quot;Blessing of Might&amp;quot;)

if BoM == nil then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Holy Wrath</Name><Default>false</Default><SpellID>2812</SpellID><Actions>/startattack</Actions><Lua>

if IsSpellInRange(&amp;quot;Crusader Strike&amp;quot;, &amp;quot;target&amp;quot;)  ~= 1 then
	return false
end

if PQ_GetPlayerUP() &amp;gt; 20 then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability></PALADIN>