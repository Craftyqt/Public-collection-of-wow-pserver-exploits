<?xml version="1.0" encoding="utf-8" ?><ROGUE><Ability><Name>-- Functions --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not FuncLoaded then
	FuncLoaded = true

	function DebugPrint(s)
		if debug then
			PQR_WriteToChat(s)
		end
	end
	
	function CalculateHP(t)
		local ActualWithIncoming = 100 * UnitHealth(t) / UnitHealthMax(t)
		if ActualWithIncoming then
			return ActualWithIncoming
		else
			return 100
		end
	end
		
	function CanHeal(t)
		if not UnitIsCharmed(t) 
		and not UnitIsDeadOrGhost(t) 
		and not UnitDebuffID(t, 33786) then --Clone
			return true 
		end 
	end




	--New Healing Engine
	function SheuronEngine(MO, TARGETHEAL, LOWHP, HEALPET)
		local MouseoverCheck = MO or false
		local LowHPTarget = LOWHP or 80
		local TargetHealCheck = TARGETHEAL or false
		local HEALPET = HEALPET or true
		lowhpmembers = 0
		
		playerHP = CalculateHP(&amp;quot;player&amp;quot;)
			
		members = { { 	
			Unit = &amp;quot;player&amp;quot;, 
			HP = playerHP, 
			GUID = UnitGUID(&amp;quot;player&amp;quot;), 
			IsPlayer = true, 
			} } 
			
		--Adding player to low hp table
		if playerHP &amp;lt; LowHPTarget then
			lowhpmembers = lowhpmembers + 1
		end	
			
			
		local group = &amp;quot;party&amp;quot;
		local groupmembers = GetNumPartyMembers()

		if GetNumRaidMembers() &amp;gt; 0 then
			group = &amp;quot;raid&amp;quot;
			groupmembers = GetNumRaidMembers()
		end
			
			
		for i = 1, groupmembers do 
			local member, memberhp, uidmember = group..i, CalculateHP(group..i), UnitGUID(group..i)	
			-- Checking all Party/Raid Members for Range/Health
			if ((UnitExists(member) and CanHeal(member)) or UnitIsUnit(&amp;quot;player&amp;quot;,member))
			and member ~= nil and memberhp ~= nil and uidmember ~= nil then 	
				table.insert( members,{ Unit = member, HP = memberhp, GUID = uidmember, IsPlayer = true } ) 
					
				-- Setting Low HP Members variable for AoE Healing
				if memberhp &amp;lt; LowHPTarget then
					lowhpmembers = lowhpmembers + 1
				end	
			end 
				
			-- Checking Pets in the group
			if HEALPET and lowhpmembers == 0 and UnitExists(group..i..&amp;quot;pet&amp;quot;) and CanHeal(group..i..&amp;quot;pet&amp;quot;) then
				local memberpet, memberpethp,  uidmemberpet = nil, nil, nil
				memberpet = group..i..&amp;quot;pet&amp;quot; 
				memberpethp = CalculateHP(memberpet)		
				uidmemberpet = UnitGUID(memberpet)
						
				if memberpet ~= nil and memberpethp ~= nil and uidmemberpet ~= nil then
					table.insert(members, { Unit = memberpet, HP = memberpethp, GUID = uidmemberpet, IsPlayer = false } )
				end			
			end
		end 
		-- Checking Priority Targeting
		if TargetHealCheck and CanHeal(&amp;quot;target&amp;quot;) then
			table.sort(members, function(x) return UnitIsUnit(&amp;quot;target&amp;quot;,x.Unit) end)
		elseif MouseoverCheck and CanHeal(&amp;quot;mouseover&amp;quot;) and GetMouseFocus() ~= WorldFrame then
			table.sort(members, function(x) return UnitIsUnit(&amp;quot;mouseover&amp;quot;,x.Unit) end)
		end
	end


	--CastSpell--
	function _castSpell(spellid,tar)
		if UnitCastingInfo(&amp;quot;player&amp;quot;) == nil
		and UnitChannelInfo(&amp;quot;player&amp;quot;) == nil
		--and IsPlayerSpell(spellid) == true
		and cdRemains(spellid) == 0
		then
			if tar ~= nil
			and rangeCheck(spellid,tar) == nil
				then
				return false
			elseif tar ~= nil
			and rangeCheck(spellid,tar) == true
				then
				CastSpellByID(spellid, tar)
				return true
			elseif tar == nil
				then
				CastSpellByID(spellid)
				return true
			else
		return false
		end
	end
	end
	
	
	--Combat Check--
	function inCombat()
	if UnitAffectingCombat(&amp;quot;player&amp;quot;) ~= nil
		then
			return true
		end
	end
	
	--Get HP simple--
	function getHp(unit)
	if UnitExists(unit) ~= nil
		then
			return 100 * UnitHealth(unit) / UnitHealthMax(unit)
		end
	end
	
	--Range Check Simple--
	function rangeCheck(spellid,unit)
	if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
	then
		return true
	end
	end
	
	
	--Amount of Cooldown that remains--
	function cdRemains(spellid)
		if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) &amp;gt; 0
			then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
		else return 0
		end
	end


	


--End for FuncLoad
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Backstab</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not burst
and cdRemains(48657) == 0 
and Energy &amp;gt;= 40
and not PQR_NotBehindTarget()  then
	DebugPrint(&amp;quot;Casting Backstab&amp;quot;)
	_castSpell(48657)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Hemo</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not burst
and cdRemains(48660) == 0 
and Energy &amp;gt;= 30
and PQR_NotBehindTarget()  then
	DebugPrint(&amp;quot;Casting Hemo&amp;quot;)
	_castSpell(48660)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Start Fight --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsMounted()
or SpellIsTargeting()
or UnitInVehicle(&amp;quot;player&amp;quot;)
or UnitIsDead(&amp;quot;target&amp;quot;) 
or UnitIsDead(&amp;quot;player&amp;quot;)
or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
or not UnitExists(&amp;quot;target&amp;quot;) then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Init --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>ComboPoints = GetComboPoints(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;)
Energy = UnitPower(&amp;quot;player&amp;quot;)



if not rogueinit then
	rogueinit = true
	StealthOpener = &amp;quot;CheapShot&amp;quot;
	burst = false
	debug = false
end


burstEnergy = 70

if burst
and (not UnitExists(&amp;quot;target&amp;quot;)
or not UnitAffectingCombat(&amp;quot;player&amp;quot;)) then
	DebugPrint(&amp;quot;Turned off Burst because we went out of combat.&amp;quot;)
	burst = false
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Slice n Dice</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if cdRemains(6774) == 0 
and ComboPoints &amp;gt; 0 
and Energy &amp;gt;= 25
and not UnitBuffID(&amp;quot;player&amp;quot;, 6774) then
	DebugPrint(&amp;quot;Casting SnD at &amp;quot;..ComboPoints..&amp;quot; Combo points&amp;quot;)
	_castSpell(6774)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Rupture</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if cdRemains(48672) == 0 
and ComboPoints == 5 
and Energy &amp;gt;= 25
and not UnitDebuffID(&amp;quot;target&amp;quot;, 48672) then
	DebugPrint(&amp;quot;Casting Rupture&amp;quot;)
	_castSpell(48672)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Eviserate</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not burst
and cdRemains(48668) == 0 
and Energy == 35
and ComboPoints &amp;gt;= 5  then
	DebugPrint(&amp;quot;Casting Evis&amp;quot;)
	_castSpell(48668)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Event Loader --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not frame then
 -- Create our frame and bind combat log events
 frame = CreateFrame(&amp;quot;Frame&amp;quot;, nil, UIParent)
print(&amp;quot;created frame&amp;quot;)
end
	
--Evasion = 26669
--Cloak of Shadows = 31224
--Blind = 2094
--Shadowstep = 36554
--Vanish = 26889
--Gouge = 1776
--Feint = 48659
--Shiv = 5938
--Dismantle = 51722



-- Spell event table
spellIds = {
-- Death Knight
[47481] = {26669},			-- Gnaw (Ghoul)
[49203] = {31224}, 			-- Hungering Cold
[49576] = {36554},			-- Death Grip
[45524] = {1776}, 			-- Chains of Ice
[49039] = {1776},			-- Lichborne
[48792] = {1776}, 			-- Icebound Fortitude 
-- Druid
[5211]  = {1776}, 			-- Bash
[33786] = {31224}, 			-- Cyclone
[22570] = {1776, 26669}, 		-- Maim
[9005]  = {1776, 26669}, 		-- Pounce
[339]   = {1776},	 		-- Entangling Roots
[49376] = { 36554}, 			--FeralCharge
[16979] = { 36554}, 			-- Feral Charge (Bear)
[49377] = { 36554}, 			-- Feral Charge (Bear)
[5229]  = {5938}, 			--Enrage
-- Hunter
[19263] = {1776},			-- Deterrence
[781]   = {1776},			-- Disengage
[19503] = = {1776},			-- Scatter
[53271] = {1776},			-- Master&amp;apos;s Call 
-- Mage
[44572] = {1776,  31224},		-- Deep Freeze					
[31661] = {1776},			-- Dragon&amp;apos;s Breath
[118]   = {31224},			-- Polymorph
[1953]  = {36554},			-- Blink
--- Paladin
[853]   = {1776, 31224},		-- Hammer of Justice
[20066] = {1776, 31224},		-- Repentance
[31884] = {51722},			-- Avenging Wrath
-- Priest
[8122]  = {31224, 1776},		-- Psychic Scream
-- Rogue
[2094]  = {26889},			-- Blind
[1833]  = {1776},			-- Cheap Shot
[1856]  = {2094},	 		--Vanish		 
[6770]  = {51724},			-- Sap
[36554] = {1776, 36554}, 		-- Shadowstep
[51713] = {1776, 51722}, 		-- Shadow Dance
				   					
-- Shaman
[51514] = {31224},			-- Hex
[51490] = { 36554},			-- Thunderstorm
-- Warlock
[6789]  = {1776, 31224},		-- Death Coil
[5782]  = {31224},			-- Fear 
[48020]  = {36554, 1776},		-- Demonic Circle: Transport
-- Warrior
[100]  = { 36554},			-- Charge  
[1719] = {51722},			-- Recklessness
[18499] = {5938}, 			-- Beserker Rage
[57519] = {5938}, 			-- Enrage


}
  frame:RegisterEvent(&amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot;)
  frame:SetScript(&amp;quot;OnEvent&amp;quot;, EventHandler)

  -- Create our event handler function
function EventHandler(self, event, ...)
	-- Don&amp;apos;t cast while in stealth 
	if UnitBuffID(&amp;quot;player&amp;quot;, 1784) then return end

	
	
	if event == &amp;quot;COMBAT_LOG_EVENT_UNFILTERED&amp;quot; then
	local type,  sourceGUID, sourceNAME, _, destGUID, destNAME, _, sid = select(2, ...)
		if type == &amp;quot;SPELL_CAST_SUCCESS&amp;quot;
		and sourceGUID == UnitGUID(&amp;quot;target&amp;quot;)  then
			print(&amp;quot;Something is heading my way&amp;quot;)
			local sid = select(9, ...)
			local sname = spellIds[sid]
			if sname ~= nil then
				for _,v in ipairs(sname) do
					print(&amp;quot;trying to counter with &amp;quot;..v)
					CastSpellByID(v) 										return
				end
			end
	  	end
   	 end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Stealth Openers</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local Stealthed = UnitBuffID(&amp;quot;player&amp;quot;, 1784)

if Stealthed
and UnitExists(&amp;quot;target&amp;quot;)
and not UnitDebuffID(&amp;quot;target&amp;quot;, 51724) then
	if StealthOpener == &amp;quot;CheapShot&amp;quot; then
		if cdRemains(1833) == 0 then
			DebugPrint(&amp;quot;Casting Cheap Shot Stealth Opener&amp;quot;)
			_castSpell(1833)
			return true
		end
	end
	if StealthOpener == &amp;quot;Garrote&amp;quot; then
		if cdRemains(48676) == 0 then
			DebugPrint(&amp;quot;Casting Garrote Stealth Opener&amp;quot;)
			_castSpell(48676)
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Stealth</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if cdRemains(1784) == 0
and not inCombat()
and not UnitBuffID(&amp;quot;player&amp;quot;, 1784) then
	DebugPrint(&amp;quot;Casting Stealth&amp;quot;)
	_castSpell(1784)
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>Burst</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>shdCD = cdRemains(51713)
Snd = UnitBuffID(&amp;quot;player&amp;quot;, 6774)
tarRupt = UnitDebuffID(&amp;quot;target&amp;quot;, 48672)

if burst
and not UnitBuffID(&amp;quot;player&amp;quot;, 51713)
and shdCD &amp;gt; 3   then
	DebugPrint(&amp;quot;Canceling Burst Mode&amp;quot;)
	burst = false
end

if burst
and Energy &amp;lt; burstEnergy
and not UnitBuffID(&amp;quot;player&amp;quot;, 51713) then
	DebugPrint(&amp;quot;Pooling, Energy at &amp;quot;..Energy)
	return true
end

if burst
and Energy &amp;gt;  burstEnergy
and shdCD == 0
and not UnitBuffID(&amp;quot;player&amp;quot;, 51713) then
	DebugPrint(&amp;quot;Casting Shadow Dance Because of Burst&amp;quot;)
	_castSpell(51713)
	return true
end



if not burst
and shdCD == 0
and Snd
and tarRupt then 
	DebugPrint(&amp;quot;Yo dog its burst time&amp;quot;)
	burst = true
end


if burst then

--Premed
if cdRemains(14183) == 0 
and ComboPoints &amp;lt;= 3  then
	DebugPrint(&amp;quot;Casting Premed In Burst&amp;quot;)
	_castSpell(14183)
	return true
end


--Evis
if cdRemains(48668) == 0 
and ComboPoints == 5  then
	DebugPrint(&amp;quot;Casting Evis In Burst&amp;quot;)
	_castSpell(48668)
	return true
end


--Ambush
if cdRemains(48691) == 0 
and not PQR_NotBehindTarget()  
and ComboPoints &amp;lt;= 3  then
	DebugPrint(&amp;quot;Casting Ambush  In Burst&amp;quot;)
	_castSpell(48691)
	return true
end

--Hemo
if cdRemains(48660) == 0 
and PQR_NotBehindTarget()  then
	DebugPrint(&amp;quot;Casting Hemo In Burst&amp;quot;)
	_castSpell(48660)
	return true
end



end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>------test</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>function testv()
	return &amp;quot;this works&amp;quot;
end

PQR_WriteToChat(testv())</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability><Ability><Name>-- Macros --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>CreateFont(&amp;quot;cpoworksPvP&amp;quot;)
	local s=[[Interface\\\AddOns]]
	cpoworksPvP:SetFont(s.. [[calibrib.ttf]],12,&amp;quot;OUTLINE&amp;quot;) 
	cpoworksPvP:SetJustifyH(&amp;quot;LEFT&amp;quot;)
	
	if cpoworksPvP:GetFont()~=nil then 
	  	if StatusFrame==nil then 
		    StatusFrame=CreateFrame(&amp;quot;Frame&amp;quot;)
		    StatusFrame:ClearAllPoints() 
		    StatusFrame:SetHeight(12)
		    StatusFrame:SetWidth(300)
		    StatusFrame:Show() 
		    StatusFrame.text=StatusFrame:CreateFontString( nil,&amp;quot;BACKGROUND&amp;quot;,&amp;quot;cpoworksPvP&amp;quot;)
		    StatusFrame.text:SetAllPoints()
		    StatusFrame:SetPoint(&amp;quot;TOP&amp;quot;,ChatFrame1, 0,40) 
		    StatusFrame:SetScript(&amp;quot;OnUpdate&amp;quot;,StatusFrame_OnUpdate)
		    StatusFrame:EnableMouse(true) 
		    StatusFrame:SetMovable(true)
		    StatusFrame:RegisterForDrag(&amp;quot;LeftButton&amp;quot;) 
		    StatusFrame:SetScript(&amp;quot;OnDragStart&amp;quot;,StatusFrame.StartMoving) 
		    StatusFrame:SetScript(&amp;quot;OnDragStop&amp;quot;,StatusFrame.StopMovingOrSizing) 
		    StatusFrame.text:SetText(&amp;quot;|cffFFBE69Macros: |cffb73737None&amp;quot;)
	  	end
	  	SLASH_STATUSFRAME1=&amp;quot;/statusframe&amp;quot; 
		SlashCmdList.STATUSFRAME=function() 
		  	if StatusFrame:IsShown()then 
		      	StatusFrame:Hide()
		    else 
		      	StatusFrame:Show()
		    end 
	  	end 
	end 

	function MacroStatusFrameUpdate()
	  	if StatusFrame==nil then 
	      return false 
	    end;
	    local MacroEnabled=false;
	    if macros[&amp;quot;toggle&amp;quot;]then 
	      MacroEnabled=GetCVar(&amp;quot;zugqa&amp;quot;)
	    end 
	    if not MacroEnabled then 
	      macroKeys={&amp;quot;blind&amp;quot;} 
	      for i=1, #macroKeys do 
	        if macros[macroKeys[i]]then 
	          MacroEnabled = macroKeys[i] 
	        end 
	      end 
	    end 
	    
	    local function X(E2NZK,WNWWe)
	      return E2NZK:upper()..WNWWe:lower()
	    end 
	    local MacroStatusTextString=(MacroEnabled)and &amp;quot;|cffFFBE69Macros: |cFF00FF00&amp;quot;..MacroEnabled:gsub(&amp;quot;(%a)([%w_&amp;apos;]*)&amp;quot;,X)or&amp;quot;|cffFFBE69Macros: |cffb73737None&amp;quot; 
	    StatusFrame.text:SetText(MacroStatusTextString)
	    return true 
	end


function ResetMacros()
	macros[&amp;quot;blind&amp;quot;]=false
end

if lastMacro == nil then lastMacro=0 end
	
SLASH_BLIND1=&amp;quot;/BLIND&amp;quot; 
function SlashCmdList.BLIND(Msg) 
if not macros[&amp;quot;blind&amp;quot;]then 
	ResetMacros()
	if not GetCVar(&amp;quot;eenvm&amp;quot;) then 
		RegisterCVar(&amp;quot;eenvm&amp;quot;,nil)
	end 
	if string.len(Msg)&amp;gt;0 then 
		SetCVar(&amp;quot;eenvm&amp;quot;,Msg)
	else 
		SetCVar(&amp;quot;eenvm&amp;quot;,&amp;quot;mouseover, focus, target&amp;quot;)
	end
	macros[&amp;quot;blind&amp;quot;]=true;
	lastMacro=GetTime()
	MacroStatusFrameUpdate()
 elseif (GetTime() - lastMacro) &amp;gt; 2 then 
      	macros[&amp;quot;blind&amp;quot;]=false
      	MacroStatusFrameUpdate()
end 
end

SLASH_CPODEBUG1=&amp;quot;/CPODEBUG&amp;quot; 
SlashCmdList.CPODEBUG=function() 
	if debug  then 
		debug = false
		PQR_WriteToChat(&amp;quot;Debuging: |cFFFF0000Disabled&amp;quot;)
	else 
		debug = true
		PQR_WriteToChat(&amp;quot;Debuging: |cFF00FF00Enabled&amp;quot;)
	end 
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><LuaBefore></LuaBefore><LuaAfter></LuaAfter></Ability></ROGUE>