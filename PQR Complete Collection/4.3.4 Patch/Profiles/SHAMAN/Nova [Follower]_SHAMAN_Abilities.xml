<?xml version="1.0" encoding="utf-8" ?><SHAMAN><Ability><Name>-- Follow --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--if UnitIsAFK(&amp;quot;player&amp;quot;) then
--	JumpOrAscendStart()
--	AscendStop()
--end

if UnitExists(&amp;quot;party1&amp;quot;) and not UnitIsDeadOrGhost(&amp;quot;party1&amp;quot;) then
	FollowUnit(&amp;quot;party1&amp;quot;)
	return true
end</Lua><RecastDelay>3000</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Assist --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;party1&amp;quot;) and UnitExists(&amp;quot;party1target&amp;quot;) then
	if UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;party1target&amp;quot;) and not UnitIsDeadOrGhost(&amp;quot;party1target&amp;quot;) then
		if IsSpellInRange(GetSpellInfo(403), &amp;quot;party1target&amp;quot;) == 1 then
			PQR_CustomTarget = &amp;quot;party1target&amp;quot;
			return false
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Lightning Bolt</Name><Default>false</Default><SpellID>403</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_LightningBolt].check and PQ_Spell[PQ_LightningBolt].isKnown then
	if not PQR_IsMoving(0.3) and not UnitIsDeadOrGhost(PQR_CustomTarget) then
		if UnitExists(PQR_CustomTarget) and UnitCanAttack(&amp;quot;player&amp;quot;, PQR_CustomTarget) then
			return true
		elseif UnitExists(&amp;quot;target&amp;quot;) and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
			PQR_CustomTarget = &amp;quot;target&amp;quot;
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Constants --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	PQR_RotationStarted = false
	if PQR_LoadLua ~= nil then
		-- Load Data File
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_Nova_Data.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
end

if not Setup then

PQ_LightningBolt = 403
PQ_EarthShock = 8042
PQ_SoET = 8075
PQ_EarthShield = 974
PQ_HealingWave = 331

PQ_Spell = {
	[PQ_LightningBolt] = { check = true, isKnown = IsSpellKnown(403), cost = 10 },
	[PQ_EarthShock] = { check = true, isKnown = IsSpellKnown(8042), cost = 10 },
	[PQ_SoET] = { check = true, isKnown = IsSpellKnown(8075), cost = 10 },
	[PQ_EarthShield] = { check = true, isKnown = IsSpellKnown(974), cost = 10 },
	[PQ_HealingWave] = { check = true, isKnown = IsSpellKnown(331), cost = 10 }
} -- End Table


function CheckHP(target)
	if UnitExists(target) and not UnitIsDeadOrGhost(target) then
		local targetHP = 100 * UnitHealth(target) / UnitHealthMax(target)
		return targetHP
	end
end

	Setup = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Earth Shock</Name><Default>false</Default><SpellID>8042</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_EarthShock].check and PQ_Spell[PQ_EarthShock].isKnown then
	if UnitExists(PQR_CustomTarget) 
	  and not UnitIsDeadOrGhost(PQR_CustomTarget) 
	  and UnitCanAttack(&amp;quot;player&amp;quot;, PQR_CustomTarget) 
	  and IsSpellInRange(tostring(GetSpellInfo(8042)), PQR_CustomTarget) == 1 then
		return true
	elseif UnitExists(&amp;quot;target&amp;quot;) 
	  and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) 
	  and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) 
	  and IsSpellInRange(tostring(GetSpellInfo(8042)), &amp;quot;target&amp;quot;) == 1 then
		PQR_CustomTarget = &amp;quot;target&amp;quot;
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Earth Shield</Name><Default>false</Default><SpellID>974</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_EarthShield].check and PQ_Spell[PQ_EarthShield].isKnown then
	if GetNumPartyMembers() &amp;gt; 1 then
		return false
	elseif GetNumPartyMembers() == 1 and UnitExists(&amp;quot;party1&amp;quot;) then
		if IsSpellInRange(GetSpellInfo(974), &amp;quot;party1&amp;quot;) == 1 then
			local eShield, _, _, count = UnitBuffID(&amp;quot;party1&amp;quot;, 974)
			if eShield then
				if count &amp;lt; 2 and GetSpellCooldown(974) == 0 then
					PQR_CustomTarget = &amp;quot;party1&amp;quot;
					return true
				end
			elseif GetSpellCooldown(974) == 0 then
				PQR_CustomTarget = &amp;quot;party1&amp;quot;
				return true
			end
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Healing Wave</Name><Default>false</Default><SpellID>331</SpellID><Actions></Actions><Lua>local group = &amp;quot;party&amp;quot;
local members = GetNumPartyMembers()
local targetHP = 100
local potentialTarget = nil
if GetNumRaidMembers() &amp;gt; 0 then members = GetNumRaidMembers() end

if PQ_Spell[PQ_HealingWave].check and PQ_Spell[PQ_HealingWave].isKnown then
	for i=1, members, 1 do
		local member = group..tostring(i)
		if UnitExists(member)
		  and not UnitIsDeadOrGhost(member)
		  and not PQR_IsOutOfSight(member) then
			if CheckHP(member) &amp;lt; targetHP then
				if CheckHP(member) &amp;lt; 80 and UnitPower(&amp;quot;player&amp;quot;) &amp;gt; PQ_Spell[PQ_HealingWave].cost then
					if UnitCastingInfo(&amp;quot;player&amp;quot;) == &amp;quot;Lightning Bolt&amp;quot; then
						SpellStopCasting()
					end
					targetHP = CheckHP(member)
					potentialTarget = member
				end
			end
		end
	end
end

if potentialTarget and targetHP &amp;lt; 80 then
	PQR_CustomTarget = potentialTarget
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>myspells = { PQ_LightningBolt, PQ_EarthShock, PQ_SoET, PQ_EarthShield, PQ_HealingWave }

for _, v in ipairs(myspells) do
	if PQ_Spell[v].isKnown then
		PQ_Spell[v].cost = select(4, GetSpellInfo(v))
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></SHAMAN>