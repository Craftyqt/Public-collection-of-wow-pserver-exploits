<?xml version="1.0" encoding="utf-8" ?><MONK><Ability><Name>-- Initialize --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted then

  ----------------------------------
  -- Load Data Files
  ----------------------------------
	if not PQR_LoadLua(&amp;quot;PQR_idTip_core.lua&amp;quot;) then
		PQR_WriteToChat(&amp;quot;You are missing the idTip lua file to view Spell ID&amp;apos;s!!!&amp;quot;, &amp;quot;Error&amp;quot;)
	end
	if not PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) then
		PQR_WriteToChat(&amp;quot;You are missing a key file: PQR_Nova_Data.lua. Please put this file in the Data folder and reload PQR. Thank You!&amp;quot;, &amp;quot;Error&amp;quot;)
		PQR_RotationStop()
		return true
	end

	----------------------------------
	-- Activate Our Functions
	----------------------------------  
	-- Checks if our Cleanse will have a valid Debuff to Cleanse
	ValidDispel = nil
	function ValidDispel(t)
	  	local HasValidDispel = false
	  	local i = 1
	  	local debuff = UnitDebuff(t, i)
	  	while debuff do
	  		local debuffType = select(5, UnitDebuff(t, i))
	  		if debuffType == &amp;quot;Poison&amp;quot; or debuffType == &amp;quot;Bleed&amp;quot; then
	  			HasValidDispel = true
	  			break
	  		end
	  		i = i + 1
	  		debuff = UnitDebuff(t, i)
	 	end
		return HasValidDispel
	end
	
	
	----------------------------------
	-- Target Near Functions (Sheuron)
	----------------------------------  
	function TargetsInFront() 
		if not tifTimer or GetTime() - tifTimer &amp;gt; 1 then
			tifTimer = GetTime() 
			if UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) then 
			local n, mytarget = 0, UnitGUID(&amp;quot;target&amp;quot;) 
			repeat
				TargetNearestEnemy()
				n = n + 1
				if n &amp;gt; 5 then break end 
			until mytarget == UnitGUID(&amp;quot;target&amp;quot;) 
			return n
			end
		end
		return 0
	end
	
	function FriendsInFront(t) 
		if not fifTimer or GetTime() - fifTimer &amp;gt; 1 then
			fifTimer = GetTime() 
			if UnitCanCooperate(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;) then 
				local n, mytarget = 0, UnitGUID(&amp;quot;target&amp;quot;) 
				repeat
				TargetNearestEnemy()
				n = n + 1
				if n &amp;gt; 5 then break end 
			until mytarget == UnitGUID(&amp;quot;target&amp;quot;) 
			return n
			else
				TargetNearestFriend()
				if UnitCanCoopperate(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
					mytarget, n = UnitGUID(&amp;quot;target&amp;quot;), 0
				end 
				repeat
					TargetNearestFriend()
					n = n + 1
					if n &amp;gt; 5 then break end 
				until mytarget == UnitGUID(&amp;quot;target&amp;quot;) 
				return n
			end
		end
	end
	  
	----------------------------------
	-- Register CVar&amp;apos;s
	----------------------------------
	if GetCVar(&amp;quot;WindAoE&amp;quot;) == nil then RegisterCVar(&amp;quot;WindAoE&amp;quot;, 0) end
	if GetCVar(&amp;quot;PlaceHolder2&amp;quot;) == nil then RegisterCVar(&amp;quot;PlaceHolder2&amp;quot;, 1) end
	if GetCVar(&amp;quot;PlaceHolder3&amp;quot;) == nil then RegisterCVar(&amp;quot;PlaceHolder3&amp;quot;, 1) end
	if GetCVar(&amp;quot;PlaceHolder4&amp;quot;) == nil then RegisterCVar(&amp;quot;PlaceHolder4&amp;quot;, 1) end
	  
	if not GetCVar(&amp;quot;LoadRotation&amp;quot;) then RegisterCVar(&amp;quot;LoadRotation&amp;quot;, 0) end
	
	if GetMacroInfo(&amp;quot;AoE_Swapper&amp;quot;) ~= &amp;quot;AoE_Swapper&amp;quot; then CreateMacro(&amp;quot;AoE_Swapper&amp;quot;, 1, &amp;quot;/script if GetCVarBool(WindAoE) == true then SetCVar(WindAoE, 0) else SetCVar(WindAoE, 1) end&amp;quot;, 1, nil) end
	if GetMacroInfo(&amp;quot;Load2&amp;quot;) ~= &amp;quot;Load2&amp;quot; then CreateMacro(&amp;quot;Load2&amp;quot;, 1, &amp;quot;/script if GetCVar(LoadRotation) then SetCVar(LoadRotation, 2) end&amp;quot;, 1, nil) end
	if GetMacroInfo(&amp;quot;Load3&amp;quot;) ~= &amp;quot;Load3&amp;quot; then CreateMacro(&amp;quot;Load3&amp;quot;, 1, &amp;quot;/script if GetCVar(LoadRotation) then SetCVar(LoadRotation, 3) end&amp;quot;, 1, nil) end
	if GetMacroInfo(&amp;quot;Load4&amp;quot;) ~= &amp;quot;Load4&amp;quot; then CreateMacro(&amp;quot;Load4&amp;quot;, 1, &amp;quot;/script if GetCVar(LoadRotation) then SetCVar(LoadRotation, 4) end&amp;quot;, 1, nil) end
	
	if not KeyBindMacro then KeyBindMacro = &amp;quot;SHIFT-P&amp;quot; end
	if SetBinding(KeyBindMacro, &amp;quot;MACRO AoE_Swapper&amp;quot;) then 
		PQR_WriteToChat(&amp;quot;Macro AoE_Swapper was just set to &amp;quot;..KeyBindMacro..&amp;quot; keybind!&amp;quot;)
	else
		PQR_WriteToChat(&amp;quot;Macro AoE_Swapper was not set to a keybind&amp;quot;)
	end
	if tonumber(GetCVar(&amp;quot;LoadRotation&amp;quot;)) ~= 0 then 
		local RotationNumber = tonumber(GetCVar(&amp;quot;LoadRotation&amp;quot;))
		SetCVar(&amp;quot;LoadRotation&amp;quot;, 0)
		PQR_SwapRotation(RotationNumber)  
	end
	  
	  
	----------------------------------
	-- Setup Spell Delays
	----------------------------------
	PQR_RotationStarted = false
end

----------------------------------
-- Monk Globals
----------------------------------
PQ_Stance = GetShapeshiftForm()


----------------------------------
-- AoE Swapping
----------------------------------
if not AoEToggleTimer then AoEToggleTimer = GetTime() - 1.5 end

if IsRightAltKeyDown() 
 and not GetCurrentKeyBoardFocus() 
 and GetTime() - AoEToggleTimer &amp;gt;= 1.5 then
	AoEToggleTimer = GetTime()
	if GetCVarBool(&amp;quot;WindAoE&amp;quot;) then 
		SetCVar(&amp;quot;WindAoE&amp;quot;, 0) 
		PQ_Notify(&amp;quot;AoE Mode: |cffFF1100Disabled&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;AoE Mode: Disabled&amp;quot;, nil, &amp;quot;FF0000&amp;quot;)
	else 
		SetCVar(&amp;quot;WindAoE&amp;quot;, 1) 
		PQ_Notify(&amp;quot;AoE Mode: |Cff00B500Enabled&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;AoE Mode: Enabled&amp;quot;, nil, &amp;quot;00B500&amp;quot;)
	end	
end

--[[if GetCVarBool(&amp;quot;WindAoE&amp;quot;) and TargetsInFront() &amp;lt; 3 then
	SetCVar(&amp;quot;WindAoE&amp;quot;, 0)
end]]--

if not GetCVarBool(&amp;quot;WindAoE&amp;quot;) then
	if SavedCVarValue then
		PQ_Notify(&amp;quot;AoE Mode: |cffFF1100Disabled&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;AoE Mode: Disabled&amp;quot;, nil, &amp;quot;FF0000&amp;quot;)
	end
elseif GetCVarBool(&amp;quot;WindAoE&amp;quot;) then
	if not SavedCVarValue then
		PQ_Notify(&amp;quot;AoE Mode: |Cff00B500Enabled&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;AoE Mode: Enabled&amp;quot;, nil, &amp;quot;00B500&amp;quot;)
	end
end



SavedCVarValue = GetCVarBool(&amp;quot;WindAoE&amp;quot;)</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Jab</Name><Default>false</Default><SpellID>100780</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(100780)
 and PQ_ValidUnit
 and select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 40 
 and IsSpellInRange(GetSpellInfo(100780), PQ_ValidUnit) == 1 then
	PQR_CustomTarget = PQ_ValidUnit
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Tiger Palm</Name><Default>false</Default><SpellID>100787</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(100787)
 and PQ_ValidUnit
 and ( not GetCVarBool(&amp;quot;WindAoE&amp;quot;) or UnitBuffID(&amp;quot;player&amp;quot;, 118864) )
 and IsSpellInRange(GetSpellInfo(100787), PQ_ValidUnit) == 1
 and ( (select(5, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 2
 and PQ_ValidUnitHP &amp;gt;= 50)
 or UnitBuffID(&amp;quot;player&amp;quot;, 118864) ) then
	PQR_CustomTarget = PQ_ValidUnit
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blackout Kick</Name><Default>false</Default><SpellID>100784</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(100784)
 and PQ_ValidUnit
 and ( not GetCVarBool(&amp;quot;WindAoE&amp;quot;) or UnitBuffID(&amp;quot;player&amp;quot;, 116768) )
 and IsSpellInRange(GetSpellInfo(100784), PQ_ValidUnit) == 1
 and ((select(5, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 2 
 and PQ_ValidUnitHP &amp;lt; 50 )
 or UnitBuffID(&amp;quot;player&amp;quot;, 116768) ) then
	PQR_CustomTarget = PQ_ValidUnit
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Touch of Death</Name><Default>false</Default><SpellID>115080</SpellID><Actions></Actions><Lua>-- Touch of Death
if PQR_SpellAvailable(115080)
 and UnitHealth(&amp;quot;target&amp;quot;) &amp;lt;= UnitHealth(&amp;quot;player&amp;quot;) then
 	PQR_CustomTarget = PQ_ValidUnit
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Attack --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitExists(&amp;quot;target&amp;quot;) then TargetNearestEnemy() end

if IsMounted() or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) then
	return true
end

-- Target validation.
PQ_ValidUnit = nil
if UnitExists(&amp;quot;target&amp;quot;)
 and (UnitIsEnemy(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) or UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;))
 and (not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;) and not UnitIsCorpse(&amp;quot;target&amp;quot;))
 and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;) then
	PQ_ValidUnit = &amp;quot;target&amp;quot;
	PQ_ValidUnitHP = 100 * UnitHealth(&amp;quot;target&amp;quot;) / UnitHealthMax(&amp;quot;target&amp;quot;)
	PQ_ValidUnitGUID = UnitGUID(&amp;quot;target&amp;quot;)
end

if UnitExists(&amp;quot;mouseover&amp;quot;)
 and (UnitIsEnemy(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) or UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;))
 and (not UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;) and not UnitIsCorpse(&amp;quot;mouseover&amp;quot;))
 and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;) then
	--
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fortifying Brew</Name><Default>false</Default><SpellID>115203</SpellID><Actions></Actions><Lua>if IsLeftAltKeyDown()
 and not GetCurrentKeyBoardFocus()
 and PQR_SpellAvailable(115203) then
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Detox</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 20
 and ValidDispel(&amp;quot;player&amp;quot;)
 and PQR_SpellAvailable() then 
	PQR_CustomTarget = &amp;quot;player&amp;quot; 
	return true 
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Rising Sun Kick</Name><Default>false</Default><SpellID>107428</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(107428)
 and PQ_ValidUnit
 and IsSpellInRange(GetSpellInfo(107428), PQ_ValidUnit) == 1
 and select(5, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 2 then
	PQR_CustomTarget = PQ_ValidUnit
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Expel Harm</Name><Default>false</Default><SpellID>115072</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(115072)
 and PQ_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt; 85
 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
 and select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 40 then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Energizing Brew</Name><Default>false</Default><SpellID>115288</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(115288)
 and select(3, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 20
 and UnitAffectingCombat(&amp;quot;player&amp;quot;)
 and select(5, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 2 then
 	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Buffs --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not UnitBuffID(&amp;quot;player&amp;quot;, 116781) then
	CastSpellByID(116781, &amp;quot;player&amp;quot;)
end
if not UnitBuffID(&amp;quot;player&amp;quot;, 115921) then
	CastSpellByID(115921, &amp;quot;player&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Spinning Crane Kick</Name><Default>false</Default><SpellID>101546</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(101546)
 and PQ_ValidUnit
 and not PQR_SpellAvailable(113656)
 and GetCVarBool(&amp;quot;WindAoE&amp;quot;)
 and IsSpellInRange(GetSpellInfo(100787), PQ_ValidUnit) == 1
 and select(5, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 2 then
	PQR_CustomTarget = PQ_ValidUnit
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Fists of Fury</Name><Default>false</Default><SpellID>113656</SpellID><Actions></Actions><Lua>if PQR_SpellAvailable(113656)
 and PQ_ValidUnit
 and GetCVarBool(&amp;quot;WindAoE&amp;quot;)
 and IsSpellInRange(GetSpellInfo(100787), PQ_ValidUnit) == 1
 and select(5, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 3 then
	PQR_CustomTarget = PQ_ValidUnit
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></MONK>