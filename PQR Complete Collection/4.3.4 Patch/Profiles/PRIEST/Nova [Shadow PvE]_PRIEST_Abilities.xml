<?xml version="1.0" encoding="utf-8" ?><PRIEST><Ability><Name>[Misc] Use: Mouse Click</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;) and IsMouseButtonDown()
	then RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName()) end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Blast</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>local PQ_MB = PQ_MB
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_MB) then
	-- Don&amp;apos;t cast if we&amp;apos;re moving!
	if PQR_IsMoving(0.3) then return false end
	
	-- Cast it
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_SWP) then
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	
	if SWP then
		if SWPtimer - GetTime() &amp;lt; 1.5 then return true end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Focus)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;focus&amp;quot;, PQ_SWP) then
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	
	if SWP then
		if SWPtimer - GetTime() &amp;lt; 1.5 then return true end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Focus</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Mouseover)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;mouseover&amp;quot;, PQ_SWP) then
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	
	if SWP then
		if SWPtimer - GetTime() &amp;lt; 1.5 then return true end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_VT) then
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local castTime = (1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()))
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	PQ_TempBuffs(PQ_TempTable)
	
	-- Don&amp;apos;t cast if we&amp;apos;re moving.
	if PQR_IsMoving(0.3) then return false end
	
	if VT then
		for i=1,#PQ_TempTable do
			if PQ_TempTable[i].hasBuff then
				if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
			end
		end
		
		if VTtimer - GetTime() &amp;lt;= (2 / castTime) + (PQ_Latency / 1000) then return true end
	else return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Focus)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;focus&amp;quot;, PQ_VT) then
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local castTime = (1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()))
	
	-- Don&amp;apos;t cast if we&amp;apos;re moving.
	if PQR_IsMoving(0.3) then return false end
	
	if VT then
		if VTtimer - GetTime() &amp;lt;= (2 / castTime) + (PQ_Latency / 1000) then return true end
	else return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Focus</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Mouseover)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;mouseover&amp;quot;, PQ_VT) then
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local castTime = (1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()))
	
	-- Don&amp;apos;t cast if we&amp;apos;re moving.
	if PQR_IsMoving(0.3) then return false end
	
	if VT then
		if VTtimer - GetTime() &amp;lt;= (2 / castTime) + (PQ_Latency / 1000) then return true end
	else return true end
end</Lua><RecastDelay>500</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Devouring Plague</Name><Default>false</Default><SpellID>2944</SpellID><Actions></Actions><Lua>local PQ_DP = PQ_DP
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_DP) then
	local DP,_,_,_,_,_,DPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	local Nova_UnitInfo = Nova_UnitInfo
	PQ_TempBuffs(PQ_TempTable)
	
	-- Cast if we&amp;apos;re moving regardless
	if PQR_IsMoving(0.3) and select(3,Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 10 then return true end
	
	if DP then
		for i=1,#PQ_TempTable do
			if PQ_TempTable[i].hasBuff then
				if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 4 and DPtimer - GetTime() &amp;lt; 10 then return true end
			end
		end
				
		if DPtimer - GetTime() &amp;lt; 1.5 then return true end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Blast (Orbs)</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>if GetBuildInfo() &amp;lt; &amp;quot;5.0.0&amp;quot; then
	local PQ_MB = PQ_MB
	local PQ_SO = PQ_SO
	local TargetValidation = TargetValidation
	
	if TargetValidation(&amp;quot;target&amp;quot;, PQ_MB) then
		-- Don&amp;apos;t cast if we&amp;apos;re moving!
		if PQR_IsMoving(0.3) then return false end
		
		-- Cast if we&amp;apos;ve got Shadow Orbs
		if UnitBuffID(&amp;quot;player&amp;quot;,PQ_SO) then return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dark Archangel</Name><Default>false</Default><SpellID>87151</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>if GetBuildInfo() &amp;lt; &amp;quot;5.0.0&amp;quot; then
	local PQ_AA = PQ_AA
	local PQ_DE = PQ_DE
	local SCD = SCD
	local PQ_Immune = PQ_Immune
	local ShadowSpecial = ShadowSpecial
	
	if UnitExists(&amp;quot;target&amp;quot;)
		and PQR_SpellAvailable(PQ_AA)
		and (ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) == -1)
		and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
		and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;,1)
		and not PQ_Immune
		and not SCD
	then
		local _,_,_,DE = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DE)
		if DE and DE &amp;gt; 4 then return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadowfiend</Name><Default>false</Default><SpellID>34433</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>if GetBuildInfo() &amp;lt; &amp;quot;5.0.0&amp;quot; then
	local PQ_SF = PQ_SF
	local SCD = SCD
	local TargetValidation = TargetValidation
	local ShadowSpecial = ShadowSpecial
	
	if TargetValidation(&amp;quot;target&amp;quot;, PQ_SF) then
		local PQ_DE = PQ_DE
		local _,_,_,DE = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DE)
		
		if (ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) == -1) and (DE and DE &amp;gt; 4) and not SCD then
			ShadowTimer = GetTime()
			return true
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Flay</Name><Default>false</Default><SpellID>15407</SpellID><Actions></Actions><Lua>local PQ_MF = PQ_MF
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_MF) then
	-- Don&amp;apos;t cast if we&amp;apos;re moving!
	if PQR_IsMoving(0.3) then return false end
	
	-- Cast it
	return true
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Death</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_SWD = PQ_SWD
local Nova_UnitInfo = Nova_UnitInfo
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_SWD) then
	-- Cast if we&amp;apos;re moving.
	if PQR_IsMoving(0.3) then return true end
	
	-- Cast SWD if we&amp;apos;re at 10% Mana or Mob is at or under 25% HP
	if select(3,Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 10 or Nova_UnitInfo(&amp;quot;target&amp;quot;) &amp;lt;= 25 then return true end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Heroic Priority Targeting</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--[[
	Notice: This will only work on English clients!
	This ability will search for high-priority targets in
	Heroic Dragon Soul and set them as your current target.
	
	This only works if your current target is empty or dead.
	
	Range check using Mind Blast.
	
	You can add, remove or translate the names to suit your region/needs!
]]--

local targetTable = {
	&amp;quot;Raider&amp;apos;s Training Dummy&amp;quot;,
	&amp;quot;Burning Tendons&amp;quot;,
	&amp;quot;Corrupting Parasite&amp;quot;,
	&amp;quot;Elementium Bolt&amp;quot;,
	&amp;quot;Twilight Sapper&amp;quot;,
	&amp;quot;Twilight Assault Drake&amp;quot;
}
for i=1,#targetTable do
	if not UnitExists(&amp;quot;target&amp;quot;) then
		TargetUnit(targetTable[i], 1)
	else
		if UnitName(&amp;quot;target&amp;quot;) == targetTable[i] then
			if IsSpellInRange(GetSpellInfo(8092),&amp;quot;target&amp;quot;) == 0
				or UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
			then RunMacroText(&amp;quot;/cleartarget&amp;quot;) else return false end
		else return false end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mass Dispel</Name><Default>false</Default><SpellID>32375</SpellID><Actions></Actions><Lua>local Nova_Spells = Nova_Spell
local PQ_MD = PQ_MD

-- Uses the &amp;quot;Click&amp;quot; profile, mouseover the spot you want to cast Mass Dispel on.
if Nova_Spells[PQ_MD].known
	and IsLeftControlKeyDown()
	and PQR_SpellAvailable(PQ_MD)
	and not GetCurrentKeyBoardFocus()
then return true end</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Initialization</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-------------------------------------------------------------------------------
-- Variables &amp; Sanity checks
-------------------------------------------------------------------------------
-- Load LUA data files.
if PQR_RotationStarted then
	PQR_RotationStarted = false

	if PQR_LoadLua ~= nil then
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffFFCCFFYou&amp;apos;re missing PQR_Nova_Data.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
end

-- Let&amp;apos;s not continue if we&amp;apos;re not in the right spec
local PQR_SavedSpec = PQR_SavedSpec
if not CastTimer then CastTimer = GetTime() end
if PQR_SavedSpec == 1 then CurSpec = &amp;quot;Discipline&amp;quot; elseif PQR_SavedSpec == 2 then CurSpec = &amp;quot;Holy&amp;quot; end
if PQR_SavedSpec ~= 3 then
	if GetTime() - CastTimer &amp;gt;= 4 then
		PQR_WriteToChat(&amp;quot;|cff99CCFFYou&amp;apos;re currently specced: |cffFFCCFF&amp;quot;..CurSpec..&amp;quot;|cffffffff!&amp;quot;, &amp;quot;Error&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff99CCFFThe profile has been halted!&amp;quot;, &amp;quot;Error&amp;quot;)
		CastTimer = GetTime()
	end
end

if not SCDtimer then SCDtimer = 0 end
if not SCD then SCD = false end
if SCD then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cooldown Mode: Manual&amp;quot;, nil, &amp;quot;DC143C&amp;quot;)
else
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Cooldown Mode: Automatic&amp;quot;, nil, &amp;quot;79BAEC&amp;quot;)
end

if not SCDtimer then SCDtimer = 0 end
if IsLeftAltKeyDown() and not GetCurrentKeyBoardFocus() and GetTime() - SCDtimer &amp;gt; 1 then
	SCDtimer = GetTime() -- Start the timer
	
	if SCD then	-- If we were saving cooldowns, set it to not save cooldowns
		SCD = false
		PQR_WriteToChat(&amp;quot;|cff347C2CCooldown Mode: |cff79BAECAutomatic|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)
	else		-- We weren&amp;apos;t saving cooldowns, but we are now
		SCD = true
		PQR_WriteToChat(&amp;quot;|cff347C2CCooldown Mode: |cffDC143CManual|cffffffff&amp;quot;, &amp;quot;Notice&amp;quot;)
	end
end

--[[ Let them know if the profile is automatically soaking HoT or avoiding.
if not IsLeftShiftKeyDown() then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Hour of Twilight: Avoid&amp;quot;, nil, &amp;quot;FFD557&amp;quot;)
else
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Hour of Twilight: Soak&amp;quot;, nil, &amp;quot;FFD557&amp;quot;)
end
]]--

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)

-- Check for immunities on current target.
local PQ_Immunity = PQ_Immunity
for i=1,#PQ_Immunity do
	if UnitExists(&amp;quot;target&amp;quot;) and UnitBuffID(&amp;quot;target&amp;quot;,PQ_Immunity[i])
	then PQ_Immune = true else PQ_Immune = false end
end

-- Set Shadow Fiend Timer
if not ShadowTimer then ShadowTimer = nil
else
	local PQ_SF = PQ_SF
	local SFCD = (GetSpellCooldown(PQ_SF) + select(2,GetSpellCooldown(PQ_SF)))
	
	if SFCD &amp;lt; 1.5 or PQR_SpellAvailable(PQ_SF) then ShadowTimer = nil end
end

-- Don&amp;apos;t automatically start if we&amp;apos;re mounted.
if IsMounted() then return true end

-- At this point, everything should have loaded perfectly!
if not PQR_PriestLoaded then
	PQR_PriestLoaded = true
	PQR_WriteToChat(&amp;quot;|cff99CCFFNova - Shadow Priest Rotation is |cffFFCCFFLoaded!|cffffffff&amp;quot;)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Special Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_FL = PQ_FL
local PQ_HOT = PQ_HOT
local PQ_SN = PQ_SN
-- Fading Light Debuff
for i=1,#PQ_FL do
	if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i]))
		and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i])) - GetTime() &amp;lt; 0.7 then
			SpellStopCasting()
			RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
	end
end

-- Hour of Twilight
if IsLeftShiftKeyDown() and not GetCurrentKeyBoardFocus() then
	local Nova_Spells = Nova_Spell
	local PQ_Disp = PQ_Disp
	
	if Nova_Spells[PQ_Disp].known and PQR_SpellAvailable(PQ_Disp)
	then SpellStopCasting() CastSpellByID(PQ_Disp, &amp;quot;player&amp;quot;) return true end
else
	local HourOfTwilight,_,_,_,_,endTime = UnitCastingInfo(&amp;quot;boss1&amp;quot;) 
	for i=1,#PQ_HOT do
		if HourOfTwilight == GetSpellInfo(PQ_HOT[i]) and endTime/1000 - GetTime() &amp;lt; 0.7 then
			SpellStopCasting()
			RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
		end
	end
end

-- Target for Shrapnel
for i=1,#PQ_SN do
	if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i]))
		and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i])) - GetTime() &amp;lt; 2 then
			SpellStopCasting()
			RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Instance: Combat Detection</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsInInstance() then
	if (not UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;))
		or not UnitAffectingCombat(&amp;quot;player&amp;quot;)
	then return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Automatic Buffing</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_IF = PQ_IF
local PQ_VE = PQ_VE
local PQ_SForm = PQ_SForm
local PQ_PWF = PQ_PWF
local PQ_SP = PQ_SP
local PQR_SavedSpec = PQR_SavedSpec
local GCD = (1.5*((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))
local selfBuffs = {PQ_IF,PQ_VE,PQ_SForm,PQ_PWF,PQ_SP}

if PQR_SavedSpec ~= 3 then return false else
	if not timer then timer = GetTime() end
	for i=1,#selfBuffs do
		if not UnitBuffID(&amp;quot;player&amp;quot;,selfBuffs[i]) and GetTime() - timer &amp;gt;= GCD then
			CastSpellByID(selfBuffs[i],&amp;quot;player&amp;quot;)
			timer = GetTime()
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Shadowfiend</Name><Default>false</Default><SpellID>34433</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>if GetBuildInfo() &amp;lt; &amp;quot;5.0.0&amp;quot; then
	local PQ_SF = PQ_SF
	local SCD = SCD
	local ShadowSpecial = ShadowSpecial
	local TargetValidation = TargetValidation
	
	if TargetValidation(&amp;quot;target&amp;quot;, PQ_SF) then
		if (ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) == -1) and not SCD then
			local PQ_AA = PQ_AA
			local PQ_DE = PQ_DE
			local PQ_DA = PQ_DA
			local AACD = (GetSpellCooldown(PQ_AA) + select(2,GetSpellCooldown(PQ_AA)))
			local _,_,_,DE = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DE)
			
			if (DE and DE &amp;gt; 4) and (AACD &amp;gt; 15 or PQR_SpellAvailable(PQ_AA)) then
				ShadowTimer = GetTime()
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Dark Archangel</Name><Default>false</Default><SpellID>87151</SpellID><Actions>/use 13|/use 14|/use 10|/script UIErrorsFrame:Clear()</Actions><Lua>if GetBuildInfo() &amp;lt; &amp;quot;5.0.0&amp;quot; then
	local PQ_AA = PQ_AA
	local SCD = SCD
	local PQ_Immune = PQ_Immune
	local ShadowSpecial = ShadowSpecial
	
	if UnitExists(&amp;quot;target&amp;quot;)
		and PQR_SpellAvailable(PQ_AA)
		and (ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) == -1)
		and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
		and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;,1)
		and not PQ_Immune
		and not SCD
	then
		local PQ_DE = PQ_DE
		local PQ_SF = PQ_SF
		local _,_,_,DE = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DE)
		local SFCD = (GetSpellCooldown(PQ_SF) + select(2,GetSpellCooldown(PQ_SF)))
		
		if (DE and DE &amp;gt; 4) and (SFCD &amp;gt; 15 or UnitExists(&amp;quot;pet&amp;quot;)) then return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Devouring Plague</Name><Default>false</Default><SpellID>2944</SpellID><Actions></Actions><Lua>local PQ_DP = PQ_DP
local SCD = SCD
local ShadowSpecial = ShadowSpecial
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_DP) then
	local DP,_,_,_,_,_,DPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	local Nova_UnitInfo = Nova_UnitInfo
	local ShadowTimer = ShadowTimer
	local ShadowTimerEnd = (15 - ((1.5*((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))+0.6))
	PQ_TempBuffs(PQ_TempTable)
	
	if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Burning Tendons&amp;quot; then return false end
	
	if ShadowTimer ~= nil and (GetTime() - ShadowTimer) &amp;gt; ShadowTimerEnd and not SCD then
		if PQR_IsMoving(0.3) then return true end
		
		if DP then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 4 and DPtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if DPtimer - GetTime() &amp;lt; 1.5 then return true end
		else return true end
	end
	
	-- Cast on Trash
	if ((not ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) ~= -1) and ShadowTimer == nil) or SCD then
		if PQR_IsMoving(0.3) then return true end
		
		if DP then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 4 and DPtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if DPtimer - GetTime() &amp;lt; 1.5 then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Mind Flay</Name><Default>false</Default><SpellID>15407</SpellID><Actions></Actions><Lua>local PQ_MF = PQ_MF
local ShadowSpecial = ShadowSpecial
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_MF) then
	local PQ_DE = PQ_DE
	local SCD = SCD
	local ShadowTimer = ShadowTimer
	local _,_,_,DE = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DE)
	local ShadowTimerEnd = (15 - ((1.5*((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))+0.6))
	
	-- Don&amp;apos;t cast if we&amp;apos;re moving!
	if PQR_IsMoving(0.3) then return false end
	
	-- Cast on Trash
	if ((not ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) ~= -1) and ShadowTimer == nil) or SCD then
		return true end
	
	-- Cast if we don&amp;apos;t have Dark Evangelism
	if (not DE or DE &amp;lt; 5) and ShadowTimer == nil and not SCD then return true end
	
	-- Cast after Shadowfiend
	if ShadowTimer ~= nil and (GetTime() - ShadowTimer) &amp;gt; ShadowTimerEnd and not SCD then return true end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Mind Spike</Name><Default>false</Default><SpellID>73510</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local ShadowTimer = ShadowTimer
local TargetValidation = TargetValidation
local ShadowTimerEnd = (15 - ((1.5*((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))+0.6))

if TargetValidation(&amp;quot;target&amp;quot;, PQ_MS) then
	-- Don&amp;apos;t cast if we&amp;apos;re moving!
	if PQR_IsMoving(0.3) then return false end
	
	-- Cast only during Shadowfiend
	if ShadowTimer ~= nil and (GetTime() - ShadowTimer) &amp;lt; ShadowTimerEnd and not SCD then return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Mind Blast</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>local PQ_MB = PQ_MB
local PQ_MM = PQ_MM
local PQ_DE = PQ_DE
local PQ_DA = PQ_DA
local ShadowTimer = ShadowTimer
local TargetValidation = TargetValidation
local _,_,_,DE = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DE)

if TargetValidation(&amp;quot;target&amp;quot;, PQ_MB) then
	-- Don&amp;apos;t cast if we&amp;apos;re moving!
	if PQR_IsMoving(0.3) then return false end
	
	-- Cancel Mind Melt
	if UnitBuffID(&amp;quot;player&amp;quot;,PQ_MM) then CancelUnitBuff(&amp;quot;player&amp;quot;,GetSpellInfo(PQ_MM)) end
	
	-- Cast after we achieve Evangelism.
	if DE and DE &amp;gt; 4 then return true end
	
	-- Cast if Shadowfiend exists.
	if UnitExists(&amp;quot;pet&amp;quot;) then return true end
	
	-- Cast if we have Archangel
	if UnitBuffID(&amp;quot;player&amp;quot;,PQ_DA) then return true end
	
	-- Otherwise, cast while Shadowfiend is cooling down.
	if not PQR_SpellAvailable(PQ_SF) or ShadowTimer ~= nil then return true end
	
	-- Cast if we&amp;apos;re saving cooldowns as well
	if SCD then return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Shadow Word: Pain</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local SCD = SCD
local ShadowTimer = ShadowTimer
local ShadowSpecial = ShadowSpecial
local TargetValidation = TargetValidation
local ShadowTimerEnd = (15 - ((1.5*((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))+0.6))

if TargetValidation(&amp;quot;target&amp;quot;, PQ_SWP) then
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	
	if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Burning Tendons&amp;quot; then return false end
	
	if ShadowTimer ~= nil and (GetTime() - ShadowTimer) &amp;gt; ShadowTimerEnd and not SCD then
		if SWP then
			if SWPtimer - GetTime() &amp;lt; 1.5 then return true end
		else return true end
	end
	
	if ((not ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) ~= -1) and ShadowTimer == nil) or SCD then
		if SWP then
			if SWPtimer - GetTime() &amp;lt; 1.5 then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Shadow Word: Death</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_SWD = PQ_SWD
local Nova_UnitInfo = Nova_UnitInfo
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_SWD) then
	-- Cast if we&amp;apos;re moving.
	if PQR_IsMoving(0.3) then return true end
	
	-- Cast SWD if we&amp;apos;re at 10% Mana or Mob is at or under 25% HP
	if select(3,Nova_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 10 or Nova_UnitInfo(&amp;quot;target&amp;quot;) &amp;lt;= 25 then return true end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local SCD = SCD
local ShadowTimer = ShadowTimer
local ShadowSpecial = ShadowSpecial
local TargetValidation = TargetValidation
local ShadowTimerEnd = (15 - ((1.5*((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))+0.6))

if TargetValidation(&amp;quot;target&amp;quot;, PQ_VT) then
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local castTime = (1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()))
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	PQ_TempBuffs(PQ_TempTable)
	
	-- Don&amp;apos;t cast if we&amp;apos;re moving.
	if PQR_IsMoving(0.3) then return false end
	
	if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Burning Tendons&amp;quot; then return false end
	
	if ShadowTimer ~= nil and (GetTime() - ShadowTimer) &amp;gt; ShadowTimerEnd and not SCD then
		if VT then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if VTtimer - GetTime() &amp;lt;= (2 / castTime) + (PQ_Latency / 1000) then return true end
		else return true end
	end
	
	if ((not ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) ~= -1) and ShadowTimer == nil) or SCD then
		if VT then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if VTtimer - GetTime() &amp;lt;= (2 / castTime) + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Vampiric Touch (Mouseover)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local SCD = SCD
local ShadowTimer = ShadowTimer
local ShadowSpecial = ShadowSpecial
local TargetValidation = TargetValidation
local ShadowTimerEnd = (15 - ((1.5*((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))+0.6))

if TargetValidation(&amp;quot;mouseover&amp;quot;, PQ_VT) then
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local castTime = (1.5 / ((UnitSpellHaste(&amp;quot;player&amp;quot;) / 100) + 1))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()))
	
	-- Don&amp;apos;t cast if we&amp;apos;re moving.
	if PQR_IsMoving(0.3) then return false end
	
	if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Burning Tendons&amp;quot; then return false end
	
	if ShadowTimer ~= nil and (GetTime() - ShadowTimer) &amp;gt; ShadowTimerEnd and not SCD then
		if VT then
			if VTtimer - GetTime() &amp;lt;= (2 / castTime) + (PQ_Latency / 1000) then return true end
		else return true end
	end
	
	if ((not ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) ~= -1) and ShadowTimer == nil) or SCD then
		if VT then
			if VTtimer - GetTime() &amp;lt;= (2 / castTime) + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Special] Shadow Word: Pain (Mouseover)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SWP = PQ_SWP
local SCD = SCD
local ShadowTimer = ShadowTimer
local ShadowSpecial = ShadowSpecial
local TargetValidation = TargetValidation
local ShadowTimerEnd = (15 - ((1.5*((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))+0.6))

if TargetValidation(&amp;quot;mouseover&amp;quot;, PQ_SWP) then
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	
	if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Burning Tendons&amp;quot; then return false end
	
	if ShadowTimer ~= nil and (GetTime() - ShadowTimer) &amp;gt; ShadowTimerEnd and not SCD then
		if SWP then
			if SWPtimer - GetTime() &amp;lt; 1.5 then return true end
		else return true end
	end
	
	if ((not ShadowSpecial() or UnitLevel(&amp;quot;target&amp;quot;) ~= -1) and ShadowTimer == nil) or SCD then
		if SWP then
			if SWPtimer - GetTime() &amp;lt; 1.5 then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Hagara: Auto-Dispel</Name><Default>false</Default><SpellID>527</SpellID><Actions></Actions><Lua>-- Automatic dispelling on Hagara.
-- Will automatically cast dispel as soon as you are inside the Watery Entrenchment.
local PQ_FF = 109325
local PQ_WE = {110317,105259,113836}

if UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FF) then
	for i=1,#PQ_WE do
		if UnitDebuffID(&amp;quot;player&amp;quot;,PQ_WE[i]) then return true end
	end
	return false
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Hagara Heroic</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;,PQ_MS) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,108934) then
		CastSpellByID(PQ_MS,&amp;quot;target&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] DW Heroic</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;, PQ_MS) then
	if UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Blistering Tentacle&amp;quot; then
		CastSpellByID(PQ_MS, &amp;quot;target&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Hagara: Heroic</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local TargetValidation = TargetValidation

if TargetValidation(&amp;quot;target&amp;quot;,PQ_MS) then
	if UnitDebuffID(&amp;quot;target&amp;quot;,108934) then
		CastSpellByID(PQ_MS,&amp;quot;target&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PRIEST>