<?xml version="1.0" encoding="utf-8" ?><PRIEST><Ability><Name>-- Functions --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-------------------------------------------------------------------------------
-- Variables &amp; Sanity checks
-------------------------------------------------------------------------------
local PQ_Spec = GetPrimaryTalentTree()

if PQR_RotationStarted then
	PQR_RotationStarted = false
	
	-- Load LUA Data Files
	if PQR_LoadLua ~= nil then
		-- Load the data
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffFFCCFFYou&amp;apos;re missing PQR_Nova_Data.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
end

-- Halt the entire profile if we&amp;apos;re not in a usable spec!
if not CastTimer then CastTimer = GetTime() end
if PQ_Spec == 1 then CurSpec = &amp;quot;Discipline&amp;quot; elseif PQ_Spec == 2 then CurSpec = &amp;quot;Holy&amp;quot; end

if PQ_Spec ~= 3 then
	if GetTime() - CastTimer &amp;gt;= 4 then
		PQR_WriteToChat(&amp;quot;|cff99CCFFYou&amp;apos;re currently specced: |cffFFCCFF&amp;quot;..CurSpec..&amp;quot;|cffffffff!&amp;quot;, &amp;quot;Error&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff99CCFFThe profile has been halted!&amp;quot;, &amp;quot;Error&amp;quot;)
		CastTimer = GetTime()
	end
end

-- Let them know everything worked out fine!
if not PQR_PriestLoaded then
	PQR_PriestLoaded = true
	PQR_WriteToChat(&amp;quot;|cff99CCFFNova - Shadow Priest Rotation is |cffFFCCFFLoaded!|cffffffff&amp;quot;)
end

-- Don&amp;apos;t automatically start if we&amp;apos;re mounted.
if IsMounted() then return true end

-- Start the Shadowfiend timer.
if not SFtimer then SFtimer = GetTime() end

if not IsLeftShiftKeyDown() then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Hour of Twilight: Avoid&amp;quot;, nil, &amp;quot;FFD557&amp;quot;)
else
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Hour of Twilight: Soak&amp;quot;, nil, &amp;quot;FFD557&amp;quot;)
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)
-------------------------------------------------------------------------------
-- Temporary Buff Handler.
-------------------------------------------------------------------------------
PQ_CheckTempBuffs = nil
function PQ_CheckTempBuffs(t)
	for i=1,#t do
		if t[i].check == true and UnitBuffID(&amp;quot;player&amp;quot;,t[i].spellID) then
			t[i].hasBuff = true
			t[i].endTime = select(7,UnitBuffID(&amp;quot;player&amp;quot;,t[i].spellID))
		else
			t[i].hasBuff = false
			t[i].endTime = nil
		end
	end
end

PQ_GetTimeLeft = nil
function PQ_GetTimeLeft(t, spellID)
	for i=1,#t do
		if t[i].spellID == spellID and t[i].hasBuff == true then
			return t[i].endTime - GetTime()
		end
	end
end
-------------------------------------------------------------------------------
-- Misc. Functions
-------------------------------------------------------------------------------
PQ_Round = nil
function PQ_Round(number, decimal)
	local multiplier = 10^(decimal or 0)
	return math.floor(number * multiplier + 0.5) / multiplier
end
PQ_HasHero = nil
function PQ_HasHero()
	local PQ_BL = PQ_BloodLust
	local PQ_Hero = PQ_Heroism
	local PQ_TW = PQ_TimeWarp
	local PQ_AH = PQ_Hysteria
	
	if UnitBuffID(&amp;quot;player&amp;quot;,PQ_BL)
		or UnitBuffID(&amp;quot;player&amp;quot;,PQ_Hero)
		or UnitBuffID(&amp;quot;player&amp;quot;,PQ_TW)
		or UnitBuffID(&amp;quot;player&amp;quot;,PQ_AH)
	then return true else return false end
end
-------------------------------------------------------------------------------
-- Health &amp; Power
-------------------------------------------------------------------------------
-- Thanks to Sheuron@OwnedCore for this pressure function!
Pressure = nil
function Pressure(t)
	local pressure = 1
	local group = &amp;quot;party&amp;quot;
	local members = GetNumPartyMembers()
	
	if GetNumRaidMembers() &amp;gt; 0 then group = &amp;quot;raid&amp;quot; members = GetNumRaidMembers() pressure = pressure -1 end
	for i=1,members do
		local member = group..tostring(i)
		if UnitGroupRolesAssigned(member) ~= &amp;quot;HEALER&amp;quot; and UnitIsUnit(t,member..t) and not UnitIsDeadOrGhost(member) 
			then pressure = pressure + 1 end
		end
	return pressure
end
-------------------------------------------------------------------------------
-- Immunity Check
-------------------------------------------------------------------------------
local PQ_Immunity = PQ_Immunity

for i=1,#PQ_Immunity do
	if UnitExists(&amp;quot;target&amp;quot;)
		and UnitBuffID(&amp;quot;target&amp;quot;,PQ_Immunity[i])
	then PQ_Immune = true else PQ_Immune = false end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Flay</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_MF = PQ_MF
local PQ_SWD = PQ_SWD
local PQ_UnitInfo = PQ_UnitInfo
local PQ_Immune = PQ_Immune

-- Refresh SW:P on a Focus target if less than 4 seconds remain on the debuff.
if PQ_Spells[PQ_MF].known
	and UnitExists(&amp;quot;focus&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_MF), &amp;quot;focus&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;focus&amp;quot;, 1)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MF)
	and not PQ_Immune
	and select(4,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; select(4,GetSpellInfo(PQ_SWD))
then
	local PQ_SWP = PQ_SWP
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	if SWP then
		if SWPtimer - GetTime() &amp;lt; 4 then CastSpellByID(PQ_MF,&amp;quot;focus&amp;quot;) return false end
	end
end

-- Cast Mind Flay on your current target, cast only in combat while in an instance.
if PQ_Spells[PQ_MF].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_MF), &amp;quot;target&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MF)
	and not PQ_Immune
	and select(4,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; select(4,GetSpellInfo(PQ_SWD))
then
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			CastSpellByID(PQ_MF,&amp;quot;target&amp;quot;) return true
		end
	else CastSpellByID(PQ_MF,&amp;quot;target&amp;quot;) return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Blast</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_MB = PQ_MB
local PQ_Immune = PQ_Immune

if PQ_Spells[PQ_MB].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_MB), &amp;quot;target&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MB)
	and not PQ_Immune
then
	-- Cast Mind Blast on your current target on CD, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			return true
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_VT = PQ_VT
local PQ_Immune = PQ_Immune
local Pressure = Pressure
local PQ_UnitInfo = PQ_UnitInfo

if PQ_Spells[PQ_VT].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_VT)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQR_IsMoving(0.3)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_VT)
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	PQ_TempBuffs(PQ_TempTable)
	
	-- Cast VT on current target, refresh on procs, cast only in combat while in an instance.
	-- When to refresh is calculated out from travel distance, casting time and potential latency.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if VT then
				for i=1,#PQ_TempTable do
					if PQ_TempTable[i].hasBuff then
						if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
					end
				end
				
				if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if VT then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Mouseover)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_VT = PQ_VT
local PQ_Immune = PQ_Immune
local Pressure = Pressure
local PQ_UnitInfo = PQ_UnitInfo

if PQ_Spells[PQ_VT].known
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_VT),&amp;quot;mouseover&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_VT)
	and not UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;, 1)
	and not PQR_IsMoving(0.3)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_VT)
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	
	-- Cast VT on current mouseover, cast only in combat while in an instance.
	-- When to refresh is calculated out from travel distance, casting time and potential latency.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if VT then
				if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if VT then
			if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch (Focus)</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_VT = PQ_VT
local PQ_Immune = PQ_Immune
local Pressure = Pressure
local PQ_UnitInfo = PQ_UnitInfo

if PQ_Spells[PQ_VT].known
	and UnitExists(&amp;quot;focus&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_VT),&amp;quot;focus&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_VT)
	and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;focus&amp;quot;, 1)
	and not PQR_IsMoving(0.3)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_VT)
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	
	-- Cast VT on current focus, cast only in combat while in an instance.
	-- When to refresh is calculated out from travel distance, casting time and potential latency.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if VT then
				if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if VT then
			if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Focus</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_SWP = PQ_SWP
local PQ_Immune = PQ_Immune
local Pressure = Pressure
local PQ_UnitInfo = PQ_UnitInfo

if PQ_Spells[PQ_SWP].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_SWP)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_SWP)
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	
	-- Cast SW:P on current target, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if SWP then
				if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if SWP then
			if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Focus)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_SWP = PQ_SWP
local PQ_Immune = PQ_Immune
local Pressure = Pressure
local PQ_UnitInfo = PQ_UnitInfo

if PQ_Spells[PQ_SWP].known
	and UnitExists(&amp;quot;focus&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_SWP),&amp;quot;focus&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_SWP)
	and not UnitIsDeadOrGhost(&amp;quot;focus&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;focus&amp;quot;, 1)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_SWP)
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	
	-- Cast SW:P on current target, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if SWP then
				if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if SWP then
			if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Focus</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain (Mouseover)</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_SWP = PQ_SWP
local PQ_Immune = PQ_Immune
local Pressure = Pressure
local PQ_UnitInfo = PQ_UnitInfo

if PQ_Spells[PQ_SWP].known
	and UnitExists(&amp;quot;mouseover&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_SWP),&amp;quot;mouseover&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_SWP)
	and not UnitIsDeadOrGhost(&amp;quot;mouseover&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;mouseover&amp;quot;, 1)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_SWP)
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;mouseover&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	
	-- Cast SW:P on current target, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if SWP then
				if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if SWP then
			if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Mouseover</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Devouring Plague</Name><Default>false</Default><SpellID>2944</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_DP = PQ_DP
local PQ_Immune = PQ_Immune
local Pressure = Pressure
local PQ_UnitInfo = PQ_UnitInfo

if PQ_Spells[PQ_DP].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_DP),&amp;quot;target&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_DP)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_DP)
	local DP,_,_,_,_,_,DPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	PQ_TempBuffs(PQ_TempTable)
	
	-- Cast regardless if we&amp;apos;re moving!
	if PQR_IsMoving(0.3)
		and ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
		and select(3,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 10
	then return true end
	
	-- Cast VT on current target, refresh on procs, cast only in combat while in an instance.
	-- When to refresh is calculated out from travel distance, casting time and potential latency.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if DP then
				for i=1,#PQ_TempTable do
					if PQ_TempTable[i].hasBuff then
						if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 4 and DPtimer - GetTime() &amp;lt; 10 then return true end
					end
				end
				
				if DPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if DP then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 4 and DPtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if DPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Death</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_SWD = PQ_SWD
local PQ_Immune = PQ_Immune

if PQ_Spells[PQ_SWD].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_SWD), &amp;quot;target&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and PQR_SpellAvailable(PQ_SWD)
	and not PQ_Immune
then
	local PQ_UnitInfo = PQ_UnitInfo
	
	-- Cast regardless if we&amp;apos;re moving
	if PQR_IsMoving(0.3)
		and ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
	then return true end
	
	-- Cast Shadow Word: Death on your current target if at 25% HP, cast only in combat while in an instance.
	-- Also cast if we&amp;apos;re getting low on Mana.
	if IsInInstance() then
		if ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
			and (select(3,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 10 or PQ_UnitInfo(&amp;quot;target&amp;quot;) &amp;lt;= 25)
		then return true end
	else if select(3,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 10 or PQ_UnitInfo(&amp;quot;target&amp;quot;) &amp;lt;= 25 then return true end end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadowfiend</Name><Default>false</Default><SpellID>34433</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_SF = PQ_SF
local PQ_Immune = PQ_Immune

if PQ_Spells[PQ_SF].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(PQ_SF)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQ_Immune
then
	if IsInInstance() then
		if ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
			and (UnitLevel(&amp;quot;target&amp;quot;) == -1 or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Burning Tendons&amp;quot;)
		then return true end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Archangel</Name><Default>false</Default><SpellID>87151</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_AA = PQ_AA
local PQ_DA = PQ_DA
local PQ_Immune = PQ_Immune

if PQ_Spells[PQ_AA].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(PQ_AA)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQ_Immune
then
	local _,_,_,AA = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DA)
	
	if IsInInstance() then
		if ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
			and (UnitLevel(&amp;quot;target&amp;quot;) == -1 or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Burning Tendons&amp;quot;)
			and (AA and AA &amp;gt; 4) then return true end
	else if AA and AA &amp;gt; 4 then return true end end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Mind Flay (Opener)</Name><Default>false</Default><SpellID>15407</SpellID><Actions></Actions><Lua>local PQ_MF = PQ_MF
local PQ_DA = PQ_DA
local PQ_Immune = PQ_Immune
local PQ_Spells = PQ_PriestSpells
local _,_,_,DA = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DA)

-- Cast Mind Flay on your current target, cast only in combat while in an instance.
if PQ_Spells[PQ_MF].known
	and not PQ_Immune
	and (not DA or DA &amp;lt; 5)
	and UnitExists(&amp;quot;target&amp;quot;)
	and not UnitExists(&amp;quot;pet&amp;quot;)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MF)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_MF), &amp;quot;target&amp;quot;) == 1
then
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			return true
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Mind Flay</Name><Default>false</Default><SpellID>15407</SpellID><Actions></Actions><Lua>local PQ_MF = PQ_MF
local PQ_SF = PQ_SF
local PQ_SWD = PQ_SWD
local Heroism = PQ_HasHero
local PQ_Immune = PQ_Immune
local PQ_UnitInfo = PQ_UnitInfo
local PQ_Spells = PQ_PriestSpells

-- Refresh SW:P on your focus target outside of burn-mode!
if PQ_Spells[PQ_MF].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MF)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_MF), &amp;quot;target&amp;quot;) == 1
	and (Heroism() or (not UnitExists(&amp;quot;pet&amp;quot;) and not PQR_SpellAvailable(PQ_SF)))
	and select(4,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; select(4,GetSpellInfo(PQ_SWD))
then
	local PQ_SWP = PQ_SWP
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;focus&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	if SWP then
		if SWPtimer - GetTime() &amp;lt; 4 then CastSpellByID(PQ_MF,&amp;quot;focus&amp;quot;) return false end
	end
end

-- Cast Mind Flay on your current target, cast only in combat while in an instance.
if PQ_Spells[PQ_MF].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MF)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_MF), &amp;quot;target&amp;quot;) == 1
	and (Heroism() or (not UnitExists(&amp;quot;pet&amp;quot;) and not PQR_SpellAvailable(PQ_SF)))
then
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			CastSpellByID(PQ_MF,&amp;quot;target&amp;quot;) return true
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Shadowfiend</Name><Default>false</Default><SpellID>34433</SpellID><Actions></Actions><Lua>local PQ_SF = PQ_SF
local PQ_DA = PQ_DA
local PQ_AA = PQ_AA
local PQ_Immune = PQ_Immune
local PQ_Spells = PQ_PriestSpells
local _,_,_,DA = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DA)
local AACD = (select(1,GetSpellCooldown(PQ_AA)) + select(2,GetSpellCooldown(PQ_AA)) - GetTime())

if PQ_Spells[PQ_SF].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(PQ_SF)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and ((DA and DA &amp;gt;= 5 and PQR_SpellAvailable(PQ_AA)) or AACD &amp;gt;= 16)
then
	if IsInInstance() then
		local PQ_UsableUnits = PQ_UsableUnits
		
		for i=1,#PQ_UsableUnits do
			if ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
				and (UnitLevel(&amp;quot;target&amp;quot;) == -1 or UnitName(&amp;quot;target&amp;quot;) == PQ_UsableUnits[i])
			then return true end
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Archangel</Name><Default>false</Default><SpellID>87151</SpellID><Actions></Actions><Lua>local PQ_AA = PQ_AA
local PQ_DA = PQ_DA
local PQ_SF = PQ_SF
local PQ_Immune = PQ_Immune
local PQ_Spells = PQ_PriestSpells
local _,_,_,DA = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DA)
local SFCD = (select(1,GetSpellCooldown(PQ_SF)) + select(2,GetSpellCooldown(PQ_SF)) - GetTime())

if PQ_Spells[PQ_AA].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(PQ_AA)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and ((DA and DA &amp;gt;= 5) and (SFCD &amp;gt;= 16 or UnitExists(&amp;quot;pet&amp;quot;)))
then
	if IsInInstance() then
		local PQ_UsableUnits = PQ_UsableUnits
		
		for i=1,#PQ_UsableUnits do
			if ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
				and (UnitLevel(&amp;quot;target&amp;quot;) == -1 or UnitName(&amp;quot;target&amp;quot;) == PQ_UsableUnits[i])
			then return true end
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Mind Blast</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>local PQ_MB = PQ_MB
local PQ_SF = PQ_SF
local PQ_MM = PQ_MM
local PQ_Immune = PQ_Immune
local PQ_Spells = PQ_PriestSpells
local Heroism = PQ_HasHero

if PQ_Spells[PQ_MB].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MB)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_MB), &amp;quot;target&amp;quot;) == 1
	and (Heroism() or (not UnitExists(&amp;quot;pet&amp;quot;) and not PQR_SpellAvailable(PQ_SF)))
then
	-- Cancel Mind Melt stacks
	if UnitBuffID(&amp;quot;player&amp;quot;,PQ_MM) then
		CancelUnitBuff(&amp;quot;player&amp;quot;,GetSpellInfo(PQ_MM))
	end
	
	-- Cast Mind Blast on your current target on CD, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			return true
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Shadow Word: Death</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_SWD = PQ_SWD
local PQ_Immune = PQ_Immune
local PQ_Spells = PQ_PriestSpells

if PQ_Spells[PQ_SWD].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(PQ_SWD)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_SWD), &amp;quot;target&amp;quot;) == 1
then
	local PQ_UnitInfo = PQ_UnitInfo
	
	-- Cast regardless if we&amp;apos;re moving
	if PQR_IsMoving(0.3)
		and ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
	then return true end
	
	-- Cast Shadow Word: Death on your current target if at 25% HP, cast only in combat while in an instance.
	-- Also cast if we&amp;apos;re getting low on Mana.
	if IsInInstance() then
		if ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
			and (select(3,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 10 or PQ_UnitInfo(&amp;quot;target&amp;quot;) &amp;lt;= 25)
		then return true end
	else if select(3,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 10 or PQ_UnitInfo(&amp;quot;target&amp;quot;) &amp;lt;= 25 then return true end end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Mind Spike</Name><Default>false</Default><SpellID>73510</SpellID><Actions></Actions><Lua>local PQ_MS = PQ_MS
local PQ_MB = PQ_MB
local PQ_Immune = PQ_Immune
local PQ_Spells = PQ_PriestSpells
local Heroism = PQ_HasHero

if PQ_Spells[PQ_MS].known
	and not PQ_Immune
	and (UnitExists(&amp;quot;pet&amp;quot;) and not Heroism())
	and UnitExists(&amp;quot;target&amp;quot;)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MS)
	and not PQR_SpellAvailable(PQ_MB)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_MS), &amp;quot;target&amp;quot;) == 1
then
	-- Cast Mind Blast on your current target on CD, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			return true
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_VT = PQ_VT
local PQ_SF = PQ_SF
local Heroism = PQ_HasHero
local PQ_Immune = PQ_Immune
local PQ_UnitInfo = PQ_UnitInfo
local PQ_Spells = PQ_PriestSpells

if PQ_Spells[PQ_VT].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_VT)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) == 1
	and (Heroism() or (not UnitExists(&amp;quot;pet&amp;quot;) and not PQR_SpellAvailable(PQ_SF)))
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_VT)
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	PQ_TempBuffs(PQ_TempTable)
	
	-- Cast VT on current target, refresh on procs, cast only in combat while in an instance.
	-- When to refresh is calculated out from travel distance, casting time and potential latency.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if VT then
				for i=1,#PQ_TempTable do
					if PQ_TempTable[i].hasBuff then
						if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
					end
				end
				
				if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if VT then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Troll: Berserking</Name><Default>false</Default><SpellID>26297</SpellID><Actions></Actions><Lua>local PQ_Zerk = PQ_Zerk

if IsSpellKnown(PQ_Zerk)
	and not PQ_Immune
	and UnitExists(&amp;quot;pet&amp;quot;)
then
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;)
			then return true end
	elseif UnitAffectingCombat(&amp;quot;player&amp;quot;) then return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Devouring Plague</Name><Default>false</Default><SpellID>2944</SpellID><Actions></Actions><Lua>local PQ_DP = PQ_DP
local PQ_SF = PQ_SF
local PQ_Immune = PQ_Immune
local PQ_UnitInfo = PQ_UnitInfo
local PQ_Spells = PQ_PriestSpells
local Heroism = PQ_HasHero

-- Cast regardless if we&amp;apos;re moving!
if PQR_IsMoving(0.3)
	and ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
	and select(3,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt; 10
then return true end

if PQ_Spells[PQ_DP].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(PQ_DP)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_DP),&amp;quot;target&amp;quot;) == 1
	and (Heroism() or (not UnitExists(&amp;quot;pet&amp;quot;) and not PQR_SpellAvailable(PQ_SF)))
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_DP)
	local DP,_,_,_,_,_,DPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_DP,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	PQ_TempBuffs(PQ_TempTable)
	
	-- Cast DP on current target, refresh on procs, cast only in combat while in an instance.
	-- When to refresh is calculated out from travel distance, casting time and potential latency.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if DP then
				for i=1,#PQ_TempTable do
					if PQ_TempTable[i].hasBuff then
						if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 4 and DPtimer - GetTime() &amp;lt; 10 then return true end
					end
				end
				
				if DPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if DP then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 4 and DPtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if DPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Shadow Word: Pain</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_SF = PQ_SF
local PQ_SWP = PQ_SWP
local Heroism = PQ_HasHero
local PQ_Immune = PQ_Immune
local PQ_UnitInfo = PQ_UnitInfo
local PQ_Spells = PQ_PriestSpells

if PQ_Spells[PQ_SWP].known
	and not PQ_Immune
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(PQ_SWP)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) == 1
	and (Heroism() or (not UnitExists(&amp;quot;pet&amp;quot;) and not PQR_SpellAvailable(PQ_SF)))
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_SWP)
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	
	-- Cast SW:P on current target, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if SWP then
				if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if SWP then
			if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Mind Blast (Opener)</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>local PQ_MB = PQ_MB
local PQ_Immune = PQ_Immune
local PQ_Spells = PQ_PriestSpells
local _,_,_,DA = UnitBuffID(&amp;quot;player&amp;quot;,PQ_DA)

if PQ_Spells[PQ_MB].known
	and not PQ_Immune
	and (DA and DA &amp;gt; 4)
	and UnitExists(&amp;quot;target&amp;quot;)
	and not UnitExists(&amp;quot;pet&amp;quot;)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MB)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_MB), &amp;quot;target&amp;quot;) == 1
then
	-- Cast Mind Blast on your current target on CD, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			return true
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[MS/MB] Mind Blast (Burn)</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>local PQ_MB = PQ_MB
local PQ_MM = PQ_MM
local PQ_Immune = PQ_Immune
local PQ_Spells = PQ_PriestSpells

if PQ_Spells[PQ_MB].known
	and not PQ_Immune
	and UnitExists(&amp;quot;pet&amp;quot;)
	and UnitExists(&amp;quot;target&amp;quot;)
	and not PQR_IsMoving(0.3)
	and PQR_SpellAvailable(PQ_MB)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and IsSpellInRange(GetSpellInfo(PQ_MB), &amp;quot;target&amp;quot;) == 1
then
	-- Cancel Mind Melt stacks
	if UnitBuffID(&amp;quot;player&amp;quot;,PQ_MM) then
		CancelUnitBuff(&amp;quot;player&amp;quot;,GetSpellInfo(PQ_MM))
	end
	
	-- Cast Mind Blast on your current target on CD, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			return true
		end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Mass Dispel</Name><Default>false</Default><SpellID>32375</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_MD = PQ_MD

-- Uses the &amp;quot;Click&amp;quot; profile, mouseover the spot you want to cast Mass Dispel on.
if PQ_Spells[PQ_MD].known
	and IsLeftControlKeyDown()
	and PQR_SpellAvailable(PQ_MD)
	and not GetCurrentKeyBoardFocus()
then return true end</Lua><RecastDelay>100</RecastDelay><Target>Click</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Special Events</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_FL = PQ_FL
local PQ_HOT = PQ_HOT
local PQ_SN = PQ_SN
-- Fading Light Debuff
for i=1,#PQ_FL do
	if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i]))
		and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_FL[i])) - GetTime() &amp;lt; 1.2 then
			SpellStopCasting()
			RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
	end
end

-- Hour of Twilight
if IsLeftShiftKeyDown() and not GetCurrentKeyBoardFocus() then
	local PQ_Spells = PQ_PriestSpells
	local PQ_Disp = PQ_Disp
	
	if PQ_Spells[PQ_Disp].known and PQR_SpellAvailable(PQ_Disp)
	then SpellStopCasting() CastSpellByID(PQ_Disp, &amp;quot;player&amp;quot;) return true end
else
	local HourOfTwilight,_,_,_,_,endTime = UnitCastingInfo(&amp;quot;boss1&amp;quot;) 
	for i=1,#PQ_HOT do
		if HourOfTwilight == GetSpellInfo(PQ_HOT[i]) and endTime/1000 - GetTime() &amp;lt; 1 then
			SpellStopCasting()
			RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
		end
	end
end

-- Target for Shrapnel
for i=1,#PQ_SN do
	if select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i]))
		and select(7,UnitDebuffID(&amp;quot;player&amp;quot;,PQ_SN[i])) - GetTime() &amp;lt; 1.2 then
			SpellStopCasting()
			RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dispersion</Name><Default>false</Default><SpellID>47585</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_Disp = PQ_Disp
local PQ_UnitInfo = PQ_UnitInfo

-- Fire Dispersion automatically if we&amp;apos;re in danger or go low on mana
if PQ_Spells[PQ_Disp].known and PQR_SpellAvailable(PQ_Disp) then
	if select(3,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 3 or PQ_UnitInfo(&amp;quot;player&amp;quot;) &amp;lt; 5 then
		SpellStopCasting()
		return true
	end
end
--[[
    	PQR_WriteToChat(&amp;quot;Kill Function: |cFF00FF00Enabled&amp;quot;, &amp;quot;Unholy PvP&amp;quot;)
		PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Kill Function: Enabled&amp;quot;, nil, &amp;quot;00FF00&amp;quot;)
]]--</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Auto Buff</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_IF = PQ_IF
local PQ_VE = PQ_VE
local PQ_SForm = PQ_SForm
local PQ_PWF = PQ_PWF
local PQ_SP = PQ_SP
local PQ_Spec = GetPrimaryTalentTree()
local GCD = (1.5 *((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))
local selfBuffs = {PQ_IF,PQ_VE,PQ_SForm,PQ_PWF,PQ_SP}

if PQ_Spec == 3 then
	if not CastTimer then CastTimer = GetTime() end
	
	for i=1,#selfBuffs do
		if GetTime() - CastTimer &amp;gt;= GCD then
			if not UnitBuffID(&amp;quot;player&amp;quot;,selfBuffs[i]) then
				CastSpellByID(selfBuffs[i], &amp;quot;player&amp;quot;)
				CastTimer = GetTime()
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>False</SkipUnknown></Ability><Ability><Name>Mind Sear</Name><Default>false</Default><SpellID>48045</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_MSear = PQ_MSear

-- Let&amp;apos;s try and use Mind Sear on current target!
if PQ_Spells[PQ_MSear].known
	and PQR_SpellAvailable(PQ_MSear)
	and not GetCurrentKeyBoardFocus()
	and IsLeftAltKeyDown()
then
	if UnitExists(&amp;quot;target&amp;quot;) and UnitIsFriend(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
		then return true end
	
	if UnitExists(&amp;quot;target&amp;quot;) and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
		then return true end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Heroic: Priority Targets</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>--[[
	This will search for a target if you don&amp;apos;t already have a target.
	It will also try and validate your target by clearing any targets
	whos name is in the Priority Target table if it&amp;apos;s out of range.
]]--

local targetTable = {
	&amp;quot;Raider&amp;apos;s Training Dummy&amp;quot;,
	&amp;quot;Corrupting Parasite&amp;quot;,
	&amp;quot;Elementium Bolt&amp;quot;,
	&amp;quot;Burning Tendons&amp;quot;,
	&amp;quot;Twilight Sapper&amp;quot;,
	&amp;quot;Twilight Assault Drake&amp;quot;
}
for i=1,#targetTable do
	if not UnitExists(&amp;quot;target&amp;quot;) then
		TargetUnit(targetTable[i], 1)
	else
		if IsSpellInRange(GetSpellInfo(8092),&amp;quot;target&amp;quot;) == 1 then
			if UnitName(&amp;quot;target&amp;quot;) ~= targetTable[i] then TargetUnit(targetTable[i], 1) end
		else RunMacroText(&amp;quot;/cleartarget&amp;quot;) end
	end
end

--[[
for i=1,#targetTable do
	if not UnitExists(&amp;quot;target&amp;quot;) then
		TargetUnit(targetTable[i], 1)
	else
		if UnitName(&amp;quot;target&amp;quot;) == targetTable[i] then
			if IsSpellInRange(GetSpellInfo(8092),&amp;quot;target&amp;quot;) == 0
			then RunMacroText(&amp;quot;/cleartarget&amp;quot;) else return false end
		else return false end
	end
end
]]--</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>False</SkipUnknown></Ability><Ability><Name>Use: Mouseover skill</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitAffectingCombat(&amp;quot;player&amp;quot;) and IsMouseButtonDown()
	then RunMacroText(&amp;quot;/click &amp;quot;..GetMouseFocus():GetName()) end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PRIEST>