<?xml version="1.0" encoding="utf-8" ?><PRIEST><Ability><Name>-- Functions --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-------------------------------------------------------------------------------
-- Variables &amp; Sanity checks
-------------------------------------------------------------------------------
local PQ_Spec = GetSpecialization()

if PQR_RotationStarted then
	PQR_RotationStarted = false
	
	-- Load LUA Data Files
	if PQR_LoadLua ~= nil then
		-- Load the data
		if PQR_LoadLua(&amp;quot;PQR_idTip_core.lua&amp;quot;) == false then
			return true
		end
		if PQR_LoadLua(&amp;quot;PQR_Nova_Beta_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;|cffFFCCFFYou&amp;apos;re missing PQR_Nova_Beta_Data.lua - Make sure it&amp;apos;s in your Data folder! The Rotation has been halted.|cffffffff&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
end

-- Halt the entire profile if we&amp;apos;re not in a usable spec!
if not CastTimer then CastTimer = GetTime() end
if PQ_Spec == 1 then CurSpec = &amp;quot;Discipline&amp;quot; elseif PQ_Spec == 2 then CurSpec = &amp;quot;Holy&amp;quot; end

if PQ_Spec ~= 3 then
	if GetTime() - CastTimer &amp;gt;= 4 then
		PQR_WriteToChat(&amp;quot;|cff99CCFFYou&amp;apos;re currently specced: |cffFFCCFF&amp;quot;..CurSpec..&amp;quot;|cffffffff!&amp;quot;, &amp;quot;Error&amp;quot;)
		PQR_WriteToChat(&amp;quot;|cff99CCFFThe profile has been halted!&amp;quot;, &amp;quot;Error&amp;quot;)
		CastTimer = GetTime()
	end
end

-- Let them know everything worked out fine!
if not PQR_PriestLoaded then
	PQR_PriestLoaded = true
	PQR_WriteToChat(&amp;quot;|cff99CCFFNova - Shadow Priest Rotation is |cffFFCCFFLoaded!|cffffffff&amp;quot;)
end

-- Don&amp;apos;t automatically start if we&amp;apos;re mounted.
if IsMounted() then return true end

if not IsLeftShiftKeyDown() then
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Hour of Twilight: Avoid&amp;quot;, nil, &amp;quot;FFD557&amp;quot;)
else
	PQR_Event(&amp;quot;PQR_Text&amp;quot;, &amp;quot;Hour of Twilight: Soak&amp;quot;, nil, &amp;quot;FFD557&amp;quot;)
end

-- Variables
PQR_ResetMovementTime = 0.3
PQR_SpellAvailableTime = ((select(3,GetNetStats()) + select(4,GetNetStats())) / 1000)
-------------------------------------------------------------------------------
-- Temporary Buff Handler.
-------------------------------------------------------------------------------
function PQ_CheckTempBuffs(t)
	for i=1,#t do
		if t[i].check == true and UnitBuffID(&amp;quot;player&amp;quot;,t[i].spellID) then
			t[i].hasBuff = true
			t[i].endTime = select(7,UnitBuffID(&amp;quot;player&amp;quot;,t[i].spellID))
		else
			t[i].hasBuff = false
			t[i].endTime = nil
		end
	end
end

function PQ_GetTimeLeft(t, spellID)
	for i=1,#t do
		if t[i].spellID == spellID and t[i].hasBuff == true then
			return t[i].endTime - GetTime()
		end
	end
end
-------------------------------------------------------------------------------
-- Misc. Functions
-------------------------------------------------------------------------------
function PQ_Round(number, decimal)
	local multiplier = 10^(decimal or 0)
	return math.floor(number * multiplier + 0.5) / multiplier
end
-------------------------------------------------------------------------------
-- Health &amp; Power
-------------------------------------------------------------------------------
-- Thanks to Sheuron@OwnedCore for this pressure function!
function Pressure(t)
	local pressure = 1
	local group = &amp;quot;party&amp;quot;
	local members = GetNumPartyMembers()
	
	if GetNumRaidMembers() &amp;gt; 0 then group = &amp;quot;raid&amp;quot; members = GetNumRaidMembers() pressure = pressure -1 end
	for i=1,members do
		local member = group..tostring(i)
		if UnitGroupRolesAssigned(member) ~= &amp;quot;HEALER&amp;quot; and UnitIsUnit(t,member..t) and not UnitIsDeadOrGhost(member) 
			then pressure = pressure + 1 end
		end
	return pressure
end
-------------------------------------------------------------------------------
-- Immunity Check
-------------------------------------------------------------------------------
local PQ_Immunity = PQ_Immunity

for i=1,#PQ_Immunity do
	if UnitExists(&amp;quot;target&amp;quot;)
		and UnitBuffID(&amp;quot;target&amp;quot;,PQ_Immunity[i])
	then PQ_Immune = true else PQ_Immune = false end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Vampiric Touch</Name><Default>false</Default><SpellID>34914</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_VT = PQ_VT
local PQ_Immune = PQ_Immune

if PQ_Spells[PQ_VT].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_VT),&amp;quot;target&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_VT)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQR_IsMoving(0.3)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_VT)
	local VT,_,_,_,_,_,VTtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_VT,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	local PQ_TempBuffs = PQ_CheckTempBuffs
	local PQ_TempTable = PQ_TemporaryBuffs
	local PQ_TimeLeft = PQ_GetTimeLeft
	PQ_TempBuffs(PQ_TempTable)
	
	-- Cast VT on current target, refresh on procs, cast only in combat while in an instance.
	-- When to refresh is calculated out from travel distance, casting time and potential latency.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if VT then
				for i=1,#PQ_TempTable do
					if PQ_TempTable[i].hasBuff then
						if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
					end
				end
				
				if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if VT then
			for i=1,#PQ_TempTable do
				if PQ_TempTable[i].hasBuff then
					if PQ_TimeLeft(PQ_TempTable, PQ_TempTable[i].spellID) &amp;lt; 5 and VTtimer - GetTime() &amp;lt; 10 then return true end
				end
			end
			
			if VTtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Pain</Name><Default>false</Default><SpellID>589</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_SWP = PQ_SWP
local PQ_Immune = PQ_Immune

if PQ_Spells[PQ_SWP].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_SWP),&amp;quot;target&amp;quot;) == 1
	and PQR_SpellAvailable(PQ_SWP)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQ_Immune
then
	local _,_,_,_,_,_,castTime = GetSpellInfo(PQ_SWP)
	local SWP,_,_,_,_,_,SWPtimer = UnitDebuffID(&amp;quot;target&amp;quot;,PQ_SWP,&amp;quot;PLAYER&amp;quot;)
	local refreshTime = 3 / (1.5 / (1 + UnitSpellHaste(&amp;quot;player&amp;quot;) / 100))
	local PQ_Latency = (select(3,GetNetStats()) + select(4,GetNetStats()) / 1000)
	
	-- Cast SW:P on current target, cast only in combat while in an instance.
	if IsInInstance() then
		if (UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if SWP then
				if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
			else return true end
		end
	else
		if SWP then
			if SWPtimer - GetTime() &amp;lt;= (castTime / 1000) + refreshTime + (PQ_Latency / 1000) then return true end
		else return true end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadow Word: Death</Name><Default>false</Default><SpellID>32379</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_SWD = PQ_SWD
local PQ_Immune = PQ_Immune

if PQ_Spells[PQ_SWD].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and IsSpellInRange(GetSpellInfo(PQ_SWD), &amp;quot;target&amp;quot;) == 1
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and PQR_SpellAvailable(PQ_SWD)
	and not PQ_Immune
then
	-- Cast regardless if we&amp;apos;re moving
	if PQR_IsMoving(0.3)
		and ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
	then return true end
	
	-- Cast Shadow Word: Death on your current target if at 25% HP, cast only in combat while in an instance.
	-- Also cast if we&amp;apos;re getting low on Mana.
	if IsInInstance() then
		if ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
			and ((UnitPower(&amp;quot;player&amp;quot;)/UnitPowerMax(&amp;quot;player&amp;quot;)*100) &amp;lt; 10 or (UnitHealth(&amp;quot;target&amp;quot;)/UnitHealthMax(&amp;quot;target&amp;quot;)*100) &amp;lt;= 20)
		then return true end
	else if ((UnitPower(&amp;quot;player&amp;quot;)/UnitPowerMax(&amp;quot;player&amp;quot;)*100) &amp;lt; 10 or (UnitHealth(&amp;quot;target&amp;quot;)/UnitHealthMax(&amp;quot;target&amp;quot;)*100) &amp;lt;= 20) then return true end end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadowfiend</Name><Default>false</Default><SpellID>34433</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_SF = PQ_SF
local PQ_Immune = PQ_Immune

if PQ_Spells[PQ_SF].known
	and UnitExists(&amp;quot;target&amp;quot;)
	and PQR_SpellAvailable(PQ_SF)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_IsOutOfSight(&amp;quot;target&amp;quot;, 1)
	and not PQ_Immune
then
	if IsInInstance() then
		if ((UnitAffectingCombat(&amp;quot;player&amp;quot;) and UnitExists(&amp;quot;boss1&amp;quot;)) or UnitAffectingCombat(&amp;quot;player&amp;quot;))
			and (UnitLevel(&amp;quot;target&amp;quot;) == -1 or UnitName(&amp;quot;target&amp;quot;) == &amp;quot;Burning Tendons&amp;quot;)
		then return true end
	else return true end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Mass Dispel</Name><Default>false</Default><SpellID>32375</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_MD = PQ_MD

-- Uses the &amp;quot;Click&amp;quot; profile, mouseover the spot you want to cast Mass Dispel on.
if PQ_Spells[PQ_MD].known
	and PQR_SpellAvailable(PQ_MD)
	and not GetCurrentKeyBoardFocus()
	and IsLeftControlKeyDown()
then return true end</Lua><RecastDelay>100</RecastDelay><Target>Click</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Dispersion</Name><Default>false</Default><SpellID>47585</SpellID><Actions></Actions><Lua>local PQ_Spells = PQ_PriestSpells
local PQ_Disp = PQ_Disp

-- Fire Dispersion automatically if we&amp;apos;re in danger or go low on mana
if PQ_Spells[PQ_Disp].known and PQR_SpellAvailable(PQ_Disp) then
	if (UnitPower(&amp;quot;player&amp;quot;)/UnitPowerMax(&amp;quot;player&amp;quot;)*100) &amp;lt; 3
		or (UnitHealth(&amp;quot;player&amp;quot;)/UnitHealthMax(&amp;quot;player&amp;quot;)*100) &amp;lt; 5
	then SpellStopCasting() end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>[Misc] Auto Buff</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_IF = PQ_IF
local PQ_SForm = PQ_SForm
local PQ_PWF = PQ_PWF
local PQ_Spec = GetSpecialization()
local GCD = (1.5 *((1+(UnitSpellHaste(&amp;quot;player&amp;quot;)*128.06)/12806)^-1))
local selfBuffs = {PQ_IF,PQ_SForm,PQ_PWF}

if PQ_Spec == 3 then
	if not CastTimer then CastTimer = GetTime() end
	
	for i=1,#selfBuffs do
		if GetTime() - CastTimer &amp;gt;= GCD then
			if not UnitBuffID(&amp;quot;player&amp;quot;,selfBuffs[i]) then
				CastSpellByID(selfBuffs[i], &amp;quot;player&amp;quot;)
				CastTimer = GetTime()
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>False</SkipUnknown></Ability><Ability><Name>Mind Blast</Name><Default>false</Default><SpellID>8092</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
then CastSpellByName(tostring(GetSpellInfo(8092)),&amp;quot;target&amp;quot;) end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mind Flay</Name><Default>false</Default><SpellID>15407</SpellID><Actions></Actions><Lua>if UnitExists(&amp;quot;target&amp;quot;)
	and not UnitIsDeadOrGhost(&amp;quot;target&amp;quot;)
	and not PQR_SpellAvailable(8092)
	and UnitCanAttack(&amp;quot;player&amp;quot;,&amp;quot;target&amp;quot;)
then CastSpellByName(tostring(GetSpellInfo(15407)),&amp;quot;target&amp;quot;) end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PRIEST>