<?xml version="1.0" encoding="utf-8" ?><PALADIN><Ability><Name>--- Targeting System</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if SafeTarget(&amp;quot;target&amp;quot;) then 
  PQR_CustomTarget = &amp;quot;target&amp;quot; 
  PQR_CustomTargetHP = CalculateHP(&amp;quot;target&amp;quot;) 
elseif SafeTarget(&amp;quot;mouseover&amp;quot;) and GetMouseFocus() ~= WorldFrame then 
  PQR_CustomTarget = &amp;quot;mouseover&amp;quot;
  PQR_CustomTargetHP = CalculateHP(&amp;quot;mouseover&amp;quot;) 
else 
  lowhpmembers = 0
  missingfortitude = false
  missingshadow = false
  havemending = false
  priodispel = nil
  PQR_CustomTarget = &amp;quot;player&amp;quot;
  PQR_CustomTargetHP = CalculateHP(&amp;quot;player&amp;quot;)
  local group = &amp;quot;party&amp;quot;
  local members = GetNumPartyMembers()
  if GetNumRaidMembers() &amp;gt; 0 then group = &amp;quot;raid&amp;quot; members = GetNumRaidMembers() end

  for i = 1, members, 1 do
    local member = group..tostring(i)
    local memberhp = CalculateHP(member)
    if SafeTarget(member)  then
      if UnitGroupRolesAssigned(member) == &amp;quot;TANK&amp;quot; then memberhp = memberhp - 1 end
      if UnitBuffID(&amp;quot;player&amp;quot;, PQ_BeaconofLight) then memberhp = memberhp + 4 end
      if UnitThreatSituation(member) == 3 then memberhp = memberhp - 3 end
      if memberhp &amp;lt; 82 then lowhpmembers = lowhpmembers + 1 end
      if memberhp &amp;lt; PQR_CustomTargetHP then
        PQR_CustomTarget = member
        PQR_CustomTargetHP = memberhp
      end
      if DangerousMagic(member) and not DontDispel(member) then priodispel = member end 

    end
  end

  if priodispel then PQR_CustomTarget = priodispel end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--- Functions and Constants</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	-- Should be reloaded every time you reload Profile (No more needing to /rl)
	PQR_RotationStarted = false

PQR_WriteToChat(&amp;quot;|cff0088FFFubbler&amp;apos;s Holy Paladin Profile Version - |cff33CC00RC 1.2&amp;quot;)
  function CalculateHP(t)
    local incomingheal = 0
    if UnitGetIncomingHeals(t) then incomingheal = UnitGetIncomingHeals(t)  end
    return 100 * ( UnitHealth(t) + incomingheal ) / UnitHealthMax(t)
  end

  function SafeTarget(t)
    if IsSpellInRange(GetSpellInfo(635),t) == 1 
    and UnitIsCharmed(t) == nil
    and UnitIsDeadOrGhost(t) == nil 
    and UnitCanCooperate(&amp;quot;player&amp;quot;,t) 
    and PQR_IsOutOfSight(t) == false 
    then return true end 
  end

  -- Checking if there&amp;apos;s a dangerous Debuff we shouldn&amp;apos;t Cleanse
  -- Rewrite
  function DontDispel(t)
      local buff  = { 96328, 96325, 96326, 86788, 30108, 34914, 109325 }
      local DontDispelCheck = false
      for i=1, #buff do
      	if UnitDebuffID(t, buff[i]) then
			if select(11, UnitDebuff(t, GetSpellInfo(buff[i]))) == 30108 then
		    	if UnitDebuffID(t, 31117) then
		    		if select(11, UnitDebuff(t, GetSpellInfo(31117))) == 31117 then
		    				DontDispelCheck = false
		    				break
		    		end
		    	elseif UnitDebuffID(t, 5782) then
		    			DontDispelCheck = false
		    	else
		    	 		DontDispelCheck = true
		    	end
		    elseif UnitDebuffID(t, 109325) then
		     	if UnitDebuffID(t, 110317) then
		     		DontDispelCheck = false
		     		break
		     	else
		     		DontDispelCheck = true
		     	end
		    else
		     	DontDispelCheck = true
		    end
		end
	  end
	  return DontDispelCheck
  end

  -- Checking if there&amp;apos;s a Dangerous Debuff we need to cleanse Immediately
  function DangerousMagic(t)
    local buff = { 5782, 118, 122, 339, 1499, 6358, 605, 20066, 853, 5484, 71757, 104601, 107629, 99567, 31117, 109325 }
    for _,v in ipairs(buff) do if UnitDebuffID(t,v) then return true end end
  end
  
  -- Checks if our Cleanse will have a valid Debuff to Cleanse
  function ValidDispel(t)
  	local HasValidDispel = false
  	local i = 1
  	local debuff = UnitDebuff(t, i)
  	while debuff do
  		local debuffType = select(5, UnitDebuff(t, i))
  		if debuffType == &amp;quot;Magic&amp;quot; or debuffType == &amp;quot;Poison&amp;quot; or debuffType == &amp;quot;Disease&amp;quot; then
  			HasValidDispel = true
  		end
  		i = i + 1
  		debuff = UnitDebuff(t, i)
  	end
  	return HasValidDispel
  end

	if PQR_LoadLua ~= nil then
		-- Load Data File
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_Nova_Data.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end

end


local SlashManualCD     = &amp;quot;/manualCD&amp;quot;
if not GetCVar(&amp;quot;PQ_ManualCD&amp;quot;) then RegisterCVar(&amp;quot;PQ_ManualCD&amp;quot;, 0) end
SLASH_MANUALCD1 = SlashManualCD
function SlashCmdList.MANUALCD(msg, editbox)
	if tonumber(GetCVar(&amp;quot;PQ_ManualCD&amp;quot;)) == 0 then SetCVar(&amp;quot;PQ_ManualCD&amp;quot;, 1) else SetCVar(&amp;quot;PQ_ManualCD&amp;quot;, 0) end
end

if PQR_LoadLua ~= nil then
	local CurrentSpec = GetPrimaryTalentTree()
	-- Reload Data File
	if PQR_SavedSpec ~= CurrentSpec or PQR_LevelInfo &amp;lt; UnitLevel(&amp;quot;player&amp;quot;) then
		PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;, true)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Holy Light</Name><Default>false</Default><SpellID>635</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_HolyLight].isKnown and PQ_Spell[PQ_HolyLight].check then
	if PQR_CustomTargetHP &amp;lt; PQ_Spell[PQ_HolyLight].targetHealth then
		if PQ_Spell[PQ_HolyLight].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) 
		  and select(2, GetSpellCooldown(635)) == 0 then
			if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
				if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;gt; 90 then
					CurrentHealth = PQR_CustomTargetHP
					return true
				end
			else
				CurrentHealth = PQR_CustomTargetHP
				return true
			end
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Set the Variable Cast Time based off Haste and Current Procs
local spellsToCheck = { PQ_HolyLight, PQ_DivineLight, PQ_FlashofLight, PQ_Exorcism, PQ_HolyRadiance }
for i, v in ipairs(spellsToCheck) do
	if PQ_Spell[v] then
		PQ_Spell[v].castTime = (select(7, GetSpellInfo(v)) / 1000)
	end
end

local manaToCheck = { PQ_HolyLight, PQ_DivineLight, PQ_FlashofLight, PQ_Exorcism, PQ_HolyRadiance, PQ_DivineProtection, PQ_DivineShield, PQ_BeaconofLight, PQ_SealofInsight, PQ_AvengingWrath, PQ_HolyShock }
for i, v in ipairs(manaToCheck) do
	if PQ_Spell[v] then
		PQ_Spell[v].manaCost = select(4, GetSpellInfo(v))
	end
end

local specChange = { PQ_BeaconofLight, PQ_LightofDawn, PQ_DivineFavor, PQ_AuraMastery }
for i, v in ipairs(specChange) do
	PQ_Spell[v].isKnown = IsSpellKnown(v)
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Preliminary Stop Casting</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local SpellInfo, _, _, _, _, endCast = UnitCastingInfo(&amp;quot;player&amp;quot;)
local SI = { 635, 19750, 82326 }
-- If the heal would overheal the target to the % we set per heal of their health, Stop the Cast.

for i=1,#SI do
	if SpellInfo == GetSpellInfo(SI[1]) then
		if PQR_CustomTargetHP &amp;gt; PQ_Spell[SI[1]].overHealLimit then
			SpellStopCasting()
		end
	elseif SpellInfo == GetSpellInfo(SI[2]) then
		if PQR_CustomTargetHP &amp;gt; PQ_Spell[SI[2]].overHealLimit then
			SpellStopCasting()
		end
	elseif SpellInfo == GetSpellInfo(SI[3]) then
		if PQR_CustomTargetHP &amp;gt; PQ_Spell[SI[3]].overHealLimit then
			SpellStopCasting()
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Divine Light</Name><Default>false</Default><SpellID>82326</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_DivineLight].isKnown and PQ_Spell[PQ_DivineLight].check then
	if PQR_CustomTargetHP &amp;lt; PQ_Spell[PQ_DivineLight].targetHealth then
		if PQ_Spell[PQ_DivineLight].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;))
		  and select(2, GetSpellCooldown(82326)) == 0 then
			if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
				if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;gt; 90 then
					CurrentHealth = PQR_CustomTargetHP
					return true
				end
			else
				CurrentHealth = PQR_CustomTargetHP
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Flash of Light</Name><Default>false</Default><SpellID>19750</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_FlashofLight].isKnown and PQ_Spell[PQ_FlashofLight].check then
	if PQR_CustomTargetHP &amp;lt; PQ_Spell[PQ_FlashofLight].targetHealth then
		if PQ_Spell[PQ_FlashofLight].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) 
		  and select(2, GetSpellCooldown(19750)) == 0 then
			if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
				if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;gt; 90 then
					CurrentHealth = PQR_CustomTargetHP
					return true
				end
			else
				CurrentHealth = PQR_CustomTargetHP
				return true
			end
		end
	elseif PQR_IsMoving(0.5) 
	  and PQR_CustomTargetHP &amp;lt; PQ_Spell[PQ_FlashofLight].whileMovingHealth then
		if PQ_Spell[PQ_FlashofLight].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) 
		  and select(2, GetSpellCooldown(19750)) == 0 then
			return true
		end		
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Holy Shock</Name><Default>false</Default><SpellID>20473</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_HolyShock].isKnown and PQ_Spell[PQ_HolyShock].check then
	if PQR_CustomTargetHP &amp;lt; PQ_Spell[PQ_HolyShock].targetHealth then
		if PQ_Spell[PQ_HolyShock].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) 
		  and select(2, GetSpellCooldown(20473)) == 0 then
			if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
				if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;gt; 90 then
					CurrentHealth = PQR_CustomTargetHP
					return true
				end
			else
				CurrentHealth = PQR_CustomTargetHP
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Word of Glory</Name><Default>false</Default><SpellID>85673</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_WordofGlory].check and PQ_Spell[PQ_WordofGlory].isKnown then
	if PQ_Spell[PQ_WordofGlory].targetHealth &amp;gt; PQR_CustomTargetHP then
		if select(5, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 3 and select(2, GetSpellCooldown(85973)) == 0 then
			if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
				if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;gt; 90 then
					return true
				end
			else
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Divine Shield</Name><Default>false</Default><SpellID>642</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_DivineShield].check and PQ_Spell[PQ_DivineShield].isKnown then
	if PQ_Spell[PQ_DivineShield].playerHealth &amp;gt; PQ_UnitInfo(&amp;quot;payer&amp;quot;)
	  and PQR_SpellAvailable(PQ_DivineShield)
	  and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
		if PQ_CastingInfo(&amp;quot;player&amp;quot;) and select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;lt; 90 then
			return true
		else
			SpellStopCasting()
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Divine Protection</Name><Default>false</Default><SpellID>498</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_DivineProtection].check and PQ_Spell[PQ_DivineProtection].isKnown then
	if PQ_Spell[PQ_DivineProtection].playerHealth &amp;gt; PQ_UnitInfo(&amp;quot;Player&amp;quot;) 
	  and PQR_SpellAvailable(PQ_DivineProtection)
	  and UnitAffectingCombat(&amp;quot;player&amp;quot;) then
			if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
				if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;lt; 50 then
					SpellStopCasting()
					return true
				end
			else
				return true
			end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Light of Dawn</Name><Default>false</Default><SpellID>85222</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_LightofDawn].check and PQ_Spell[PQ_LightofDawn].isKnown then
	if lowhpmembers &amp;gt;= PQ_Spell[PQ_LightofDawn].targetNumber then
		if select(5, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;gt;= 3 then
			if select(2, GetSpellCooldown(85222)) == 0 then
				return true
			end
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hand of Sacrifice</Name><Default>false</Default><SpellID>6940</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_HandofSacrifice].check and PQ_Spell[PQ_HandofSacrifice].isKnown then
	if PQ_Spell[PQ_HandofSacrifice].targetHealth &amp;gt; PQR_CustomTargetHP then
		if UnitThreatSituation(PQR_CustomTarget) == 3
		  and IsSpellInRange(GetSpellInfo(6940), PQR_CustomTarget) == 1 
		  and PQR_CustomTarget ~= &amp;quot;player&amp;quot;
		  and select(2, GetSpellCooldown(6940)) == 0 then
			if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
				if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;gt; 90 then
					return true
				end
			else
				return true
			end
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Lay on Hands</Name><Default>false</Default><SpellID>633</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_LayonHands].check and PQ_Spell[PQ_LayonHands].isKnown then
	if PQ_Spell[PQ_LayonHands].targetHealth &amp;gt; PQR_CustomTargetHP then
		if UnitGroupRolesAssigned(PQR_CustomTarget) == &amp;quot;TANK&amp;quot; 
--		  and UnitThreatSituation(PQR_CustomTarget) &amp;gt;= 2
		  and select(2, GetSpellCooldown(633)) == 0 then
			if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
				if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;gt; 90 then
					return true
				end
			else
				return true
			end
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Aura</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local savedAura
if not savedAura then
	savedAura = 3
elseif savedAura == 5 then
	savedAura = 3
end

local Aura = { 465, 7294, 19746, 19891, 32223 }
local myAura = GetShapeshiftForm(&amp;quot;player&amp;quot;)

if IsMounted() and myAura ~= 5 then
	CastSpellByID(32223, &amp;quot;player&amp;quot;)
elseif myAura ~= 5 and savedAura ~= myAura then
	savedAura = myAura
elseif not IsMounted() and savedAura ~= myAura then
	CastSpellByID(Aura[savedAura], &amp;quot;player&amp;quot;)
end

if IsMounted() or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--- Spell Disabling ---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if UnitBuffID(&amp;quot;player&amp;quot;, 54149) -- Buff for Infusion of Light
 and PQ_Spell[PQ_DivineLight].isKnown -- Only if we already know Divine Light
 and (select(7, UnitBuffID(&amp;quot;player&amp;quot;, 54149)) - GetTime()) &amp;gt; 2 then -- And more than 2 seconds remaining on buff
	PQ_Spell[PQ_HolyLight].check = false
	PQ_Spell[PQ_DivineLight].targetHealth = 75
else
	PQ_Spell[PQ_HolyLight].check = true
	PQ_Spell[PQ_DivineLight].targetHealth = 58
end

--[[if GetPrimaryTalentTree() ~= 1 then
	local TimerReset
	if not TimerReset then TimerReset = GetTime() - 15 end
	if GetTime() - TimerReset &amp;gt; 15 then
		PQ_Notify(&amp;quot;You are not in Holy Spec, this profile ONLY works in Holy Spec. Please change.&amp;quot;)
		return true
	else
		return true
	end
end]]--

if select(3, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 30 then
	PQ_Spell[PQ_CrusaderStrike].check = false
	PQ_Spell[PQ_HoW].check = false
else
	PQ_Spell[PQ_CrusaderStrike].check = true
	PQ_Spell[PQ_HoW].check = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Onya Target Finder --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>hrtargethealth = PQ_Spell[PQ_HolyRadiance].targetHealth
hrsecondaryhealth = PQ_Spell[PQ_HolyRadiance].targetHealth
hrrange = 10
hrsecondarytargets = 6

if not onyainit then

function onyaGetPlayerMapPosition(unit)
  local x,y = GetPlayerMapPosition(unit)  
  return x,y
end

function NewScaleFactor(unit1,dist)
   local x1,y1 = onyaGetPlayerMapPosition(unit1)
   local x2,y2 = onyaGetPlayerMapPosition(&amp;quot;player&amp;quot;)
   local xx= x1 - x2
   local yy = y1 -y2
   sft = tostring (dist/sqrt(((xx) * (xx))  + (((yy) * 0.6666666666666) ^ 2)))
   return sft
end

function DistanceBetweenUnits(unit1,unit2)
   if unit2 == unit1 then return 0 end
   local x1,y1 = onyaGetPlayerMapPosition(unit1)
   local x2,y2 = onyaGetPlayerMapPosition(unit2)
   if x1 == 0 and y1 == 0 and x2 ==0 and y2 == 0 then return 0 end
   return (sqrt((((x2 - x1)  * sf) ^ 2)  + (((y2 - y1)  * sf / 1.5) ^ 2)))
end

function IsInRange(u1,u2)
  local range = DistanceBetweenUnits(member[u1].name,member[u2].name)
   if range &amp;lt;= hrrange  then
       return true
   end
end

function getDefHealth(unit)
   return (100 - member[unit].health)
end

function sortDefHealth(aUnit, anotherUnit)
    return getDefHealth(aUnit) &amp;gt; getDefHealth(anotherUnit)
end

function findGoodTarget()
   if table.maxn(hrtargets) ~=0 and table.maxn(hrsecondary) &amp;gt;= hrsecondarytargets then   
      table.sort(hrtargets, sortDefHealth)  
      table.sort(hrsecondary, sortDefHealth)
      for x = 1, table.maxn(hrtargets) do
          local inrangecount = 0
          for y = 1, table.maxn(hrsecondary) do
            if IsInRange(hrtargets[x],hrsecondary[y]) then inrangecount = inrangecount + 1 end
            if inrangecount == hrsecondarytargets then return member[hrtargets[x]].name end
          end
      end
   end
 end 


onyainit = true
end

local currentmap = GetMapInfo()
local currentlevel = tostring(GetCurrentMapDungeonLevel()) or &amp;quot;0&amp;quot;
local grp = &amp;quot;party&amp;quot;
local mems = GetNumPartyMembers()
if GetNumRaidMembers() &amp;gt; 0 then
  grp = &amp;quot;raid&amp;quot;
  mems = GetNumRaidMembers()
end

if (sfm ~= currentmap) or (sfl ~= currentlevel) then
  sf = 6000
  sfm = currentmap
  sfl = currentlevel
end

 for mmm = 1, mems do
   local checktarget = grp..tostring(mmm)
   local range = DistanceBetweenUnits(&amp;quot;player&amp;quot;,checktarget)
   if (range &amp;gt; 28) and (CheckInteractDistance(checktarget,1)) then
     sf =  NewScaleFactor(checktarget,28)
   end
   if (range &amp;gt; 11.11) and (CheckInteractDistance(checktarget,2)) then
      sf =  NewScaleFactor(checktarget,11.11)
   end
   if (range &amp;gt; 9.9) and (CheckInteractDistance(checktarget,3)) then
      sf =  NewScaleFactor(checktarget,9.9)
   end
   if (range &amp;gt; 40) and (UnitInRange(checktarget)) then
      sf =  NewScaleFactor(checktarget,40)
   end
 end
 
hrtargets = {}
hrsecondary = {} 
member = {}
 
for i = 0, mems, 1 do
   member[i] = {}
   if i==0 then member[i].name = &amp;quot;player&amp;quot; else member[i].name = grp..tostring(i) end
   local memberin = UnitGetIncomingHeals(member[i].name) or 0
   member[i].health= 100 * (UnitHealth(member[i].name)+ memberin ) / UnitHealthMax(member[i].name)
   if not UnitIsDeadOrGhost(member[i].name) then 
     if member[i].health &amp;lt; hrtargethealth 
        and not (UnitBuffID(member[i].name, 82327)) 
        and IsSpellInRange(&amp;quot;Holy Radiance&amp;quot;, member[i].name) 
       then table.insert(hrtargets,i) end
     if member[i].health &amp;lt; hrsecondaryhealth then table.insert(hrsecondary,i) end
   end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Holy Radiance Onya</Name><Default>false</Default><SpellID>82327</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_HolyRadiance].check and PQ_Spell[PQ_HolyRadiance].isKnown then
	local _, _, _, cost = GetSpellInfo(82327)
	local mana = UnitPower(&amp;quot;player&amp;quot;) 
	local spell = UnitCastingInfo(&amp;quot;player&amp;quot;)
	
	if mana &amp;gt; cost and spell ~= GetSpellInfo(82327) then
	   local HRtarget = findGoodTarget()
	   if HRtarget ~= nil then
	      PQR_CustomTarget = HRtarget
	      return true
	   end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Avenging Wrath</Name><Default>false</Default><SpellID>31884</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_AvengingWrath].check and PQ_Spell[PQ_AvengingWrath].isKnown then
	if PQR_CustomTargetHP &amp;lt; PQ_Spell[PQ_AvengingWrath].targetHealth 
	 and ( UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 or UnitAffectingCombat(PQR_CustomTarget) )
	 and not UnitBuffID(&amp;quot;player&amp;quot;, 31842)
	 and not UnitBuffID(&amp;quot;player&amp;quot;, 86669) then
		if PQR_SpellAvailable(PQ_AvengingWrath) then
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Divine Favor</Name><Default>false</Default><SpellID>31842</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_DivineFavor].check and PQ_Spell[PQ_DivineFavor].isKnown then
	if PQR_CustomTargetHP &amp;lt; PQ_Spell[PQ_DivineFavor].targetHealth
	 and ( UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 or UnitAffectingCombat(PQR_CustomTarget) ) 
	 and not UnitBuffID(&amp;quot;player&amp;quot;, 86669)
	 and not UnitBuffID(&amp;quot;player&amp;quot;, 31884) then
		if PQR_SpellAvailable(PQ_DivineFavor) then
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Leveling Layout Example --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- How to code in an ability that makes you leveling profile perfect for you :D

-- Set the the level cap you want (IE if we are under level 70)
if UnitLevel(&amp;quot;player&amp;quot;) &amp;lt; 70 then
	-- All main healing abilities are based off this variable targetHealth, change that
	-- and you change how the heal works
	PQ_Spell[PQ_HolyLight].targetHealth = 70
	PQ_Spell[PQ_DivineLight].targetHealth = 30
	PQ_Spell[PQ_FlashofLight].targetHealth = 20
	PQ_Spell[PQ_HolyShock].targetHealth = 80
	PQ_Spell[PQ_WordofGlory].targetHealth = 50
end

-- You can setup more than just one level cap at a time with this. Plan you&amp;apos;re whole trip to 85 ahead of time :D
-- Raiders can also set values for themselves depending on how their gear is. I bse my numbers off whats best for me, that may not work for your.
if UnitLevel(&amp;quot;player&amp;quot;) &amp;lt; 50 then
	PQ_Spell[PQ_HolyLight].targetHealth = 60
	PQ_Spell[PQ_DivineLight].targetHealth = 30
	PQ_Spell[PQ_FlashofLight].targetHealth = 20
	PQ_Spell[PQ_HolyShock].targetHealth = 80
	PQ_Spell[PQ_WordofGlory].targetHealth = 40
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Judgement</Name><Default>false</Default><SpellID>20271</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_Judgement].check and PQ_Spell[PQ_Judgement].isKnown then
	local CCdebuff = { 118, 28272, 61305, 61721, 61780, 28271, 1499, 19503, 90337, 82676, 5782, 6770, 2094, 49203, 19386, 64044, 3355, 82691, 33395, 339 }
	for i=1, #CCdebuff do
		if UnitDebuffID(&amp;quot;target&amp;quot;, CCdebuff[i]) then return false end
	end
	
	local SoI = UnitBuffID(&amp;quot;player&amp;quot;, 20165)
	local SoJ = UnitBuffID(&amp;quot;player&amp;quot;, 20164)
	local SoR = UnitBuffID(&amp;quot;player&amp;quot;, 20154)
	local SoT = UnitBuffID(&amp;quot;player&amp;quot;, 31801)
	local JotP1 = UnitBuffID(&amp;quot;player&amp;quot;, 53655)
	local JotP2 = UnitBuffID(&amp;quot;player&amp;quot;, 53656)
	local JotP3 = UnitBuffID(&amp;quot;player&amp;quot;, 53657)
	local MyJotP = {53655,53656,53657}
	
	if UnitAffectingCombat(&amp;quot;player&amp;quot;) 
	 or ( UnitExists(PQR_CustomTarget) 
	 and UnitAffectingCombat(PQR_CustomTarget)) then
		if IsSpellInRange(GetSpellInfo(20271), &amp;quot;target&amp;quot;) == 1 then
			if (SoR or SoT or SoJ or SoI) and not JotP1 and not JotP2 and not JotP3 then
				PQR_CustomTarget = &amp;quot;target&amp;quot;
				return true
			elseif SoR or SoT or SoJ or SoI then
				for _, MyBuff in ipairs(MyJotP) do
					if UnitBuffID(&amp;quot;player&amp;quot;,MyBuff) then
						local JotPexpire = select(7, UnitBuffID(&amp;quot;player&amp;quot;, MyBuff)) - GetTime()
						if JotPexpire &amp;lt; 5 then
							PQR_CustomTarget = &amp;quot;target&amp;quot;
							return true
						elseif PQR_CustomTargetHP &amp;gt;= 80 then return true
						end
					end
				end
			end
		elseif UnitExists(PQR_CustomTarget) and UnitCanCooperate(&amp;quot;player&amp;quot;, PQR_CustomTarget) and IsSpellInRange(GetSpellInfo(20271), PQR_CustomTarget..&amp;quot;target&amp;quot;) == 1 then
			if (SoR or SoT or SoJ or SoI) and not JotP1 and not JotP2 and not JotP3 then
				PQR_CustomTarget = PQR_CustomTarget..&amp;quot;target&amp;quot;
				return true
			elseif SoR or SoT or SoJ or SoI then
				for _, MyBuff in ipairs(MyJotP) do
					if UnitBuffID(&amp;quot;player&amp;quot;,MyBuff) then
						local JotPexpire = select(7, UnitBuffID(&amp;quot;player&amp;quot;, MyBuff)) - GetTime()
						if JotPexpire &amp;lt; 5 then
							PQR_CustomTarget = PQR_CustomTarget..&amp;quot;target&amp;quot;
							return true
						elseif PQR_CustomTargetHP &amp;gt;= 80 then return true
						end
					end
				end
			end
		end
	end
end

if select(3, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 15 then
	if UnitExists(&amp;quot;target&amp;quot;) 
	 and IsSpellInRange(GetSpellInfo(20271), &amp;quot;target&amp;quot;)
	 and UnitCanAttack(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
	 	return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Test Abilities</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_Spells = { PQ_HolyLight, PQ_DivineLight, PQ_FlashofLight, PQ_HolyShock }
if not TimeTester then TimeTester = 0 end

if IsLeftControlKeyDown() and not GetCurrentKeyBoardFocus() and GetTime() - TimeTester &amp;gt; 3 then
	TimeTester = GetTime()
	print(&amp;quot;PQR_CustomTarget is: &amp;quot;..PQR_CustomTarget)
	for i=1, #PQ_Spells do
		print(PQ_Spell[v].targetHealth)
		print(PQ_Spell[v].manaCost)
		if PQ_Spell[v].check == true then
			print(select(1, GetSpellInfo(v))..&amp;quot; is Enabled&amp;quot;)
		end
		if PQ_Spell[v].isKnown == true then
			print(select(1, GetSpellInfo(v))..&amp;quot; is Known&amp;quot;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Cleanse</Name><Default>false</Default><SpellID>4987</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_Cleanse].check and PQ_Spell[PQ_Cleanse].isKnown then
	if PQR_CustomTargetHP &amp;gt; 80 then
		local group = &amp;quot;party&amp;quot;
		local members = GetNumPartyMembers()
		local needToCleanse = false
		if GetNumRaidMembers() &amp;gt; 0 then group = &amp;quot;raid&amp;quot; members = GetNumRaidMembers() end
		
		for i=1, members, 1 do 
			local PQ_CleanseTarget = group..tostring(i)
			if not DontDispel(PQ_CleanseTarget) 
			  and ValidDispel(PQ_CleanseTarget)
			  and UnitCanCooperate(&amp;quot;player&amp;quot;, PQ_CleanseTarget)
			  and IsSpellInRange(GetSpellInfo(PQ_Cleanse), PQ_CleanseTarget) == 1
			  and not PQR_IsOutOfSight(PQ_CleanseTarget) then
				PQR_CustomTarget = PQ_CleanseTarget
				needToCleanse = true
			end
		end
		if not DontDispel(&amp;quot;player&amp;quot;) and ValidDispel(&amp;quot;player&amp;quot;) then 
			PQR_CustomTarget = &amp;quot;player&amp;quot; 
			return true 
		elseif needToCleanse == true then 
			return true 
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Cleanse (Priority)</Name><Default>false</Default><SpellID>4987</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_Cleanse].check and PQ_Spell[PQ_Cleanse].isKnown then
	if not DontDispel(PQR_CustomTarget) 
	  and DangerousMagic(PQR_CustomTarget) 
	  and ValidDispel(PQR_CustomTarget) then
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Seal of Insight</Name><Default>false</Default><SpellID>20165</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_SoI].check and PQ_Spell[PQ_SoI].isKnown then
	local MySeal = { 20165, 20164, 20154, 31801 }
	local PQ_hasSeal = false
	local My_typeOfSeal
	
	-- Looking up to see if we currently have a seal already.
	for i=1, #MySeal do
		-- If we do save it in a variable so we can recast it if we need to.
		if UnitBuffID(&amp;quot;player&amp;quot;, MySeal[i]) then
			PQ_hasSeal = true
			My_typeOfSeal = MySeal[i]
		end
	end
	
	-- If we have a seal, we&amp;apos;re checking how long till it expires.
	if hasSeal then
		local My_sealExpire = select(7, UnitBuffID(&amp;quot;player&amp;quot;, My_typeOfSeal)) - GetTime()
		if My_sealExpire &amp;lt; 10 then
			CastSpellByID(My_typeOfSeal, &amp;quot;player&amp;quot;)
		end
	-- If we don&amp;apos;t, we default back to Seal of Insight.
	elseif not PQ_hasSeal then
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>GoAK</Name><Default>false</Default><SpellID>86150</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_GoAK].check and PQ_Spell[PQ_GoAK].isKnown then
	if PQR_CustomTargetHP &amp;lt; PQ_Spell[PQ_GoAK].targetHealth 
	 and ( UnitAffectingCombat(&amp;quot;player&amp;quot;)
	 or UnitAffectingCombat(PQR_CustomTarget) )
	 and not UnitBuffID(&amp;quot;player&amp;quot;, 31884)
	 and not UnitBuffID(&amp;quot;player&amp;quot;, 31842) then
		if PQR_SpellAvailable(PQ_GoAK) then
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Ability Tester</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not GetCVar(&amp;quot;LoadRotation&amp;quot;) then RegisterCVar(&amp;quot;LoadRotation&amp;quot;, 0) end

if GetMacroInfo(&amp;quot;Load1&amp;quot;) ~= &amp;quot;Load1&amp;quot; then CreateMacro(&amp;quot;Load1&amp;quot;, 1, &amp;quot;/script if GetCVar(LoadRotation) then SetCVar(LoadRotation, 1) end&amp;quot;, 1, nil) end
if GetMacroInfo(&amp;quot;Load2&amp;quot;) ~= &amp;quot;Load2&amp;quot; then CreateMacro(&amp;quot;Load2&amp;quot;, 1, &amp;quot;/script if GetCVar(LoadRotation) then SetCVar(LoadRotation, 2) end&amp;quot;, 1, nil) end
if GetMacroInfo(&amp;quot;Load3&amp;quot;) ~= &amp;quot;Load3&amp;quot; then CreateMacro(&amp;quot;Load3&amp;quot;, 1, &amp;quot;/script if GetCVar(LoadRotation) then SetCVar(LoadRotation, 3) end&amp;quot;, 1, nil) end
if GetMacroInfo(&amp;quot;Load4&amp;quot;) ~= &amp;quot;Load4&amp;quot; then CreateMacro(&amp;quot;Load4&amp;quot;, 1, &amp;quot;/script if GetCVar(LoadRotation) then SetCVar(LoadRotation, 4) end&amp;quot;, 1, nil) end
	
if tonumber(GetCVar(&amp;quot;LoadRotation&amp;quot;)) ~= 0 then 
	local RotationNumber = tonumber(GetCVar(&amp;quot;LoadRotation&amp;quot;))
	SetCVar(&amp;quot;LoadRotation&amp;quot;, 0)
	PQR_SwapRotation(RotationNumber)  
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Targeting System (NO MO) --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if SafeTarget(&amp;quot;target&amp;quot;) then 
  PQR_CustomTarget = &amp;quot;target&amp;quot; 
  PQR_CustomTargetHP = CalculateHP(&amp;quot;target&amp;quot;) 
elseif SafeTarget(&amp;quot;mouseover&amp;quot;) and GetMouseFocus() ~= WorldFrame then 
  PQR_CustomTarget = &amp;quot;mouseover&amp;quot;
  PQR_CustomTargetHP = CalculateHP(&amp;quot;mouseover&amp;quot;) 
else 
  lowhpmembers = 0
  missingfortitude = false
  missingshadow = false
  havemending = false
  priodispel = nil
  PQR_CustomTarget = &amp;quot;player&amp;quot;
  PQR_CustomTargetHP = CalculateHP(&amp;quot;player&amp;quot;)
  local group = &amp;quot;party&amp;quot;
  local members = GetNumPartyMembers()
  if GetNumRaidMembers() &amp;gt; 0 then group = &amp;quot;raid&amp;quot; members = GetNumRaidMembers() end

  for i = 1, members, 1 do
    local member = group..tostring(i)
    local memberhp = CalculateHP(member)
    if SafeTarget(member)  then
      if UnitGroupRolesAssigned(member) == &amp;quot;TANK&amp;quot; then memberhp = memberhp - 1 end
      if UnitBuffID(&amp;quot;player&amp;quot;, PQ_BeaconofLight) then memberhp = memberhp + 4 end
      if UnitThreatSituation(member) == 3 then memberhp = memberhp - 3 end
      if memberhp &amp;lt; 82 then lowhpmembers = lowhpmembers + 1 end
      if memberhp &amp;lt; PQR_CustomTargetHP then
        PQR_CustomTarget = member
        PQR_CustomTargetHP = memberhp
      end
      if DangerousMagic(member) and not DontDispel(member) then priodispel = member end 

    end
  end

  if priodispel then PQR_CustomTarget = priodispel end

end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hand of Salvation</Name><Default>false</Default><SpellID>1038</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_HandofSalvation].check and PQ_Spell[PQ_HandofSalvation].isKnown then
	if UnitThreatSituation(PQR_CustomTarget) == 3
	  and UnitGroupRolesAssigned(PQR_CustomTarget) ~= &amp;quot;TANK&amp;quot;
	  and PQR_CustomTarget ~= &amp;quot;player&amp;quot;
	  and IsSpellInRange(GetSpellInfo(1038), PQR_CustomTarget) == 1 
	  and select(2, GetSpellCooldown(1038)) == 0 then
		if PQ_CastingInfo(&amp;quot;player&amp;quot;) then
			if select(2, PQ_CastingInfo(&amp;quot;player&amp;quot;)) &amp;gt; 90 then
				return true
			end
		else
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hand of Protection</Name><Default>false</Default><SpellID>1022</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_HandofProtection].check and PQ_Spell[PQ_HandofProtection].isKnown then
	if UnitExists(&amp;quot;mouseover&amp;quot;) 
	 and UnitCanCooperate(&amp;quot;mouseover&amp;quot;)
	 and IsLeftShiftKeyDown() and not GetCurrentKeyBoardFocus()
	 and (UnitAffectingCombat(&amp;quot;player&amp;quot;) or UnitAffectingCombat(&amp;quot;mouseover&amp;quot;))
	 and PQR_SpellAvailable(PQ_HandofProtection) then
	 	PQR_CustomTarget = &amp;quot;mouseover&amp;quot;
	 	return true
	end
	
	if IsActiveBattlefieldArena() == 1 then
	local MeleeClassesTargeting = 0
		for i=1, 5 do
			local aTarget = &amp;quot;arena&amp;quot;..tostring(i)
			if UnitExists(aTarget) then
				if UnitClass(aTarget) == &amp;quot;ROGUE&amp;quot; or UnitClass(aTarget) == &amp;quot;WARRIOR&amp;quot; or UnitClass(aTarget) == &amp;quot;DEATHKNIGHT&amp;quot; or UnitClass(aTarget) == &amp;quot;DRUID&amp;quot; then
					if UnitIsUnit(PQR_CustomTarget, aTarget..&amp;quot;target&amp;quot;) then
						if UnitClass(aTarget) == &amp;quot;DRUID&amp;quot; then
							if UnitPowerMax(aTarget) &amp;lt;= 120 then
								MeleeClassesTargeting = MeleeClassesTargeting + 1
							end
						else
							MeleeClassesTargeting = MeleeClassesTargeting + 1
						end
					end
				end
			end
		end
		if MeleeClassesTargeting &amp;gt;= 2 and PQR_CustomTargetHP &amp;lt;= 60 then
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Divine Plea</Name><Default>false</Default><SpellID>54428</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_DivinePlea].check and PQ_Spell[PQ_DivinePlea].isKnown then
	if select(3, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; PQ_Spell[PQ_DivinePlea].playerMana 
	  and (PQR_CustomTargetHP &amp;gt; 60 or select(3, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt; 10) then
		if select(2, GetSpellCooldown(54428)) == 0 then
			return true
		end
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Raiding/Arena Layout Example --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Only takes effect when we&amp;apos;re 85
if UnitLevel(&amp;quot;player&amp;quot;) == 85 then
	-- If we are in a 5 man instance
	if IsInInstance() and select(2, GetInstanceInfo()) == &amp;quot;party&amp;quot; then
		PQ_Spell[PQ_HolyLight].targetHealth = 92
		PQ_Spell[PQ_HolyLight].check = true
		PQ_Spell[PQ_DivineLight].targetHealth = 58
		PQ_Spell[PQ_DivineLight].checkArena = false
		PQ_Spell[PQ_FlashofLight].targetHealth = 32
		PQ_Spell[PQ_FlashofLight].whileMovingHealth = 65
		PQ_Spell[PQ_FlashofLight].checkArena = false
		PQ_Spell[PQ_LightofDawn].check = true
		PQ_Spell[PQ_HolyRadiance].check = true
		PQ_Spell[PQ_HolyRadiance].targetHealth = 80
		PQ_Spell[PQ_HolyShock].targetHealth = 95
		PQ_Spell[PQ_WordofGlory].targetHealth = 82
	-- If we are in a raid of any size
	elseif IsInInstance() and select(2, GetInstanceInfo()) == &amp;quot;raid&amp;quot; then
		PQ_Spell[PQ_HolyLight].targetHealth = 90
		PQ_Spell[PQ_HolyLight].check = true
		PQ_Spell[PQ_DivineLight].targetHealth = 65
		PQ_Spell[PQ_DivineLight].checkArena = false
		PQ_Spell[PQ_FlashofLight].targetHealth = 25
		PQ_Spell[PQ_FlashofLight].whileMovingHealth = 65
		PQ_Spell[PQ_FlashofLight].checkArena = false
		PQ_Spell[PQ_LightofDawn].check = true
		PQ_Spell[PQ_HolyRadiance].check = true
		PQ_Spell[PQ_HolyRadiance].targetHealth = 85
		PQ_Spell[PQ_HolyShock].targetHealth = 93
		PQ_Spell[PQ_WordofGlory].targetHealth = 80
	-- If we are in a Battleground
	elseif IsInInstance() and select(2, GetInstanceInfo()) == &amp;quot;pvp&amp;quot; and IsActiveBattlefieldArena() == 0 then
		PQ_Spell[PQ_HolyLight].targetHealth = 92
		PQ_Spell[PQ_HolyLight].check = true
		PQ_Spell[PQ_DivineLight].targetHealth = 65
		PQ_Spell[PQ_DivineLight].checkArena = false
		PQ_Spell[PQ_FlashofLight].targetHealth = 38
		PQ_Spell[PQ_FlashofLight].whileMovingHealth = 75
		PQ_Spell[PQ_FlashofLight].checkArena = false
		PQ_Spell[PQ_LightofDawn].check = false
		PQ_Spell[PQ_HolyRadiance].check = false
		PQ_Spell[PQ_HolyShock].targetHealth = 95
		PQ_Spell[PQ_WordofGlory].targetHealth = 80
		PQ_Spell[PQ_DivineProtection].playerHealth = 60
	-- If we are in an Arena Battle
	elseif IsInInstance() and IsActiveBattlefieldArena() == 1 then
		PQ_Spell[PQ_HolyLight].check = false
		PQ_Spell[PQ_DivineLight].targetHealth = 75
		PQ_Spell[PQ_DivineLight].checkArena = true
		PQ_Spell[PQ_FlashofLight].targetHealth = 70
		PQ_Spell[PQ_FlashofLight].whileMovingHealth = 80
		PQ_Spell[PQ_FlashofLight].checkArena = true
		PQ_Spell[PQ_LightofDawn].check = false
		PQ_Spell[PQ_HolyRadiance].check = false
		PQ_Spell[PQ_HolyShock].targetHealth = 95
		PQ_Spell[PQ_WordofGlory].targetHealth = 85
	-- Open world catch-all
	else
		PQ_Spell[PQ_HolyLight].targetHealth = 92
		PQ_Spell[PQ_HolyLight].check = true
		PQ_Spell[PQ_DivineLight].targetHealth = 58
		PQ_Spell[PQ_DivineLight].checkArena = false
		PQ_Spell[PQ_FlashofLight].targetHealth = 32
		PQ_Spell[PQ_FlashofLight].whileMovingHealth = 65
		PQ_Spell[PQ_FlashofLight].checkArena = false
		PQ_Spell[PQ_LightofDawn].check = true
		PQ_Spell[PQ_HolyRadiance].check = true
		PQ_Spell[PQ_HolyRadiance].targetHealth = 85
		PQ_Spell[PQ_HolyShock].targetHealth = 95
		PQ_Spell[PQ_WordofGlory].targetHealth = 82
	end
end

-- We can set global settings as well. Such as how much overheal to allow before saying NO.
PQ_Spell[PQ_HolyLight].overHealLimit = 107
PQ_Spell[PQ_DivineLight].overHealthLimit = 112
PQ_Spell[PQ_FlashofLight].overHealLimit = 102</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Crusaders Strike</Name><Default>false</Default><SpellID>35395</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_CrusaderStrike].check and PQ_Spell[PQ_CrusaderStrike].isKnown then
	if UnitExists(&amp;quot;target&amp;quot;) and PQR_CustomTargetHP &amp;gt;= 50 then
		if UnitIsEnemy(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) or UnitAffectingCombat(&amp;quot;target&amp;quot;) then
			if IsSpellInRange(GetSpellInfo(35395), &amp;quot;target&amp;quot;) == 1 
			  and select(5,PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 2 then
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hammer of Justice</Name><Default>false</Default><SpellID>853</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_HoJ].check and PQ_Spell[PQ_HoJ].isKnown then
	if UnitExists(&amp;quot;target&amp;quot;)and IsLeftAltKeyDown() and GetCurrentKeyBoardFocus() == nil then
		if UnitIsEnemy(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
			if IsSpellInRange(GetSpellInfo(PQ_HoJ), &amp;quot;target&amp;quot;) == 1  then
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hammer of Wrath</Name><Default>false</Default><SpellID>24275</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_HoW].check and PQ_Spell[PQ_HoW].isKnown then
	if UnitExists(&amp;quot;target&amp;quot;)and IsUsableSpell(PQ_HoW) and PQR_CustomTargetHP &amp;gt;= 50 then
		if UnitIsEnemy(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) or UnitAffectingCombat(&amp;quot;target&amp;quot;) then
			if IsSpellInRange(GetSpellInfo(PQ_HoW), &amp;quot;target&amp;quot;) == 1 then
				return true
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Blessings</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if (PQ_Spell[PQ_BoK].check and PQ_Spell[PQ_BoK].isKnown) 
 or (PQ_Spell[PQ_BoM].check and PQ_Spell[PQ_BoM].isKnown) then
	local My_BoM = false
	local hasBoM = false
	if UnitBuffID(&amp;quot;player&amp;quot;, PQ_BoM) then
		if select(8, UnitBuff(&amp;quot;player&amp;quot;, GetSpellInfo(PQ_BoM))) == &amp;quot;player&amp;quot; then
			My_BoM = true
			hasBoM = true
		else
			My_BoM = false
			hasBoM = true
		end
	elseif UnitBuffID(&amp;quot;player&amp;quot;, PQ_BoK) then
		if select(8, UnitBuff(&amp;quot;player&amp;quot;, GetSpellInfo(PQ_BoK))) == &amp;quot;player&amp;quot; then
			return false
		else
			CastSpellByID(PQ_BoM, &amp;quot;player&amp;quot;)
		end
	else
		CastSpellByID(PQ_BoM, &amp;quot;player&amp;quot;)
	end
	
	if My_BoM == false and hasBoM == true then
		if UnitBuff(&amp;quot;player&amp;quot;, GetSpellInfo(PQ_BoK)) or UnitBuffID(&amp;quot;player&amp;quot;, 1126) then
			return false
		else
			CastSpellByID(PQ_BoK, &amp;quot;player&amp;quot;)
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Encounters --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>local PQ_TimerForEncounters
HealPartyOnly = false
HealAtFullHealth = false
PreCastDivineLight = false
if not PQ_TimerForEncounters then PQ_TimerForEncounters = GetTime() - 30 end

if UnitExists(&amp;quot;boss1&amp;quot;) then
	npcid = tonumber((UnitGUID(&amp;quot;boss1&amp;quot;)):sub(-12, -9), 16)
	
	-----------------------------
	-- Yor&amp;apos;sahj
	-----------------------------
	if npcid == 55312 then -- Yor&amp;apos;sahj UnitID
 		if (UnitExists(&amp;quot;boss2&amp;quot;) or UnitExists(&amp;quot;boss3&amp;quot;)) -- When Oozes are out
 		 and select(3, PQ_UnitInfo(&amp;quot;player&amp;quot;)) &amp;lt;= 80 then -- And we have less than 80% Mana
 			if GetTime() - PQ_TimerForEncounters &amp;gt;= 30 then
 				PQ_TimerForEncounters = GetTime()
 				PQ_Notify(&amp;quot;|cffFF33CCGet in Melee Range to regain Mana with Seal of Insight Procs!&amp;quot;)
 			end
 		end
 		--[[if UnitBuffID(&amp;quot;boss1&amp;quot;, 103628) then
 				if GetRaidDifficulty() &amp;gt;= 3 then
					HealPartyOnly = true -- Not Implemented yet!
					PQ_Spell[PQ_HolyLight].check = false
					PQ_Spell[PQ_FlashofLight].check = false
				end
		end]]--
		
		
	-----------------------------
	-- Morchock
	-----------------------------	
	elseif npcid == 55265 then -- Morchok
		if GetTime() - PQ_TimerForEncounters &amp;gt; 30 then PQ_Notify(&amp;quot;Found Morchok!&amp;quot;) end
		if UnitExists(&amp;quot;boss2&amp;quot;) then -- Kohcrom
			PreCastDivineLight = true
		end
		
	-----------------------------
	-- Warlord Zonozz
	-----------------------------	
	elseif npcid == 55308 then -- Zonozz
		PQ_Spell[PQ_Cleanse].check = false
		
		
		
	-----------------------------
	-- Ultraxion
	-----------------------------	
	elseif npcid == 55294 then -- Ultraxion
		if UnitBuffID(&amp;quot;player&amp;quot;, 105903) then
			PQ_Spell[PQ_HolyRadiance].targetHealth = 100
		end
	
	-----------------------------
	-- Spine of Deathwing
	-----------------------------	
	elseif npcid == 53879 then -- Spine of Deathwing
		HealAtFullHealth = true
	end
else
	PQ_Spell[PQ_Cleanse].check = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Beacon of Light</Name><Default>false</Default><SpellID>53563</SpellID><Actions></Actions><Lua>if PQ_Spell[PQ_BeaconofLight].check and PQ_Spell[PQ_BeaconofLight].isKnown then
	
	--------------------------------
	-- Select a New Beacon Target
	--------------------------------
	if IsLeftControlKeyDown() 
	  and not GetCurrentKeyBoardFocus()
	  and UnitExists(&amp;quot;mouseover&amp;quot;)
	  and UnitCanCooperate(&amp;quot;player&amp;quot;, &amp;quot;mouseover&amp;quot;) then
	  	PQR_CustomTarget = &amp;quot;mouseover&amp;quot;
	  	return true
	end
	
	--------------------------------
	-- Search for a Beaconed Target
	--------------------------------
	local BeaconedTarget, BeaconInRange
	local group, members = &amp;quot;party&amp;quot;, GetNumPartyMembers()
	if GetNumRaidMembers() &amp;gt; 0 then group = &amp;quot;raid&amp;quot; members = GetNumRaidMembers() end
	for i=0, members, 1 do
		local member = group..tostring(i)
		if UnitBuffID(member, 53563, &amp;quot;PLAYER&amp;quot;) then
			if IsSpellInRange(GetSpellInfo(635), member) == 1
			  and not PQR_IsOutOfSight(member) then
			  	BeaconedTarget = member
			  	BeaconInRange = true
			  	break
			 else
			 	BeaconedTarget = member
			 	BeaconInRange = false
			 	break
			 end
		end
		if i == members  then
			if UnitBuffID(&amp;quot;player&amp;quot;, 53563, &amp;quot;PLAYER&amp;quot;) then
				BeaconedTarget = &amp;quot;player&amp;quot;
				BeaconInRange = true
			end
		end
	end
	
	
	--------------------------------
	-- Beacon a Target
	--------------------------------
	if IsRightShiftKeyDown() and not GetCurrentKeyBoardFocus() then
		local RepeatTimer
		if not RepeatTimer then RepeatTimer = GetTime() - 5 end
		if GetTime() - RepeatTimer &amp;gt;= 5 then
			RepeatTimer = GetTime()
			if BeaconedTarget then
				print(UnitName(BeaconedTarget, true))
			else print(&amp;quot;nil&amp;quot;) end
			if BeaconInRange then
				print(&amp;quot;true&amp;quot;)
			else print(&amp;quot;false&amp;quot;) end
		end
	end
	if BeaconedTarget ~= nil and BeaconInRange == true then
		local BeaconExpire = select(7, UnitBuffID(BeaconedTarget, 53563, &amp;quot;PLAYER&amp;quot;)) - GetTime()
		if BeaconExpire &amp;lt;= 10 then
			PQR_CustomTarget = BeaconedTarget
			return true
		end
	elseif BeaconedTarget and not BeaconInRange then
		local BeaconExpire = select(7, UnitBuffID(BeaconedTarget, 53563, &amp;quot;PLAYER&amp;quot;)) - GetTime()
		if BeaconExpire &amp;lt;= 10 then
			local BeaconReminderTimer
			if not BeaconReminderTimer then BeaconReminderTimer = GetTime() - 10 end
			if GetTime() - BeaconReminderTimer &amp;gt;= 10 then
				BeaconReminderTimer = GetTime()
				--PQ_Notify(&amp;quot;|cffFF0066Your |cffFFFF77Beacon |cffFF0066is about to drop on a Target Outside of your Beacon Range, or Line of Sight!!!&amp;quot;)
				return false
			end
		end
	elseif not BeaconedTarget and not BeaconInRange then
		--PQ_Notify(&amp;quot;|cffFF0066We couldn&amp;apos;t find a target with |cffFFFF77Beacon of Light|cffFF0066. Defaulting back to |cffFF6600Player.&amp;quot;)
		PQR_CustomTarget = &amp;quot;player&amp;quot;
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Special Events --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Edited with Mentally&amp;apos;s Code
-- Fading Light
local FadingLight = {110070, 105925, 109075, 110079, 110069, 110070, 110080, 110068, 110078}
for i,v in ipairs(FadingLight) do
	if select(7,UnitDebuffID(&amp;quot;player&amp;quot;, v)) and select(7,UnitDebuffID(&amp;quot;player&amp;quot;, v)) - GetTime() &amp;lt; 2 then
			RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
	end
end

-- Hour of Twilight
local HoT,_,_,_,_,timer = UnitCastingInfo(&amp;quot;boss1&amp;quot;)
local HourOfTwilight = {109415, 106371, 109416, 109415, 109417}
	
for i,v in ipairs(HourOfTwilight) do
	if HoT == GetSpellInfo(v) and timer/1000 - GetTime() &amp;lt; 2 then
		RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
	end
end

-- Try to aim on Darkmoon Faerie Cannon
local canontime = select(7,UnitBuffID(&amp;quot;player&amp;quot;,102116))
if canontime and canontime - GetTime() &amp;lt; 1.07 then CancelUnitBuff(&amp;quot;player&amp;quot;,&amp;quot;Magic Wings&amp;quot;) end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>True</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></PALADIN>