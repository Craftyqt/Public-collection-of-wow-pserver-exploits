<?xml version="1.0" encoding="utf-8" ?><DRUID><Ability><Name>EclipseBar</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not eclipseBar or UnitIsDeadOrGhost(&amp;quot;player&amp;quot;) then
	eclipseBar = 1
end

if UnitBuffID(&amp;quot;player&amp;quot;, 48517) or GetEclipseDirection() == &amp;quot;moon&amp;quot; then
	eclipseBar = 1
elseif UnitBuffID(&amp;quot;player&amp;quot;, 48518) or GetEclipseDirection() == &amp;quot;sun&amp;quot; then
	eclipseBar = 2
end

if not UnitBuffID(&amp;quot;player&amp;quot;, 48517) and not UnitBuffID(&amp;quot;player&amp;quot;, 49518) then
	if eclipseBar == 1 then modkeytime = 0 end
	if IsRightAltKeyDown() and GetTime() - modkeytime &amp;gt; 1  then
	modkeytime = GetTime()
		if eclipseBar == 2 then
			PQR_WriteToChat(&amp;quot;Manual Switch into Solar Mode&amp;quot;) 
			eclipseBar = 1 
		else 
			PQR_WriteToChat(&amp;quot;Manual Switch into Lunar Mode&amp;quot;)
			eclipseBar = 2 
		end
	end	
end</Lua><RecastDelay>4000</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--- Functions and Constants</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if PQR_RotationStarted == true then
	PQR_RotationStarted = false
	if PQR_LoadLua ~= nil then
		-- Load Data File
		if PQR_LoadLua(&amp;quot;PQR_Nova_Data.lua&amp;quot;) == false then
			PQR_WriteToChat(&amp;quot;You are missing PQR_Nova_Data.lua. Rotation has been stopped.&amp;quot;, &amp;quot;Error&amp;quot;)
			PQR_StopRotation()
			return true
		end
	end
end

if not tableSetup then
-- Constants
PQ_Starfire = 2912
PQ_Wrath = 5176
PQ_InsectSwarm = 5570
PQ_Moonfire = 8921
PQ_FaerieFire = 770
PQ_Typhoon = 50516
PQ_ForceofNature = 33831
PQ_Innervate = 29166
PQ_RemoveCorruption = 2782
PQ_MotW = 1126
PQ_EntanglingRoots = 339
PQ_Starsurge = 78674
PQ_SolarBeam = 78675
PQ_Hurricane = 16914
PQ_Hibernate = 2637
PQ_Cyclone = 33786
PQ_WildMushroom = 88747
PQ_Tranquility = 740
PQ_Sunfire = 93402
PQ_Moonkin = 24858
PQ_Bear = 5487
PQ_Cat = 768
PQ_Rejuvenation = 774
PQ_Regrowth = 8936

-- The Table
PQ_Abilities = {
	[PQ_Starfire] = { checkEnabled = true, castTime = 3, isKnown = IsSpellKnown(2912), eclipseBar = 2 },

	[PQ_Wrath] = { checkEnabled = true, castTime = 2.5, isKnown = IsSpellKnown(5176), eclipseBar = 1 },

	[PQ_InsectSwarm] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(5570), eclipseBar = 0 },

	[PQ_Moonfire] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(8921), eclipseBar = 0 },
	
	[PQ_MotW] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(1126) },

	[PQ_Typhoon] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(50516), eclipseBar = 0 },

	[PQ_Hurricane] = { checkEnabled = true, castTime = 1.75, isKnown = IsSpellKnown(16914), eclipseBar = 0 },

	[PQ_Cyclone] = { checkEnabled = true, castTime = 1.75, isKnown = IsSpellKnown(33786), eclipseBar = 0 },

	[PQ_FaerieFire] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(770), eclipseBar = 0 },

	[PQ_SolarBeam] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(78675), eclipseBar = 0 },
	
	[PQ_WildMushroom] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(88747), eclipseBar = 0 },

	[PQ_ForceofNature] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(33831), eclipseBar = 0 },

	[PQ_Starsurge] = { checkEnabled = false, castTime = 2, isKnown = IsSpellKnown(78674), eclipseBar = 0 },

	[PQ_RemoveCorruption] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(2782), eclipseBar = 0 },

	[PQ_EntanglingRoots] = { checkEnabled = true, castTime = 1.75, isKnown = IsSpellKnown(339), eclipseBar = 0 },

	[PQ_Hibernate] = { checkEnabled = true, castTime = 1.5, isKnown = IsSpellKnown(2637), eclipseBar = 0 },

	[PQ_Sunfire] = { checkEnabled = true, castTime = 0, eclipseBar = 0 },

	[PQ_Tranquility] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(740), eclipseBar = 0 },

	[PQ_Innervate] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(29166), eclipseBar = 0 },

	[PQ_Moonkin] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(24858), shapeForm = 5 },

	[PQ_Bear] = { checkEnabled = false, castTime = 0, isKnown = IsSpellKnown(5487), shapeForm = 1 },

	[PQ_Rejuvenation] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(774) },

	[PQ_Regrowth] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(8936) },

	[PQ_Cat] = { checkEnabled = false, castTime = 0, isKnown = IsSpellKnown(768), shapeForm = 3 }

}  -- End of the Table

	tableSetup = true
end

if not bubbaFunction then

	function castTime(spellName)
		local SoL = select(5, GetTalentInfo(1, 13))
		local currentHaste = (GetCombatRatingBonus(20) + SoL)

		return (PQ_Abilities[spellName].castTime * (100 - currentHaste))
	end
	
	function PQ_UnitInfo(t)
		--Takes an input of UnitID (player, target, pet, mouseover, etc) and gives you their most useful info
		local TManaActual = UnitPower(t)
		local TMana = 100 * UnitPower(t) / UnitPowerMax(t)
		local THealthActual = UnitHealth(t)
		local THealth = 100 * UnitHealth(t) / UnitHealthMax(t)
		local PEclipse = UnitPower(t, 8)
		return THealth, THealthActual, TMana, TManaActual, PEclipse
	end

	function DebuffDispel(t)
		local i = 1
		local debuff, _, _, count, debufftype = UnitDebuffID(t, i)
		local isCleanseable = false
		while debuff do
			if debufftype == &amp;quot;Curse&amp;quot; or debufftype == &amp;quot;Poison&amp;quot; then
				if count &amp;lt;= 2 then
					isCleanseable = true
				end
			end
			i = i + 1
			debuff, _, _, _, debufftype = UnitDebuffID(t, i)
		end
		return isCleanseable
	end

	bubbaFunction = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Variables --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Set the Variable Cast Time based off Haste and Current Procs
local spellsToCheck = { PQ_Starfire, PQ_Wrath, PQ_InsectSwarm, PQ_Moonfire, PQ_FaerieFire, PQ_Typhoon, PQ_ForceofNature, PQ_Innervate, PQ_RemoveCorruption, PQ_EntanglingRoots, PQ_Starsurge, PQ_SolarBeam, PQ_Hurricane, PQ_Hibernate, PQ_Cyclone, PQ_WildMushroom, PQ_Tranquility, PQ_Sunfire }
for i, v in ipairs(spellsToCheck) do
	if PQ_Abilities[v] then
		PQ_Abilities[v].castTime = (select(7, GetSpellInfo(v)) / 1000)
	end
end

local manaToCheck = { PQ_Starfire, PQ_Wrath, PQ_InsectSwarm, PQ_Moonfire, PQ_FaerieFire, PQ_Typhoon, PQ_ForceofNature, PQ_Innervate, PQ_RemoveCorruption, PQ_EntanglingRoots, PQ_Starsurge, PQ_SolarBeam, PQ_Hurricane, PQ_Hibernate, PQ_Cyclone, PQ_WildMushroom, PQ_Tranquility, PQ_Sunfire, PQ_Rejuvenation, PQ_Regrowth, PQ_Bear, PQ_Moonkin, PQ_Cat }
for i, v in ipairs(manaToCheck) do
	if PQ_Abilities[v] then
		PQ_Abilities[v].manaCost = select(4, GetSpellInfo(v))
	end
end

local sunFire = select(5, GetTalentInfo(1, 16))
if sunFire == 1 then
	PQ_Abilities[PQ_Sunfire].isKnown = true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>-- Debug Mode --</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if pauseToggle == nil then modkeytime = 0 end
if IsRightControlKeyDown() and GetTime() - modkeytime &amp;gt; 1  then
  modkeytime = GetTime()
  if pauseToggle then
	PQ_Abilities[PQ_InsectSwarm].checkEnabled = true
	PQ_Abilities[PQ_Sunfire].checkEnabled = true
	PQ_Abilities[PQ_Moonfire].checkEnabled = true 
	print(&amp;quot;ALL YOUR DOTS HAVE BEEN ENABLED AGAIN&amp;quot;)
	
    pauseToggle = nil 
  else 
	PQ_Abilities[PQ_InsectSwarm].checkEnabled = false
	PQ_Abilities[PQ_Sunfire].checkEnabled = false
	PQ_Abilities[PQ_Moonfire].checkEnabled = false
	print(&amp;quot;ALL YOUR DOTS HAVE BEEN DISABLED&amp;quot;)
    pauseToggle = 1 
  end
end

if pauseToggle == 1 then
	if IsLeftShiftKeyDown() and IsLeftControlKeyDown() and IsLeftAltKeyDown() then
		bubbaFunction = nil
		healinit = nil
		tableSetup = nil
		print(&amp;quot;RESET FUNCTIONS&amp;quot;)
	end
end

local spellName = { PQ_Starfire, PQ_Wrath, PQ_InsectSwarm, PQ_Moonfire, PQ_FaerieFire, PQ_Typhoon, PQ_ForceofNature, PQ_Innervate, PQ_RemoveCorruption, PQ_EntanglingRoots, PQ_Starsurge, PQ_SolarBeam, PQ_Hurricane, PQ_Hibernate, PQ_Cyclone, PQ_WildMushroom, PQ_Tranquility, PQ_Sunfire, PQ_Rejuvenation, PQ_Regrowth, PQ_Bear, PQ_Moonkin, PQ_Cat }
if lastTime == nil then lastTime = 0 end
if IsRightShiftKeyDown() and GetTime() - lastTime &amp;gt; 5 then
	for i, v in ipairs(spellName) do
		local checkKnown = &amp;quot;&amp;quot;
		local Enablecheck = &amp;quot;&amp;quot;
		if PQ_Abilities[v].isKnown then
			checkKnown = &amp;quot;true&amp;quot;
			if PQ_Abilities[v].checkEnable == true then
				Enablecheck = &amp;quot;true&amp;quot;
			else
				Enablecheck = &amp;quot;false&amp;quot;
			end
		else
			checkKnown = &amp;quot;false&amp;quot;
			if PQ_Abilities[v].checkEnable == true then
				Enablecheck = &amp;quot;true&amp;quot;
			else
				Enablecheck = &amp;quot;false&amp;quot;
			end
		end
--		print(GetSpellInfo(v)..&amp;quot; is Known = &amp;quot;..checkKnown..&amp;quot; and is also Enabled = &amp;quot;..Enablecheck)
	end
	lastTime = GetTime()
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Enabling/Disabling Spells</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>return freedom</Lua><RecastDelay>0</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>--- Notes ---</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>-- Alright here&amp;apos;s a list of my Personal Functions that I wrote, and what their input is and what they return.

-- PQ_UnitInfo(unitID) 
-- Returns the following Health(%), Health(Absolute), Power(%), Power(Absolute), Power(Eclipse)

-- castTime(spellID)
-- Returns the cast time (integer) of any spell in seconds.

--PQ_Abilities[PQ_*SpellName*].var
--var can be any of the following:
--checkEnabled(Boolean), isKnown(Boolean), castTime(Int in Seconds), manaCost(Int), eclipseBar(Only Wrath and Starfire)

--DebuffDispell(unitID)
--Runs a check on whether or not the Druid will be able to cleanse the debuffs on a target or not</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wrath</Name><Default>false</Default><SpellID>5176</SpellID><Actions></Actions><Lua>if PQ_Abilities[PQ_Wrath].checkEnabled and PQ_Abilities[PQ_Wrath].isKnown and UnitExists(&amp;quot;target&amp;quot;) then
	if PQ_Abilities[PQ_Wrath].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
		if PQ_Abilities[PQ_Wrath].eclipseBar == eclipseBar then
			if (UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) or UnitAffectingCombat(&amp;quot;player&amp;quot;)) then
				if not UnitIsFriend(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
					return true
				end
			end
		elseif select(5, GetTalentInfo(1, 8)) == 0 then
			if (UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) or UnitAffectingCombat(&amp;quot;player&amp;quot;)) then
				if not UnitIsFriend(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Starfire</Name><Default>false</Default><SpellID>2912</SpellID><Actions></Actions><Lua>if PQ_Abilities[PQ_Starfire].checkEnabled and PQ_Abilities[PQ_Starfire].isKnown and UnitExists(&amp;quot;target&amp;quot;) then
	if PQ_Abilities[PQ_Starfire].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
		if PQ_Abilities[PQ_Starfire].eclipseBar == eclipseBar then
			if (UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) or UnitAffectingCombat(&amp;quot;player&amp;quot;)) then
				if not UnitIsFriend(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Moonfire</Name><Default>false</Default><SpellID>8921</SpellID><Actions></Actions><Lua>local canCast = false


if PQ_Abilities[PQ_Moonfire].checkEnabled == true and PQ_Abilities[PQ_Moonfire].isKnown == true and UnitExists(&amp;quot;target&amp;quot;) then
	if PQ_Abilities[PQ_Moonfire].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
		if (UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) or UnitAffectingCombat(&amp;quot;player&amp;quot;)) then
			if not UnitIsFriend(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
				canCast = true
				if PQR_IsMoving(0.1) then
					return true
				end
			end
		end
	end
end

if canCast then
	local Moonfire, _, _, _, _, _, mfExpire = UnitDebuffID(&amp;quot;target&amp;quot;, 8921)
	local Sunfire, _, _, _, _, _, sunExpire = UnitDebuffID(&amp;quot;target&amp;quot;, 93402)
	if Moonfire ~= nil then
		mfExpire = (mfExpire - GetTime())
		if mfExpire &amp;lt; 2 then
			return true
		end
	elseif Sunfire ~= nil then
		sunExpire = (sunExpire - GetTime())
		if sunExpire &amp;lt; 2 then
			return true
		end
	elseif PQR_IsMoving(0.1) then
		return true
	else
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Sunfire</Name><Default>false</Default><SpellID>8921</SpellID><Actions></Actions><Lua>local canCast = false

if PQ_Abilities[PQ_Sunfire].checkEnabled and PQ_Abilities[PQ_Sunfire].isKnown and UnitExists(&amp;quot;target&amp;quot;) then
	if PQ_Abilities[PQ_Sunfire].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
		if (UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) or UnitAffectingCombat(&amp;quot;player&amp;quot;)) then
			if not UnitIsFriend(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) and UnitBuffID(&amp;quot;player&amp;quot;, 48517) then
				canCast = true
				if PQR_IsMoving(0.1) then
					return true
				end
			end
		end
	end
end

if canCast then
	local Sunfire, _, _, _, _, _, sunExpire = UnitDebuffID(&amp;quot;target&amp;quot;, 93402)
	local Moonfire, _, _, _, _, _, mfExpire = UnitDebuffID(&amp;quot;target&amp;quot;, 8921)
	if Sunfire ~= nil then
		sunExpire = (sunExpire - GetTime())
		if sunExpire &amp;lt; 2 then
			return true
		end
	elseif Moonfire ~= nil then
		mfExpire = (mfExpire - GetTime())
		if mfExpire &amp;lt; 2 then
			return true
		end
	elseif PQR_IsMoving(0.1) then
		return true
	else
		return true
	end
end</Lua><RecastDelay>100</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Insect Swarm</Name><Default>false</Default><SpellID>5570</SpellID><Actions></Actions><Lua>local canCast = false

if PQ_Abilities[PQ_InsectSwarm].checkEnabled and PQ_Abilities[PQ_InsectSwarm].isKnown and UnitExists(&amp;quot;target&amp;quot;) then
	if PQ_Abilities[PQ_InsectSwarm].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
		if (UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) or UnitAffectingCombat(&amp;quot;player&amp;quot;)) then
			if not UnitIsFriend(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
				canCast = true
			end
		end
	end
end

if canCast then
	local Swarm, _, _, _, _, _, isExpire = UnitDebuffID(&amp;quot;target&amp;quot;, 5570)

	if Swarm ~= nill then
		isExpire = (isExpire - GetTime())
		if isExpire &amp;lt; 2 then
			return true
		end
	else
		return true
	end
end</Lua><RecastDelay>1000</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Starsurge</Name><Default>false</Default><SpellID>78674</SpellID><Actions></Actions><Lua>local canCast = false

if PQ_Abilities[PQ_Starsurge].checkEnabled and PQ_Abilities[PQ_Starsurge].isKnown and UnitExists(&amp;quot;target&amp;quot;) then
	if PQ_Abilities[PQ_Starsurge].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
		if (UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) or UnitAffectingCombat(&amp;quot;player&amp;quot;)) then
			if not UnitIsFriend(&amp;quot;player&amp;quot;, &amp;quot;target&amp;quot;) then
				canCast = true
			end
		end
	end
end

if canCast then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Hurricane</Name><Default>false</Default><SpellID>16914</SpellID><Actions></Actions><Lua>if IsLeftShiftKeyDown() and GetCurrentKeyBoardFocus() == nil then
	if PQ_Abilities[PQ_Hurricane].checkEnabled and PQ_Abilities[PQ_Hurricane].isKnown then
		if PQ_Abilities[PQ_Hurricane].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
			if UnitAffectingCombat(&amp;quot;player&amp;quot;) or UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) then
				if GetShapeshiftForm() == 5 then
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>200</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>No Dismount</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if IsMounted() or GetShapeshiftForm() == 6 then
	return true
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Moonkin Form</Name><Default>false</Default><SpellID>0</SpellID><Actions>/cast Moonkin Form(Shapeshift)</Actions><Lua>if PQ_Abilities[PQ_Moonkin].checkEnabled and PQ_Abilities[PQ_Moonkin].isKnown then
	if GetShapeshiftForm() ~= PQ_Abilities[PQ_Moonkin].shapeForm then
		return true
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Mark of the Wild</Name><Default>false</Default><SpellID>1126</SpellID><Actions></Actions><Lua>if PQ_Abilities[PQ_MotW].checkEnabled and PQ_Abilities[PQ_MotW].isKnown then
	if not UnitBuffID(&amp;quot;player&amp;quot;, PQ_MotW) and not UnitBuffID(&amp;quot;player&amp;quot;, 20217) then
		return true
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Force of Nature</Name><Default>false</Default><SpellID>33831</SpellID><Actions></Actions><Lua>if IsLeftAltKeyDown() and GetCurrentKeyBoardFocus() == nil then
	if PQ_Abilities[PQ_ForceofNature].checkEnabled and PQ_Abilities[PQ_ForceofNature].isKnown then
		if PQ_Abilities[PQ_ForceofNature].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
			if UnitAffectingCombat(&amp;quot;player&amp;quot;) or UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) then
				if GetShapeshiftForm() == 5 then
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>1000</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Remove Corruption</Name><Default>false</Default><SpellID>2782</SpellID><Actions></Actions><Lua>if PQ_Abilities[PQ_RemoveCorruption].checkEnabled and PQ_Abilities[PQ_RemoveCorruption].isKnown then

PQR_CustomTarget = &amp;quot;player&amp;quot;

if GetNumPartyMembers() &amp;gt; 0 or GetNumRaidMembers() &amp;gt; 0 then
	local groupType = &amp;quot;player&amp;quot;
	local size = GetNumPartyMembers()
	if GetNumRaidMembers() &amp;gt; 0 then members = GetNumRaidMembers() groupType = &amp;quot;raid&amp;quot; end
	for i = 1, size, 1 do
		local member = group..tostring(i)
		if PQR_IsOutOfSight(member) == false
		and IsSpellInRange(tostring(GetSpellInfo(2872)), member) == 1 then
			if DebuffDispel(member) then
				PQR_CustomTarget = member
			end
		end
	end
end

if DebuffDispel(PQR_CustomTarget) then return true end
end</Lua><RecastDelay>100</RecastDelay><Target>Custom</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Wild Mushroom</Name><Default>false</Default><SpellID>88747</SpellID><Actions></Actions><Lua>if IsLeftControlKeyDown() and GetCurrentKeyBoardFocus() == nil then
	if PQ_Abilities[PQ_WildMushroom].checkEnabled and PQ_Abilities[PQ_WildMushroom].isKnown then
		if PQ_Abilities[PQ_WildMushroom].manaCost &amp;lt; select(4, PQ_UnitInfo(&amp;quot;player&amp;quot;)) then
			if UnitAffectingCombat(&amp;quot;player&amp;quot;) or UnitAffectingCombat(&amp;quot;targettarget&amp;quot;) then
				if GetShapeshiftForm() == 5 then
					return true
				end
			end
		end
	end
end</Lua><RecastDelay>500</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></DRUID>