<?xml version="1.0" encoding="utf-8" ?><WARLOCK><Ability><Name>++ ClickDaButton ++</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>
local PQ_Latency = PQ_G_Latency

-------------------------------------
-- Avoid sudden death on Ultraxion --
-------------------------------------
local FadingLight = select(7,UnitDebuffID(&amp;apos;player&amp;apos;,110070))
if FadingLight and FadingLight - GetTime() &amp;lt; 0.5 + PQ_Latency()*2 then
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
end
-----------------------------------------
-- Avoid Hour of Twilight on Ultraxion --
-----------------------------------------
local ChannelSpell, _, _, _, _, EndTime = UnitCastingInfo(&amp;quot;boss1&amp;quot;)
if ChannelSpell == GetSpellInfo(109417) and EndTime/1000 - GetTime() &amp;lt; 0.5 + PQ_Latency()*2 then
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
end

-----------------------------------
-- Avoid sudden death on Madness --
-----------------------------------
local Shrapnel = select(7,UnitDebuffID(&amp;apos;player&amp;apos;,109597))
if Shrapnel and Shrapnel - GetTime() &amp;lt; 2 + PQ_Latency()*2 then
	RunMacroText(&amp;quot;/click ExtraActionButton1&amp;quot;)
end
</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>RainOfFire</Name><Default>false</Default><SpellID>5740</SpellID><Actions></Actions><Lua>
if IsLeftShiftKeyDown() and PQ_G_Spec == 3 and IsSpellKnown(5740) then
	return true
end
</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>Shadowfury</Name><Default>false</Default><SpellID>30283</SpellID><Actions></Actions><Lua>
if IsRightAltKeyDown() and PQ_G_Spec == 3 and IsSpellKnown(30283) then
	return true
end
</Lua><RecastDelay>0</RecastDelay><Target>Click</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>++ Rotation Handler ++</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>
local pq_spec = PQ_G_Spec
PQ_G_CalculateTTD()

if PQ_LIB_Warlock_Loaded then
	local bufftocast = PQ_BuffRotation()
	if bufftocast then
		CastSpellByID(bufftocast)
		PQ_PrintToDebug(&amp;apos;\124cFFF3B520TRYING TO CAST &amp;apos; .. GetSpellLink(bufftocast))
		return
	end

	if pq_spec == 3 then
		local spelltocast, targettocast = PQ_DestroRotation()
		if targettocast and spelltocast and spelltocast ~= 0 then
			if PQ_Debug and PQ_DebugCasts then
				PQ_PrintToDebug(&amp;apos;\124cFFF3B520TRYING TO CAST &amp;apos; .. GetSpellLink(spelltocast) .. &amp;apos;ON \124cFFFF0000&amp;apos; .. targettocast)
			end
			CastSpellByID(spelltocast, targettocast)
		elseif not targettocast and spelltocast and spelltocast ~= 0 then
			if PQ_Debug and PQ_DebugCasts then
				PQ_PrintToDebug(&amp;apos;\124cFFF3B520TRYING TO CAST &amp;apos; .. GetSpellLink(spelltocast))
			end
			CastSpellByID(spelltocast)
		end
	elseif pq_spec == 2 then
		local spelltocast, targettocast = PQ_DemoRotation()
		if targettocast and spelltocast and spelltocast ~= 0 then
			if PQ_Debug and PQ_DebugCasts then
				PQ_PrintToDebug(&amp;apos;\124cFFF3B520TRYING TO CAST &amp;apos; .. GetSpellLink(spelltocast) .. &amp;apos;ON \124cFFFF0000&amp;apos; .. targettocast)
			end
			CastSpellByID(spelltocast, targettocast)
		elseif not targettocast and spelltocast and spelltocast ~= 0 then
			if PQ_Debug and PQ_DebugCasts then
				PQ_PrintToDebug(&amp;apos;\124cFFF3B520TRYING TO CAST &amp;apos; .. GetSpellLink(spelltocast))
			end
			CastSpellByID(spelltocast)
		end
	elseif pq_spec == 1 then
		local spelltocast, targettocast = PQ_AffliRotation()
		if targettocast and spelltocast and spelltocast ~= 0 then
			if PQ_Debug and PQ_DebugCasts then
				PQ_PrintToDebug(&amp;apos;\124cFFF3B520TRYING TO CAST &amp;apos; .. GetSpellLink(spelltocast) .. &amp;apos;ON \124cFFFF0000&amp;apos; .. targettocast)
			end
			CastSpellByID(spelltocast, targettocast)
		elseif not targettocast and spelltocast and spelltocast ~= 0 then
			if PQ_Debug and PQ_DebugCasts then
				PQ_PrintToDebug(&amp;apos;\124cFFF3B520TRYING TO CAST &amp;apos; .. GetSpellLink(spelltocast))
			end
			CastSpellByID(spelltocast)
		end
	end
else
	PQ_Notify(&amp;apos;SOMETHING WENT WRONG&amp;apos;)
end
</Lua><RecastDelay>0</RecastDelay><Target>Player</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability><Ability><Name>++ LIB ++</Name><Default>false</Default><SpellID>0</SpellID><Actions></Actions><Lua>if not PQ_LIB_Warlock_Loaded then
----------------
-- DATA FILES --
----------------

	if PQR_RotationStarted == true then
		if PQR_LoadLua ~= nil then
			if PQR_LoadLua(&amp;quot;PQR_Valma_Frames.lua&amp;quot;) == false then 
				PQR_WriteToChat(&amp;quot;You are missing file PQR_Valma_Frames.lua in the Data folder&amp;quot;, &amp;quot;Error&amp;quot;)
				PQR_RotationStop()
				return false
			end
		end
	end

	local pq_printtodebug	= PQ_PrintToDebug
	local pq_notify			= PQ_Notify
	local pq_debug			= PQ_Debug

	if pq_debug then
		pq_printtodebug(&amp;apos;Loading WARLOCK libraries ...&amp;apos;)
	end

---------------
-- VARIABLES --
---------------

	---------------------------------------
	-- Targeting constants and variables --
	---------------------------------------
	local PQ_player			= &amp;apos;player&amp;apos;
	local PQ_pet			= &amp;apos;pet&amp;apos;
	local PQ_target			= &amp;apos;target&amp;apos;
	local PQ_focus			= &amp;apos;focus&amp;apos;
	local PQ_mouseover		= &amp;apos;mouseover&amp;apos;
	local PQ_boss1			= &amp;apos;boss1&amp;apos;
	local PQ_boss2			= &amp;apos;boss2&amp;apos;
	local PQ_boss3			= &amp;apos;boss3&amp;apos;
	local PQ_boss4			= &amp;apos;boss4&amp;apos;
	local PQ_RotationMode	= nil

	-------------------------
	-- Different variables --
	-------------------------
	PQ_G_Spec						= GetPrimaryTalentTree()
	local PQ_RaidIndex				= &amp;apos;blank&amp;apos;
	local PQ_RotationInnerSwitch	= 1
	local PQ_GCDSpell				= 686
	local PQ_PetID					= nil
	local PQ_SoulShard				= nil
	local PQ_DefaultTTD				= 60

	-----------
	-- ITEMS --
	-----------
	local PQ_Soulstone		= 5232
	local PQ_SoulstoneCast	= 693
	local PQ_Healtstone		= 5512
	local PQ_HealtstoneCast	= 6201

	---------------
	-- Buffs IDs --
	---------------
	local PQ_DemonSoulImp		= 79459
	local PQ_DemonSoulFH		= 79460
	local PQ_DemonSoulFG		= 79462
	local PQ_BloodFury			= 33702
	local PQ_Soulburn			= 74434
	local PQ_EmpoweredImp		= 47221
	local PQ_ImpruvedSoulFire	= 85383
	local PQ_Heroism			= 32182
	local PQ_BloodLust			= 2825
	local PQ_TimeWarp			= 80353
	local PQ_Hysteria			= 90355
	local PQ_DCSummon			= 48018
	local PQ_SoulSwapBuff		= 86211
	local PQ_Metamorphosis		= 47241
	local PQ_MoltenCore			= 71165
	local PQ_Decimation			= 63167
	local PQ_FelArmor			= 28176

	---------------
	-- Skill IDs --
	---------------
	local PQ_Shadowflame		= 47897
	local PQ_Corruption			= 172
	local PQ_BaneOfAgony		= 980
	local PQ_CurseOfElements	= 1490
	local PQ_Conflagate			= 17962
	local PQ_LifeTap			= 1454
	local PQ_ChaosBolt			= 50796
	local PQ_Shadowburn			= 17877
	local PQ_BaneOfHavoc		= 80240
	local PQ_Incinerate			= 29722
	local PQ_Immolate			= 348
	local PQ_SoulFire			= 6353
	local PQ_BaneOfDoom			= 603
	local PQ_FelFlame			= 77799
	local PQ_Fear				= 5782
	local PQ_Doomguard			= 18540
	local PQ_DemonSoul			= 77801
	local PQ_DCTeleport			= 48020
	local PQ_RainOfFire			= 5740
	local PQ_ShadowFury			= 30283
	local PQ_Haunt				= 48181
	local PQ_UAffliction		= 30108
	local PQ_DrainSoul			= 1120
	local PQ_ShadowBolt			= 686
	local PQ_SeedOfCorruption	= 27243
	local PQ_SoulSwap			= 86121
	local PQ_SoulSwapExhale		= 86213
	local PQ_HandOfGuldan		= 71521
	local PQ_ImmolationAura		= 50589
	local PQ_Immolation			= 1949

	--------------------
	-- Logic booleans --
	--------------------
	local PQ_HasLossOfControl	= false
	local PQ_HasEveryManSpell	= IsSpellKnown(59752)
	local PQ_InCombat			= false
	local PQ_CancelChannel		= false
	local PQ_SwapPets			= false

	----------
	-- Pets --
	----------
	local PQ_FelGuard = 37481
	local PQ_FelGuardCast = 30146
	local PQ_FelHunter = 36043
	local PQ_FelHunterCast = 691

	-----------------------
	-- Player buff table --
	-----------------------
	local PQ_Buffs = {
		[PQ_DemonSoulImp]		= {check = true, hasBuff = false, endTime = nil},
		[PQ_DemonSoulFH]		= {check = true, hasBuff = false, endTime = nil},
		[PQ_DemonSoulFG]		= {check = true, hasBuff = false, endTime = nil},
		[PQ_BloodFury]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_Soulburn]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_EmpoweredImp]		= {check = true, hasBuff = false, endTime = nil},
		[PQ_ImpruvedSoulFire]	= {check = true, hasBuff = false, endTime = nil},
		[PQ_Metamorphosis]		= {check = true, hasBuff = false, endTime = nil},
		[PQ_MoltenCore]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_Decimation]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_DCSummon]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_SoulSwapBuff]		= {check = true, hasBuff = false, endTime = nil},
		[PQ_FelArmor]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_Heroism]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_BloodLust]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_TimeWarp]			= {check = true, hasBuff = false, endTime = nil},
		[PQ_Hysteria]			= {check = true, hasBuff = false, endTime = nil}
	}

	-------------------------------------
	-- List of possible player debuffs --
	-------------------------------------
	local PQ_PlayerDebuffList = {
		BreakOnDamage = {
			19503--[[Scatter Shot]],
			1499--[[Freezing Trap]],
			6358--[[Seduction]],
			9484--[[Shackle Undead]],
			6770--[[Sap]],
			118--[[Polymorph]],
			51514--[[Hex]],
			2094--[[Blind]],
			2637--[[Hibernate]],
			76780--[[Bind Elemental]]
		},
		Fear = {
			5782--[[Fear]],
			5484--[[Howl of Terror]],
			8122--[[Psychic Scream]],
			1513--[[Scare Beast]],
			10326--[[Turn Evil]],
			5246--[[Intimidating Shout]]
		},
		Root = {
			339--[[Entangling Roots]],
			122--[[Frost Nova]],
			45524--[[Chains of Ice]],
			16979--[[Feral Charge - Bear]]
		},
		MovementImpairing = {
			5116--[[Concussive Shot]],
			2974--[[Wing Clip]],
			13809--[[Ice Trap]],
			116--[[Frostbolt]],
			120--[[Cone of Cold]],
			11113--[[Blast Wave]],
			31589--[[Slow]],
			15407--[[Mind Flay]],
			3408--[[Crippling Poison]],
			26679--[[Deadly Throw]],
			8056--[[Frost Shock]],
			2484--[[Earthbind Totem]],
			18223--[[Curse of Exhaustion]],
			1715--[[Hamstring]],
			12323--[[Piercing Howl]]
		}
	}

	-------------------------------------
	-- Table of player debuffs by type --
	-------------------------------------
	local PQ_PlayerDebuffs = {
		[&amp;apos;Fear&amp;apos;]				= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.Fear					, spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;Root&amp;apos;]				= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.Root					, spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;BreakOnDamage&amp;apos;]		= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.BreakOnDamage		, spellid = nil, hasDebuff = false, endTime = nil},
		[&amp;apos;MovementImpairing&amp;apos;]	= {check = PQ_HasEveryManSpell, playerdebuffList = PQ_PlayerDebuffList.MovementImpairing	, spellid = nil, hasDebuff = false, endTime = nil}
	}

	-------------------------------
	-- List of debuffs by target --
	-------------------------------
	local PQ_UnitDebuffList = {
		mouseover = {
			[PQ_Corruption]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_UAffliction]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfAgony]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_CurseOfElements]	= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfHavoc]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_Immolate]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfDoom]			= {use = true, hasDebuff = false, endTime = nil}
		},
		target = {
			[PQ_Corruption]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_UAffliction]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfAgony]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_CurseOfElements]	= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfHavoc]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_Immolate]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfDoom]			= {use = true, hasDebuff = false, endTime = nil}
		},
		focus = {
			[PQ_Corruption]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_UAffliction]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfAgony]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_CurseOfElements]	= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfHavoc]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_Immolate]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfDoom]			= {use = true, hasDebuff = false, endTime = nil}
		},
		boss1 = {
			[PQ_Corruption]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_UAffliction]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfAgony]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_CurseOfElements]	= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfHavoc]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_Immolate]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfDoom]			= {use = true, hasDebuff = false, endTime = nil}
		},
		boss2 = {
			[PQ_Corruption]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_UAffliction]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfAgony]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_CurseOfElements]	= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfHavoc]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_Immolate]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfDoom]			= {use = true, hasDebuff = false, endTime = nil}
		},
		boss3 = {
			[PQ_Corruption]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_UAffliction]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfAgony]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_CurseOfElements]	= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfHavoc]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_Immolate]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfDoom]			= {use = true, hasDebuff = false, endTime = nil}
		},
		boss4 = {
			[PQ_Corruption]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_UAffliction]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfAgony]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_CurseOfElements]	= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfHavoc]		= {use = true, hasDebuff = false, endTime = nil},
			[PQ_Immolate]			= {use = true, hasDebuff = false, endTime = nil},
			[PQ_BaneOfDoom]			= {use = true, hasDebuff = false, endTime = nil}
		}
	}

	------------------------
	-- List of immunities --
	------------------------
	local PQ_ImmunityList	= {
		642, --[[Divine Shield]]
		45438, --[[Ice Block]]
		31224, --[[Cloak of Shadows]]
		23920, --[[Spell Reflection]]
		33786, --[[Cyclone]]
		19263, --[[Deterrence]]
		97417, --[[Brittle Barrier]]
		97977, --[[Blessing of Zandalar]]
		105256, --[[Frozen Tempest]]
		109552, --[[Frozen Tempest]]
		109554, --[[Frozen Tempest]]
		109553, --[[Frozen Tempest]]
		109561, --[[Water Shield]]
		109560, --[[Water Shield]]
		109562, --[[Water Shield]]
		105409 --[[Water Shield]]
	}

	----------------------
	-- Table of targets --
	----------------------
	local PQ_Units = {
		[PQ_mouseover]		= {check = true, unitdebufflist = PQ_UnitDebuffList.mouseover	, guid = nil, immunity = false, lastlife = nil, TTDtime = nil, TTD = PQ_DefaultTTD},
		[PQ_target]			= {check = true, unitdebufflist = PQ_UnitDebuffList.target		, guid = nil, immunity = false, lastlife = nil, TTDtime = nil, TTD = PQ_DefaultTTD},
		[PQ_focus]			= {check = true, unitdebufflist = PQ_UnitDebuffList.focus		, guid = nil, immunity = false, lastlife = nil, TTDtime = nil, TTD = PQ_DefaultTTD},
		[PQ_boss1]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss1		, guid = nil, immunity = false, lastlife = nil, TTDtime = nil, TTD = PQ_DefaultTTD},
		[PQ_boss2]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss2		, guid = nil, immunity = false, lastlife = nil, TTDtime = nil, TTD = PQ_DefaultTTD},
		[PQ_boss3]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss3		, guid = nil, immunity = false, lastlife = nil, TTDtime = nil, TTD = PQ_DefaultTTD},
		[PQ_boss4]			= {check = true, unitdebufflist = PQ_UnitDebuffList.boss3		, guid = nil, immunity = false, lastlife = nil, TTDtime = nil, TTD = PQ_DefaultTTD}
	}

	------------------------
	-- List of priorities --
	------------------------
	local PQ_PriorityList = {
		[1] = PQ_mouseover,
		[2] = PQ_focus,
		[3] = PQ_target
	}

	-----------------------
	-- List of rotations --
	-----------------------
	local PQ_RotationList = {
		[1] = &amp;apos;STANDART&amp;apos;,
		[2] = &amp;apos;MORCHOK&amp;apos;,
		[3] = &amp;apos;WARLORD&amp;apos;,
		[4] = &amp;apos;YORSAHJ&amp;apos;,
		[5] = &amp;apos;HAGARA&amp;apos;,
		[6] = &amp;apos;ULTRAXION&amp;apos;,
		[7] = &amp;apos;WARMASTER&amp;apos;,
		[8] = &amp;apos;SPINE&amp;apos;,
		[9] = &amp;apos;MADNESS&amp;apos;
	}

	-------------------
	-- List of specs --
	-------------------
	local PQ_SpecList = {
		[1] = &amp;apos;AFFLICTION&amp;apos;,
		[2] = &amp;apos;DEMONOLOGY&amp;apos;,
		[3] = &amp;apos;DESTRUCTION&amp;apos;
	}

--[[	--------------------
	-- List of bosses --
	--------------------
	PQ_BossList = {}]]

	-----------------------
	-- List of burnunits --
	-----------------------
	local PQ_BurnUnitsList = {
		[56575] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Burning Tendons]]
		[56341] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Burning Tendons]]
		[56262] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Elementium Bolt]]
		[56923] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Twilight Sapper]]
		[56188] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Blistering Tentacle]]
		[55862] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Acidic Globule]]
		[55863] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Shadowed Globule]]
		[55864] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Glowing Globule]]
		[55865] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Crimson Globule]]
		[55866] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false}, --[[Cobalt Globule]]
		[55867] = {corruption = false, uaffliction = false, baneofagony = false, baneofdoom = false, curseofelements = false, immolate = false} --[[Dark Globule]]
	}

	------------------------------
	-- List of skills by target --
	------------------------------
	local PQ_UnitSkillList = {
		first = {
			[PQ_CurseOfElements]	= {check = false},
			[PQ_BaneOfHavoc]		= {check = false},
			[PQ_BaneOfDoom]			= {check = false},
			[PQ_BaneOfAgony]		= {check = false},
			[PQ_Immolate]			= {check = false},
			[PQ_Corruption]			= {check = false},
			[PQ_SoulFire]			= {check = false},
			[PQ_Conflagate]			= {check = false},
			[PQ_Shadowflame]		= {check = false},
			[PQ_ChaosBolt]			= {check = false},
			[PQ_Shadowburn]			= {check = false},
			[PQ_Incinerate]			= {check = false},
			[PQ_FelFlame]			= {check = false},
			[PQ_Doomguard]			= {check = false},
			[PQ_BloodFury]			= {check = false},
			[PQ_DemonSoul]			= {check = false},
			[PQ_Soulburn]			= {check = false},
			[PQ_HandOfGuldan]		= {check = false},
			[PQ_Metamorphosis]		= {check = false},
			[PQ_ImmolationAura]		= {check = false},
			[PQ_Haunt]				= {check = false},
			[PQ_UAffliction]		= {check = false},
			[PQ_DrainSoul]			= {check = false},
			[PQ_ShadowBolt]			= {check = false},
			[PQ_SeedOfCorruption]	= {check = false},
			[PQ_SoulSwap]			= {check = false},
			[PQ_SoulSwapExhale]		= {check = false},
			[PQ_Fear]				= {check = false}
		},
		second = {
			[PQ_CurseOfElements]	= {check = false},
			[PQ_BaneOfHavoc]		= {check = false},
			[PQ_BaneOfDoom]			= {check = false},
			[PQ_BaneOfAgony]		= {check = false},
			[PQ_Immolate]			= {check = false},
			[PQ_Corruption]			= {check = false},
			[PQ_SoulFire]			= {check = false},
			[PQ_Conflagate]			= {check = false},
			[PQ_Shadowflame]		= {check = false},
			[PQ_ChaosBolt]			= {check = false},
			[PQ_Shadowburn]			= {check = false},
			[PQ_Incinerate]			= {check = false},
			[PQ_FelFlame]			= {check = false},
			[PQ_Doomguard]			= {check = false},
			[PQ_BloodFury]			= {check = false},
			[PQ_DemonSoul]			= {check = false},
			[PQ_Soulburn]			= {check = false},
			[PQ_HandOfGuldan]		= {check = false},
			[PQ_Metamorphosis]		= {check = false},
			[PQ_ImmolationAura]		= {check = false},
			[PQ_Haunt]				= {check = false},
			[PQ_UAffliction]		= {check = false},
			[PQ_DrainSoul]			= {check = false},
			[PQ_ShadowBolt]			= {check = false},
			[PQ_SeedOfCorruption]	= {check = false},
			[PQ_SoulSwap]			= {check = false},
			[PQ_SoulSwapExhale]		= {check = false},
			[PQ_Fear]				= {check = false}
		},
		third = {
			[PQ_CurseOfElements]	= {check = false},
			[PQ_BaneOfHavoc]		= {check = false},
			[PQ_BaneOfDoom]			= {check = false},
			[PQ_BaneOfAgony]		= {check = false},
			[PQ_Immolate]			= {check = false},
			[PQ_Corruption]			= {check = false},
			[PQ_SoulFire]			= {check = false},
			[PQ_Conflagate]			= {check = false},
			[PQ_Shadowflame]		= {check = false},
			[PQ_ChaosBolt]			= {check = false},
			[PQ_Shadowburn]			= {check = false},
			[PQ_Incinerate]			= {check = false},
			[PQ_FelFlame]			= {check = false},
			[PQ_Doomguard]			= {check = false},
			[PQ_BloodFury]			= {check = false},
			[PQ_DemonSoul]			= {check = false},
			[PQ_Soulburn]			= {check = false},
			[PQ_HandOfGuldan]		= {check = false},
			[PQ_Metamorphosis]		= {check = false},
			[PQ_ImmolationAura]		= {check = false},
			[PQ_Haunt]				= {check = false},
			[PQ_UAffliction]		= {check = false},
			[PQ_DrainSoul]			= {check = false},
			[PQ_ShadowBolt]			= {check = false},
			[PQ_SeedOfCorruption]	= {check = false},
			[PQ_SoulSwap]			= {check = false},
			[PQ_SoulSwapExhale]		= {check = false},
			[PQ_Fear]				= {check = false}
		},
		forth = {
			[PQ_CurseOfElements]	= {check = false},
			[PQ_BaneOfHavoc]		= {check = false},
			[PQ_BaneOfDoom]			= {check = false},
			[PQ_BaneOfAgony]		= {check = false},
			[PQ_Immolate]			= {check = false},
			[PQ_Corruption]			= {check = false},
			[PQ_SoulFire]			= {check = false},
			[PQ_Conflagate]			= {check = false},
			[PQ_Shadowflame]		= {check = false},
			[PQ_ChaosBolt]			= {check = false},
			[PQ_Shadowburn]			= {check = false},
			[PQ_Incinerate]			= {check = false},
			[PQ_FelFlame]			= {check = false},
			[PQ_Doomguard]			= {check = false},
			[PQ_BloodFury]			= {check = false},
			[PQ_DemonSoul]			= {check = false},
			[PQ_Soulburn]			= {check = false},
			[PQ_HandOfGuldan]		= {check = false},
			[PQ_Metamorphosis]		= {check = false},
			[PQ_ImmolationAura]		= {check = false},
			[PQ_Haunt]				= {check = false},
			[PQ_UAffliction]		= {check = false},
			[PQ_DrainSoul]			= {check = false},
			[PQ_ShadowBolt]			= {check = false},
			[PQ_SeedOfCorruption]	= {check = false},
			[PQ_SoulSwap]			= {check = false},
			[PQ_SoulSwapExhale]		= {check = false},
			[PQ_Fear]				= {check = false}
		},
		fifth = {
			[PQ_CurseOfElements]	= {check = false},
			[PQ_BaneOfHavoc]		= {check = false},
			[PQ_BaneOfDoom]			= {check = false},
			[PQ_BaneOfAgony]		= {check = false},
			[PQ_Immolate]			= {check = false},
			[PQ_Corruption]			= {check = false},
			[PQ_SoulFire]			= {check = false},
			[PQ_Conflagate]			= {check = false},
			[PQ_Shadowflame]		= {check = false},
			[PQ_ChaosBolt]			= {check = false},
			[PQ_Shadowburn]			= {check = false},
			[PQ_Incinerate]			= {check = false},
			[PQ_FelFlame]			= {check = false},
			[PQ_Doomguard]			= {check = false},
			[PQ_BloodFury]			= {check = false},
			[PQ_DemonSoul]			= {check = false},
			[PQ_Soulburn]			= {check = false},
			[PQ_HandOfGuldan]		= {check = false},
			[PQ_Metamorphosis]		= {check = false},
			[PQ_ImmolationAura]		= {check = false},
			[PQ_Haunt]				= {check = false},
			[PQ_UAffliction]		= {check = false},
			[PQ_DrainSoul]			= {check = false},
			[PQ_ShadowBolt]			= {check = false},
			[PQ_SeedOfCorruption]	= {check = false},
			[PQ_SoulSwap]			= {check = false},
			[PQ_SoulSwapExhale]		= {check = false},
			[PQ_Fear]				= {check = false}
		},
		six = {
			[PQ_CurseOfElements]	= {check = false},
			[PQ_BaneOfHavoc]		= {check = false},
			[PQ_BaneOfDoom]			= {check = false},
			[PQ_BaneOfAgony]		= {check = false},
			[PQ_Immolate]			= {check = false},
			[PQ_Corruption]			= {check = false},
			[PQ_SoulFire]			= {check = false},
			[PQ_Conflagate]			= {check = false},
			[PQ_Shadowflame]		= {check = false},
			[PQ_ChaosBolt]			= {check = false},
			[PQ_Shadowburn]			= {check = false},
			[PQ_Incinerate]			= {check = false},
			[PQ_FelFlame]			= {check = false},
			[PQ_Doomguard]			= {check = false},
			[PQ_BloodFury]			= {check = false},
			[PQ_DemonSoul]			= {check = false},
			[PQ_Soulburn]			= {check = false},
			[PQ_HandOfGuldan]		= {check = false},
			[PQ_Metamorphosis]		= {check = false},
			[PQ_ImmolationAura]		= {check = false},
			[PQ_Haunt]				= {check = false},
			[PQ_UAffliction]		= {check = false},
			[PQ_DrainSoul]			= {check = false},
			[PQ_ShadowBolt]			= {check = false},
			[PQ_SeedOfCorruption]	= {check = false},
			[PQ_SoulSwap]			= {check = false},
			[PQ_SoulSwapExhale]		= {check = false},
			[PQ_Fear]				= {check = false}
		}
	}

	---------------------
	-- Table of skills --
	---------------------
	local PQ_Skills = {
		[PQ_CurseOfElements]	= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_CurseOfElements))	, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_CurseOfElements)},
		[PQ_BaneOfHavoc]		= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_BaneOfHavoc))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_BaneOfHavoc)},
		[PQ_BaneOfDoom]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_BaneOfDoom))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_BaneOfDoom)},
		[PQ_BaneOfAgony]		= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_BaneOfAgony))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_BaneOfAgony)},
		[PQ_Immolate]			= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_Immolate))		, delay = 2, nexttest = 0, isknown = IsSpellKnown(PQ_Immolate)},
		[PQ_Corruption]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_Corruption))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Corruption)},
		[PQ_SoulFire]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_SoulFire))		, delay = 3, nexttest = 0, isknown = IsSpellKnown(PQ_SoulFire)},
		[PQ_Conflagate]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_Conflagate))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Conflagate)},
		[PQ_Shadowflame]		= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_Shadowflame))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Shadowflame)},
		[PQ_ChaosBolt]			= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_ChaosBolt))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_ChaosBolt)},
		[PQ_Shadowburn]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_Shadowburn))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Shadowburn)},
		[PQ_Incinerate]			= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_Incinerate))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Incinerate)},
		[PQ_FelFlame]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_FelFlame))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_FelFlame)},
		[PQ_LifeTap]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_LifeTap))			, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_LifeTap)},
		[PQ_Fear]				= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_Fear))			, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Fear)},
		[PQ_Doomguard]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_Doomguard))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Doomguard)},
		[PQ_DemonSoul]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_DemonSoul))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_DemonSoul)},
		[PQ_BloodFury]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_BloodFury))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_BloodFury)},
		[PQ_Haunt]				= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_Haunt))			, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Haunt)},
		[PQ_UAffliction]		= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_UAffliction))		, delay = 2, nexttest = 0, isknown = IsSpellKnown(PQ_UAffliction)},
		[PQ_DrainSoul]			= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_DrainSoul))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_DrainSoul)},
		[PQ_ShadowBolt]			= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_ShadowBolt))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_ShadowBolt)},
		[PQ_SeedOfCorruption]	= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_SeedOfCorruption)), delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_SeedOfCorruption)},
		[PQ_SoulSwap]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_SoulSwap))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_SoulSwap)},
		[PQ_SoulSwapExhale]		= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_SoulSwapExhale))	, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_SoulSwap)},
		[PQ_HandOfGuldan]		= {castonmove = false	, casttime = select(7,GetSpellInfo(PQ_HandOfGuldan))	, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_HandOfGuldan)},
		[PQ_Metamorphosis]		= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_Metamorphosis))	, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Metamorphosis)},
		[PQ_ImmolationAura]		= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_ImmolationAura))	, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_ImmolationAura)},
		[PQ_FelGuardCast]		= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_FelGuardCast))	, delay = 2, nexttest = 0, isknown = IsSpellKnown(PQ_FelGuardCast)},
		[PQ_FelHunterCast]		= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_FelHunterCast))	, delay = 2, nexttest = 0, isknown = IsSpellKnown(PQ_FelHunterCast)},
		[PQ_Soulburn]			= {castonmove = true	, casttime = select(7,GetSpellInfo(PQ_Soulburn))		, delay = 0, nexttest = 0, isknown = IsSpellKnown(PQ_Soulburn)}
	}

---------------
-- FUNCTIONS --
---------------
	function PQ_G_CalculateTTD()
		for target, targetinfo in pairs(PQ_Units) do
			if UnitExists(target) and targetinfo.TTDtime and GetTime() &amp;gt; targetinfo.TTDtime+1 then
				targetinfo.TTDtime = GetTime()
				if not targetinfo.lastlife then
					targetinfo.lastlife = UnitHealth(target)
				else
					targetinfo.TTD = UnitHealth(target) / (targetinfo.lastlife - UnitHealth(target))
				end
			end
		end
	end

	local function PQ_CheckForAllBuffs()
		for k, _ in pairs(PQ_Buffs) do
			if PQ_Buffs[k].check == true and UnitBuffID(PQ_player, k) then
				PQ_Buffs[k].hasBuff = true
				PQ_Buffs[k].endTime = (select(7, UnitBuffID(PQ_player, k)))
				if PQ_Debug and PQ_DebugUnits then
					pq_printtodebug(&amp;apos;\124cFFDBFA2APlayer has buff &amp;apos; .. GetSpellLink(k))
				end
			end
		end
	end

	local function PQ_PlayerBuffHandler(spellID, hasBuffNow)
		if PQ_Buffs[spellID] and PQ_Buffs[spellID].check == true then
			PQ_Buffs[spellID].hasBuff = hasBuffNow   
			if hasBuffNow == true then
				PQ_Buffs[spellID].endTime = (select(7, UnitBuffID(PQ_player, spellID)))
				if PQ_Debug and PQ_DebugUnits then
					pq_printtodebug(&amp;apos;\124cFFDBFA2AGained buff \124cFFFA652A&amp;apos; .. GetSpellLink(spellID))
				end
				return
			end
			if PQ_Debug and PQ_DebugUnits then
				pq_printtodebug(&amp;apos;\124cFFFA652ALost buff &amp;apos; .. GetSpellLink(spellID))
			end
		end   
	end

	local function PQ_PlayerDebuffHandler(spellID, hasDebuffNow)
		for debufftype, debuffInfo in pairs(PQ_PlayerDebuffs) do  
			if (debuffInfo.check) then
				for k, debuff in pairs(debuffInfo.playerdebuffList) do
					if (debuff == spellID) then
						PQ_PlayerDebuffs[debufftype].hasDebuff = hasDebuffNow
						if (hasDebuffNow) then --Has debuff spellID of type
							PQ_PlayerDebuffs[debufftype].spellid = spellID
							PQ_PlayerDebuffs[debufftype].endTime = select(7, UnitDebuffID(PQ_player, spellID))
							if PQ_Debug and PQ_DebugUnits then
								pq_printtodebug(&amp;apos;\124cFFDBFA2AGained debuff &amp;apos; .. GetSpellLink(spellID) .. &amp;apos;\124cFFDBFA2A of type: \124cFFFA652A&amp;apos; .. debufftype)
							end
						else
							PQ_PlayerDebuffs[debufftype].spellid = nil
							PQ_PlayerDebuffs[debufftype].endTime = nil
							if PQ_Debug and PQ_DebugUnits then
								pq_printtodebug(&amp;apos;\124cFFFA652ALost debuff &amp;apos; .. GetSpellLink(spellID) .. &amp;apos;\124cFFFA652A of type: \124cFFDBFA2A&amp;apos; .. debufftype)
							end
						end
						return
					end
				end            
			end            
		end    
	end

	local function PQ_UnitDebuffHandler(spellID, hasDebuffNow, handlerGUID)
		for target, targetinfo in pairs(PQ_Units) do
			if (targetinfo.check) and (targetinfo.guid == handlerGUID) then
				for debuff, debuffinfo in pairs(targetinfo.unitdebufflist) do
					if (debuff == spellID) then
						debuffinfo.hasDebuff = hasDebuffNow
						if hasDebuffNow then
							debuffinfo.endTime = select(7, UnitDebuffID(target, spellID, PQ_player))
							if PQ_Debug and PQ_DebugUnits then
								pq_printtodebug(&amp;apos;\124cFFDBFA2AUnit (&amp;apos; .. target .. &amp;apos;,&amp;apos; .. handlerGUID .. &amp;apos;) \124cFFDBFA2Agained debuff &amp;apos; .. GetSpellLink(spellID))
							end
						else
							debuffinfo.endTime = nil
							if PQ_Debug and PQ_DebugUnits then
								pq_printtodebug(&amp;apos;\124cFFDBFA2AUnit (&amp;apos; .. target .. &amp;apos;,&amp;apos; .. handlerGUID .. &amp;apos;) \124cFFDBFA2Alost debuff &amp;apos; .. GetSpellLink(spellID))
							end
						end
					end
				end	
			end
		end
	end

	local function PQ_UnitBuffHandler(spellID, hasBuffNow, handlerGUID)
		for target, targetinfo in pairs(PQ_Units) do
			if (targetinfo.check) and (targetinfo.guid == handlerGUID) then
				for i, buff in pairs(PQ_ImmunityList) do
					if (buff == spellID) then
						targetinfo.immunity = hasBuffNow
						if hasBuffNow then
							if PQ_Debug and PQ_DebugUnits then
								pq_printtodebug(&amp;apos;\124cFFDBFA2AUnit (&amp;apos; .. target .. &amp;apos;,&amp;apos; .. handlerGUID .. &amp;apos;) \124cFFDBFA2Agained immunity buff &amp;apos; .. GetSpellLink(spellID))
							end
						else
							if PQ_Debug and PQ_DebugUnits then
								pq_printtodebug(&amp;apos;\124cFFDBFA2AUnit (&amp;apos; .. target .. &amp;apos;,&amp;apos; .. handlerGUID .. &amp;apos;) \124cFFDBFA2Alost immunity buff &amp;apos; .. GetSpellLink(spellID))
							end
						end
					end
				end	
			end
		end
	end

	local function PQ_UnitCheckDebuffs(unit)
		PQ_Units[unit].guid = UnitGUID(unit)
		if PQ_Units[unit].check then
			for debuff, debuffinfo in pairs(PQ_Units[unit].unitdebufflist) do
				if UnitDebuffID(unit, debuff, PQ_player) then
					debuffinfo.hasDebuff = true
					debuffinfo.endTime = (select(7, UnitDebuffID(unit, debuff, PQ_player)))
					if PQ_Debug and PQ_DebugUnits then
						pq_printtodebug(unit .. &amp;apos;\124cFFDBFA2A has debuff &amp;apos; .. GetSpellLink(debuff))
					end
				else
					debuffinfo.hasDebuff = false
					debuffinfo.endTime = nil
					if PQ_Debug and PQ_DebugUnits then
						pq_printtodebug(unit .. &amp;apos;\124cFFDBFA2A doesnt has debuff &amp;apos; .. GetSpellLink(debuff))
					end
				end
			end
		end	
	end

	local function PQ_UnitCheckBuffs(unit)
		PQ_Units[unit].guid = UnitGUID(unit)
		if PQ_Units[unit].check then
			PQ_Units[unit].immunity = false
			for i = 1, #PQ_ImmunityList do
				local buff = PQ_ImmunityList[i]
				if UnitBuffID(unit, buff) then
					PQ_Units[unit].immunity = true
					if PQ_Debug and PQ_DebugUnits then
						pq_printtodebug(unit .. &amp;apos;\124cFFDBFA2A has immunity buff &amp;apos; .. GetSpellLink(buff))
					end
				else
					if PQ_Debug and PQ_DebugUnits then
						pq_printtodebug(unit .. &amp;apos;\124cFFDBFA2A doesnt has immunity buff &amp;apos; .. GetSpellLink(buff))
					end
				end
			end
		end	
	end

	local function PQ_GetTimeLeftPlayerBuff(buff)
		return PQ_Buffs[buff].endTime - GetTime()
	end

	local function PQ_GetTimeLeftPlayerDebuff(debuff)
		return select(7,UnitDebuffID(PQ_player,debuff)) - GetTime()
	end

	local function PQ_GetTimeLeftUnitDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].endTime - GetTime()
	end

	local function PQ_IsUseUnitSkill(unit, skill)
		if PQ_Skills[skill].isknown then
			if unit == PQ_PriorityList[1] then
				return PQ_UnitSkillList.first[skill].check
			elseif unit == PQ_PriorityList[2] then
				return PQ_UnitSkillList.second[skill].check
			elseif unit == PQ_PriorityList[3] then
				return PQ_UnitSkillList.third[skill].check
			elseif unit == PQ_PriorityList[4] then
				return PQ_UnitSkillList.forth[skill].check
			elseif unit == PQ_PriorityList[5] then
				return PQ_UnitSkillList.fifth[skill].check
			elseif unit == PQ_PriorityList[6] then
				return PQ_UnitSkillList.six[skill].check
			end
		else
			return false
		end
	end

	local function PQ_IsUseUnitDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].use
	end

	local function PQ_IsUnitHasDebuff(unit, debuff)
		return PQ_Units[unit].unitdebufflist[debuff].hasDebuff
	end

	local function PQ_SpellCheck(spell, target)
		local Cast = true;
		local SpellName = GetSpellInfo(spell)
		if
			UnitExists(target) == nil or
			UnitIsDeadOrGhost(target) or
			IsSpellInRange(SpellName, target) == 0 or
			(UnitChannelInfo(PQ_player) ~= nil and not PQ_CancelChannel) or
			PQR_IsOutOfSight(target) or
			(not PQ_Skills[spell].castonmove and PQR_IsMoving(0.1))
		then
			Cast = false
		end
		return Cast
	end

	local function PQ_GetPlayerHP()
		hp,hpmax = UnitHealth(PQ_player),UnitHealthMax(PQ_player)
		if hp and hpmax then
			return hp / hpmax * 100
		else
			return 0
		end
	end

	local function PQ_GetPlayerUP()
		up,upmax = UnitPower(PQ_player),UnitPowerMax(PQ_player)
		if up and upmax then
			return up / upmax * 100
		else
			return 0
		end
	end

	local function PQ_GetSpellCooldown(spell)
		if GetSpellCooldown(spell) ~= 0 then
			return select(1, GetSpellCooldown(spell)) + select(2, GetSpellCooldown(spell)) - GetTime() - (select(3,GetNetStats()) + select(4,GetNetStats())) / 1000
		else
			return 0
		end	
	end

	local function PQ_GetTargetHP(target)
		hp,hpmax = UnitHealth(target),UnitHealthMax(target)
		if hp and hpmax then
			return hp / hpmax * 100
		else
			return 0
		end
	end

	local function PQ_RotationSwitch(rotationmode)
		PQ_RotationMode = rotationmode
		local spec = PQ_G_Spec
		if rotationmode == PQ_RotationList[1] then
			PQ_PriorityList[1] = PQ_mouseover
			PQ_PriorityList[2] = PQ_focus
			PQ_PriorityList[3] = PQ_target
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil

			if spec == 1 then
				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= false
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= false
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.first[PQ_Haunt].check				= false
				PQ_UnitSkillList.first[PQ_UAffliction].check		= true
				PQ_UnitSkillList.first[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.first[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.first[PQ_SeedOfCorruption].check	= true
				PQ_UnitSkillList.first[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.first[PQ_SoulSwapExhale].check		= true
				PQ_UnitSkillList.first[PQ_Fear].check				= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= false
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= false
				PQ_UnitSkillList.second[PQ_Conflagate].check		= false
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
				PQ_UnitSkillList.second[PQ_Incinerate].check		= false
				PQ_UnitSkillList.second[PQ_FelFlame].check			= false
				PQ_UnitSkillList.second[PQ_Doomguard].check			= false
				PQ_UnitSkillList.second[PQ_BloodFury].check			= false
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.second[PQ_Soulburn].check			= false
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= false
				PQ_UnitSkillList.second[PQ_Haunt].check				= false
				PQ_UnitSkillList.second[PQ_UAffliction].check		= true
				PQ_UnitSkillList.second[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.second[PQ_ShadowBolt].check		= false
				PQ_UnitSkillList.second[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.second[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.second[PQ_SoulSwapExhale].check	= true
				PQ_UnitSkillList.second[PQ_Fear].check				= false

				PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.third[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.third[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.third[PQ_Immolate].check			= false
				PQ_UnitSkillList.third[PQ_Corruption].check			= true
				PQ_UnitSkillList.third[PQ_SoulFire].check			= true
				PQ_UnitSkillList.third[PQ_Conflagate].check			= false
				PQ_UnitSkillList.third[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.third[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.third[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.third[PQ_Incinerate].check			= false
				PQ_UnitSkillList.third[PQ_FelFlame].check			= true
				PQ_UnitSkillList.third[PQ_Doomguard].check			= false
				PQ_UnitSkillList.third[PQ_BloodFury].check			= false
				PQ_UnitSkillList.third[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.third[PQ_Soulburn].check			= true
				PQ_UnitSkillList.third[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.third[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.third[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.third[PQ_Haunt].check				= true
				PQ_UnitSkillList.third[PQ_UAffliction].check		= true
				PQ_UnitSkillList.third[PQ_DrainSoul].check			= true
				PQ_UnitSkillList.third[PQ_ShadowBolt].check			= true
				PQ_UnitSkillList.third[PQ_SeedOfCorruption].check	= true
				PQ_UnitSkillList.third[PQ_SoulSwap].check			= true
				PQ_UnitSkillList.third[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.third[PQ_Fear].check				= false

				PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.forth[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.forth[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.forth[PQ_Immolate].check			= false
				PQ_UnitSkillList.forth[PQ_Corruption].check			= false
				PQ_UnitSkillList.forth[PQ_SoulFire].check			= false
				PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
				PQ_UnitSkillList.forth[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
				PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
				PQ_UnitSkillList.forth[PQ_Doomguard].check			= false
				PQ_UnitSkillList.forth[PQ_BloodFury].check			= false
				PQ_UnitSkillList.forth[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.forth[PQ_Soulburn].check			= false
				PQ_UnitSkillList.forth[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.forth[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.forth[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.forth[PQ_Haunt].check				= false
				PQ_UnitSkillList.forth[PQ_UAffliction].check		= false
				PQ_UnitSkillList.forth[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.forth[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.forth[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.forth[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.forth[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.forth[PQ_Fear].check				= false

				PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.fifth[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.fifth[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
				PQ_UnitSkillList.fifth[PQ_Corruption].check			= false
				PQ_UnitSkillList.fifth[PQ_SoulFire].check			= false
				PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
				PQ_UnitSkillList.fifth[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
				PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
				PQ_UnitSkillList.fifth[PQ_Doomguard].check			= false
				PQ_UnitSkillList.fifth[PQ_BloodFury].check			= false
				PQ_UnitSkillList.fifth[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.fifth[PQ_Soulburn].check			= false
				PQ_UnitSkillList.fifth[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.fifth[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.fifth[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.fifth[PQ_Haunt].check				= false
				PQ_UnitSkillList.fifth[PQ_UAffliction].check		= false
				PQ_UnitSkillList.fifth[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.fifth[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.fifth[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.fifth[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.fifth[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.fifth[PQ_Fear].check				= false

				PQ_UnitSkillList.six[PQ_CurseOfElements].check		= false
				PQ_UnitSkillList.six[PQ_BaneOfHavoc].check			= false
				PQ_UnitSkillList.six[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.six[PQ_BaneOfAgony].check			= false
				PQ_UnitSkillList.six[PQ_Immolate].check				= false
				PQ_UnitSkillList.six[PQ_Corruption].check			= false
				PQ_UnitSkillList.six[PQ_SoulFire].check				= false
				PQ_UnitSkillList.six[PQ_Conflagate].check			= false
				PQ_UnitSkillList.six[PQ_Shadowflame].check			= false
				PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.six[PQ_Incinerate].check			= false
				PQ_UnitSkillList.six[PQ_FelFlame].check				= false
				PQ_UnitSkillList.six[PQ_Doomguard].check			= false
				PQ_UnitSkillList.six[PQ_BloodFury].check			= false
				PQ_UnitSkillList.six[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.six[PQ_Soulburn].check				= false
				PQ_UnitSkillList.six[PQ_HandOfGuldan].check			= false
				PQ_UnitSkillList.six[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.six[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.six[PQ_Haunt].check				= false
				PQ_UnitSkillList.six[PQ_UAffliction].check			= false
				PQ_UnitSkillList.six[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.six[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.six[PQ_SeedOfCorruption].check		= false
				PQ_UnitSkillList.six[PQ_SoulSwap].check				= false
				PQ_UnitSkillList.six[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.six[PQ_Fear].check					= false
			elseif spec == 2 then
				PQ_Skills[PQ_SoulFire].delay = -0.5

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.first[PQ_Haunt].check				= false
				PQ_UnitSkillList.first[PQ_UAffliction].check		= false
				PQ_UnitSkillList.first[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.first[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.first[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.first[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.first[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.first[PQ_Fear].check				= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= false
				PQ_UnitSkillList.second[PQ_Conflagate].check		= false
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
				PQ_UnitSkillList.second[PQ_Incinerate].check		= false
				PQ_UnitSkillList.second[PQ_FelFlame].check			= false
				PQ_UnitSkillList.second[PQ_Doomguard].check			= false
				PQ_UnitSkillList.second[PQ_BloodFury].check			= false
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.second[PQ_Soulburn].check			= false
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= false
				PQ_UnitSkillList.second[PQ_Haunt].check				= false
				PQ_UnitSkillList.second[PQ_UAffliction].check		= false
				PQ_UnitSkillList.second[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.second[PQ_ShadowBolt].check		= false
				PQ_UnitSkillList.second[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.second[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.second[PQ_SoulSwapExhale].check	= false
				PQ_UnitSkillList.second[PQ_Fear].check				= false

				PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.third[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.third[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.third[PQ_Immolate].check			= true
				PQ_UnitSkillList.third[PQ_Corruption].check			= true
				PQ_UnitSkillList.third[PQ_SoulFire].check			= true
				PQ_UnitSkillList.third[PQ_Conflagate].check			= false
				PQ_UnitSkillList.third[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.third[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.third[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.third[PQ_Incinerate].check			= true
				PQ_UnitSkillList.third[PQ_FelFlame].check			= true
				PQ_UnitSkillList.third[PQ_Doomguard].check			= true
				PQ_UnitSkillList.third[PQ_BloodFury].check			= true
				PQ_UnitSkillList.third[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.third[PQ_Soulburn].check			= true
				PQ_UnitSkillList.third[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.third[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.third[PQ_ImmolationAura].check		= true
				PQ_UnitSkillList.third[PQ_Haunt].check				= false
				PQ_UnitSkillList.third[PQ_UAffliction].check		= false
				PQ_UnitSkillList.third[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.third[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.third[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.third[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.third[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.third[PQ_Fear].check				= false

				PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.forth[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.forth[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.forth[PQ_Immolate].check			= false
				PQ_UnitSkillList.forth[PQ_Corruption].check			= false
				PQ_UnitSkillList.forth[PQ_SoulFire].check			= false
				PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
				PQ_UnitSkillList.forth[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
				PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
				PQ_UnitSkillList.forth[PQ_Doomguard].check			= false
				PQ_UnitSkillList.forth[PQ_BloodFury].check			= false
				PQ_UnitSkillList.forth[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.forth[PQ_Soulburn].check			= false
				PQ_UnitSkillList.forth[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.forth[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.forth[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.forth[PQ_Haunt].check				= false
				PQ_UnitSkillList.forth[PQ_UAffliction].check		= false
				PQ_UnitSkillList.forth[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.forth[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.forth[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.forth[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.forth[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.forth[PQ_Fear].check				= false

				PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.fifth[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.fifth[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
				PQ_UnitSkillList.fifth[PQ_Corruption].check			= false
				PQ_UnitSkillList.fifth[PQ_SoulFire].check			= false
				PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
				PQ_UnitSkillList.fifth[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
				PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
				PQ_UnitSkillList.fifth[PQ_Doomguard].check			= false
				PQ_UnitSkillList.fifth[PQ_BloodFury].check			= false
				PQ_UnitSkillList.fifth[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.fifth[PQ_Soulburn].check			= false
				PQ_UnitSkillList.fifth[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.fifth[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.fifth[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.fifth[PQ_Haunt].check				= false
				PQ_UnitSkillList.fifth[PQ_UAffliction].check		= false
				PQ_UnitSkillList.fifth[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.fifth[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.fifth[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.fifth[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.fifth[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.fifth[PQ_Fear].check				= false

				PQ_UnitSkillList.six[PQ_CurseOfElements].check		= false
				PQ_UnitSkillList.six[PQ_BaneOfHavoc].check			= false
				PQ_UnitSkillList.six[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.six[PQ_BaneOfAgony].check			= false
				PQ_UnitSkillList.six[PQ_Immolate].check				= false
				PQ_UnitSkillList.six[PQ_Corruption].check			= false
				PQ_UnitSkillList.six[PQ_SoulFire].check				= false
				PQ_UnitSkillList.six[PQ_Conflagate].check			= false
				PQ_UnitSkillList.six[PQ_Shadowflame].check			= false
				PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.six[PQ_Incinerate].check			= false
				PQ_UnitSkillList.six[PQ_FelFlame].check				= false
				PQ_UnitSkillList.six[PQ_Doomguard].check			= false
				PQ_UnitSkillList.six[PQ_BloodFury].check			= false
				PQ_UnitSkillList.six[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.six[PQ_Soulburn].check				= false
				PQ_UnitSkillList.six[PQ_HandOfGuldan].check			= false
				PQ_UnitSkillList.six[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.six[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.six[PQ_Haunt].check				= false
				PQ_UnitSkillList.six[PQ_UAffliction].check			= false
				PQ_UnitSkillList.six[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.six[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.six[PQ_SeedOfCorruption].check		= false
				PQ_UnitSkillList.six[PQ_SoulSwap].check				= false
				PQ_UnitSkillList.six[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.six[PQ_Fear].check					= false
			elseif spec == 3 then
				PQ_Skills[PQ_SoulFire].delay = 3

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.first[PQ_Haunt].check				= false
				PQ_UnitSkillList.first[PQ_UAffliction].check		= false
				PQ_UnitSkillList.first[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.first[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.first[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.first[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.first[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.first[PQ_Fear].check				= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.second[PQ_Immolate].check			= false
				PQ_UnitSkillList.second[PQ_Corruption].check		= false
				PQ_UnitSkillList.second[PQ_SoulFire].check			= false
				PQ_UnitSkillList.second[PQ_Conflagate].check		= false
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
				PQ_UnitSkillList.second[PQ_Incinerate].check		= false
				PQ_UnitSkillList.second[PQ_FelFlame].check			= false
				PQ_UnitSkillList.second[PQ_Doomguard].check			= false
				PQ_UnitSkillList.second[PQ_BloodFury].check			= false
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.second[PQ_Soulburn].check			= false
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= false
				PQ_UnitSkillList.second[PQ_Haunt].check				= false
				PQ_UnitSkillList.second[PQ_UAffliction].check		= false
				PQ_UnitSkillList.second[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.second[PQ_ShadowBolt].check		= false
				PQ_UnitSkillList.second[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.second[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.second[PQ_SoulSwapExhale].check	= false
				PQ_UnitSkillList.second[PQ_Fear].check				= false

				PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.third[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.third[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.third[PQ_Immolate].check			= true
				PQ_UnitSkillList.third[PQ_Corruption].check			= true
				PQ_UnitSkillList.third[PQ_SoulFire].check			= true
				PQ_UnitSkillList.third[PQ_Conflagate].check			= true
				PQ_UnitSkillList.third[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.third[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.third[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.third[PQ_Incinerate].check			= true
				PQ_UnitSkillList.third[PQ_FelFlame].check			= true
				PQ_UnitSkillList.third[PQ_Doomguard].check			= false
				PQ_UnitSkillList.third[PQ_BloodFury].check			= false
				PQ_UnitSkillList.third[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.third[PQ_Soulburn].check			= true
				PQ_UnitSkillList.third[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.third[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.third[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.third[PQ_Haunt].check				= false
				PQ_UnitSkillList.third[PQ_UAffliction].check		= false
				PQ_UnitSkillList.third[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.third[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.third[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.third[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.third[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.third[PQ_Fear].check				= false

				PQ_UnitSkillList.forth[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.forth[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.forth[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.forth[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.forth[PQ_Immolate].check			= false
				PQ_UnitSkillList.forth[PQ_Corruption].check			= false
				PQ_UnitSkillList.forth[PQ_SoulFire].check			= false
				PQ_UnitSkillList.forth[PQ_Conflagate].check			= false
				PQ_UnitSkillList.forth[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.forth[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.forth[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.forth[PQ_Incinerate].check			= false
				PQ_UnitSkillList.forth[PQ_FelFlame].check			= false
				PQ_UnitSkillList.forth[PQ_Doomguard].check			= false
				PQ_UnitSkillList.forth[PQ_BloodFury].check			= false
				PQ_UnitSkillList.forth[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.forth[PQ_Soulburn].check			= false
				PQ_UnitSkillList.forth[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.forth[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.forth[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.forth[PQ_Haunt].check				= false
				PQ_UnitSkillList.forth[PQ_UAffliction].check		= false
				PQ_UnitSkillList.forth[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.forth[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.forth[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.forth[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.forth[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.forth[PQ_Fear].check				= false

				PQ_UnitSkillList.fifth[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.fifth[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.fifth[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.fifth[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.fifth[PQ_Immolate].check			= false
				PQ_UnitSkillList.fifth[PQ_Corruption].check			= false
				PQ_UnitSkillList.fifth[PQ_SoulFire].check			= false
				PQ_UnitSkillList.fifth[PQ_Conflagate].check			= false
				PQ_UnitSkillList.fifth[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.fifth[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.fifth[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.fifth[PQ_Incinerate].check			= false
				PQ_UnitSkillList.fifth[PQ_FelFlame].check			= false
				PQ_UnitSkillList.fifth[PQ_Doomguard].check			= false
				PQ_UnitSkillList.fifth[PQ_BloodFury].check			= false
				PQ_UnitSkillList.fifth[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.fifth[PQ_Soulburn].check			= false
				PQ_UnitSkillList.fifth[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.fifth[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.fifth[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.fifth[PQ_Haunt].check				= false
				PQ_UnitSkillList.fifth[PQ_UAffliction].check		= false
				PQ_UnitSkillList.fifth[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.fifth[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.fifth[PQ_SeedOfCorruption].check	= false
				PQ_UnitSkillList.fifth[PQ_SoulSwap].check			= false
				PQ_UnitSkillList.fifth[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.fifth[PQ_Fear].check				= false

				PQ_UnitSkillList.six[PQ_CurseOfElements].check		= false
				PQ_UnitSkillList.six[PQ_BaneOfHavoc].check			= false
				PQ_UnitSkillList.six[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.six[PQ_BaneOfAgony].check			= false
				PQ_UnitSkillList.six[PQ_Immolate].check				= false
				PQ_UnitSkillList.six[PQ_Corruption].check			= false
				PQ_UnitSkillList.six[PQ_SoulFire].check				= false
				PQ_UnitSkillList.six[PQ_Conflagate].check			= false
				PQ_UnitSkillList.six[PQ_Shadowflame].check			= false
				PQ_UnitSkillList.six[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.six[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.six[PQ_Incinerate].check			= false
				PQ_UnitSkillList.six[PQ_FelFlame].check				= false
				PQ_UnitSkillList.six[PQ_Doomguard].check			= false
				PQ_UnitSkillList.six[PQ_BloodFury].check			= false
				PQ_UnitSkillList.six[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.six[PQ_Soulburn].check				= false
				PQ_UnitSkillList.six[PQ_HandOfGuldan].check			= false
				PQ_UnitSkillList.six[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.six[PQ_ImmolationAura].check		= false
				PQ_UnitSkillList.six[PQ_Haunt].check				= false
				PQ_UnitSkillList.six[PQ_UAffliction].check			= false
				PQ_UnitSkillList.six[PQ_DrainSoul].check			= false
				PQ_UnitSkillList.six[PQ_ShadowBolt].check			= false
				PQ_UnitSkillList.six[PQ_SeedOfCorruption].check		= false
				PQ_UnitSkillList.six[PQ_SoulSwap].check				= false
				PQ_UnitSkillList.six[PQ_SoulSwapExhale].check		= false
				PQ_UnitSkillList.six[PQ_Fear].check					= false
			end
		elseif rotationmode == PQ_RotationList[2] then
			if PQ_RotationSwitch == 1 then
				PQ_PriorityList[1] = PQ_boss2
				PQ_PriorityList[2] = PQ_target
				PQ_PriorityList[3] = nil
				PQ_PriorityList[4] = nil
				PQ_PriorityList[5] = nil
				PQ_PriorityList[6] = nil
			else
				PQ_PriorityList[1] = PQ_boss1
				PQ_PriorityList[2] = PQ_target
				PQ_PriorityList[3] = nil
				PQ_PriorityList[4] = nil
				PQ_PriorityList[5] = nil
				PQ_PriorityList[6] = nil
			end

			if spec == 3 then
				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= true
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.first[PQ_Immolate].check			= false
				PQ_UnitSkillList.first[PQ_Corruption].check			= false
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= false
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Conflagate].check		= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
			elseif spec == 1 then
				PQ_RotationSwitch(PQ_RotationList[1])
			elseif spec == 2 then
				PQ_SwapPets = true

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= false
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= true
			end
		elseif rotationmode == PQ_RotationList[3] then
			PQ_PriorityList[1] = PQ_mouseover
			PQ_PriorityList[2] = PQ_focus
			PQ_PriorityList[3] = PQ_target
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil

			if spec == 3 then
				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.second[PQ_Immolate].check			= false
				PQ_UnitSkillList.second[PQ_Corruption].check		= false
				PQ_UnitSkillList.second[PQ_SoulFire].check			= false
				PQ_UnitSkillList.second[PQ_Conflagate].check		= false
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
				PQ_UnitSkillList.second[PQ_Incinerate].check		= false
				PQ_UnitSkillList.second[PQ_FelFlame].check			= false
				PQ_UnitSkillList.second[PQ_Doomguard].check			= false
				PQ_UnitSkillList.second[PQ_BloodFury].check			= false
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.second[PQ_Soulburn].check			= false

				PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.third[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.third[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.third[PQ_Immolate].check			= true
				PQ_UnitSkillList.third[PQ_Corruption].check			= true
				PQ_UnitSkillList.third[PQ_SoulFire].check			= true
				PQ_UnitSkillList.third[PQ_Conflagate].check			= true
				PQ_UnitSkillList.third[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.third[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.third[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.third[PQ_Incinerate].check			= true
				PQ_UnitSkillList.third[PQ_FelFlame].check			= true
				PQ_UnitSkillList.third[PQ_Doomguard].check			= true
				PQ_UnitSkillList.third[PQ_BloodFury].check			= true
				PQ_UnitSkillList.third[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.third[PQ_Soulburn].check			= true
			elseif spec == 1 then
				PQ_RotationSwitch(PQ_RotationList[1])
			elseif spec == 2 then
				PQ_SwapPets = true

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= true
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= false
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= true
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.first[PQ_Soulburn].check			= true
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= false
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.second[PQ_Incinerate].check		= false
				PQ_UnitSkillList.second[PQ_FelFlame].check			= false
				PQ_UnitSkillList.second[PQ_Doomguard].check			= false
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= false

				PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.third[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.third[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.third[PQ_Immolate].check			= true
				PQ_UnitSkillList.third[PQ_Corruption].check			= true
				PQ_UnitSkillList.third[PQ_SoulFire].check			= true
				PQ_UnitSkillList.third[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.third[PQ_Incinerate].check			= true
				PQ_UnitSkillList.third[PQ_FelFlame].check			= true
				PQ_UnitSkillList.third[PQ_Doomguard].check			= true
				PQ_UnitSkillList.third[PQ_BloodFury].check			= true
				PQ_UnitSkillList.third[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.third[PQ_Soulburn].check			= true
				PQ_UnitSkillList.third[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.third[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.third[PQ_ImmolationAura].check		= true
			end
		elseif rotationmode == PQ_RotationList[4] then
			PQ_PriorityList[1] = PQ_mouseover
			PQ_PriorityList[2] = PQ_target
			PQ_PriorityList[3] = nil
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil

			if spec == 3 then
				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Conflagate].check		= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
			elseif spec == 1 then
				PQ_RotationSwitch(PQ_RotationList[1])
			elseif spec == 2 then
				PQ_SwapPets = true

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= true
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= false
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= true
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.first[PQ_Soulburn].check			= true
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= true
			end
		elseif rotationmode == PQ_RotationList[5] then
			PQ_PriorityList[1] = PQ_mouseover
			PQ_PriorityList[2] = PQ_target
			PQ_PriorityList[3] = nil
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil

			if spec == 3 then
				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Conflagate].check		= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
			elseif spec == 1 then
				PQ_RotationSwitch(PQ_RotationList[1])
			elseif spec == 2 then
				PQ_SwapPets = true

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= true
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= false
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= true
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.first[PQ_Soulburn].check			= true
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= true
			end
		elseif rotationmode == PQ_RotationList[6] then
			PQ_PriorityList[1] = PQ_target
			PQ_PriorityList[2] = PQ_boss1
			PQ_PriorityList[3] = nil
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil

			if spec == 3 then
				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= true
				PQ_UnitSkillList.first[PQ_Conflagate].check			= true
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.first[PQ_Incinerate].check			= true
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= true
				PQ_UnitSkillList.first[PQ_BloodFury].check			= true
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.first[PQ_Soulburn].check			= true

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Conflagate].check		= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
			elseif spec == 1 then
				PQ_RotationSwitch(PQ_RotationList[1])
			elseif spec == 2 then
				PQ_SwapPets = true

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= true
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.first[PQ_Incinerate].check			= true
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= true
				PQ_UnitSkillList.first[PQ_BloodFury].check			= true
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.first[PQ_Soulburn].check			= true
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= true

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= true
			end
		elseif rotationmode == PQ_RotationList[7] then
			PQ_PriorityList[1] = PQ_mouseover
			PQ_PriorityList[2] = PQ_focus
			PQ_PriorityList[3] = PQ_target
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil

			if spec == 3 then
				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.second[PQ_Immolate].check			= false
				PQ_UnitSkillList.second[PQ_Corruption].check		= false
				PQ_UnitSkillList.second[PQ_SoulFire].check			= false
				PQ_UnitSkillList.second[PQ_Conflagate].check		= false
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= false
				PQ_UnitSkillList.second[PQ_Incinerate].check		= false
				PQ_UnitSkillList.second[PQ_FelFlame].check			= false
				PQ_UnitSkillList.second[PQ_Doomguard].check			= false
				PQ_UnitSkillList.second[PQ_BloodFury].check			= false
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.second[PQ_Soulburn].check			= false

				PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.third[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.third[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.third[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.third[PQ_Immolate].check			= true
				PQ_UnitSkillList.third[PQ_Corruption].check			= true
				PQ_UnitSkillList.third[PQ_SoulFire].check			= true
				PQ_UnitSkillList.third[PQ_Conflagate].check			= true
				PQ_UnitSkillList.third[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.third[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.third[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.third[PQ_Incinerate].check			= true
				PQ_UnitSkillList.third[PQ_FelFlame].check			= true
				PQ_UnitSkillList.third[PQ_Doomguard].check			= true
				PQ_UnitSkillList.third[PQ_BloodFury].check			= true
				PQ_UnitSkillList.third[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.third[PQ_Soulburn].check			= true
			elseif spec == 1 then
				PQ_RotationSwitch(PQ_RotationList[1])
			elseif spec == 2 then
				PQ_SwapPets = true

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= true
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= false
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= true
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.first[PQ_Soulburn].check			= true
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= false
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.second[PQ_Incinerate].check		= false
				PQ_UnitSkillList.second[PQ_FelFlame].check			= false
				PQ_UnitSkillList.second[PQ_Doomguard].check			= false
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= false

				PQ_UnitSkillList.third[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.third[PQ_BaneOfDoom].check			= true
				PQ_UnitSkillList.third[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.third[PQ_Immolate].check			= true
				PQ_UnitSkillList.third[PQ_Corruption].check			= true
				PQ_UnitSkillList.third[PQ_SoulFire].check			= true
				PQ_UnitSkillList.third[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.third[PQ_Incinerate].check			= true
				PQ_UnitSkillList.third[PQ_FelFlame].check			= true
				PQ_UnitSkillList.third[PQ_Doomguard].check			= true
				PQ_UnitSkillList.third[PQ_BloodFury].check			= true
				PQ_UnitSkillList.third[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.third[PQ_Soulburn].check			= true
				PQ_UnitSkillList.third[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.third[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.third[PQ_ImmolationAura].check		= true
			end
		elseif rotationmode == PQ_RotationList[8] then
			PQ_PriorityList[1] = PQ_mouseover
			PQ_PriorityList[2] = PQ_target
			PQ_PriorityList[3] = nil
			PQ_PriorityList[4] = nil
			PQ_PriorityList[5] = nil
			PQ_PriorityList[6] = nil

			if spec == 3 then
				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= true
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Conflagate].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_ChaosBolt].check			= false
				PQ_UnitSkillList.first[PQ_Shadowburn].check			= true
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= true
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfHavoc].check		= false
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Conflagate].check		= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_ChaosBolt].check			= true
				PQ_UnitSkillList.second[PQ_Shadowburn].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= false
				PQ_UnitSkillList.second[PQ_BloodFury].check			= false
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
			elseif spec == 1 then
				PQ_RotationSwitch(PQ_RotationList[1])
			elseif spec == 2 then
				PQ_SwapPets = true

				PQ_UnitSkillList.first[PQ_CurseOfElements].check	= false
				PQ_UnitSkillList.first[PQ_BaneOfDoom].check			= false
				PQ_UnitSkillList.first[PQ_BaneOfAgony].check		= false
				PQ_UnitSkillList.first[PQ_Immolate].check			= true
				PQ_UnitSkillList.first[PQ_Corruption].check			= false
				PQ_UnitSkillList.first[PQ_SoulFire].check			= false
				PQ_UnitSkillList.first[PQ_Shadowflame].check		= false
				PQ_UnitSkillList.first[PQ_Incinerate].check			= false
				PQ_UnitSkillList.first[PQ_FelFlame].check			= false
				PQ_UnitSkillList.first[PQ_Doomguard].check			= false
				PQ_UnitSkillList.first[PQ_BloodFury].check			= false
				PQ_UnitSkillList.first[PQ_DemonSoul].check			= false
				PQ_UnitSkillList.first[PQ_Soulburn].check			= false
				PQ_UnitSkillList.first[PQ_HandOfGuldan].check		= false
				PQ_UnitSkillList.first[PQ_Metamorphosis].check		= false
				PQ_UnitSkillList.first[PQ_ImmolationAura].check		= false

				PQ_UnitSkillList.second[PQ_CurseOfElements].check	= true
				PQ_UnitSkillList.second[PQ_BaneOfDoom].check		= true
				PQ_UnitSkillList.second[PQ_BaneOfAgony].check		= true
				PQ_UnitSkillList.second[PQ_Immolate].check			= true
				PQ_UnitSkillList.second[PQ_Corruption].check		= true
				PQ_UnitSkillList.second[PQ_SoulFire].check			= true
				PQ_UnitSkillList.second[PQ_Shadowflame].check		= true
				PQ_UnitSkillList.second[PQ_Incinerate].check		= true
				PQ_UnitSkillList.second[PQ_FelFlame].check			= true
				PQ_UnitSkillList.second[PQ_Doomguard].check			= true
				PQ_UnitSkillList.second[PQ_BloodFury].check			= true
				PQ_UnitSkillList.second[PQ_DemonSoul].check			= true
				PQ_UnitSkillList.second[PQ_Soulburn].check			= true
				PQ_UnitSkillList.second[PQ_HandOfGuldan].check		= true
				PQ_UnitSkillList.second[PQ_Metamorphosis].check		= true
				PQ_UnitSkillList.second[PQ_ImmolationAura].check	= true
			end
		end
	end

	function PQ_G_Latency()
		return (select(3,GetNetStats()) + select(4,GetNetStats())) / 1000
	end

	local PQ_Latency = PQ_G_Latency

	local function PQ_SetNextTest(spell)
		PQ_Skills[spell].nexttest = GetTime() + PQ_Skills[spell].delay - PQ_Latency()*2
	end

	local function PQ_GetSpellCastTime(spell)
		return PQ_Skills[spell].casttime / 1000
	end

	local function PQ_SwitchBurnLogic(spec)
		if spec == 1 then
			PQ_BurnUnitsList = {
				[56575] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Burning Tendons]]
				[56341] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Burning Tendons]]
				[56262] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Elementium Bolt]]
				[56923] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Twilight Sapper]]
				[56188] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Blistering Tentacle]]
				[55862] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Acidic Globule]]
				[55863] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Shadowed Globule]]
				[55864] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Glowing Globule]]
				[55865] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Crimson Globule]]
				[55866] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false}, --[[Cobalt Globule]]
				[55867] = {corruption = true, uaffliction = true, baneofagony = true, baneofdoom = false, curseofelements = false, immolate = false} --[[Dark Globule]]
			}
		elseif spec == 2 then
			PQ_BurnUnitsList = {
				[56575] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Burning Tendons]]
				[56341] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Burning Tendons]]
				[56262] = {corruption = false	, uaffliction = false, baneofagony = false	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Elementium Bolt]]
				[56923] = {corruption = false	, uaffliction = false, baneofagony = false	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Twilight Sapper]]
				[56188] = {corruption = false	, uaffliction = false, baneofagony = false	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Blistering Tentacle]]
				[55862] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Acidic Globule]]
				[55863] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Shadowed Globule]]
				[55864] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Glowing Globule]]
				[55865] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Crimson Globule]]
				[55866] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Cobalt Globule]]
				[55867] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true} --[[Dark Globule]]
			}
		elseif spec == 3 then
			PQ_BurnUnitsList = {
				[56575] = {corruption = true	, uaffliction = false, baneofagony = false	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Burning Tendons]]
				[56341] = {corruption = true	, uaffliction = false, baneofagony = false	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Burning Tendons]]
				[56262] = {corruption = false	, uaffliction = false, baneofagony = false	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Elementium Bolt]]
				[56923] = {corruption = false	, uaffliction = false, baneofagony = false	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Twilight Sapper]]
				[56188] = {corruption = false	, uaffliction = false, baneofagony = false	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Blistering Tentacle]]
				[55862] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Acidic Globule]]
				[55863] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Shadowed Globule]]
				[55864] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Glowing Globule]]
				[55865] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Crimson Globule]]
				[55866] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true}, --[[Cobalt Globule]]
				[55867] = {corruption = true	, uaffliction = false, baneofagony = true	, baneofdoom = false, curseofelements = false, immolate = true} --[[Dark Globule]]
			}
		end
	end

-------------------
-- EVENT HANDLER --
-------------------

	local PQ_EventHandlerFrame, events = CreateFrame(&amp;apos;Frame&amp;apos;), {};

	function events:COMBAT_LOG_EVENT_UNFILTERED(...)
		----------------------------------------------------------
		-- Check for a buff/debuff applied to PLAYER (yourself) --
		----------------------------------------------------------
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),true)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),true)
			end
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),true)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),true)
			end
		end

		------------------------------------------------------------
		-- Check for a buff/debuff removed from PLAYER (yourself) --
		------------------------------------------------------------
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;)  and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE
		then
			if select(15, ...) == &amp;apos;DEBUFF&amp;apos; then
				PQ_PlayerDebuffHandler(select(12, ...),false)
			end
			if select(15, ...) == &amp;apos;BUFF&amp;apos; then
				PQ_PlayerBuffHandler(select(12, ...),false)
			end	
		end

		-----------------------------------------
		-- Check for MY debuff applied to UNIT --
		-----------------------------------------
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),true,select(8, ...))
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),true,select(8, ...))
		end

		-------------------------------------------------
		-- Check for MY debuff removed/faded from UNIT --
		-------------------------------------------------
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_MINE and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitDebuffHandler(select(12, ...),false,select(8, ...))
		end

		------------------------------------
		-- Check for buff applied to UNIT --
		------------------------------------
		if (select(2, ...) == &amp;apos;SPELL_AURA_APPLIED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),true,select(8, ...))
		end
		if (select(2, ...) == &amp;apos;SPELL_AURA_REFRESH&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),true,select(8, ...))
		end

		-------------------------------------------------
		-- Check for MY debuff removed/faded from UNIT --
		-------------------------------------------------
		if (select(2, ...) == &amp;apos;SPELL_AURA_REMOVED&amp;apos;) and bit.band(select(6, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER and bit.band(select(10, ...), COMBATLOG_OBJECT_AFFILIATION_MASK) == COMBATLOG_OBJECT_AFFILIATION_OUTSIDER
		then
			PQ_UnitBuffHandler(select(12, ...),false,select(8, ...))
		end

	end

	function events:PLAYER_REGEN_DISABLED(...)
		PQ_InCombat = true
		for spell, spellinfo in pairs(PQ_Skills) do
			spellinfo.isknown = IsSpellKnown(spell)
		end
		PQ_Skills[PQ_SoulSwapExhale].isknown = IsSpellKnown(PQ_SoulSwap)
	end

	function events:PLAYER_REGEN_ENABLED(...)
		PQ_InCombat = false
		PQ_RotationSwitch(PQ_RotationList[1])
		pq_notify(PQ_RotationMode)
	end

	function events:PLAYER_CONTROL_LOST(...)
		if PQ_InCombat then
			PQ_HasLossOfControl = true
		end
	end

	function events:PLAYER_CONTROL_GAINED(...)
		if PQ_HasLossOfControl then
			PQ_HasLossOfControl = false
		end
	end

	function events:MODIFIER_STATE_CHANGED(...)
		local key, state = ...
		if key == &amp;apos;RCTRL&amp;apos; and state == 0 and PQ_RotationMode == PQ_RotationList[2] then
			if PQ_RotationInnerSwitch == 1 then
				PQ_RotationInnerSwitch = 2
				PQ_PriorityList[1] = PQ_boss1
				pq_notify(&amp;apos;TARGET KORCHOM&amp;apos;)
			else
				PQ_RotationInnerSwitch = 1
				PQ_PriorityList[1] = PQ_boss2
				pq_notify(&amp;apos;TARGET MORCHOK&amp;apos;)
			end
		end
		if key == &amp;apos;RCTRL&amp;apos; and state == 0 and PQ_G_Spec == 2 then
			if PQ_SwapPets then
				PQ_SwapPets = false
				pq_notify(&amp;apos;PETSWAP OFF&amp;apos;)
			else
				PQ_SwapPets = true
				pq_notify(&amp;apos;PETSWAP ON&amp;apos;)
			end
		end
	end

	function events:UNIT_POWER(...)
		local unitID, strResource = ...
		if unitID == PQ_player and strResource == &amp;apos;SOUL_SHARDS&amp;apos; then
			PQ_SoulShard = UnitPower(PQ_player, 7)
		end
	end

	function events:PLAYER_TARGET_CHANGED(...)
		if PQ_Debug and PQ_DebugTargeting then
			pq_printtodebug(&amp;apos;\124cFFDBFA2ANEW TARGET&amp;apos;)
		end
		if UnitExists(PQ_target) then
			local npcid = tonumber((UnitGUID(PQ_target)):sub(-12, -9), 16)
			PQ_UnitCheckDebuffs(PQ_target)
			PQ_UnitCheckBuffs(PQ_target)
			PQ_Units[PQ_target].TTD = PQ_DefaultTTD
			PQ_Units[PQ_target].TTDtime = GetTime()
			PQ_Units[PQ_target].lastlife = UnitHealth(PQ_target)
			if UnitLevel(PQ_target) == -1 and PQ_RotationMode == PQ_RotationList[1] then
				PQ_SwapPets = true
				PQ_UnitSkillList.third[PQ_Doomguard].check 		= true
				PQ_UnitSkillList.third[PQ_BloodFury].check 		= true
				PQ_UnitSkillList.third[PQ_DemonSoul].check 		= true
				PQ_UnitSkillList.third[PQ_Metamorphosis].check 	= true
			elseif UnitLevel(PQ_target) ~= -1 and PQ_RotationMode == PQ_RotationList[1] then
				if npcid == 56575 or npcid == 56341 then
					PQ_SwapPets = true
					PQ_UnitSkillList.third[PQ_Doomguard].check 		= false
					PQ_UnitSkillList.third[PQ_BloodFury].check 		= true
					PQ_UnitSkillList.third[PQ_DemonSoul].check 		= true
					PQ_UnitSkillList.third[PQ_Metamorphosis].check 	= true
				else
					PQ_SwapPets = false
					PQ_UnitSkillList.third[PQ_Doomguard].check 		= false
					PQ_UnitSkillList.third[PQ_BloodFury].check 		= false
					PQ_UnitSkillList.third[PQ_DemonSoul].check 		= false
					PQ_UnitSkillList.third[PQ_Metamorphosis].check 	= false
				end
			end
			PQ_UnitDebuffList.target[PQ_Corruption].use			= true
			PQ_UnitDebuffList.target[PQ_UAffliction].use		= true
			PQ_UnitDebuffList.target[PQ_BaneOfAgony].use		= true
			PQ_UnitDebuffList.target[PQ_BaneOfDoom].use			= true
			PQ_UnitDebuffList.target[PQ_CurseOfElements].use	= true
			PQ_UnitDebuffList.target[PQ_Immolate].use 			= true
			local spec = PQ_G_Spec
			for burnid,skillsinfo in pairs(PQ_BurnUnitsList) do
				if npcid == burnid then
					PQ_UnitDebuffList.target[PQ_Corruption].use			= skillsinfo.corruption
					PQ_UnitDebuffList.target[PQ_UAffliction].use		= skillsinfo.uaffliction
					PQ_UnitDebuffList.target[PQ_BaneOfAgony].use		= skillsinfo.baneofagony
					PQ_UnitDebuffList.target[PQ_BaneOfDoom].use			= skillsinfo.baneofdoom
					PQ_UnitDebuffList.target[PQ_CurseOfElements].use	= skillsinfo.curseofelements
					PQ_UnitDebuffList.target[PQ_Immolate].use 			= skillsinfo.immolate
				end
			end
		end
	end

	function events:PLAYER_FOCUS_CHANGED(...)
		if PQ_Debug and PQ_DebugTargeting then
			pq_printtodebug(&amp;apos;\124cFFDBFA2ANEW FOCUS&amp;apos;)
		end
		if UnitExists(PQ_focus) then
			PQ_UnitCheckDebuffs(PQ_focus)
			PQ_UnitCheckBuffs(PQ_focus)
			PQ_Units[PQ_focus].TTD = PQ_DefaultTTD
			PQ_Units[PQ_focus].TTDtime = GetTime()
			PQ_Units[PQ_focus].lastlife = UnitHealth(PQ_focus)
		end
	end

	function events:UPDATE_MOUSEOVER_UNIT(...)
		if PQ_Debug and PQ_DebugTargeting then
			pq_printtodebug(&amp;apos;\124cFFDBFA2ANEW MOUSEOVER&amp;apos;)
		end
		if UnitExists(PQ_mouseover) then
			PQ_UnitCheckDebuffs(PQ_mouseover)
			PQ_UnitCheckBuffs(PQ_mouseover)
			PQ_Units[PQ_mouseover].TTD = PQ_DefaultTTD
			PQ_Units[PQ_mouseover].TTDtime = GetTime()
			PQ_Units[PQ_mouseover].lastlife = UnitHealth(PQ_mouseover)
			local npcid = tonumber((UnitGUID(PQ_mouseover)):sub(-12, -9), 16)
			pq_printtodebug(npcid)
			PQ_UnitDebuffList.mouseover[PQ_Corruption].use		= true
			PQ_UnitDebuffList.mouseover[PQ_UAffliction].use		= true
			PQ_UnitDebuffList.mouseover[PQ_BaneOfAgony].use		= true
			PQ_UnitDebuffList.mouseover[PQ_BaneOfDoom].use		= true
			PQ_UnitDebuffList.mouseover[PQ_CurseOfElements].use	= true
			PQ_UnitDebuffList.mouseover[PQ_Immolate].use 		= true
			local spec = PQ_G_Spec
			for i=1, #PQ_BurnUnitsList do
				local burnid = PQ_BurnUnitsList[i]
				if npcid == burnid then
					if spec == 1 then
						PQ_UnitDebuffList.mouseover[PQ_Corruption].use		= true
						PQ_UnitDebuffList.mouseover[PQ_UAffliction].use		= true
						PQ_UnitDebuffList.mouseover[PQ_BaneOfAgony].use		= true
						PQ_UnitDebuffList.mouseover[PQ_BaneOfDoom].use		= false
						PQ_UnitDebuffList.mouseover[PQ_CurseOfElements].use	= false
						PQ_UnitDebuffList.mouseover[PQ_Immolate].use 		= false
					elseif spec == 2 then
						PQ_UnitDebuffList.mouseover[PQ_Corruption].use		= false
						PQ_UnitDebuffList.mouseover[PQ_BaneOfAgony].use		= false
						PQ_UnitDebuffList.mouseover[PQ_BaneOfDoom].use		= false
						PQ_UnitDebuffList.mouseover[PQ_CurseOfElements].use	= false
						PQ_UnitDebuffList.mouseover[PQ_Immolate].use 		= true
					elseif spec == 3 then
						PQ_UnitDebuffList.mouseover[PQ_Corruption].use		= false
						PQ_UnitDebuffList.mouseover[PQ_UAffliction].use		= false
						PQ_UnitDebuffList.mouseover[PQ_BaneOfAgony].use		= false
						PQ_UnitDebuffList.mouseover[PQ_BaneOfDoom].use		= false
						PQ_UnitDebuffList.mouseover[PQ_CurseOfElements].use	= false
						PQ_UnitDebuffList.mouseover[PQ_Immolate].use 		= true
					end
				end
			end
		end
	end

	function events:INSTANCE_ENCOUNTER_ENGAGE_UNIT(...)
		if PQ_Debug and PQ_DebugTargeting then
			pq_printtodebug(&amp;apos;\124cFFDBFA2ANEW BOSS!!! &amp;apos;)
		end
		for i = 1, 4 do
			local target = &amp;apos;boss&amp;apos;..tostring(i)
			if UnitExists(target) then
				PQ_UnitCheckDebuffs(target)
				PQ_UnitCheckBuffs(target)
				PQ_Units[target].TTD = PQ_DefaultTTD
				PQ_Units[target].TTDtime = GetTime()
				PQ_Units[target].lastlife = UnitHealth(target)
				local npcid = tonumber((UnitGUID(target)):sub(-12, -9), 16)
				if npcid == 55265 then
					PQ_RotationSwitch(PQ_RotationList[2])
					pq_notify(PQ_RotationMode)
				elseif npcid == 55308 then
					PQ_RotationSwitch(PQ_RotationList[3])
					pq_notify(PQ_RotationMode)
				elseif npcid == 55312 then
					PQ_RotationSwitch(PQ_RotationList[4])
					pq_notify(PQ_RotationMode)
				elseif npcid == 55689 then
					PQ_RotationSwitch(PQ_RotationList[5])
					pq_notify(PQ_RotationMode)
				elseif npcid == 55294 then
					PQ_RotationSwitch(PQ_RotationList[6])
					pq_notify(PQ_RotationMode)
				end
			end
		end
	end

	function events:UNIT_SPELLCAST_START(...)
		if (select(1, ...) == PQ_player or select(1, ...) == PQ_RaidIndex) then
			if PQ_Debug and PQ_DebugCasts then
				pq_printtodebug(&amp;apos;\124cFFF3B520CASTING&amp;apos; .. &amp;apos; spell&amp;apos; .. GetSpellLink(select(5, ...)))
			end
			if PQ_Skills[select(5, ...)] then
				PQ_Skills[select(5, ...)].nexttest = select(6, UnitCastingInfo(PQ_player)) / 1000 + PQ_Skills[select(5, ...)].delay - PQ_Latency()*2
			end
		end
	end

	function events:UNIT_SPELLCAST_INTERRUPTED(...)
		if (select(1, ...) == PQ_player or select(1, ...) == PQ_RaidIndex) then
			if PQ_Debug and PQ_DebugCasts then
				pq_printtodebug(&amp;apos;\124cFFF3B520INTERRUPTED&amp;apos; .. &amp;apos; spell&amp;apos; .. GetSpellLink(select(5, ...)))
			end
			if PQ_Skills[select(5, ...)] then
				PQ_Skills[select(5, ...)].nexttest = 0
			end
		end
	end

	function events:UNIT_SPELLCAST_SUCCEEDED(...)
		if (select(1, ...) == PQ_player or select(1, ...) == PQ_RaidIndex) then
			if select(5, ...) ~= 105536 then
				if PQ_Debug and PQ_DebugCasts then
					pq_printtodebug(&amp;apos;\124cFFF3B520SUCCEEDED&amp;apos; .. &amp;apos; spell&amp;apos; .. GetSpellLink(select(5, ...)))
				end
				if PQ_Skills[select(5, ...)] then
					PQ_SetNextTest(select(5, ...))
				end
			end
		end
	end

	function events:RAID_ROSTER_UPDATE(...)
		if GetNumRaidMembers() &amp;gt; 0 then
			local members = GetNumRaidMembers()
			for i = 1, members, 1 do
				local member = &amp;apos;raid&amp;apos; .. tostring(i)
				if UnitName(member, true) == UnitName(PQ_player, true) then
					PQ_RaidIndex = member
				end
			end
		end
	end

	function events:ACTIVE_TALENT_GROUP_CHANGED(...)
		PQ_G_Spec = GetPrimaryTalentTree()
		PQ_RotationSwitch(PQ_RotationList[1])
		for spell, spellinfo in pairs(PQ_Skills) do
			spellinfo.isknown = IsSpellKnown(spell)
		end
		PQ_SwitchBurnLogic(PQ_G_Spec)
		pq_notify(&amp;apos;Switching rotation to &amp;apos; .. PQ_SpecList[PQ_G_Spec])
	end

	function events:UNIT_PET(...)
		local unit = ...
		if unit == PQ_player or unit == PQ_RaidIndex then
			if UnitExists(PQ_pet) then
				PQ_PetID = tonumber((UnitGUID(PQ_pet)):sub(-12, -9), 16)
				pq_printtodebug(&amp;apos;New pet summoned&amp;apos;)
			else
				PQ_PetID = 0
				pq_printtodebug(&amp;apos;You have lost a pet&amp;apos;)
			end
		end
	end

	function events:UNIT_SPELL_HASTE(...)
		local unit = ...
		if unit == PQ_player or unit == PQ_RaidIndex then
			for spell,spellinfo in pairs(PQ_Skills) do
				spellinfo.casttime = select(7,GetSpellInfo(spell))
			end
		end
	end

	local function PQ_Init()
		PQ_RotationSwitch(PQ_RotationList[1])
		pq_notify(PQ_RotationMode)
		PQ_SoulShard = UnitPower(PQ_player, 7)
		PQ_CheckForAllBuffs()
		PQ_SwitchBurnLogic(PQ_G_Spec)
		PQ_RotationInnerSwitch = 1
		if UnitExists(PQ_pet) then
			PQ_PetID = tonumber((UnitGUID(PQ_pet)):sub(-12, -9), 16)
		end
	end

	PQ_EventHandlerFrame:SetScript(&amp;apos;OnEvent&amp;apos;, function(self, event, ...) events[event](self, ...); end);

	for k, v in pairs(events) do
		PQ_EventHandlerFrame:RegisterEvent(k); -- Register all events for which handlers have been defined
	end

	PQ_Init()

-----------
-- BUFFS --
-----------

	function PQ_BuffRotation()
		if not PQ_InCombat then
			if GetItemCount(PQ_Soulstone) == 0 then
				return PQ_SoulstoneCast
			end
			
			if GetItemCount(PQ_Healtstone) == 0 then
				return PQ_HealtstoneCast
			end
		end

		if PQ_Buffs[PQ_FelArmor].hasBuff == false then
			return PQ_FelArmor
		end
		if PQ_GetPlayerHP() &amp;lt; 20 and GetItemCount(PQ_Healtstone) ~= 0 and GetItemCooldown(PQ_Healtstone) == 0 then
			UseItemByName(PQ_Healtstone)
			return
		end
		if GetItemCount(PQ_Soulstone) ~= 0 and
		GetItemCooldown(PQ_Healtstone) == 0 and
		UnitExists(PQ_mouseover) and 
		UnitIsFriend(PQ_player, PQ_mouseover) and 
		UnitIsDeadOrGhost(PQ_mouseover) and
		IsSpellInRange(PQ_GCDSpell) then
			UseItemByName(PQ_Soulstone,PQ_mouseover)
			return
		end
	end

---------------
-- ROTATIONS --
---------------

	---------------------
	-- DESTRO ROTATION --
	---------------------
	function PQ_DestroRotation()
		--LIFETAP
		if PQ_InCombat then
			if PQ_GetPlayerHP() &amp;gt; 50 and PQ_GetPlayerUP() &amp;lt; 10  and UnitChannelInfo(PQ_player) == nil then
				if not UnitChannelInfo(PQ_player) then
					return PQ_LifeTap, PQ_player
				end
			end
		else
			if PQ_GetPlayerHP() &amp;gt; 50 and PQ_GetPlayerUP() &amp;lt; 85  and UnitChannelInfo(PQ_player) == nil then
				if not UnitChannelInfo(PQ_player) then
					return PQ_LifeTap, PQ_player
				end
			end	
		end
		--LIFETAP

		--DEMONIC CIRCLE:SUMMON
		if IsRightShiftKeyDown() then
			return PQ_DCSummon, PQ_player
		end
		--DEMONIC CIRCLE:SUMMON

		--DEMONIC CIRCLE:TELEPORT
		if IsLeftAltKeyDown() and PQ_Buffs[PQ_DCSummon].hasBuff then
			return PQ_DCTeleport, PQ_player
		end	
		--DEMONIC CIRCLE:TELEPORT

		--AUTOPAUSE
		local unitincombat = false
		for i=1, #PQ_PriorityList do
			local target = PQ_PriorityList[i]
			if target then
				if UnitAffectingCombat(target) and not UnitIsFriend(PQ_player, target) then unitincombat = true end
			end
		end
		
		if not PQ_InCombat and unitincombat == false then
			return 0, PQ_player
		end
		--AUTOPAUSE

		--TARGET SELECT BY PRIORITY
		for i=1, #PQ_PriorityList do
			local target = PQ_PriorityList[i]
			if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) and not PQ_Units[target].immunity then

				--CURSE OF ELEMENTS
				if PQ_IsUseUnitSkill(target,PQ_CurseOfElements) and UnitLevel(target) == -1 then
					if GetTime() &amp;gt; PQ_Skills[PQ_CurseOfElements].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_CurseOfElements) then
							if PQ_IsUnitHasDebuff(target,PQ_CurseOfElements) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_CurseOfElements) &amp;lt; 1 then
									if PQ_SpellCheck(PQ_CurseOfElements,target) then
										return PQ_CurseOfElements, target
									end
								end
							elseif not UnitDebuffID(target,60433) and
							not UnitDebuffID(target,65142) and
							not UnitDebuffID(target,34889) and
							not UnitDebuffID(target,24844) and
							not UnitDebuffID(target,93068) and
							not UnitDebuffID(target,1490) then
								if PQ_SpellCheck(PQ_CurseOfElements,target) then
									return PQ_CurseOfElements, target
								end
							end
						end
					end
				end
				--CURSE OF ELEMENTS

				--BANE OF HAVOC
				if PQ_IsUseUnitSkill(target,PQ_BaneOfHavoc) then
					if GetTime() &amp;gt; PQ_Skills[PQ_BaneOfHavoc].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_BaneOfHavoc) then
							if not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_SpellCheck(PQ_BaneOfHavoc,target) then
									return PQ_BaneOfHavoc, target
								end
							end
						end
					end
				end
				--BANE OF HAVOC

				--CONFLAGATE
				if PQ_IsUseUnitSkill(target,PQ_Conflagate) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Conflagate].nexttest and PQ_GetSpellCooldown(PQ_Conflagate) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_Conflagate,target) and PQ_IsUnitHasDebuff(target,PQ_Immolate) then
							return PQ_Conflagate, target
						end
					end
				end
				--CONFLAGATE

				--CORRUPTION
				if PQ_IsUseUnitSkill(target,PQ_Corruption) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Corruption].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_Corruption) then
							if PQ_IsUnitHasDebuff(target,PQ_Corruption) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_Corruption) &amp;lt; 1.5 then
									if PQ_SpellCheck(PQ_Corruption,target) then
										return PQ_Corruption, target
									end
								end
							else
								if PQ_SpellCheck(PQ_Corruption,target) then
									return PQ_Corruption, target
								end
							end
						end
					end
				end
				--CORRUPTION

				--SOULBURN
				if PQ_IsUseUnitSkill(target,PQ_Soulburn) and PQ_SoulShard &amp;gt; 0 then
					if GetTime() &amp;gt; PQ_Skills[PQ_Soulburn].nexttest and PQ_GetSpellCooldown(PQ_Soulburn) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_Soulburn].check and PQ_SpellCheck(PQ_SoulFire,target) then
							return PQ_Soulburn, nil
						end
					end
				end
				--SOULBURN

				--SOULFIRE
				if PQ_IsUseUnitSkill(target,PQ_SoulFire) then
					if GetTime() &amp;gt; PQ_Skills[PQ_SoulFire].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_Soulburn].hasBuff then
							if PQ_SpellCheck(PQ_SoulFire,target) then
								return PQ_SoulFire, target
							end
						elseif UnitBuffID(PQ_player,PQ_EmpoweredImp) then
							if PQ_SpellCheck(PQ_SoulFire,target) then
								return PQ_SoulFire, target
							end
						elseif PQ_Buffs[PQ_ImpruvedSoulFire].hasBuff and not PQR_IsMoving(0.1)  then
							if PQ_GetTimeLeftPlayerBuff(PQ_ImpruvedSoulFire) &amp;lt; 4 then
								if PQ_SpellCheck(PQ_SoulFire,target) then
									return PQ_SoulFire, target
								end
							end
						elseif not PQ_Buffs[PQ_ImpruvedSoulFire].hasBuff and not PQR_IsMoving(0.1)  then
							if PQ_SpellCheck(PQ_SoulFire,target) then
									return PQ_SoulFire, target
							end
						end
					end
				end
				--SOULFIRE

				--BLOOD FURY
				if PQ_IsUseUnitSkill(target,PQ_BloodFury) then
					if GetTime() &amp;gt; PQ_Skills[PQ_BloodFury].nexttest and PQ_GetSpellCooldown(PQ_BloodFury) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_BloodFury].check and PQ_SpellCheck(PQ_Incinerate,target) then
							return PQ_BloodFury, nil
						end
					end
				end
				--BLOOD FURY

				--IMMOLATE
				if PQ_IsUseUnitSkill(target,PQ_Immolate) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Immolate].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_Immolate) then
							if PQ_IsUnitHasDebuff(target,PQ_Immolate) then
								PQ_Units[target].unitdebufflist[PQ_Immolate].endTime = select(7, UnitDebuffID(target, PQ_Immolate, PQ_player))
								if PQ_GetTimeLeftUnitDebuff(target,PQ_Immolate) - PQ_GetSpellCastTime(PQ_Immolate) &amp;lt; 1.5 then
									if PQ_SpellCheck(PQ_Immolate,target) then
										return PQ_Immolate, target
									end
								end
							else
								if PQ_SpellCheck(PQ_Immolate,target) then
									return PQ_Immolate, target
								end
							end
						end
					end
				end
				--IMMOLATE

				--BANE OF DOOM
				if PQ_IsUseUnitSkill(target,PQ_BaneOfDoom) and UnitLevel(target) == -1 then
					if GetTime() &amp;gt; PQ_Skills[PQ_BaneOfDoom].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_BaneOfDoom) then
							if PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_BaneOfDoom) &amp;lt; 15 then
									if PQ_SpellCheck(PQ_BaneOfDoom,target) then
										return PQ_BaneOfDoom, target
									end
								end
							elseif not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_SpellCheck(PQ_BaneOfDoom,target) then
									return PQ_BaneOfDoom, target
								end
							end
						end
					end
				end
				--BANE OF DOOM

				--BANE OF AGONY
				if PQ_IsUseUnitSkill(target,PQ_BaneOfAgony) and UnitLevel(target) ~= -1 then
					if GetTime() &amp;gt; PQ_Skills[PQ_BaneOfAgony].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_BaneOfAgony) then
							if PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_BaneOfAgony) &amp;lt; 1 then
									if PQ_SpellCheck(PQ_BaneOfAgony,target) then
										return PQ_BaneOfAgony, target
									end
								end
							elseif not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_SpellCheck(PQ_BaneOfAgony,target) then
									return PQ_BaneOfAgony, target
								end
							end
						end
					end
				end
				--BANE OF AGONY

				--DOOMGUARD
				if PQ_IsUseUnitSkill(target,PQ_Doomguard) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Doomguard].nexttest and PQ_GetSpellCooldown(PQ_Doomguard) &amp;lt;= 0 then
						return PQ_Doomguard, nil
					end
				end
				--DOOMGUARD

				--DEMON SOUL
				if PQ_IsUseUnitSkill(target,PQ_DemonSoul) then
					if GetTime() &amp;gt; PQ_Skills[PQ_DemonSoul].nexttest and PQ_GetSpellCooldown(PQ_DemonSoul) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_DemonSoulImp].check then
							return PQ_DemonSoul, nil
						end
					end
				end
				--DEMON SOUL

				--SHADOWFLAME
				if PQ_IsUseUnitSkill(target,PQ_Shadowflame) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Shadowflame].nexttest and PQ_GetSpellCooldown(PQ_Shadowflame) &amp;lt;= 0 then
						if PQ_RotationMode == PQ_RotationList[6] then
							return PQ_Shadowflame, nil
						elseif CheckInteractDistance(target,2) then
							return PQ_Shadowflame, nil
						end
					end
				end
				--SHADOWFLAME

				--SHADOWBURN
				if PQ_IsUseUnitSkill(target,PQ_Shadowburn) and PQ_GetTargetHP(target) &amp;lt; 20 then
					if GetTime() &amp;gt; PQ_Skills[PQ_Shadowburn].nexttest and PQ_GetSpellCooldown(PQ_Shadowburn) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_Shadowburn,target) then
							return PQ_Shadowburn, target
						end
					end
				end
				--SHADOWBURN

				--CHAOS BOLT
				if PQ_IsUseUnitSkill(target,PQ_ChaosBolt) then
					if GetTime() &amp;gt; PQ_Skills[PQ_ChaosBolt].nexttest and PQ_GetSpellCooldown(PQ_ChaosBolt) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_ChaosBolt,target) then
							return PQ_ChaosBolt, target
						end
					end
				end
				--CHAOS BOLT

				--INCINERATE
				if PQ_IsUseUnitSkill(target,PQ_Incinerate) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Incinerate].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_Incinerate,target) then
							return PQ_Incinerate, target
						end
					end
				end
				--INCINERATE

				--FEL FLAME
				if PQ_IsUseUnitSkill(target,PQ_FelFlame) then
					if GetTime() &amp;gt; PQ_Skills[PQ_FelFlame].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 and PQR_IsMoving(0.1) then
						if PQ_SpellCheck(PQ_FelFlame,target) then
							return PQ_FelFlame, target
						end
					end
				end
				--FEL FLAME
			end
		end
	end
	---------------------
	-- DESTRO ROTATION --
	---------------------

	-------------------
	-- DEMO ROTATION --
	-------------------
	function PQ_DemoRotation()
		--LIFETAP
		if PQ_InCombat then
			if PQ_GetPlayerHP() &amp;gt; 50 and PQ_GetPlayerUP() &amp;lt; 10  and UnitChannelInfo(PQ_player) == nil then
				if not UnitChannelInfo(PQ_player) then
					return PQ_LifeTap, PQ_player
				end
			end
		else
			if PQ_GetPlayerHP() &amp;gt; 50 and PQ_GetPlayerUP() &amp;lt; 85  and UnitChannelInfo(PQ_player) == nil then
				if not UnitChannelInfo(PQ_player) then
					return PQ_LifeTap, PQ_player
				end
			end
		end
		--LIFETAP

		--DEMONIC CIRCLE:SUMMON
		if IsRightShiftKeyDown() then
			return PQ_DCSummon, PQ_player
		end
		--DEMONIC CIRCLE:SUMMON

		--DEMONIC CIRCLE:TELEPORT
		if IsLeftAltKeyDown() and PQ_Buffs[PQ_DCSummon].hasBuff then
			return PQ_DCTeleport, PQ_player
		end
		--DEMONIC CIRCLE:TELEPORT

		--SUMMON FELGUARD
		if not PQ_InCombat then
			if PQ_PetID ~= PQ_FelGuard and PQ_SwapPets and GetTime() &amp;gt; PQ_Skills[PQ_FelGuardCast].nexttest then
				return PQ_FelGuardCast, nil
			end
		end
		--SUMMON FELGUARD

		--SUMMON FELHUNTER
		if PQ_Buffs[PQ_Soulburn].hasBuff and PQ_PetID ~= PQ_FelHunter and PQ_GetSpellCooldown(89751) &amp;lt;= 38 and PQ_GetSpellCooldown(89751) &amp;gt; 0 and PQ_SwapPets and GetTime() &amp;gt; PQ_Skills[PQ_FelHunterCast].nexttest then
			return PQ_FelHunterCast, nil
		end
		--SUMMON FELHUNTER

		--AUTOPAUSE
		local unitincombat = false
		for i, target in ipairs(PQ_PriorityList) do
			if target then
				if UnitAffectingCombat(target) and not UnitIsFriend(PQ_player, target) then unitincombat = true end
			end
		end
		
		if not PQ_InCombat and unitincombat == false then
			return 0, PQ_player
		end
		--AUTOPAUSE

		--PET FELSTORM
		if PQ_GetSpellCooldown(89751) &amp;lt;= 0 and PQ_PetID == 37481 then
			RunMacroText(&amp;apos;/petattack&amp;apos;)
			return 89751, nil
		end	
		--PET FELSTORM

		--IMMOLATION
		if IsLeftShiftKeyDown() then
			if GetTime() &amp;gt; PQ_Skills[PQ_ImmolationAura].nexttest and PQ_GetSpellCooldown(PQ_ImmolationAura) &amp;lt;= 0 and PQ_Buffs[PQ_Metamorphosis].hasBuff then
				return PQ_ImmolationAura, nil
			else
				return PQ_Immolation, nil
			end
		end
		--IMMOLATION

		--TARGET SELECT BY PRIORITY
		for i, target in ipairs(PQ_PriorityList) do
			if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) and not PQ_Units[target].immunity then

				--CURSE OF ELEMENTS
				if PQ_IsUseUnitSkill(target,PQ_CurseOfElements) and UnitLevel(target) == -1 then
					if GetTime() &amp;gt; PQ_Skills[PQ_CurseOfElements].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_CurseOfElements) then
							if PQ_IsUnitHasDebuff(target,PQ_CurseOfElements) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_CurseOfElements) &amp;lt; 1 then
									if PQ_SpellCheck(PQ_CurseOfElements,target) then
										return PQ_CurseOfElements, target
									end
								end
							elseif not UnitDebuffID(target,60433) and
							not UnitDebuffID(target,65142) and
							not UnitDebuffID(target,34889) and
							not UnitDebuffID(target,24844) and
							not UnitDebuffID(target,93068) and
							not UnitDebuffID(target,1490) then
								if PQ_SpellCheck(PQ_CurseOfElements,target) then
									return PQ_CurseOfElements, target
								end
							end
						end
					end
				end
				--CURSE OF ELEMENTS

				--METAMORPHOSIS
				if PQ_IsUseUnitSkill(target,PQ_Metamorphosis) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Metamorphosis].nexttest and PQ_GetSpellCooldown(PQ_Metamorphosis) &amp;lt;= 0 then
						if PQ_Buffs[PQ_Metamorphosis].check then
							return PQ_Metamorphosis, nil
						end
					end
				end
				--METAMORPHOSIS

				--SOULBURN
				if PQ_IsUseUnitSkill(target,PQ_Soulburn) and PQ_SoulShard &amp;gt; 0 then
					if GetTime() &amp;gt; PQ_Skills[PQ_Soulburn].nexttest and PQ_GetSpellCooldown(PQ_Soulburn) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_Soulburn].check and PQ_SpellCheck(PQ_SoulFire,target) then
							return PQ_Soulburn, nil
						end
					end
				end	
				--SOULBURN

				--BLOOD FURY
				if PQ_IsUseUnitSkill(target,PQ_BloodFury) then
					if GetTime() &amp;gt; PQ_Skills[PQ_BloodFury].nexttest and PQ_GetSpellCooldown(PQ_BloodFury) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_BloodFury].check and PQ_SpellCheck(PQ_Incinerate,target) then
							return PQ_BloodFury, nil
						end
					end
				end
				--BLOOD FURY

				--DEMON SOUL
				if PQ_IsUseUnitSkill(target,PQ_DemonSoul) then
					if GetTime() &amp;gt; PQ_Skills[PQ_DemonSoul].nexttest and PQ_GetSpellCooldown(PQ_DemonSoul) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_DemonSoulFG].check or PQ_Buffs[PQ_DemonSoulFH].check then
							return PQ_DemonSoul, nil
						end
					end
				end
				--DEMON SOUL

				--IMMOLATE
				if PQ_IsUseUnitSkill(target,PQ_Immolate) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Immolate].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_Immolate) then
							if PQ_IsUnitHasDebuff(target,PQ_Immolate) then
								PQ_Units[target].unitdebufflist[PQ_Immolate].endTime = select(7, UnitDebuffID(target, PQ_Immolate, PQ_player))
								if PQ_GetTimeLeftUnitDebuff(target,PQ_Immolate) - PQ_GetSpellCastTime(PQ_Immolate) &amp;lt; 1.5 then
									if PQ_SpellCheck(PQ_Immolate,target) then
										return PQ_Immolate, target
									end
								end
							else
								if PQ_SpellCheck(PQ_Immolate,target) then
									return PQ_Immolate, target
								end
							end
						end
					end
				end
				--IMMOLATE

				--CORRUPTION
				if PQ_IsUseUnitSkill(target,PQ_Corruption) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Corruption].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_Corruption) then
							if PQ_IsUnitHasDebuff(target,PQ_Corruption) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_Corruption) &amp;lt; 1.5 then
									if PQ_SpellCheck(PQ_Corruption,target) then
										return PQ_Corruption, target
									end
								end
							else
								if PQ_SpellCheck(PQ_Corruption,target) then
									return PQ_Corruption, target
								end
							end
						end
					end
				end
				--CORRUPTION

				--BANE OF DOOM
				if PQ_IsUseUnitSkill(target,PQ_BaneOfDoom) and UnitLevel(target) == -1 then
					if GetTime() &amp;gt; PQ_Skills[PQ_BaneOfDoom].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_BaneOfDoom) then
							if PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_BaneOfDoom) &amp;lt; 15 then
									if PQ_SpellCheck(PQ_BaneOfDoom,target) then
										return PQ_BaneOfDoom, target
									end
								end
							elseif not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_SpellCheck(PQ_BaneOfDoom,target) then
									return PQ_BaneOfDoom, target
								end
							end
						end
					end
				end
				--BANE OF DOOM

				--BANE OF AGONY
				if PQ_IsUseUnitSkill(target,PQ_BaneOfAgony) and UnitLevel(target) ~= -1 then
					if GetTime() &amp;gt; PQ_Skills[PQ_BaneOfAgony].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_BaneOfAgony) then
							if PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_BaneOfAgony) &amp;lt; 1 then
									if PQ_SpellCheck(PQ_BaneOfAgony,target) then
										return PQ_BaneOfAgony, target
									end
								end
							elseif not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfHavoc) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_SpellCheck(PQ_BaneOfAgony,target) then
									return PQ_BaneOfAgony, target
								end
							end
						end
					end
				end
				--BANE OF AGONY

				--DOOMGUARD
				if PQ_IsUseUnitSkill(target,PQ_Doomguard) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Doomguard].nexttest and PQ_GetSpellCooldown(PQ_Doomguard) &amp;lt;= 0 then
						return PQ_Doomguard, nil
					end
				end
				--DOOMGUARD

				--IMMOLATION AURA
				if PQ_IsUseUnitSkill(target,PQ_ImmolationAura) then
					if GetTime() &amp;gt; PQ_Skills[PQ_ImmolationAura].nexttest and PQ_GetSpellCooldown(PQ_ImmolationAura) &amp;lt;= 0 and PQ_Buffs[PQ_Metamorphosis].hasBuff and (PQ_Buffs[PQ_Metamorphosis].endTime - GetTime()) &amp;gt; 10 then	
						if PQ_RotationMode == PQ_RotationList[6] then
							return PQ_ImmolationAura, nil
						elseif CheckInteractDistance(target,2) then
							return PQ_ImmolationAura, nil
						end
					end
				end
				--IMMOLATION AURA

				--SHADOWFLAME
				if PQ_IsUseUnitSkill(target,PQ_Shadowflame) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Shadowflame].nexttest and PQ_GetSpellCooldown(PQ_Shadowflame) &amp;lt;= 0 then
						if PQ_RotationMode == PQ_RotationList[6] then
							return PQ_Shadowflame, nil
						elseif CheckInteractDistance(target,2) then
							return PQ_Shadowflame, nil
						end
					end
				end
				--SHADOWFLAME

				--HAND OF GULDAN
				if PQ_IsUseUnitSkill(target,PQ_HandOfGuldan) then
					if GetTime() &amp;gt; PQ_Skills[PQ_HandOfGuldan].nexttest and PQ_GetSpellCooldown(PQ_HandOfGuldan) &amp;lt;= 0 then	
						if PQ_SpellCheck(PQ_HandOfGuldan,target) then
							return PQ_HandOfGuldan, target
						end
					end
				end
				--HAND OF GULDAN

				--SOULFIRE
				if PQ_IsUseUnitSkill(target,PQ_SoulFire) then
					if GetTime() &amp;gt; PQ_Skills[PQ_SoulFire].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_Soulburn].hasBuff and (PQ_Buffs[PQ_MoltenCore].hasBuff == false or select(4,UnitBuffID(PQ_player,PQ_MoltenCore)) &amp;lt;= 1) then
							if PQ_SwapPets and PQ_PetID == 36043 then
								if PQ_SpellCheck(PQ_SoulFire,target) then
									return PQ_SoulFire, target
								end
							elseif not PQ_SwapPets then
								if PQ_SpellCheck(PQ_SoulFire,target) then
									return PQ_SoulFire, target
								end
							end
						elseif PQ_Buffs[PQ_Decimation].hasBuff and (PQ_Buffs[PQ_MoltenCore].hasBuff == false or select(4,UnitBuffID(PQ_player,PQ_MoltenCore)) &amp;lt;= 1) and not PQR_IsMoving(0.1) then
							if PQ_SpellCheck(PQ_SoulFire,target) then
								return PQ_SoulFire, target
							end
						end
					end
				end
				--SOULFIRE

				--INCINERATE
				if PQ_IsUseUnitSkill(target,PQ_Incinerate) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Incinerate].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_Incinerate,target) then
							return PQ_Incinerate, target
						end
					end
				end
				--INCINERATE

				--FEL FLAME
				if PQ_IsUseUnitSkill(target,PQ_FelFlame) then
					if GetTime() &amp;gt; PQ_Skills[PQ_FelFlame].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 and PQR_IsMoving(0.1) then
						if PQ_SpellCheck(PQ_FelFlame,target) then
							return PQ_FelFlame, target
						end
					end
				end
				--FEL FLAME
			end
		end
	end
	-------------------
	-- DEMO ROTATION --
	-------------------

	--------------------
	-- AFFLI ROTATION --
	--------------------
	function PQ_AffliRotation()
		--LIFETAP
		if PQ_InCombat then
			if PQ_GetPlayerHP() &amp;gt; 50 and PQ_GetPlayerUP() &amp;lt; 10  and UnitChannelInfo(PQ_player) == nil then
				if not UnitChannelInfo(PQ_player) then
					return PQ_LifeTap, PQ_player
				end
			end
		else
			if PQ_GetPlayerHP() &amp;gt; 50 and PQ_GetPlayerUP() &amp;lt; 85  and UnitChannelInfo(PQ_player) == nil then
				if not UnitChannelInfo(PQ_player) then
					return PQ_LifeTap, PQ_player
				end
			end
		end
		--LIFETAP

		--DEMONIC CIRCLE:SUMMON
		if IsRightShiftKeyDown() then
			return PQ_DCSummon, PQ_player
		end
		--DEMONIC CIRCLE:SUMMON

		--DEMONIC CIRCLE:TELEPORT
		if IsLeftAltKeyDown() and PQ_Buffs[PQ_DCSummon].hasBuff then
			return PQ_DCTeleport, PQ_player
		end	
		--DEMONIC CIRCLE:TELEPORT

		--AUTOPAUSE
		local unitincombat = false
		for i, target in ipairs(PQ_PriorityList) do
			if target then
				if UnitAffectingCombat(target) and not UnitIsFriend(PQ_player, target) then unitincombat = true end
			end
		end

		if not PQ_InCombat and unitincombat == false then
			return 0, PQ_player
		end
		--AUTOPAUSE

		--CHECK FOR SSE TARGET
		PQ_GotSSETarget = false
		for i, ssetarget in ipairs(PQ_PriorityList) do
			if ssetarget and UnitExists(ssetarget) and not UnitIsFriend(PQ_player, ssetarget) and PQ_IsUseUnitSkill(ssetarget,PQ_SoulSwapExhale) then
				PQ_GotSSETarget = true
			end
		end
		--CHECK FOR SSE TARGET

		--TARGET SELECT BY PRIORITY
		for i, target in ipairs(PQ_PriorityList) do
			if target and UnitExists(target) and not UnitIsFriend(PQ_player, target) and not PQ_Units[target].immunity then

				--SEED OF CORRUPTION
				if PQ_IsUseUnitSkill(target,PQ_SeedOfCorruption) and IsLeftShiftKeyDown() then
					if GetTime() &amp;gt; PQ_Skills[PQ_SeedOfCorruption].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_SeedOfCorruption,target) then
							return PQ_SeedOfCorruption, target
						end
					end
				end
				--SEED OF CORRUPTION

				--CURSE OF ELEMENTS
				if PQ_IsUseUnitSkill(target,PQ_CurseOfElements) and UnitLevel(target) == -1 then
					if GetTime() &amp;gt; PQ_Skills[PQ_CurseOfElements].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_CurseOfElements) then
							if PQ_IsUnitHasDebuff(target,PQ_CurseOfElements) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_CurseOfElements) &amp;lt; 1 then
									if PQ_SpellCheck(PQ_CurseOfElements,target) then
										return PQ_CurseOfElements, target
									end
								end
							elseif not UnitDebuffID(target,60433) and
							not UnitDebuffID(target,65142) and
							not UnitDebuffID(target,34889) and
							not UnitDebuffID(target,24844) and
							not UnitDebuffID(target,93068) and
							not UnitDebuffID(target,1490) then
								if PQ_SpellCheck(PQ_CurseOfElements,target) then
									return PQ_CurseOfElements, target
								end
							end
						end
					end
				end
				--CURSE OF ELEMENTS

				--SOUL SWAP EXHALE
				if PQ_IsUseUnitSkill(target,PQ_SoulSwapExhale) and PQ_Buffs[PQ_SoulSwapBuff].hasBuff then
					if GetTime() &amp;gt; PQ_Skills[PQ_SoulSwapExhale].nexttest and PQ_GetSpellCooldown(PQ_SoulSwap) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_SoulSwap,target) then
							return PQ_SoulSwap, target
						end
					end
				end
				--SOUL SWAP EXHALE

				--SOUL SWAP
				if PQ_IsUseUnitSkill(target,PQ_SoulSwap) and PQ_IsUnitHasDebuff(target,PQ_UAffliction) and PQ_IsUnitHasDebuff(target,PQ_Corruption) and PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
					if GetTime() &amp;gt; PQ_Skills[PQ_SoulSwap].nexttest and PQ_GetSpellCooldown(PQ_SoulSwap) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_SoulSwap,target) and PQ_GotSSETarget then
							return PQ_SoulSwap, target
						end
					end
				end
				--SOUL SWAP

				--HAUNT
				if PQ_IsUseUnitSkill(target,PQ_Haunt) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Haunt].nexttest and PQ_GetSpellCooldown(PQ_Haunt) &amp;lt;= 0 then
						PQ_CancelChannel = true
						if PQ_SpellCheck(PQ_Haunt,target) then
							PQ_CancelChannel = false
							return PQ_Haunt, target
						end
					end
				end
				--HAUNT

				--SOULBURN
				if PQ_IsUseUnitSkill(target,PQ_Soulburn) and PQ_SoulShard &amp;gt; 0 then
					if GetTime() &amp;gt; PQ_Skills[PQ_Soulburn].nexttest and PQ_GetSpellCooldown(PQ_Soulburn) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_Soulburn].check and PQ_SpellCheck(PQ_SoulFire,target) then
							return PQ_Soulburn, nil
						end
					end
				end	
				--SOULBURN

				--BLOOD FURY
				if PQ_IsUseUnitSkill(target,PQ_BloodFury) then
					if GetTime() &amp;gt; PQ_Skills[PQ_BloodFury].nexttest and PQ_GetSpellCooldown(PQ_BloodFury) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_BloodFury].check and PQ_SpellCheck(PQ_Incinerate,target) then
							return PQ_BloodFury, nil
						end
					end
				end
				--BLOOD FURY

				--DEMON SOUL
				if PQ_IsUseUnitSkill(target,PQ_DemonSoul) then
					if GetTime() &amp;gt; PQ_Skills[PQ_DemonSoul].nexttest and PQ_GetSpellCooldown(PQ_DemonSoul) &amp;lt;= 0 and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_DemonSoulFH].check then
							return PQ_DemonSoul, nil
						end
					end
				end
				--DEMON SOUL

				--UNSTABLE AFFLICTION
				if PQ_IsUseUnitSkill(target,PQ_UAffliction) then
					if GetTime() &amp;gt; PQ_Skills[PQ_UAffliction].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_GetSpellCooldown(PQ_SoulSwap) &amp;gt; 5 and PQ_GetSpellCooldown(PQ_SoulSwap) &amp;lt; 27 and PQ_IsUseUnitSkill(target,PQ_SoulSwapExhale) then
							if PQ_IsUseUnitDebuff(target,PQ_UAffliction) then
								if PQ_IsUnitHasDebuff(target,PQ_UAffliction) then
									PQ_Units[target].unitdebufflist[PQ_UAffliction].endTime = select(7, UnitDebuffID(target, PQ_UAffliction, PQ_player))
									if PQ_GetTimeLeftUnitDebuff(target,PQ_UAffliction) - PQ_GetSpellCastTime(PQ_UAffliction) &amp;lt; 1.5 then
										if PQ_SpellCheck(PQ_UAffliction,target) then
											return PQ_UAffliction, target
										end
									end
								else
									if PQ_SpellCheck(PQ_UAffliction,target) then
										return PQ_UAffliction, target
									end
								end
							end
						elseif not PQ_IsUseUnitSkill(target,PQ_SoulSwapExhale) then
							if PQ_IsUseUnitDebuff(target,PQ_UAffliction) then
								if PQ_IsUnitHasDebuff(target,PQ_UAffliction) then
									PQ_Units[target].unitdebufflist[PQ_UAffliction].endTime = select(7, UnitDebuffID(target, PQ_UAffliction, PQ_player))
									if PQ_GetTimeLeftUnitDebuff(target,PQ_UAffliction) - PQ_GetSpellCastTime(PQ_UAffliction) &amp;lt; 1.5 then
										if PQ_SpellCheck(PQ_UAffliction,target) then
											return PQ_UAffliction, target
										end
									end
								else
									if PQ_SpellCheck(PQ_UAffliction,target) then
										return PQ_UAffliction, target
									end
								end
							end
						end
					end
				end
				--UNSTABLE AFFLICTION

				--CORRUPTION
				if PQ_IsUseUnitSkill(target,PQ_Corruption) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Corruption].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_GetSpellCooldown(PQ_SoulSwap) &amp;gt; 5 and PQ_GetSpellCooldown(PQ_SoulSwap) &amp;lt; 27 and PQ_IsUseUnitSkill(target,PQ_SoulSwapExhale) then
							if PQ_IsUseUnitDebuff(target,PQ_Corruption) then
								if PQ_IsUnitHasDebuff(target,PQ_Corruption) then
									PQ_Units[target].unitdebufflist[PQ_Corruption].endTime = select(7, UnitDebuffID(target, PQ_Corruption, PQ_player))
									if PQ_GetTimeLeftUnitDebuff(target,PQ_Corruption) &amp;lt; 1.5 then
										if PQ_SpellCheck(PQ_Corruption,target) then
											return PQ_Corruption, target
										end
									end
								else
									if PQ_SpellCheck(PQ_Corruption,target) then
										return PQ_Corruption, target
									end
								end
							end
						elseif not PQ_IsUseUnitSkill(target,PQ_SoulSwapExhale) then
							if PQ_IsUseUnitDebuff(target,PQ_Corruption) then
								if PQ_IsUnitHasDebuff(target,PQ_Corruption) then
									PQ_Units[target].unitdebufflist[PQ_Corruption].endTime = select(7, UnitDebuffID(target, PQ_Corruption, PQ_player))
									if PQ_GetTimeLeftUnitDebuff(target,PQ_Corruption) &amp;lt; 1.5 then
										if PQ_SpellCheck(PQ_Corruption,target) then
											return PQ_Corruption, target
										end
									end
								else
									if PQ_SpellCheck(PQ_Corruption,target) then
										return PQ_Corruption, target
									end
								end
							end
						end
					end
				end
				--CORRUPTION

				--BANE OF DOOM
				if PQ_IsUseUnitSkill(target,PQ_BaneOfDoom) and PQ_IsUseUnitSkill(target,PQ_SoulSwap) and UnitLevel(target) == -1  and not PQ_GotSSETarget then
					if GetTime() &amp;gt; PQ_Skills[PQ_BaneOfDoom].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_IsUseUnitDebuff(target,PQ_BaneOfDoom) then
							if PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_BaneOfDoom) &amp;lt; 15 then
									if PQ_SpellCheck(PQ_BaneOfDoom,target) then
										return PQ_BaneOfDoom, target
									end
								end
							elseif not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_SpellCheck(PQ_BaneOfDoom,target) then
									return PQ_BaneOfDoom, target
								end
							end
						end
					elseif PQ_IsUseUnitSkill(target,PQ_BaneOfDoom) and UnitLevel(target) == -1 and not PQ_IsUseUnitSkill(target,PQ_SoulSwap) and not PQ_GotSSETarget then
						if PQ_IsUseUnitDebuff(target,PQ_BaneOfDoom) then
							if PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_GetTimeLeftUnitDebuff(target,PQ_BaneOfDoom) &amp;lt; 15 then
									if PQ_SpellCheck(PQ_BaneOfDoom,target) then
										return PQ_BaneOfDoom, target
									end
								end
							elseif not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
								if PQ_SpellCheck(PQ_BaneOfDoom,target) then
									return PQ_BaneOfDoom, target
								end
							end
						end
					end
				end
				--BANE OF DOOM

				--BANE OF AGONY
				if PQ_IsUseUnitSkill(target,PQ_BaneOfAgony) and (UnitLevel(target) ~= -1 or PQ_GotSSETarget) then
					if GetTime() &amp;gt; PQ_Skills[PQ_BaneOfAgony].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_GetSpellCooldown(PQ_SoulSwap) &amp;gt; 5 and PQ_GetSpellCooldown(PQ_SoulSwap) &amp;lt; 27 and PQ_IsUseUnitSkill(target,PQ_SoulSwapExhale) then
							if PQ_IsUseUnitDebuff(target,PQ_BaneOfAgony) then
								if PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) then
									if PQ_GetTimeLeftUnitDebuff(target,PQ_BaneOfAgony) &amp;lt; 1 then
										if PQ_SpellCheck(PQ_BaneOfAgony,target) then
											return PQ_BaneOfAgony, target
										end
									end
								elseif not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
									if PQ_SpellCheck(PQ_BaneOfAgony,target) then
										return PQ_BaneOfAgony, target
									end
								end
							end
						elseif not PQ_IsUseUnitSkill(target,PQ_SoulSwapExhale) then
							if PQ_IsUseUnitDebuff(target,PQ_BaneOfAgony) then
								if PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) then
									if PQ_GetTimeLeftUnitDebuff(target,PQ_BaneOfAgony) &amp;lt; 1 then
										if PQ_SpellCheck(PQ_BaneOfAgony,target) then
											return PQ_BaneOfAgony, target
										end
									end
								elseif not PQ_IsUnitHasDebuff(target,PQ_BaneOfDoom) and not PQ_IsUnitHasDebuff(target,PQ_BaneOfAgony) then
									if PQ_SpellCheck(PQ_BaneOfAgony,target) then
										return PQ_BaneOfAgony, target
									end
								end
							end
						end
					end
				end
				--BANE OF AGONY

				--DOOMGUARD
				if PQ_IsUseUnitSkill(target,PQ_Doomguard) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Doomguard].nexttest and PQ_GetSpellCooldown(PQ_Doomguard) &amp;lt;= 0 then
						return PQ_Doomguard, nil
					end
				end
				--DOOMGUARD

				--SOULFIRE
				if PQ_IsUseUnitSkill(target,PQ_SoulFire) then
					if GetTime() &amp;gt; PQ_Skills[PQ_SoulFire].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_Buffs[PQ_Soulburn].hasBuff then
							if PQ_SpellCheck(PQ_SoulFire,target) then
								return PQ_SoulFire, target
							end
						end
					end
				end
				--SOULFIRE

				--SHADOWFLAME
				if PQ_IsUseUnitSkill(target,PQ_Shadowflame) then
					if GetTime() &amp;gt; PQ_Skills[PQ_Shadowflame].nexttest and PQ_GetSpellCooldown(PQ_Shadowflame) &amp;lt;= 0 then
						if PQ_RotationMode == PQ_RotationList[6] then
							return PQ_Shadowflame, nil
						elseif CheckInteractDistance(target,2) then
							return PQ_Shadowflame, nil
						end
					end
				end
				--SHADOWFLAME

				--DRAIN SOUL
				if PQ_IsUseUnitSkill(target,PQ_DrainSoul) then
					if GetTime() &amp;gt; PQ_Skills[PQ_DrainSoul].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_DrainSoul,target) and PQ_GetTargetHP(target) &amp;lt; 25 then
							return PQ_DrainSoul, target
						end
					end
				end
				--DRAIN SOUL

				--SHADOW BOLT
				if PQ_IsUseUnitSkill(target,PQ_ShadowBolt) then
					if GetTime() &amp;gt; PQ_Skills[PQ_ShadowBolt].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 then
						if PQ_SpellCheck(PQ_ShadowBolt,target) then
							return PQ_ShadowBolt, target
						end
					end
				end
				--SHADOW BOLT

				--FEL FLAME
				if PQ_IsUseUnitSkill(target,PQ_FelFlame) then
					if GetTime() &amp;gt; PQ_Skills[PQ_FelFlame].nexttest and PQ_GetSpellCooldown(PQ_GCDSpell) &amp;lt;= 0 and PQR_IsMoving(0.1) then
						if PQ_SpellCheck(PQ_FelFlame,target) then
							return PQ_FelFlame, target
						end
					end
				end
				--FEL FLAME
			end
		end
	end
	--------------------
	-- AFFLI ROTATION --
	--------------------

	PQ_LIB_Warlock_Loaded = true
	if pq_debug and PQ_LIB_Warlock_Loaded then
		pq_printtodebug(&amp;apos;SUCESS&amp;apos;)
	else
		pq_printtodebug(&amp;apos;FAILED&amp;apos;)
	end
end</Lua><RecastDelay>0</RecastDelay><Target>Target</Target><CancelChannel>False</CancelChannel><SkipUnknown>True</SkipUnknown></Ability></WARLOCK>