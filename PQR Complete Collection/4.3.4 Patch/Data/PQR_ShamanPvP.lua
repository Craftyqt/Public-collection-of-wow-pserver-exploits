if not PQR_LoadedDataFile then
	PQR_LoadedDataFile = 1
	print("|cffFFBE69ShamanPvP Data File v1.1 - June 16, 2013|cffffffff")
end

	local config = {
		name	= "Resto PvP",
		author	= "Cpoworks",
		abilities	= { 
			{ 	name	= "Nature Swiftness",  newSection = true,
				enable	= true,
				tooltip	= "HP to use Nature Swiftness",
				widget	= { type = "numBox",
					value	= 25,
					step	= 5, 
				},
			},  
			{ 	name	= "Spirit Link Totem",  
				enable	= true,
				tooltip	= "HP to use Spirit link",
				widget	= { type = "numBox",
					value	= 20,
					step	= 5, 
				},
			},
			{ 	name	= "Mana Tide Totem",  
				enable	= true,
				tooltip	= "Mana to use Mana Tide",
				widget	= { type = "numBox",
					value	= 50,
					step	= 5, 
				},
			},
			{ 	name	= "Battlemasters",  
				enable	= false,
				tooltip	= "HP to use battlemasters. Must be in top trinket slot",
				widget	= { type = "numBox",
					value	= 30,
					step	= 5, 
				},
			},
			{ 	name	= "Healthstone", 
				enable	= true,
				widget	= { type = "numBox",
					value	= 30,
					step	= 5,
					tooltip	= "Set automatic Healthstone usage.",
				},
			},  
			{ 	name	= "Healing Sream Totem", newSection = true,
				enable	= true,
				widget	= { type = "numBox",
					value	= 85,
					step	= 5, 
				},
			},    
			{ 	name	= "Earth Shield",
				enable	= true,
				widget	= { type = "numBox",
					value	= 80,
					step	= 5, 
				},
			},  
			{ 	name	= "Riptide",
				enable	= true,
				widget	= { type = "numBox",
					value	= 98,
					step	= 2, 
				},
			},     
			{ 	name	= "Unleashed Elements",
				enable	= true,
				widget	= { type = "numBox",
					value	= 75,
					step	= 5, 
				},
			}, 
			{ 	name	= "Healing Wave",
				enable	= true,
				widget	= { type = "numBox",
					value	= 95,
					step	= 5, 
				},
			}, 
			{ 	name	= "Healing Surge",
				enable	= true,
				widget	= { type = "numBox",
					value	= 85,
					step	= 5, 
				},
			}, 
			{ 	name	= "Greater Healing Wave",
				enable	= false,
				widget	= { type = "numBox",
					value	= 85,
					step	= 5, 
				},
			},   
		},
		hotkeys = {
			{	name	= "Pause Rotation",
				enable	= true,
				hotkeys	= {'la'},
			},
			{	name	= "DPS key", 
				enable	= false,
				tooltip	= "Default is middle mouse",
				hotkeys	= {'ra'},
			},
			{	name	= "Hex key",
				enable	= false,
				tooltip	= "Default is mouse 4",
				hotkeys	= {'ra'},
			}, 
		},
	}
	CPOWORKS_RESTOPVP = PQI:AddRotation(config)


  -------------------------------------------
--Functions
-------------------------------------------
if not tLOS then tLOS={} end
if not fLOS then fLOS=CreateFrame("Frame") end

	function LineOfSight(target)
		local updateRate=1
		fLOS:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
		function fLOSOnEvent(self,event,...)
			if event=="COMBAT_LOG_EVENT_UNFILTERED" then
				local cLOG={...}
				if cLOG[2]=="SPELL_CAST_FAILED" then
					if cLOG[4]==UnitGUID("player") then 
						if cLOG[15]==SPELL_FAILED_LINE_OF_SIGHT then
							tinsert(tLOS,{unit=target,time=GetTime()})
						end
					end
				else
					table.sort(tLOS,function(x,y) return x.time>y.time end)
					for i=1,#tLOS do
						local time=tLOS[i].time or GetTime()
						if GetTime()>time+updateRate then
							tremove(tLOS,i)
						end
					end
				end
			end
		end
		fLOS:SetScript("OnEvent",fLOSOnEvent)
		for i=1,#tLOS do
			if tLOS[i].unit==target then
				return true
			end
		end
	end

 
 
--CastSpell--
function _castSpell(spellid,tar)
	if UnitCastingInfo("player") == nil
	and UnitChannelInfo("player") == nil
--	and IsPlayerSpell(spellid) == true
	and cdRemains(spellid) == 0
	then
		if tar ~= nil
		and rangeCheck(spellid,tar) == nil
			then
			return false
		elseif tar ~= nil
		and rangeCheck(spellid,tar) == true
			then
			CastSpellByName(GetSpellInfo(spellid),tar)
			return true
		elseif tar == nil
			then
			CastSpellByName(GetSpellInfo(spellid))
			return true
		else
	return false
	end
end
end

--Combat and Melee Check--
function inMelee()
	if UnitAffectingCombat("player") ~= nil
	and IsSpellInRange(GetSpellInfo(73899),"target") == 1
	and UnitExists("target") ~= nil
	and UnitCanAttack("player","target") ~= nil
	then return true
	end
end

--Combat Check--
function inCombat()
if UnitAffectingCombat("player") ~= nil
	then
		return true
	end
end

--Get HP simple--
function getHp(unit)
if UnitExists(unit) ~= nil
	then
		return 100 * UnitHealth(unit) / UnitHealthMax(unit)
	end
end

--Range Check Simple--
function rangeCheck(spellid,unit)
if IsSpellInRange(GetSpellInfo(spellid),unit) == 1
then
	return true
end
end


--Amount of Cooldown that remains--
function cdRemains(spellid)
	if select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime()) > 0
		then return select(2,GetSpellCooldown(spellid)) + (select(1,GetSpellCooldown(spellid)) - GetTime())
	else return 0
	end
end

--Function Check if unit is CC'ed--
local dispellableCCids 			= {   
	44572,		-- Deep Freeze
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	122,		-- Frost Nova
	82691,		-- Ring of Frost
	853,		-- Hammer of Justice
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	5782,		-- Fear 
	5484,		-- Howl of Terror
	3355,		-- Freezing Trap
	
	589
}
function dispellableCC(unit)
for i=1,#dispellableCCids do
	if UnitDebuffID(unit,dispellableCCids[i]) ~= nil
		then
			return true
		end
	end
end


--Function Check Snares--
local PvPslows 			= {
	45524,		-- Chains of Ice
	50435,		-- Chilblains
	115000,		-- Remorseless Winter
	50259,		-- Dazed 
	58180,		-- Infected Wounds
	61391,		-- Typhoon
	127797,		-- Ursol's Vortex
	82941,		-- Ice Trap (Hunter)
	135299,		-- IceTrap Debuff
	35101,		-- Concussive Barrage
	5116,		-- Concussive Shot
	61394,		-- Frozen Wake 
	13810,		-- Ice Trap
	50433,		-- Ankle Crack 
	54644,		-- Frost Breath 
	121288,		-- Chilled 
	120,		-- Cone of Cold
	116,		-- Frostbolt
	44614,		-- Frostfire Bolt
	113092,		-- Frost Bomb
	31589,		-- Slow
	116095,		-- Disable
	118585,		-- Leer of the Ox
	123727,		-- Dizzying Haze
	123586,		-- Flying Serpent Kick
	110300,		-- Burden of Guilt
	63529,		-- Dazed - Avenger's Shield
	20170,		-- Seal of Justice
	15407,		-- Mind Flay
	3409,		-- Crippling Poison
	26679,		-- Deadly Throw
	119696,		-- Debilitation
	3600,		-- Earthbind 
	77478,		-- Earthquake 
	8034,		-- Frostbrand Attack
	8056,		-- Frost Shock
	51490,		-- Thunderstorm
	18223,		-- Curse of Exhaustion
	47960,		-- Shadowflame
	1715,		-- Hamstring
	12323,		-- Piercing Howl
	1604		-- Dazed 

				}
function isSlowed(unit)
for i=1,#PvPslows do
	if UnitDebuffID(unit,PvPslows[i]) ~= nil
		then
			return true
		end
	end
end


--Function Check Slow Immunes--
local immuneToSlowID 	= {
					-- DEATH KNIGHT
					-- DRUID
					-- HUNTER (Master's Call / Bestial Wrath)
						54216,
						19574,
					-- MAGE (Ice Block)
						45438,
					-- MONK
					-- PALADIN (Hand of Freedom / Hand of Protection / Divine Shield)
						1044,
						1022,
						642,
					-- PRIEST (Dispersion)
						47585,
					-- ROGUE
					-- SHAMAN (Windwalk Totem)
						114896,
					-- WARLOCK
					-- WARRIOR (Bladestorm)
						46924
				}
function immuneToSlow(unit)
for i=1,#immuneToSlowID do
	if UnitBuffID(unit,immuneToSlowID[i]) ~= nil
		then
			return true
		end
	end
end


--Function Check Immunities--
local immuneID			= {
						110700, --Divine Shield
						1022, 	--Hand of Protection
						45438, 	--Ice Block
						31224,	--Cloak of Shadows
						19263, 	--Deterrence
						97417	--BrittleBarrier
}
function isImmune(unit)
	for i=1,#immuneID do
		if UnitBuffID(unit,immuneID[i]) ~= nil
			then
				return true
			end
		end
end


--Function Check Attack Power Buff--
local apBuff 			= {
							57330,	--Horn of Winter
							19506	--Trueshot Aura
							}
function hasApBuff()
for i=1,#apBuff do
	if UnitBuffID("player",apBuff[i]) ~= nil
		then
			return true
		end
	end
end

--Function Check if unit is CC'ed--
local ccIDs 			= { 
	108194,		-- Asphyxiate
	115001,		-- Remorseless Winter
	91800,		-- Gnaw
	91797,		-- Monstrous Blow (Dark Transformation)
	102795,		-- Bear Hug
	33786,		-- Cyclone
	99,			-- Disorienting Roar
	2637,		-- Hibernate
	22570,		-- Maim
	5211,		-- Mighty Bash
	9005,		-- Pounce
	110698,		-- Hammer of Justice 
	113004,		-- Intimidating Roar 
	113056,		-- Intimidating Roar 
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	1513,		-- Scare Beast
	19503,		-- Scatter Shot
	19386,		-- Wyvern Sting
	90337,		-- Bad Manner 
	24394,		-- Intimidation
	50519,		-- Sonic Blast 
	56626,		-- Sting 
	118271,		-- Combustion Impact
	44572,		-- Deep Freeze
	31661,		-- Dragon's Breath
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	82691,		-- Ring of Frost
	123393,		-- Breath of Fire 
	126451,		-- Clash
	122242,		-- Clash 
	119392,		-- Charging Ox Wave
	119381,		-- Leg Sweep
	115078,		-- Paralysis
	105421,		-- Blinding Light
	115752,		-- Blinding Light 
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	119072,		-- Holy Wrath
	20066,		-- Repentance
	10326,		-- Turn Evil
	113506,		-- Cyclone 
	605,		-- Dominate Mind
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror 
	9484,		-- Shackle Undead
	87204,		-- Sin and Punishment
	2094,		-- Blind
	1833,		-- Cheap Shot
	1776,		-- Gouge
	408,		-- Kidney Shot
	113953,		-- Paralysis 
	6770,		-- Sap
	76780,		-- Bind Elemental
	77505,		-- Earthquake
	51514,		-- Hex
	118905,		-- Static Charge 
	118345,		-- Pulverize
	710,		-- Banish
	54786,		-- Demonic Leap
	5782,		-- Fear 
	118699,		-- Fear
	5484,		-- Howl of Terror
	6789,		-- Mortal Coil
	30283,		-- Shadowfury
	104045,		-- Sleep 
	89766,		-- Axe Toss 
	115268,		-- Mesmerize 
	6358,		-- Seduction 
	7922,		-- Charge Stun
	118895,		-- Dragon Roar
	5246,		-- Intimidating Shout 
	20511,		-- Intimidating Shout 
	132168,		-- Shockwave
	105771,		-- Warbringer
	107079,		-- Quaking Palm
	13327,		-- Reckless Charge
	20549		-- War Stomp
}
function hasCC(unit)
for i=1,#ccIDs do
	if UnitDebuffID(unit,ccIDs[i]) ~= nil
		then
			return true
		end
	end
end					

--Function check if rooted--
local roots				= {
						96294,	--Chains Of Ice
						91807,	--ShamblingRush
						339,		-- Entangling Roots
						19975,		-- Entangling Roots (Nature's Grasp)
						45334,		-- Immobilized (Wild Charge - Bear)
						102359,		-- Mass Entanglement
						110693,		-- Frost Nova (Mage)
						19185,		-- Entrapment
						128405,		-- Narrow Escape
						50245,		-- Pin (Crab)
						54706,		-- Venom Web Spray (Silithid)
						4167,		-- Web (Spider)
						122,		-- Frost Nova
						111340,		-- Ice Ward
						116706,		-- Disable
						113275,		-- Entangling Roots (Symbiosis)
						123407,		-- Spinning Fire Bloss
						113275,		-- Entangling Roots (Symbiosis)
						87194,		-- Glyph of Mind Blast
						114404,		-- Void Tendril's Grasp
						115197,		-- Partial Paralysis
						64695,		-- Earthgrab (Earthgrab Totem)
						63685,		-- Freeze (Frozen Power)
						107566,		-- Staggering Shout
						39965,		-- Frost Grenade
						55536,		-- Frostweave Net
						13099		-- Net-o-Matic
}
function hasRoot(unit)
for i=1,#roots do
	if UnitDebuffID(unit,roots[i]) ~= nil
		then
			return true
		end
	end
end


local Stun = {
	-- Death Knight
	108194,		-- Asphyxiate
	115001,		-- Remorseless Winter
	-- Death Knight Ghoul
	91800,		-- Gnaw
	91797,		-- Monstrous Blow (Dark Transformation)
	-- Druid
	102795,		-- Bear Hug
	33786,		-- Cyclone
	99,		-- Disorienting Roar
	2637,		-- Hibernate
	22570,		-- Maim
	5211,		-- Mighty Bash
	9005,		-- Pounce
	--[dontknow] = "Snare",		-- Wild Mushroom: Detonate
	-- Druid Symbiosis
	110698,		-- Hammer of Justice (Paladin)
	113004,		-- Intimidating Roar [Fleeing in fear] (Warrior)
	113056,		-- Intimidating Roar [Cowering in fear] (Warrior)
	-- Hunter
	117526,		-- Binding Shot
	3355,		-- Freezing Trap
	1513,		-- Scare Beast
	19503,		-- Scatter Shot
	19386,		-- Wyvern Sting
	-- Hunter Pets
	90337,		-- Bad Manner (Monkey)
	24394,		-- Intimidation
	50519,		-- Sonic Blast (Bat)
	56626,		-- Sting (Wasp)
	-- Mage
	118271,		-- Combustion Impact
	44572,		-- Deep Freeze
	31661,		-- Dragon's Breath
	118,		-- Polymorph
	61305,		-- Polymorph: Black Cat
	28272,		-- Polymorph: Pig
	61721,		-- Polymorph: Rabbit
	61780,		-- Polymorph: Turkey
	28271,		-- Polymorph: Turtle
	82691,		-- Ring of Frost
	-- Monk
	123393,		-- Breath of Fire (Glyph of Breath of Fire)
	126451,		-- Clash
	122242,		-- Clash (not sure which one is right)
	119392,		-- Charging Ox Wave
	119381,		-- Leg Sweep
	115078,		-- Paralysis
	-- Paladin
	105421,		-- Blinding Light
	115752,		-- Blinding Light (Glyph of Blinding Light)
	105593,		-- Fist of Justice
	853,		-- Hammer of Justice
	119072,		-- Holy Wrath
	20066,		-- Repentance
	10326,		-- Turn Evil
	-- Priest
	113506,		-- Cyclone (Symbiosis)
	605,		-- Dominate Mind
	64044,		-- Psychic Horror
	8122,		-- Psychic Scream
	113792,		-- Psychic Terror (Psyfiend)
	9484,		-- Shackle Undead
	87204,		-- Sin and Punishment
	-- Rogue
	2094,		-- Blind
	1833,		-- Cheap Shot
	1776,		-- Gouge
	408,		-- Kidney Shot
	113953,		-- Paralysis (Paralytic Poison)
	6770,		-- Sap
	-- Shaman
	76780,		-- Bind Elemental
	77505,		-- Earthquake
	51514,		-- Hex
	118905,		-- Static Charge (Capacitor Totem)
	-- Shaman Primal Earth Elemental
	118345,		-- Pulverize
	-- Warlock
	710,		-- Banish
	111397,		-- Blood Fear - is this actually used? please test
	54786,		-- Demonic Leap (Metamorphosis)
	--5782,		-- Fear
	118699,		-- Fear
	5484,		-- Howl of Terror
	6789,		-- Mortal Coil
	30283,		-- Shadowfury
	104045,		-- Sleep (Metamorphosis)
	-- Warlock Pets
	89766,		-- Axe Toss (Felguard/Wrathguard)
	115268,		-- Mesmerize (Shivarra)
	6358,		-- Seduction (Succubus)
	-- Warrior
	7922,		-- Charge Stun
	--96273,		-- Charge Stun?
	118895,		-- Dragon Roar
	5246,		-- Intimidating Shout (Cowering in fear)
	20511,		-- Intimidating Shout (Cowering in fear)
	--97933,		-- Intimidating Shout (Cowering in fear) - used?
	--97934,		-- Intimidating Shout (Intimidated) - used?
	--46968,		-- Shockwave?
	132168,		-- Shockwave
	105771,		-- Warbringer
	-- Other
	30217,		-- Adamantite Grenade
	67769,		-- Cobalt Frag Bomb
	30216,		-- Fel Iron Bomb
	107079,		-- Quaking Palm
	13327,		-- Reckless Charge
	20549		-- War Stomp
}



function hasStun(unit)
for i=1,#Stun do
	if UnitDebuffID(unit,Stun[i]) ~= nil
		then
			return true
		end
	end
end






local GroundCast		= { 
					-- DEATH KNIGHT
					-- DRUID
						33786,		-- Cyclone 
					-- HUNTER
					-- MAGE
						28272,		-- Pig
						118,		-- Sheep
						61305,		-- Cat
						61721,		-- Rabbit
						61780,		-- Turkey
						28271,		-- Turtle  
					-- MONK
					-- PALADIN
						20066,		-- Repentance 
					-- PRIEST  
					-- ROGUE
					-- SHAMAN
						51514,		-- Hex  
					-- WARLOCK
						5782,		-- Fear
						118699,		-- Fear
						116858		-- Chaos Bolt 
					-- WARRIOR
}
	

function UseGrounding(unit)
	if UnitCastingInfo(unit) ~= nil
	and UnitIsEnemy("player", unit) ~= nil  
	and select(2,GetSpellCooldown(8177)) == 0  then
		for i=1, #GroundCast do
			if UnitCastingInfo(unit) == GetSpellInfo(GroundCast[i]) then
				return true
			end
		end 
	end
end




--Custom Target Tables--							
arenaTars				= { "arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
							}
custTars 				= {"target",
							"focus",
							"arena1",
							"arena2",
							"arena3",
							"arena4",
							"arena5"
						 }					 
totemTars 				= {"Spirit Link Totem",
						"Healing Tide Totem",
						"Mana Tide Totem",
						"Capacitor Totem",
						"Earthgrab Totem",
						"Earthbind Totem",
						"Stone Bulwark Totem"
						}
						
---GroupInfo--
function HaveBuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local buff = select(7,UnitBuff(UnitID,spell,rank,Filter)) 
      if buff and ( buff == 0 or buff - GetTime() > TimeLeft ) then return true end
    end
  end
end

function HaveDebuff(UnitID,SpellID,TimeLeft,Filter) 
  if not TimeLeft then TimeLeft = 0 end
  if type(SpellID) == "number" then SpellID = { SpellID } end 
  for i=1,#SpellID do 
    local spell, rank = GetSpellInfo(SpellID[i])
    if spell then
      local debuff = select(7,UnitDebuff(UnitID,spell,rank,Filter)) 
      if debuff and ( debuff == 0 or debuff - GetTime() > TimeLeft ) then return true end
    end
  end
end
 
 
function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) + incomingheals ) / UnitHealthMax(t)
end

function CanHeal(t)
  if UnitInRange(t) and UnitCanCooperate("player",t) and not UnitIsEnemy("player",t) 
  and not UnitIsCharmed(t) and not UnitIsDeadOrGhost(t) and not PQR_IsOutOfSight(t) 
  then return true end 
end

function HealEngine()
  members, group = { { Unit = "player", HP = CalculateHP("player") } }, { low = 0, tanks = { } } 
  group.type = GetNumRaidMembers() > 0 and "raid" or "party" 
  group.number = group.type == "raid" and GetNumRaidMembers() or GetNumPartyMembers() 
  for i=1,group.number do if CanHeal(group.type..i) then 
    local unit, hp = group.type..i, CalculateHP(group.type..i) 
    table.insert( members,{ Unit = unit, HP = hp } ) 
    if hp < 90 then group.low = group.low + 1 end 
    if UnitGroupRolesAssigned(unit) == "TANK" then table.insert(group.tanks,unit) end 
  end end 
  if group.type == "raid" and #members > 1 then table.remove(members,1) end 
  table.sort(members, function(x,y) return x.HP < y.HP end)
  local customtarget = CanHeal("target") and "target" or CanHeal("mouseover") and GetMouseFocus() ~= WorldFrame and "mouseover" 
  if customtarget then table.sort(members, function(x) return UnitIsUnit(customtarget,x.Unit) end) end 
end
---EndGroupInfo
  

  -- Checks if our Cleanse will have a valid Debuff to Cleanse
  function ValidDispel(t)
  	local HasValidDispel = false
  	local i = 1
  	local debuff = UnitDebuff(t, i)
  	while debuff do
  		local debuffType = select(5, UnitDebuff(t, i))
  		if debuffType == "Curse" then
  			HasValidDispel = true
  		end
  		i = i + 1
  		debuff = UnitDebuff(t, i)
  	end
  	return HasValidDispel
  end
  
  
  
  
  