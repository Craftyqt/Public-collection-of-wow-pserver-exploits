-------------------------------------------------------------------------------
-- Functions & Variables
-------------------------------------------------------------------------------
if not PQR_LoadedDataFile then
	PQR_LoadedDateFile = 1
	print("|cffFFBE69Nova Data File v1.0 - 3/30/2012|cffffffff")
elseif PQR_LoadedDataFile then
	print("|cffFFBE69Reloading: Nova Data File 1.0|cffffffff")
end

PQ_UnitInfo = nil
function PQ_UnitInfo(t)
	--Takes an input of UnitID (player, target, pet, mouseover, etc) and gives you their most useful info
	local TManaActual = UnitPower(t)
	local TMana = 100 * UnitPower(t) / UnitPowerMax(t)
	local THealthActual = UnitHealth(t)
	local THealth = 100 * UnitHealth(t) / UnitHealthMax(t)
	local myClassPower = 0
	local PQ_Class = select(2, UnitClass(t))
--	local PQ_UnitLevel = UnitLevel(t)
--	local PQ_CombatCheck = UnitAffectingCombat(t)
	if PQ_Class == "PALADIN" then
		myClassPower = UnitPower("player", 9)
	elseif PQ_Class == "WARLOCK" then
		myClassPower = UnitPower("player", 7)
	elseif PQ_Class == "DRUID" and GetPrimaryTalentTree() == 2 then
		myClassPower = UnitPower("player", 8)
	elseif PQ_Class == "MONK"  then
		myClassPower = UnitPower("player", 12)
	end
	--              1             2                  3          4                      5                  6               7                     8
	return THealth, THealthActual, TMana, TManaActual, myClassPower--, PQ_Class, PQ_UnitLevel, PQ_CombatCheck
end

if GetSpecialization then
	PQR_SavedSpec = GetSpecialization()
else
	PQR_SavedSpec = GetPrimaryTalentTree()
end
PQR_LevelInfo = UnitLevel("player")


PQ_CastingInfo = nil
function PQ_CastingInfo(PQ_Unit)
	local PQ_Casting = nil
	local percentRemaining = nil
	local secondsRemaining = nil

	if UnitCastingInfo(PQ_Unit) then
		local spellName,_,_,_,startTimer,endTimer = UnitCastingInfo(PQ_Unit)
		local durationTimer = ((endTimer) - (startTimer))
		local timeRemaining = (endTimer - GetTime() * 1000)
		percentRemaining = (100 - ((timeRemaining/durationTimer) * 100))
		secondsRemaining = endTimer/1000 - GetTime()
		PQ_Casting = spellName
		-- Name of spell, % remaining on spell, seconds remaining on spell
		return PQ_Casting, percentRemaining, secondsRemaining
	else return false end
end

-------------------------------------------------------------------------------
-- Debug & Notification Frame
-------------------------------------------------------------------------------
-- Update Debug Frame
PQ_NotifyFrame = nil
function PQ_NotifyFrame_OnUpdate()
	if (PQ_NotifyFrameTime < GetTime() - 5) then
		local alpha = PQ_NotifyFrame:GetAlpha()
		if (alpha ~= 0) then PQ_NotifyFrame:SetAlpha(alpha - .02) end
		if (aplha == 0) then PQ_NotifyFrame:Hide() end
	end
end

-- Debug messages.
function PQ_Notify(message)
	PQ_NotifyFrame.text:SetText(message)
	PQ_NotifyFrame:SetAlpha(1)
	PQ_NotifyFrame:Show()
	PQ_NotifyFrameTime = GetTime()
end

-- Debug Notification Frame
PQ_NotifyFrame = CreateFrame('Frame')
PQ_NotifyFrame:ClearAllPoints()
PQ_NotifyFrame:SetHeight(300)
PQ_NotifyFrame:SetWidth(300)
PQ_NotifyFrame:SetScript('OnUpdate', PQ_NotifyFrame_OnUpdate)
PQ_NotifyFrame:Hide()
PQ_NotifyFrame.text = PQ_NotifyFrame:CreateFontString(nil, 'BACKGROUND', 'PVPInfoTextFont')
PQ_NotifyFrame.text:SetAllPoints()
PQ_NotifyFrame:SetPoint('CENTER', 0, 200)
PQ_NotifyFrameTime = 0

-------------------------------------------------------------------------------
-- Target & Environmental Globals and Tables
-------------------------------------------------------------------------------
PQ_Immunity = {
	642,45438,31224,23920,33786,19263,97417,97977,105256,105409,
	105465,108568,109552,109553,109554,109560,109561,109562,110892,110893
}
PQ_FL = {110070, 105925, 109075, 110079, 110069, 110070, 110080, 110068, 110078}
PQ_SN = {110139,110140,110141,106791,109599,106794,109597,109598}
PQ_HOT = {109417,109416,109415,106371}
PQ_SP = {105479, 109364, 109362}


-------------------------------------------------------------------------------
-- Buff Globals
-------------------------------------------------------------------------------
-- Temporary Buffs
PQ_Lightweave		= 75170
PQ_PowerTorrent		= 74241
PQ_VolcanicPotion	= 79476
PQ_SynapseSprings	= 96230
PQ_BloodLust		= 2825
PQ_Heroism			= 32182
PQ_TimeWarp			= 80353
PQ_Hysteria			= 90355
PQ_Zerk				= 26297

-- Temporary Buff Table
PQ_TemporaryBuffs = {
	{spellID = PQ_Lightweave, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_PowerTorrent, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_VolcanicPotion, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_SynapseSprings, check = true, hasBuff = false, endTime = nil}
}

-------------------------------------------------------------------------------
-- Paladin Globals
-------------------------------------------------------------------------------
if select(2, UnitClass("player")) == "PALADIN" then
	print("|cffFFBE69Loading |cffF48CBAPaladin|cffFFBE69 Tables ...|cffffffff")
	
	-- Constants
	PQ_HolyLight 		=	 635
	PQ_DivineLight 		=	 82326
	PQ_FlashofLight 	=	 19750
	PQ_HolyRadiance 	=	 82327
	PQ_HolyShock 		=	 20473
	PQ_WordofGlory 		=	 85673
	PQ_LightofDawn 		=	 85222
	PQ_Exorcism 		=  	 879
	PQ_Judgement 		=	 20271
	PQ_DivineShield 	=	 642 
	PQ_DivineProtection = 	 498 
	PQ_AuraMastery 		=	 31821 
	PQ_BeaconofLight 	=	 53563
	PQ_Cleanse 			=	 4987
	PQ_HandofFreedom 	=	 1044
	PQ_HandofProtection =	 1022
	PQ_HandofSacrifice	= 	 6940
	PQ_HandofSalvation	=	 1038
	PQ_GoAK 			=	 86150
	PQ_DivineFavor	 	=	 31842
	PQ_AvengingWrath 	=	 31884
	PQ_DivinePlea	 	=	 54428
	PQ_LayonHands 		=	 633 
	PQ_SealofInsight 	=	 20165
	PQ_CrusaderStrike 	=	 35395
	PQ_SoR				=	 20154
	PQ_SoI				=	 20165
	PQ_SoT				=	 31801
	PQ_SoJ				=	 20164
	PQ_AvengersShield 	=	 31935
	PQ_HandofReckoning 	=	 62124
	PQ_SotR 			=	 53600
	PQ_Consecrate 		=	 26573
	PQ_HotR 			=	 53595
	PQ_HoJ				=	 853
	PQ_HoW				=	 24275
	PQ_BoM				=	 19740
	PQ_BoK				=	 20217
	
	-- Paladin Skill table
	PQ_Spell = {
		[PQ_HolyLight] 			=	 { check = true, castTime = 2.5, isKnown = IsSpellKnown(635), targetHealth = 92, overHealLimit = 107, overRide = false },
		[PQ_DivineLight]		=	 { check = true, castTime = 2.5, isKnown = IsSpellKnown(82326), targetHealth = 58, checkArena = false, overHealLimit = 112, overRide = false},
		[PQ_FlashofLight]		=	 { check = true, castTime = 1.5, isKnown = IsSpellKnown(19750), targetHealth = 32, whileMovingHealth = 65, checkArena = false, overHealLimit = 102, overRide = false },
		[PQ_HolyRadiance]		=	 { check = true, castTime = 2.5, isKnown = IsSpellKnown(82327), targetNumber = 4, targetHealth = 85, overRide = false },
		[PQ_HolyShock] 			=	 { check = true, castTime = 0, isKnown = IsSpellKnown(20473), targetHealth = 95, overRide = false },
		[PQ_WordofGlory] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(85673), targetHealth = 82, overRide = false },
		[PQ_LightofDawn] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(85222), targetNumber = 3, overRide = false },
		[PQ_Exorcism] 			=	 { check = false, castTime = 1.5, isKnown = IsSpellKnown(879) },
		[PQ_DivineShield] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(642), playerHealth = 22 },
		[PQ_DivineProtection] 	=	 { check = true, castTime = 0, isKnown = IsSpellKnown(498), playerHealth = 45 },
		[PQ_AuraMastery] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(31821) },
		[PQ_BeaconofLight] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(53563), targetName = "" },
		[PQ_Cleanse] 			=	 { check = true, castTime = 0, isKnown = IsSpellKnown(4987), prioDispel = 0 },
		[PQ_HandofFreedom] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(1044) },
		[PQ_HandofProtection] 	=	 { check = false, castTime = 0, isKnown = IsSpellKnown(1022), targetHealth = 40 },
		[PQ_HandofSalvation] 	=	 { check = true, castTime = 0, isKnown = IsSpellKnown(1038) },
		[PQ_HandofSacrifice] 	=	 { check = true, castTime = 0, isKnown = IsSpellKnown(6940), targetHealth = 40 },
		[PQ_GoAK] 				=	 { check = true, castTime = 0, isKnown = IsSpellKnown(86150), targetHealth = 30 },
		[PQ_DivineFavor] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(31842), targetHealth = 38 },
		[PQ_AvengingWrath] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(31884), targetHealth = 45 },
		[PQ_DivinePlea] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(54428), playerMana = 80 },
		[PQ_CrusaderStrike] 	=	 { check = true, isKnown = IsSpellKnown(35395) },
		[PQ_Judgement] 			=	 { check = true, isKnown = IsSpellKnown(20271) },
		[PQ_SoR] 				=	 { check = true, isKnown = IsSpellKnown(20154) },
		[PQ_SoI] 				=	 { check = true, isKnown = IsSpellKnown(20165) },
		[PQ_SoT] 				=	 { check = true, isKnown = IsSpellKnown(31801) },
		[PQ_SoJ] 				=	 { check = true, isKnown = IsSpellKnown(20164) },
		[PQ_AvengersShield] 	=	 { check = true, isKnown = IsSpellKnown(31935) },
		[PQ_HandofReckoning] 	=	 { check = true, isKnown = IsSpellKnown(62124) },
		[PQ_Consecrate] 		=	 { check = true, isKnown = IsSpellKnown(26573) },
		[PQ_HotR] 				=	 { check = true, isKnown = IsSpellKnown(53595) },
		[PQ_SotR] 				=	 { check = true, isKnown= IsSpellKnown(53600) },
		[PQ_HoW] 				=	 { check = true, isKnown = IsSpellKnown(24275) },
		[PQ_HoJ] 				=	 { check = true, isKnown = IsSpellKnown(853) },
		[PQ_BoM] 				=	 { check = true, isKnown = IsSpellKnown(19740) },
		[PQ_BoK] 				=	 { check = true, isKnown= IsSpellKnown(20217) },
		[PQ_LayonHands]			=	 { check = true, castTime = 0, isKnown = IsSpellKnown(633), targetHealth = 20 }
	}
-------------------------------------------------------------------------------
-- Priest Globals
-------------------------------------------------------------------------------
elseif select(2, UnitClass("player")) == "PRIEST" then
	print("|cffFFBE69Loading |cffffffffPriest|cffFFBE69 Tables ...|cffffffff")
	
	-- Skill IDs
	PQ_SWP		= 589
	PQ_DP		= 2944
	PQ_MB		= 8092
	PQ_MF		= 15407
	PQ_MD		= 32375
	PQ_SWD		= 32379
	PQ_SF		= 34433
	PQ_VT		= 34914
	PQ_Disp		= 47585
	PQ_MSear	= 48045
	PQ_MS		= 73510
	PQ_AA		= 87151
	-- Buff IDs
	PQ_IF		= 588
	PQ_VE		= 15286
	PQ_SForm	= 15473
	PQ_PWF		= 21562
	PQ_SP		= 27683
	PQ_DA		= 87118
	PQ_MM		= 87160
	
	-- Spell Table
	PQ_PriestSpells = {
		[PQ_SWP]		= {check = true, known = IsSpellKnown(589)},
		[PQ_DP]			= {check = true, known = IsSpellKnown(2944)},
		[PQ_MB]			= {check = true, known = IsSpellKnown(8092)},
		[PQ_MF]			= {check = true, known = IsSpellKnown(15407)},
		[PQ_MD]			= {check = true, known = IsSpellKnown(32375)},
		[PQ_SWD]		= {check = true, known = IsSpellKnown(32379)},
		[PQ_SF]			= {check = true, known = IsSpellKnown(34433)},
		[PQ_VT]			= {check = true, known = IsSpellKnown(34914)},
		[PQ_Disp]		= {check = true, known = IsSpellKnown(47585)},
		[PQ_MSear]		= {check = true, known = IsSpellKnown(48045)},
		[PQ_MS]			= {check = true, known = IsSpellKnown(73510)},
		[PQ_AA]			= {check = true, known = IsSpellKnown(87151)}
	}
-------------------------------------------------------------------------------
-- Druid Globals
-------------------------------------------------------------------------------	
elseif select(2, UnitClass("player")) == "DRUID" then
	print("|cffFFBE69Loading |cffC27C0CDruid|cffFFBE69 Tables ...|cffffffff")
	-- Constants
	PQ_Starfire = 2912
	PQ_Wrath = 5176
	PQ_InsectSwarm = 5570
	PQ_Moonfire = 8921
	PQ_FaerieFire = 770
	PQ_Typhoon = 50516
	PQ_ForceofNature = 33831
	PQ_Innervate = 29166
	PQ_RemoveCorruption = 2782
	PQ_MotW = 1126
	PQ_EntanglingRoots = 339
	PQ_Starsurge = 78674
	PQ_SolarBeam = 78675
	PQ_Hurricane = 16914
	PQ_Hibernate = 2637
	PQ_Cyclone = 33786
	PQ_WildMushroom = 88747
	PQ_Tranquility = 740
	PQ_Sunfire = 93402
	PQ_Moonkin = 24858
	PQ_Bear = 5487
	PQ_Cat = 768
	PQ_Rejuvenation = 774
	PQ_Regrowth = 8936

	-- The Table
	PQ_Abilities = {
		[PQ_Starfire] = { checkEnabled = true, castTime = 3, isKnown = IsSpellKnown(2912), eclipseBar = 2 },
		[PQ_Wrath] = { checkEnabled = true, castTime = 2.5, isKnown = IsSpellKnown(5176), eclipseBar = 1 },
		[PQ_InsectSwarm] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(5570), eclipseBar = 0 },
		[PQ_Moonfire] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(8921), eclipseBar = 0 },
		[PQ_MotW] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(1126) },
		[PQ_Typhoon] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(50516), eclipseBar = 0 },
		[PQ_Hurricane] = { checkEnabled = true, castTime = 1.75, isKnown = IsSpellKnown(16914), eclipseBar = 0 },
		[PQ_Cyclone] = { checkEnabled = true, castTime = 1.75, isKnown = IsSpellKnown(33786), eclipseBar = 0 },
		[PQ_FaerieFire] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(770), eclipseBar = 0 },
		[PQ_SolarBeam] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(78675), eclipseBar = 0 },
		[PQ_WildMushroom] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(88747), eclipseBar = 0 },
		[PQ_ForceofNature] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(33831), eclipseBar = 0 },
		[PQ_Starsurge] = { checkEnabled = false, castTime = 2, isKnown = IsSpellKnown(78674), eclipseBar = 0 },
		[PQ_RemoveCorruption] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(2782), eclipseBar = 0 },
		[PQ_EntanglingRoots] = { checkEnabled = true, castTime = 1.75, isKnown = IsSpellKnown(339), eclipseBar = 0 },
		[PQ_Hibernate] = { checkEnabled = true, castTime = 1.5, isKnown = IsSpellKnown(2637), eclipseBar = 0 },
		[PQ_Sunfire] = { checkEnabled = true, castTime = 0, eclipseBar = 0 },
		[PQ_Tranquility] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(740), eclipseBar = 0 },
		[PQ_Innervate] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(29166), eclipseBar = 0 },
		[PQ_Moonkin] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(24858), shapeForm = 5 },
		[PQ_Bear] = { checkEnabled = false, castTime = 0, isKnown = IsSpellKnown(5487), shapeForm = 1 },
		[PQ_Rejuvenation] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(774) },
		[PQ_Regrowth] = { checkEnabled = true, castTime = 0, isKnown = IsSpellKnown(8936) },
		[PQ_Cat] = { checkEnabled = false, castTime = 0, isKnown = IsSpellKnown(768), shapeForm = 3 }
	}
end

function CalculateHP(t)
  incomingheals = UnitGetIncomingHeals(t) and UnitGetIncomingHeals(t) or 0
  return 100 * ( UnitHealth(t) + incomingheals ) / UnitHealthMax(t)
end

function CanHeal(t)
	if UnitInRange(t) 
--	 and UnitCanCooperate("player",t)
	 and UnitIsFriend("player", t)
	 and UnitExists(t)
	 and UnitIsConnected(t)
	 and not UnitIsEnemy("player",t) 
	 and not UnitIsCharmed(t) 
	 and not UnitIsDeadOrGhost(t) 
	 and not PQR_IsOutOfSight(t) 
  then return true end 
end

function SheuronEngine()
	local group, size = nil, nil
	lowhpmembers = 0
	members = { { Unit = "player", HP = CalculateHP("player") } } 
	if GetNumRaidMembers() > 0 then 
		group = "raid" 
		size = GetNumRaidMembers() 
	else 
		group = "party" 
		size = GetNumPartyMembers() 
	end
	for i = 1, size, 1 do 
		local member, memberhp = group..i, CalculateHP(group..i) 
		if CanHeal(member) then
			if UnitGroupRolesAssigned(member) == "TANK" then memberhp = memberhp - 1 end
			if UnitThreatSituation(member) == 3 then memberhp = memberhp - 3 end
			if UnitBuffID(member, 53563) then memberhp = memberhp + 3 end
			for i = 1, #PQ_SP do if UnitDebuffID(member, PQ_SP[i]) then memberhp = memberhp - 9 end end
			table.insert(members, { Unit = member, HP = CalculateHP(member) } )
		end
		if CanHeal(group..i.."pet") then
			local memberpet, memberpethp = nil, nil
			if UnitAffectingCombat("player") then
				 memberpet = group..i.."pet" 
				 memberpethp = CalculateHP(group..i.."pet") * 2
			else
				 memberpet = group..i.."pet"
				 memberpethp = CalculateHP(group..i.."pet")
			end
			table.insert(members, { Unit = memberpet, HP = memberpethp } )
		end
	end
	table.sort(members, function(x,y) return x.HP < y.HP end)
	for i=1,#members do if members[i].HP < 85 then lowhpmembers = lowhpmembers + 1 end end 
	if CanHeal("target") then table.sort(members, function(x) return UnitIsUnit("target",x.Unit) end) end 
end
