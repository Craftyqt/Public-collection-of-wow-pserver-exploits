-------------------------------------------------------------------------------
-- Functions & Variables
-------------------------------------------------------------------------------
if not PQR_LoadedDataFile then
	PQR_LoadedDateFile = 1
	print("|cffFFBE69Nova Data File v1.2.0 - 3/30/2012|cffffffff")
elseif PQR_LoadedDataFile then
	print("|cffFFBE69Reloading: Nova Data File 1.2.0|cffffffff")
end

Nova_UnitInfo = nil
function Nova_UnitInfo(t)
	--Takes an input of UnitID (player, target, pet, mouseover, etc) and gives you their most useful info
	local TManaActual, TMana, THealthActual, THealth, myClassPower, PQ_Class, PQ_UnitLevel, PQ_CombatCheck, PQ_UnitGUID = UnitPower(t), 100 * UnitPower(t) / UnitPowerMax(t), UnitHealth(t), 100 * UnitHealth(t) / UnitHealthMax(t), 0, select(2, UnitClass(t)), UnitLevel(t), UnitAffectingCombat(t), UnitGUID(t)
	if PQ_Class == "PALADIN" then
		myClassPower = UnitPower("player", 9)
	elseif PQ_Class == "WARLOCK" then
		myClassPower = UnitPower("player", 7)
	elseif PQ_Class == "DRUID" and GetPrimaryTalentTree() == 2 then
		myClassPower = UnitPower("player", 8)
	elseif PQ_Class == "MONK"  then
		myClassPower = UnitPower("player", 12)
	elseif PQ_Class == "PRIEST" then
		myClassPower = UnitPower("player", 13)
	elseif PQ_Class == "ROGUE" and t ~= "player" then
		myClassPower = GetComboPoints("player", t)
	end
	--        1          2           3        4             5           6          7                8             9
	return THealth, THealthActual, TMana, TManaActual, myClassPower, PQ_Class, PQ_UnitLevel, PQ_CombatCheck, PQ_UnitGUID
end

-- Specialization and Level Information.
if GetSpecialization then PQR_SavedSpec = GetSpecialization()
else PQR_SavedSpec = GetPrimaryTalentTree() end
PQR_LevelInfo = UnitLevel("player")

Nova_CastingInfo = nil
function Nova_CastingInfo(PQ_Unit)
	local PQ_Casting = nil
	local percentRemaining = nil
	local secondsRemaining = nil

	if UnitCastingInfo(PQ_Unit) then
		local spellName,_,_,_,startTimer,endTimer = UnitCastingInfo(PQ_Unit)
		local durationTimer = ((endTimer) - (startTimer))
		local timeRemaining = (endTimer - GetTime() * 1000)
		percentRemaining = (100 - ((timeRemaining/durationTimer) * 100))
		secondsRemaining = endTimer/1000 - GetTime()
		PQ_Casting = spellName
		-- Name of spell, % remaining on spell, seconds remaining on spell
		return PQ_Casting, percentRemaining, secondsRemaining
	else return false end
end

Nova_CustomT = { }
PQR_WriteToChat("Custom Table is empty!", "Alert")


-- Edited Sheuron Code
function CalculateHP(t)
	incomingheals = UnitGetIncomingHeals(t) and UnitGetIncomingHeals(t) or 0
	return 100 * ( UnitHealth(t) + incomingheals ) / UnitHealthMax(t)
end

function CanHeal(t)
	if UnitExists(t)
	 and UnitInRange(t) 
	 and UnitIsFriend("player", t)
	 and UnitIsConnected(t)
	 and not UnitIsEnemy("player",t) 
	 and not UnitIsCharmed(t) 
	 and not UnitIsDeadOrGhost(t) 
	 and not PQR_IsOutOfSight(t)
	 and not UnitDebuffID(t,104451) -- Ice Tomb
	 and not UnitDebuffID(t,76577)  -- Smoke Bomb 
  then return true end 
end

function SheuronEngine()
	local group, size = nil, nil
	lowhpmembers = 0
	members = { { Unit = "player", HP = CalculateHP("player") } } 
	-- Check if the Player is apart of the Custom Table
	for i=1, #Nova_CustomT do if UnitGUID("player") == Nova_CustomT[i].GUID then Nova_CustomT[i].Unit = "player" Nova_CustomT[i].HP = CalculateHP("player") end end
	--Find the Group Type and Size
	if GetNumRaidMembers() > 0 then 
		group = "raid" 
		size = GetNumRaidMembers() 
	else 
		group = "party" 
		size = GetNumPartyMembers() 
	end
	
	for i = 1, size, 1 do 
		local member, memberhp = group..i, CalculateHP(group..i) 
		if CanHeal(member) then
			if UnitGroupRolesAssigned(member) == "TANK" then memberhp = memberhp - 1 end
			if UnitThreatSituation(member) == 3 then memberhp = memberhp - 3 end
			if UnitBuffID(member, 53563) then memberhp = memberhp + 3 end -- Searing Plasma Check
			for i = 1, #PQ_SP do if UnitDebuffID(member, PQ_SP[i]) then memberhp = memberhp - 9 end end
			for i=1, #Nova_CustomT do if UnitGUID(member) == Nova_CustomT[i].GUID then Nova_CustomT[i].Unit = member Nova_CustomT[i].HP = memberhp end end -- If they are in the Custom Table add their info in
			table.insert(members, { Unit = member, HP = CalculateHP(member) } )
		end
		if CanHeal(group..i.."pet") then
			local memberpet, memberpethp = nil, nil
			if UnitAffectingCombat("player") then
				 memberpet = group..i.."pet" 
				 memberpethp = CalculateHP(group..i.."pet") * 2
			else
				 memberpet = group..i.."pet"
				 memberpethp = CalculateHP(group..i.."pet")
			end
			for i=1, #Nova_CustomT do if UnitGUID(memberpet) == Nova_CustomT[i].GUID then Nova_CustomT[i].Unit = memberpet Nova_CustomT[i].HP = memberpethp end end
			table.insert(members, { Unit = memberpet, HP = memberpethp } )
		end
	end
	table.sort(Nova_CustomT, function(x, y) return x.HP < y.HP end)
	table.sort(members, function(x,y) return x.HP < y.HP end)
	for i=1,#members do if members[i].HP < 85 then lowhpmembers = lowhpmembers + 1 end end 
	if CanHeal("target") then table.sort(members, function(x) return UnitIsUnit("target",x.Unit) end) end 
end
-------------------------------------------------------------------------------
-- Temporary Buff Handler.
-------------------------------------------------------------------------------
PQ_CheckTempBuffs = nil
function PQ_CheckTempBuffs(t)
	for i=1,#t do
		if t[i].check == true and UnitBuffID("player",t[i].spellID) then
			t[i].hasBuff = true
			t[i].endTime = select(7,UnitBuffID("player",t[i].spellID))
		else
			t[i].hasBuff = false
			t[i].endTime = nil
		end
	end
end

PQ_GetTimeLeft = nil
function PQ_GetTimeLeft(t, spellID)
	for i=1,#t do
		if t[i].spellID == spellID and t[i].hasBuff == true then
			return t[i].endTime - GetTime()
		end
	end
end

PQ_Round = nil
function PQ_Round(number, decimal)
	local multiplier = 10^(decimal or 0)
	return math.floor(number * multiplier + 0.5) / multiplier
end
-------------------------------------------------------------------------------
-- Debug & Notification Frame
-------------------------------------------------------------------------------
-- Update Debug Frame
Nova_NotifyFrame = nil
function Nova_NotifyFrame_OnUpdate()
	if (Nova_NotifyFrameTime < GetTime() - 5) then
		local alpha = Nova_NotifyFrame:GetAlpha()
		if (alpha ~= 0) then Nova_NotifyFrame:SetAlpha(alpha - .02) end
		if (aplha == 0) then Nova_NotifyFrame:Hide() end
	end
end

-- Debug messages.
function Nova_Notify(message)
	Nova_NotifyFrame.text:SetText(message)
	Nova_NotifyFrame:SetAlpha(1)
	Nova_NotifyFrame:Show()
	Nova_NotifyFrameTime = GetTime()
end

-- Debug Notification Frame
Nova_NotifyFrame = CreateFrame('Frame')
Nova_NotifyFrame:ClearAllPoints()
Nova_NotifyFrame:SetHeight(300)
Nova_NotifyFrame:SetWidth(300)
Nova_NotifyFrame:SetScript('OnUpdate', Nova_NotifyFrame_OnUpdate)
Nova_NotifyFrame:Hide()
Nova_NotifyFrame.text = Nova_NotifyFrame:CreateFontString(nil, 'OVERLAY', 'PVPInfoTextFont')
Nova_NotifyFrame.text:SetAllPoints()
Nova_NotifyFrame:SetPoint('CENTER', 0, 200)
Nova_NotifyFrameTime = 0

-------------------------------------------------------------------------------
-- Target & Environmental Globals and Tables
-------------------------------------------------------------------------------
PQ_Immunity = {
	642,45438,31224,23920,33786,19263,97417,97977,105256,105409,
	105465,108568,109552,109553,109554,109560,109561,109562,110892,110893
}
PQ_FL = {110070, 105925, 109075, 110079, 110069, 110070, 110080, 110068, 110078}
PQ_SN = {110139,110140,110141,106791,109599,106794,109597,109598}
PQ_HOT = {109417,109416,109415,106371}
PQ_SP = {105479, 109364, 109362, 109636, 109379}

-- Non-boss units to use Archangel and Shadowfiend on.
Nova_Units = {
	-- Testing purpouses
	31146,	-- Raider's Training Dummy
	
	-- Heroic: Spine of Deathwing
	56575,	-- Burning Tendons
	56341,	-- Burning Tendons
	
	-- Heroic: Madness of Deathwing
	57479,	-- Corrupting Parasite
	56262,	-- Elementium Bolt
	56471,	-- Mutated Corruption
	56263,	-- Regenerative Blood
	56188,	-- Blistering Tentacle
	
	-- Heroic: Warmaster Blackhorn
	56587,	-- Twilight Assault Drake
	56855,	-- Twilight Assault Drake
	56923,	-- Twilight Sapper
	56854,	-- Twilight Elite Dreadblade
	56848	-- Twilight Elite Slayer
}
-- Target Validation Function.
TargetValidation = nil
function TargetValidation(unit, spell)
	local Nova_Spells = Nova_Spell
	local PQ_Immune = PQ_Immune
	
	if Nova_Spell[spell].known
		and UnitExists(unit)
		and PQR_SpellAvailable(spell)
		and UnitCanAttack("player", unit) == 1
		and IsSpellInRange(GetSpellInfo(spell), unit) == 1
		and not PQ_Immune
		and not UnitIsDeadOrGhost(unit)
		and not PQR_IsOutOfSight(unit, 1)
	then return true else return false end
end
-- Check for non-boss mobs
ShadowSpecial = nil
function ShadowSpecial()
	local Nova_Units = Nova_Units
	
	if UnitExists("target") then
		local UnitID = tonumber((UnitGUID("target")):sub(-12, -9), 16)
		for i=1,#Nova_Units do
			if Nova_Units[i] == UnitID then return true end
		end
		return false
	else return false end
end
-- Heroism Function.
PQ_HasHero = nil
function PQ_HasHero()
	local PQ_BL = PQ_BloodLust
	local PQ_Hero = PQ_Heroism
	local PQ_TW = PQ_TimeWarp
	local PQ_AH = PQ_Hysteria

	if UnitBuffID("player",PQ_BL)
		or UnitBuffID("player",PQ_Hero)
		or UnitBuffID("player",PQ_TW)
		or UnitBuffID("player",PQ_AH)
	then return true else return false end
end

-------------------------------------------------------------------------------
-- Buff Globals
-------------------------------------------------------------------------------
-- Temporary Buffs
PQ_Lightweave		= 75170
PQ_PowerTorrent		= 74241
PQ_VolcanicPotion	= 79476
PQ_SynapseSprings	= 96230
PQ_BloodLust		= 2825
PQ_Heroism			= 32182
PQ_TimeWarp			= 80353
PQ_Hysteria			= 90355
PQ_Zerk				= 26297

-- Temporary Bloodlust
Nova_Lust = {PQ_Bloodlust,PQ_Heroism,PQ_TimeWarp,PQ_Hysteria}

-- Temporary Buff Table
PQ_TemporaryBuffs = {
	{spellID = PQ_Lightweave, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_PowerTorrent, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_VolcanicPotion, check = true, hasBuff = false, endTime = nil},
	{spellID = PQ_SynapseSprings, check = true, hasBuff = false, endTime = nil}
}

-------------------------------------------------------------------------------
-- Paladin Globals
-------------------------------------------------------------------------------
Nova_Spell = {}
if select(2, UnitClass("player")) == "PALADIN" then
	print("|cffFFBE69Loading |cffF48CBAPaladin|cffFFBE69 Tables ...|cffffffff")
	
	-- Constants
	PQ_HolyLight 		=	 635
	PQ_DivineLight 		=	 82326
	PQ_FlashofLight 	=	 19750
	PQ_HolyRadiance 	=	 82327
	PQ_HolyShock 		=	 20473
	PQ_WordofGlory 		=	 85673
	PQ_LightofDawn 		=	 85222
	PQ_Exorcism 		=  	 879
	PQ_Judgement 		=	 20271
	PQ_DivineShield 	=	 642 
	PQ_DivineProtection = 	 498 
	PQ_AuraMastery 		=	 31821 
	PQ_BeaconofLight 	=	 53563
	PQ_Cleanse 			=	 4987
	PQ_HandofFreedom 	=	 1044
	PQ_HandofProtection =	 1022
	PQ_HandofSacrifice	= 	 6940
	PQ_HandofSalvation	=	 1038
	PQ_GoAK 			=	 86150
	PQ_DivineFavor	 	=	 31842
	PQ_AvengingWrath 	=	 31884
	PQ_DivinePlea	 	=	 54428
	PQ_LayonHands 		=	 633 
	PQ_SealofInsight 	=	 20165
	PQ_CrusaderStrike 	=	 35395
	PQ_SoR				=	 20154
	PQ_SoI				=	 20165
	PQ_SoT				=	 31801
	PQ_SoJ				=	 20164
	PQ_AvengersShield 	=	 31935
	PQ_HandofReckoning 	=	 62124
	PQ_SotR 			=	 53600
	PQ_Consecrate 		=	 26573
	PQ_HotR 			=	 53595
	PQ_HoJ				=	 853
	PQ_HoW				=	 24275
	PQ_BoM				=	 19740
	PQ_BoK				=	 20217
	
	-- Paladin Skill table
	Nova_Spell = {
		[PQ_HolyLight] 			=	 { check = true, castTime = 2.5, isKnown = IsSpellKnown(635), targetHealth = 92, overHealLimit = 107, overRide = false },
		[PQ_DivineLight]		=	 { check = true, castTime = 2.5, isKnown = IsSpellKnown(82326), targetHealth = 58, checkArena = false, overHealLimit = 112, overRide = false},
		[PQ_FlashofLight]		=	 { check = true, castTime = 1.5, isKnown = IsSpellKnown(19750), targetHealth = 32, whileMovingHealth = 65, checkArena = false, overHealLimit = 102, overRide = false },
		[PQ_HolyRadiance]		=	 { check = true, castTime = 2.5, isKnown = IsSpellKnown(82327), targetNumber = 4, targetHealth = 85, overRide = false },
		[PQ_HolyShock] 			=	 { check = true, castTime = 0, isKnown = IsSpellKnown(20473), targetHealth = 95, overRide = false },
		[PQ_WordofGlory] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(85673), targetHealth = 82, overRide = false },
		[PQ_LightofDawn] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(85222), targetNumber = 3, overRide = false },
		[PQ_Exorcism] 			=	 { check = false, castTime = 1.5, isKnown = IsSpellKnown(879) },
		[PQ_DivineShield] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(642), playerHealth = 22 },
		[PQ_DivineProtection] 	=	 { check = true, castTime = 0, isKnown = IsSpellKnown(498), playerHealth = 45 },
		[PQ_AuraMastery] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(31821) },
		[PQ_BeaconofLight] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(53563), targetName = "" },
		[PQ_Cleanse] 			=	 { check = true, castTime = 0, isKnown = IsSpellKnown(4987), prioDispel = 0 },
		[PQ_HandofFreedom] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(1044) },
		[PQ_HandofProtection] 	=	 { check = false, castTime = 0, isKnown = IsSpellKnown(1022), targetHealth = 40 },
		[PQ_HandofSalvation] 	=	 { check = true, castTime = 0, isKnown = IsSpellKnown(1038) },
		[PQ_HandofSacrifice] 	=	 { check = true, castTime = 0, isKnown = IsSpellKnown(6940), targetHealth = 40 },
		[PQ_GoAK] 				=	 { check = true, castTime = 0, isKnown = IsSpellKnown(86150), targetHealth = 30 },
		[PQ_DivineFavor] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(31842), targetHealth = 38 },
		[PQ_AvengingWrath] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(31884), targetHealth = 45 },
		[PQ_DivinePlea] 		=	 { check = true, castTime = 0, isKnown = IsSpellKnown(54428), playerMana = 80 },
		[PQ_CrusaderStrike] 	=	 { check = true, isKnown = IsSpellKnown(35395) },
		[PQ_Judgement] 			=	 { check = true, isKnown = IsSpellKnown(20271) },
		[PQ_SoR] 				=	 { check = true, isKnown = IsSpellKnown(20154) },
		[PQ_SoI] 				=	 { check = true, isKnown = IsSpellKnown(20165) },
		[PQ_SoT] 				=	 { check = true, isKnown = IsSpellKnown(31801) },
		[PQ_SoJ] 				=	 { check = true, isKnown = IsSpellKnown(20164) },
		[PQ_AvengersShield] 	=	 { check = true, isKnown = IsSpellKnown(31935) },
		[PQ_HandofReckoning] 	=	 { check = true, isKnown = IsSpellKnown(62124) },
		[PQ_Consecrate] 		=	 { check = true, isKnown = IsSpellKnown(26573) },
		[PQ_HotR] 				=	 { check = true, isKnown = IsSpellKnown(53595) },
		[PQ_SotR] 				=	 { check = true, isKnown= IsSpellKnown(53600) },
		[PQ_HoW] 				=	 { check = true, isKnown = IsSpellKnown(24275) },
		[PQ_HoJ] 				=	 { check = true, isKnown = IsSpellKnown(853) },
		[PQ_BoM] 				=	 { check = true, isKnown = IsSpellKnown(19740) },
		[PQ_BoK] 				=	 { check = true, isKnown= IsSpellKnown(20217) },
		[PQ_LayonHands]			=	 { check = true, castTime = 0, isKnown = IsSpellKnown(633), targetHealth = 20 }
	}
-------------------------------------------------------------------------------
-- Priest Globals
-------------------------------------------------------------------------------
elseif select(2, UnitClass("player")) == "PRIEST" then
	print("|cffFFBE69Loading |cffffffffPriest |cffFFBE69Tables ...|cffffffff")
	
	-- Skill IDs
	PQ_SWP		= 589	-- Shadow Word: Pain
	PQ_DP		= 2944	-- Devouring Plague
	PQ_MB		= 8092	-- Mind Blast
	PQ_MF		= 15407	-- Mind Flay
	PQ_MD		= 32375	-- Mass Dispel
	PQ_SWD		= 32379	-- Shadow Word: Death
	PQ_SF		= 34433	-- Shadowfiend
	PQ_VT		= 34914	-- Vampiric Touch
	PQ_Disp		= 47585	-- Dispersion
	PQ_MSear	= 48045	-- Mind Sear
	PQ_MS		= 73510	-- Mind Spike
	PQ_AA		= 87151	-- Archangel
	PQ_Dispel	= 527	-- Dispel Magic
	-- Buff IDs
	PQ_IF		= 588	-- Inner Fire
	PQ_VE		= 15286	-- Vampiric Embrace
	PQ_SForm	= 15473	-- Shadow Form
	PQ_PWF		= 21562	-- Power Word: Fortitude
	PQ_SP		= 27683	-- Shadow Protection
	PQ_DE		= 87118	-- Evangelism
	PQ_DA		= 87153	-- Dark Evangelism
	PQ_SO		= 77487	-- Shadow Orbs
	PQ_MM		= 87160	-- Mind Melt
	
	-- Spell Table
	Nova_Spell = {
		[PQ_SWP]		= {check = true, known = IsSpellKnown(PQ_SWP)},
		[PQ_DP]			= {check = true, known = IsSpellKnown(PQ_DP)},
		[PQ_MB]			= {check = true, known = IsSpellKnown(PQ_MB)},
		[PQ_MF]			= {check = true, known = IsSpellKnown(PQ_MF)},
		[PQ_MD]			= {check = true, known = IsSpellKnown(PQ_MD)},
		[PQ_SWD]		= {check = true, known = IsSpellKnown(PQ_SWD)},
		[PQ_SF]			= {check = true, known = IsSpellKnown(PQ_SF)},
		[PQ_VT]			= {check = true, known = IsSpellKnown(PQ_VT)},
		[PQ_Disp]		= {check = true, known = IsSpellKnown(PQ_Disp)},
		[PQ_MSear]		= {check = true, known = IsSpellKnown(PQ_MSear)},
		[PQ_MS]			= {check = true, known = IsSpellKnown(PQ_MS)},
		[PQ_AA]			= {check = true, known = IsSpellKnown(PQ_AA)}
	}
-------------------------------------------------------------------------------
-- Mage Globals
-------------------------------------------------------------------------------
elseif select(2, UnitClass("player")) == "MAGE" then
	print("|cffFFBE69Loading |cff69CCF0Mage|cffFFBE69 Tables ...|cffffffff")
	
	-- Skill ID's
	PQ_SC			= 2948	-- Scorch
	PQ_FB			= 133	-- Fireball
	PQ_Pyro			= 11366 -- Pyroblast
	PQ_Combustion	= 11129 -- Combustion
	PQ_FO			= 82731 -- Flame Orb
	PQ_LB			= 44457 -- Living Bomb
	PQ_MI			= 55342 -- Mirror Image
	PQ_BW			= 11113 -- Blast Wave
	PQ_DB			= 31661 -- Dragon's Breath
	PQ_SF			= 2120	-- Flamestrike
	PQ_FBlast		= 2136	-- Fire Blast
	
	-- Buff ID's
	PQ_Ignite		= 12654 -- Ignite
	PQ_CM			= 22959 -- Critical Mass
	PQ_SAF			= 17800 -- Shadow and Flame
	PQ_Pyro2		= 92315 -- Pyroblast!
	PQ_HS			= 48108 -- Hot Streak (Proc)
	PQ_MA			= 30482 -- Molten Armor
	PQ_AB			= 1459 -- Arcane Brilliance
	PQ_BP			= 99461 -- Blazing Power
	
	-- Spell Table
	Nova_Spell = {
		[PQ_SC]			= {check = true, known = IsSpellKnown(PQ_SC)},
		[PQ_FB]			= {check = true, known = IsSpellKnown(PQ_FB)},
		[PQ_Pyro]		= {check = true, known = IsSpellKnown(PQ_Pyro)},
		[PQ_Combustion]	= {check = true, known = IsSpellKnown(PQ_Combustion)},
		[PQ_FO]			= {check = true, known = IsSpellKnown(PQ_FO)},
		[PQ_LB]			= {check = true, known = IsSpellKnown(PQ_LB)},
		[PQ_MI]			= {check = true, known = IsSpellKnown(PQ_MI)},
		[PQ_BW]			= {check = true, known = IsSpellKnown(PQ_BW)},
		[PQ_DB]			= {check = true, known = IsSpellKnown(PQ_DB)},
		[PQ_SF]			= {check = true, known = IsSpellKnown(PQ_SF)},
		[PQ_FBlast]		= {check = true, known = IsSpellKnown(PQ_FBlast)}
	}
-------------------------------------------------------------------------------
-- Druid Globals
-------------------------------------------------------------------------------	
elseif select(2, UnitClass("player")) == "DRUID" then
	print("|cffFFBE69Loading |cffC27C0CDruid|cffFFBE69 Tables ...|cffffffff")
	
	-- Balance Skill ID's
	PQ_InsectSwarm		= 5570	-- Insect Swarm
	PQ_Moonfire			= 8921	-- Moonfire / Sunfire
	PQ_Starsurge		= 78674	-- Starsurge
	PQ_Wrath			= 5176	-- Wrath
	PQ_Starfire			= 2912	-- Starfire
	
	-- AoE Skill ID's
	PQ_Hurricane		= 16914	-- Hurricane
	PQ_Typhoon			= 50516	-- Typhoon
	PQ_WildMushroom		= 88747	-- Wild Mushroom
	PQ_Starfall			= 48505 -- Starfall
	
	-- DoT ID's
	PQ_Sunfire			= 93402	-- Sunfire DoT
	
	-- Cooldown & Buff ID's
	PQ_Innervate		= 29166	-- Innervate
	PQ_RC				= 2782	-- Remove Corruption
	PQ_MotW				= 1126	-- Mark of the Wild Skill
	PQ_MoTW2			= 79061	-- Mark of the Wild Buff
	PQ_Hibernate		= 2637	-- Hibernate
	PQ_Tranquility		= 740	-- Tranquility
	PQ_FoN				= 33831	-- Forces of Nature
	PQ_Solar			= 48517	-- Solar Eclipse
	PQ_Lunar			= 48518	-- Lunar Eclipse
	PQ_Ng				= 61346	-- Nature's Grace
	
	-- Druid Forms
	PQ_Moonkin			= 24858	-- Moonkin Form
	PQ_Bear				= 5487	-- Bear Form
	PQ_Cat				= 768	-- Cat Form
	
	-- Spell Table
	Nova_Spell = {
		[PQ_InsectSwarm]	= {check = true, known = IsSpellKnown(PQ_InsectSwarm)},
		[PQ_Moonfire]		= {check = true, known = IsSpellKnown(PQ_Moonfire)},
		[PQ_Starsurge]		= {check = true, known = IsSpellKnown(PQ_Starsurge)},
		[PQ_Wrath]			= {check = true, known = IsSpellKnown(PQ_Wrath)},
		[PQ_Starfire]		= {check = true, known = IsSpellKnown(PQ_Starfire)},
		[PQ_Hurricane]		= {check = true, known = IsSpellKnown(PQ_Hurricane)},
		[PQ_Typhoon]		= {check = true, known = IsSpellKnown(PQ_Typhoon)},
		[PQ_WildMushroom]	= {check = true, known = IsSpellKnown(PQ_WildMushroom)},
		[PQ_Innervate]		= {check = true, known = IsSpellKnown(PQ_Innervate)},
		[PQ_RC]				= {check = true, known = IsSpellKnown(PQ_RC)},
		[PQ_MotW]			= {check = true, known = IsSpellKnown(PQ_MotW)},
		[PQ_Hibernate]		= {check = true, known = IsSpellKnown(PQ_Hibernate)},
		[PQ_Tranquility]	= {check = true, known = IsSpellKnown(PQ_Tranquility)},
		[PQ_FoN]			= {check = true, known = IsSpellKnown(PQ_FoN)},
		[PQ_Moonkin]		= {check = true, known = IsSpellKnown(PQ_Moonkin)},
		[PQ_Bear]			= {check = true, known = IsSpellKnown(PQ_Bear)},
		[PQ_Cat]			= {check = true, known = IsSpellKnown(PQ_Cat)}
	}
end
