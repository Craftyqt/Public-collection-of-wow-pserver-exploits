if not PQ_DebugFrameLoaded then
	local frame  = CreateFrame("Frame", "DebugFrame", UIParent)
	frame.width  = 580
	frame.height = 250
	frame:SetFrameStrata("FULLSCREEN_DIALOG")
	frame:SetSize(frame.width, frame.height)
	frame:SetPoint("CENTER", UIParent, "CENTER", 0, 0)
	frame:SetBackdrop({
		bgFile   = "Interface\\DialogFrame\\UI-DialogBox-Background",
		edgeFile = "Interface\\DialogFrame\\UI-DialogBox-Border",
		tile     = true,
		tileSize = 32,
		edgeSize = 32,
		insets   = { left = 8, right = 8, top = 8, bottom = 8 }
	})
	frame:SetBackdropColor(0, 0, 0, 1)
	frame:EnableMouse(true)
	frame:EnableMouseWheel(true)

	-- Make movable/resizable
	frame:SetMovable(true)
	frame:SetResizable(enable)
	frame:SetMinResize(100, 100)
	frame:RegisterForDrag("LeftButton")
	frame:SetScript("OnDragStart", frame.StartMoving)
	frame:SetScript("OnDragStop", frame.StopMovingOrSizing)

	tinsert(UISpecialFrames, "DebugFrame")

	-- Close button
	local closeButton = CreateFrame("Button", nil, frame, "UIPanelButtonTemplate")
	closeButton:SetPoint("BOTTOM", 0, 10)
	closeButton:SetHeight(25)
	closeButton:SetWidth(70)
	closeButton:SetText(CLOSE)
	closeButton:SetScript("OnClick", function(self)
		HideParentPanel(self)
	end)
	frame.closeButton = closeButton

	-- ScrollingMessageFrame
	local messageFrame = CreateFrame("ScrollingMessageFrame", nil, frame)
	messageFrame:SetPoint("CENTER", 15, 20)
	messageFrame:SetSize(frame.width - 40, frame.height - 50)
	messageFrame:SetFontObject(GameFontNormal)
	messageFrame:SetTextColor(1, 1, 1, 1) -- default color
	messageFrame:SetJustifyH("LEFT")
	messageFrame:SetHyperlinksEnabled(true)
	messageFrame:SetFading(false)
	messageFrame:SetMaxLines(300)
	frame.messageFrame = messageFrame

	--messageFrame:ScrollToBottom()
	--messageFrame:ScrollDown()

	-------------------------------------------------------------------------------
	-- Scroll bar
	-------------------------------------------------------------------------------
	local scrollBar = CreateFrame("Slider", nil, frame, "UIPanelScrollBarTemplate")
	scrollBar:SetPoint("RIGHT", frame, "RIGHT", -10, 10)
	scrollBar:SetSize(30, frame.height - 90)
	scrollBar:SetMinMaxValues(0, 300)
	scrollBar:SetValueStep(1)
	scrollBar.scrollStep = 1
	frame.scrollBar = scrollBar

	scrollBar:SetScript("OnValueChanged", function(self, value)
		messageFrame:SetScrollOffset(select(2, scrollBar:GetMinMaxValues()) - value)
	end)

	scrollBar:SetValue(select(2, scrollBar:GetMinMaxValues()))

	frame:SetScript("OnMouseWheel", function(self, delta)
		local cur_val = scrollBar:GetValue()
		local min_val, max_val = scrollBar:GetMinMaxValues()

		if delta < 0 and cur_val < max_val then
			cur_val = math.min(max_val, cur_val + 1)
			scrollBar:SetValue(cur_val)
		elseif delta > 0 and cur_val > min_val then
			cur_val = math.max(min_val, cur_val - 1)
			scrollBar:SetValue(cur_val)
		end
	end)

	SLASH_DEBUG1 = "/pqd"
	SlashCmdList.DEBUG = function()
		if DebugFrame:IsShown() then
			DebugFrame:Hide()
		else
			DebugFrame:Show()
		end
	end

	DebugFrame:Hide()

	local DebugString = nil
	function PQ_PrintToDebug(string)
		if DebugString ~= string then
			DebugString = string
			DebugFrame.messageFrame:AddMessage(DebugString)
		end
	end

	PQ_DebugFrameLoaded = true
	PQ_Debug = true
	PQ_DebugUnits = true
	PQ_DebugCasts = true
	PQ_DebugTargeting = true
end

if not PQ_NotifyFrameLoaded then
	------------------
	-- Notify frame --
	------------------
	local PQ_NotifyFrame = CreateFrame("Frame")
	PQ_NotifyFrame:ClearAllPoints()
	PQ_NotifyFrame:SetHeight(300)
	PQ_NotifyFrame:SetWidth(300)
	PQ_NotifyFrame:Hide()
	PQ_NotifyFrame.text = PQ_NotifyFrame:CreateFontString(nil, "BACKGROUND", "PVPInfoTextFont")
	PQ_NotifyFrame.text:SetAllPoints()
	PQ_NotifyFrame:SetPoint("CENTER", 0, 200)

	local PQ_NotifyFrameTime = 0
	local function PQ_NotifyFrame_OnUpdate()
		if (PQ_NotifyFrameTime < GetTime() - 3) then
			local alpha = PQ_NotifyFrame:GetAlpha()
			if (alpha ~= 0) then PQ_NotifyFrame:SetAlpha(alpha - .05) end
			if (aplha == 0) then PQ_NotifyFrame:Hide() end
		end
	end
	PQ_NotifyFrame:SetScript("OnUpdate", PQ_NotifyFrame_OnUpdate)

	function PQ_Notify(message)
		PQ_NotifyFrame.text:SetText(message)
		PQ_NotifyFrame:SetAlpha(1)
		PQ_NotifyFrame:Show()
		PQ_NotifyFrameTime = GetTime()
	end

	PQ_NotifyFrameLoaded = true
end