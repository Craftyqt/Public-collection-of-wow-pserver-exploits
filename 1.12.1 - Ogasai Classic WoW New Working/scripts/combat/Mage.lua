-----------------------------------------------------
-- Level Bot for oGasai 2.17 : Frostbite 1.7 for Mage
-----------------------------------------------------

-- The original 1.7 and before were made by Logitech
-- Version 1.8 by SomebodyFound
-- -added: Bandage logic
-- -added: Potion logic
-- -added: new eat logic
-- -added: new drink logic
-- all new logics are based on beniamin's rogue rotation
-- -fixed: won't try to conjure food or drink when inventory is full
-- -fixed: getStatus() now has a default return to avoid 'nil' problems
-- -added:will now also try to conjure crystal water
-- -added: cone of cold (toggleable, false by default)
-- -modified: now the information text will be shown on the left/top corner of screen
-----------------------------------
-- Settings
-----------------------------------

-- Level bot or only combat rotation parameter
bot_ = 1; -- Bot on, for rotation set to 0

eatList = {"Spinefin Halibut","Deep Fried Plantains","Raw Spotted Yellowtail","Homemade Cherry Pie","Bobbing Apple","Roasted Quail", "Cured Ham Steak","Dried King Bolete","Roasted Boar Meat","Spiced Wolf Meat","Conjured Bread","Conjured Muffin","Conjured Rye","Conjured Pumpernickel","Conjured Sourdough"}; -- string or table of strings
drinkList = {"Morning Glory Dew","Moonberry Juice","Refreshing Spring Water","Ice Cold Milk","Conjured Purified Water","Conjured Fresh Water","Conjured Water","Conjured Mineral Water","Conjured Spring Water","Conjured Crystal Water"}; -- string or table of strings
eatHealth = 70; -- percentage of player's health to eat food
drinkMana = 70; -- Drink if we are below 50% mana

potionList = {"Major Healing Potion","Combat Healing Potion","Superior Healing Potion","Greater Healing Potion","Healing Potion","Lesser Healing Potion", "Minor Healing Potion"}; -- string or table of strings
usePotionHealth = 30; -- percentage of player's health to use a healing potion

bandageList = {"Heavy Linen Bandage", "Linen Bandage", "Wool Bandage"}; -- list of bandages

useCone = false; -- cast cone of cold

-- Auto delete grey items parameter
deleteGrey = false;

-- Stop Timer and Stuck feature paramters
useStopTimer = false; -- Use a stop timer or not
maxRunTimeMinutes = 80; -- stops after X minutes
logOutIfStuck = true;
stuckTimeOut = 60; -- if stuck longer then X seconds we log out

-- Drawing info parameters
drawUnitsData = true; -- Draw info of monsters and players on the screen
drawPlayers = true;
drawMonsters = true;

-- Target selection parameters
SetPVE(1); -- Don't target enemy pets/players
enemyFaction = "Alliance"; -- Set to "Horde" if you play Alliance
pullDistance = 45; -- pulls enemies within X yards
maxLevelDiff = 1; -- pull mobs who are maximum X level above our level
minLevelDiff = 6; -- pull mobs who are minimum X levels below our level
skipHumanoid = false; -- Skip killing humanoid (usually in groups etc...)
skipUndead = false; -- Skip killing undead (usually in groups etc...)
skipElemental = false; -- Skip killing Elemental (usually in groups etc Arathi Highlands...)

-- Paranoid feature: Pauses if players are within the paranoidRange
paranoid = false; -- true = enabled, pausing the script if we are out of combat and any player is within 'paranoidRange' yards
paranoidRange = 50; -- X yards

-- Stop script and HS variables
stopOnFullBags = false; -- stop the script when bags are full
hsWhenStop = false; -- use Hearthstone when the bot stops
hsBag = 1; -- HS in backpack
hsSlot = 1; -- HS in slot 1 in the bag

-- Mount variables
useMount = true; -- Use mount or not (false)
mountItemName = "Blue Skeletal Horse"; -- The mount-item name in your bag
mountBuffName = "Blue Skeletal Horse"; -- The buff-name when mounted

-----------------------------------------------------
-- Script Functions below
-----------------------------------------------------

function Cone()
	if (GetDistance(targetObj) < 5 and not hasPolymorphedTarget and HasDebuff(targetObj, "Frostbite") == 0 and HasSpell("Cone of Cold") == 1 and IsSpellOnCD("Cone of Cold") == 0 and targetHealth > 15 and useCone == true) then
		TargetEnemy(target); 
		FaceTarget(target); 
		CastSpellByName("Cone of Cold");
		return true;
	end
	return false;
end

function UpdateBandageTimer() -- Set the CD time for the bandage debuff (60s) 
	SetVar('bandageTimer', GetTimeX() + 62000); 
end 

function CanBandage() -- Has the bandage debuff CD timer passed?
	if ( HasDebuff(localObj, "Recently Bandaged") == 0 and (GetVar('bandageTimer') == 0 or GetVar('bandageTimer') < GetTimeX())) then 
		return 1; 
	end
	return 0; 
end 

-- use bandage when hp low enough
function Bandage() -- use bandage
	if(type(bandageList) == "string") then bandageList = {bandagelist} end
	if(CanBandage() == 1 and IsInCombat() == 0 and localHealth < eatHealth and IsEating() == 0) then
		for _,v in pairs (bandageList) do
			if v == "" or v == nil or  type(v) ~= "string" then	
				v = "nil"
			end
			if HasItem(v) == 1 then
				if UseItem(v) == 1 then
					UpdateTimer(3);	
					UpdateBandageTimer(); 
					debugText = "Using "..v.." (no target)";
					ToConsole("used bandage");
					return true;
				end
			end
		end
	end
	return false;
end

function usePotion()
	if (localHealth < usePotionHealth) then
		if type(potionList) == "string" then potionList = {potionList} end;
		for _,v in pairs (potionList) do
			if v == "" or v == nil or  type(v) ~= "string" then
				v = "nil"
			end
			if HasItem(v) == 1 then
				if UseItem(v) == 1 then
					UpdateTimer(0.5);
					UpdateStatus(17); return;
				end
			end
		end
	end
end

-----------------------------------------------------
function SavePos() 
	local x, y, z = GetUnitsPosition(GetLocalPlayer());
	SetVar('myX', x); 
	SetVar('myY', y);
	SetVar('myZ', z);  
	SetVar('myTime', GetTimeX());
end

function GetSavedX() if (GetVar('myX') ~= 0) then return GetVar('myX'); else return 0; end end
function GetSavedY() if (GetVar('myY') ~= 0) then return GetVar('myY'); else return 0; end end
function GetSavedZ() if (GetVar('myZ') ~= 0) then return GetVar('myZ'); else return 0; end end
function GetSavedTime() if (GetVar('myTime') ~= 0) then return GetVar('myTime'); else return 0; end end

function GetDistanceDif()
	local x, y, z = GetUnitsPosition(GetLocalPlayer());
	local xV = GetSavedX()-x;
	local yV = GetSavedY()-y;
	local zV = GetSavedZ()-z;
	return math.sqrt(xV^2 + yV^2 + zV^2);
end

function StopIfStuck()
	-- Save our pos if we moved more then 20 yards or if we are in combat or eating/drinking
	if (GetDistanceDif() > 20 or IsInCombat() == 1 or IsEating() == 1 or IsDrinking() == 1) then
		SavePos();
		SetSatusText('Saving pos; ', 'Saving our position, we moved ' .. GetDistanceDif() .. ' yards...'); 
		return;
	end

	-- Check if we are stuck/standing still (moved less than 20 yards) since stuckTimeOut seconds since last saved position
	if (GetDistanceDif() < 20 and ((GetTimeX()-GetSavedTime())/1000) > stuckTimeOut ) then
		if (logOutIfStuck) then 
			Logout(); 
		end
		StopBot();
		return;
	end
end

function DrawMonsterDataOnScreen(target)
	local player = GetLocalPlayer();
	local distance = GetDistance(target);
	local tX, tY, onScreen = WorldToScreen(GetUnitsPosition(target));
	if (onScreen == 1) then
		DrawText(GetCreatureType(target) .. ' Level:' .. GetLevel(target), tX, tY-10, 255, 255, 0);
		if (GetTarget() == target) then 
			DrawText('(targeted)', tX, tY-20, 255, 0, 0); 
		end
		DrawText('Health: ' .. GetHealth(target) .. '%', tX, tY, 255, 0, 0);
		DrawText('Distance: ' .. math.floor(distance) .. ' yd.', tX, tY+10, 255, 255, 255);
	end
end

function DrawPlayerDataOnScreen(target)
	local player = GetLocalPlayer();
	if (target == player) then 
		DrawToonDataOnScreen();
	else
		local distance = GetDistance(target);
		local tX, tY, onScreen = WorldToScreen(GetUnitsPosition(target));
		if (onScreen == 1) then
			if (CanAttack(target) == 1) then 
				DrawText('Enemy Player', tX, tY-10, 255, 0, 0);
			else 
				DrawText('Friendly Player', tX, tY-10, 0, 255, 0);
			end
			DrawText('Health: ' .. GetHealth(target) .. '%', tX, tY, 255, 0, 0);
			DrawText('Distance: ' .. math.floor(distance) .. ' yd.', tX, tY+10, 255, 255, 255);
			if (GetUnitsTarget(target) == player) then 
				DrawText('IS TARGETING US!', tX, tY+20, 255, 0, 0); 
			end
		end
	end
end

function DrawToonDataOnScreen()
	local player = GetLocalPlayer();
	local distance = GetDistance(target);
	local tX, tY, onScreen = WorldToScreen(GetUnitsPosition(player));
	tX = -20;
	tY = 215;
	if (onScreen == 1) then
		DrawLine(tX+65, tY-130, tX+185, tY-130, 255, 255, 0, 2);
		DrawText('Frostbite 1.8(SF): ' .. GetStatus(), tX+65, tY-130, 255, 255, 0);
		DrawLine(tX+65, tY-115, tX+185, tY-115, 255, 255, 0, 2);
		DrawText('Health: ' .. math.floor(GetHealthPercentage(player)) .. '%', tX+65, tY-105, 0, 255, 0);
		DrawText('Mana: ' .. math.floor(GetManaPercentage(player)) .. '%', tX+65, tY-95, 0, 225, 225);
		DrawText('Pull range: ' .. pullDistance .. ' yd. ' .. 
			 	'Level range: ' .. (GetLevel(localObj) - minLevelDiff) .. '-' .. (GetLevel(localObj) + maxLevelDiff), tX+65, tY-85, 255, 255, 255);
		if (useStopTimer) then
			DrawText('Stopping the bot in: ' .. math.floor(GetStopTime()) .. ' minutes...', tX+65, tY-75, 255, 165, 0);
		end
		if (logOutIfStuck) then DrawText('Stuck timeout: ' .. 'Logging out in' .. ' ' .. math.floor(stuckTimeOut-((GetTimeX()-GetSavedTime())/1000)) .. ' s...', tX+65, tY-65, 255, 255, 0); end
	end
end

function GetObjects()
	local objectTable = {};
	local obj_, type_ = GetFirstObject();
	while obj_ ~= 0 do
		if type_ == 3 or type_ == 4 then
			local objX, objY, objZ = GetUnitsPosition(obj_);
			local objR = GetLevel(obj_) - GetLevel(GetLocalPlayer()) + 25
			local objGUID = GetGUID(obj)
			objectTable[obj_] = {x = objX, y = objY, z = objZ, type = type_, r = objR, GUID = objGUID};
		end
		obj_, type_ = GetNextObject(obj_);
	end
	return objectTable;
end

function DrawMonstersAndPlayersOnScreen()
	local objectTable = GetObjects();
	if (drawMonsters) then
		for i,v in pairs(objectTable) do
			if IsDead(i) == 0
			and v.type == 3
			and CanAttack(i) == 1
			and IsCritter(i) == 0 then
				DrawMonsterDataOnScreen(i);
			end
		end
	end
	if (drawPlayers) then
		for i,v in pairs(objectTable) do
			if IsDead(i) == 0
			and v.type == 4
			and IsCritter(i) == 0 then
				DrawPlayerDataOnScreen(i);
			end
		end
	end
end

function round(num, numDecimalPlaces) 
	return tonumber(string.format("%." .. (numDecimalPlaces or 0) .. "f", num)) 
end

function Cast(spellName, target)
	if (HasSpell(spellName) == 1) then 
		if (IsSpellInRange(target, spellName) == 1) then 
			if (IsSpellOnCD(spellName) == 0) then 
				if (IsAutoCasting(spellName) == 0) then
					UpdateStatus(3); 
					TargetEnemy(target); 
					FaceTarget(target); 
					CastSpellByName(spellName); 
					return true; 
				end 
			end 
		end 
	end
	return false;
end

function Buff(spellName, player, oldTarget)
	if (IsStanding() == 1) then 
		if (HasSpell(spellName) == 1) then 
			if (HasBuff(player, spellName) == 0) then
				UpdateStatus(12);
				TargetEnemy(player);
				CastSpellByName(spellName); 
				TargetEnemy(oldTarget); 
				return true; 
			end 
		end 
	end
	return false;
end

function IsTimeGood() 
	if (GetVar('timer') == 0 or GetVar('timer') < GetTimeX()) then 
		return 1;
	end 
	return 0;
end

function UpdateTimer() 
	SetVar('timer', GetTimeX() + 1700);
end

function SetWaitTimer(x) -- Sets the script to wait x seconds
	SetVar('waitTimer', GetTimeX() + (x*1000)); 
end 

function GetWaitTime() 
	return (GetVar('waitTimer')-GetTimeX())/1000; 
end

function SetStopStatus(status) -- 1: Timer is set, 2: Bot has stopped
	SetVar('stopStatus', status);
end

function GetStopStatus()
	return GetVar('stopStatus'); 
end

function SetStopTimer(x) -- Sets the scripts stop time to current time + x minutes
	SetVar('stopTimer', GetTimeX() + (x*1000*60)); 
end 

function GetStopTime()
	return ((GetVar('stopTimer')-GetTimeX())/(1000*60));  
end 

function StopTime() 
	if (GetVar('stopTimer') == 0 or GetVar('stopTimer') < GetTimeX()) then 
		return 1; 
	end 
	return 0; 
end

function Wait() 
	if (GetVar('waitTimer') == 0 or GetVar('waitTimer') < GetTimeX()) then 
		return 1; 
	end 
	return 0; 
end

function SetPolyTimer() -- Sets the poly timer to 5 seconds
	SetVar('polyTimer', GetTimeX() + (5*1000)); 
end 

function GetPolyTimer() 
	if (GetVar('polyTimer') == 0 or GetVar('polyTimer') < GetTimeX()) then 
		return 1; 
	end 
	return 0;
end

function SetManaJadeTimer() -- Sets the mana gem timer to 121 seconds
	SetVar('jadeTimer', GetTimeX() + (121*1000)); 
end 

function GetManaJadeTimer() 
	if (GetVar('jadeTimer') == 0 or GetVar('jadeTimer') < GetTimeX()) then 
		return 1; 
	end 
	return 0; 
end

function EnemiesAttackingUs() -- returns number of enemies attacking us
    local unitsAttackingUs = 0; 
    local currentObj, typeObj = GetFirstObject(); 
    local localObj = GetLocalPlayer();
    while currentObj ~= 0 do 
    	if typeObj == 3 then
			if CanAttack(currentObj) == 1 and IsDead(currentObj) == 0 and ((IsTapped(currentObj) == 0 or IsTappedByMe(currentObj) == 1)) then
                if (GetUnitsTarget(currentObj) == localObj) then 
                	unitsAttackingUs = unitsAttackingUs + 1; 
                end 
            end 
       	end
        currentObj, typeObj = GetNextObject(currentObj); 
    end
    return unitsAttackingUs;
end

function PolymorphAdd(targetObj) 
    local currentObj, typeObj = GetFirstObject(); 
    local localObj = GetLocalPlayer();
    while currentObj ~= 0 do 
    	if typeObj == 3 then
			if (CanAttack(currentObj) == 1 and IsDead(currentObj) == 0 and ((IsTapped(currentObj) == 0 or IsTappedByMe(currentObj) == 1))) then
				if (currentObj ~= targetObj and GetUnitsTarget(currentObj) == localObj and HasSpell("Polymorph") == 1) then
					if (HasDebuff(currentObj, "Polymorph") == 0 and GetCreatureType(targetObj) ~= 'Elemental' and IsCritter(currentObj) == 0) then
						if (Cast('Polymorph', currentObj)) then 
							SetPolyTimer(); 
							AutoAttack(targetObj);
							return true; 
						end
					end 
				end 
			end 
		end
        currentObj, typeObj = GetNextObject(currentObj); 
    end
    return false;
end

function IsAddPolymorphed() 
	local currentObj, typeObj = GetFirstObject(); 
	local localObj = GetLocalPlayer();
	while currentObj ~= 0 do 
		if typeObj == 3 then
			if (HasDebuff(currentObj, "Polymorph") == 1) then 
				return true; 
			end
		end
		currentObj, typeObj = GetNextObject(currentObj); 
	end
    return false;
end

function GetPolymorphedTarget()
	local currentObj, typeObj = GetFirstObject(); 
	local localObj = GetLocalPlayer();
	while currentObj ~= 0 do 
		if typeObj == 3 then
			if (HasDebuff(currentObj, "Polymorph") == 1) then 
				return currentObj; 
			end
		end
		currentObj, typeObj = GetNextObject(currentObj); 
	end
   	return 0;
end

function AssignTarget(localObj, bot_) 
	if (bot_ == 1) then
		targetObj = 0; 
		-- Fetch last target
		lastTarget = GetTarget(); 
		-- Clear last target if it's dead or tapped by other player
		if (IsDead(lastTarget) == 1 or (IsTapped(lastTarget) == 1 and IsTappedByMe(lastTarget) == 0)) then
			ClearTarget();
			lastTarget = 0;
		else
			targetObj = lastTarget;
		end
		-- Fetch the nearest valid target
		nearestTarget = 0;
		mobDistance = pullDistance;
		local objectTable = GetObjects();
		for i,v in pairs(objectTable) do
			if IsDead(i) == 0 and v.type == 3 and CanAttack(i) == 1 and IsCritter(i) == 0 
			and ((GetLevel(i) <= GetLevel(localObj) + maxLevelDiff and GetLevel(i) >= GetLevel(localObj) - minLevelDiff) or GetUnitsTarget(i) == localObj)
			and GetDistance(i) < pullDistance and (IsTapped(i) == 0 or IsTappedByMe(i) == 1) then
				if (skipHumanoid and GetCreatureType(i) == 'Humanoid' and GetUnitsTarget(i) ~= localObj) then
					-- do nothing
				elseif (skipElemental and GetCreatureType(i) == 'Elemental' and GetUnitsTarget(i) ~= localObj) then
					-- do nothing
				elseif (skipUndead and GetCreatureType(i) == 'Undead' and GetUnitsTarget(i) ~= localObj) then
					-- do nothing
				else
					-- return the closest mob, or a mob that is attacking us
					if (GetDistance(i) < mobDistance) then
						-- New closest distance
						mobDistance = GetDistance(i);	
						nearestTarget = i;
					end
				end
			end
		end

		-- Select the closest target if our last target is dead
		if (lastTarget == 0) then
			targetObj = nearestTarget;
		end

		-- Check: If we are in combat but we have no targets perhaps it's low level mob, kill it
		if (lastTarget == 0 and nearestTarget == 0 and IsInCombat() == 1) then
			targetObj = GetTarget();
		end

		-- Check: Swap to the nearest enemy if not in combat yet
		if (IsInCombat() == 0 and GetDistance(nearestTarget) < GetDistance(lastTarget)) then 
			targetObj = nearestTarget; 
		end

		-- Check: Swap to the target with lowest HP
		lastTargetHP = GetHealthPercentage(lastTarget); 
		nearestTargetHP = GetHealthPercentage(nearestTarget);
		if (lastTargetHP >= nearestTargetHP and GetUnitsTarget(nearestTarget) == localObj) then 
			targetObj = nearestTarget;
		end
	else 
		targetObj = GetTarget(); -- Set target for rotation (player selection) 
	end
	return targetObj;
end

function Oponer(targetObj, localHealth, localMana, bot_) 
	UpdateStatus(2);
	
	-- Auto Attack target which also sets the enemy as target for us in the GUI
	AutoAttack(targetObj);

	-- Bot: Movement out of combat
	if (bot_ == 1) then
		-- Check if we need to stand up after eating and/or drinking
		if (IsStanding() == 0 and localHealth >= 98 and localMana >= 98) then 
			StopMoving(); 
			return; 
		end 
		if (IsInLineOfSight(targetObj) == 0 or GetDistance(targetObj) > 25) then
			MoveToTarget(targetObj); 
			return;
		else
			if (IsMoving() == 1) then 
				StopMoving(); 
				return; 
			end 
		end		
	end

	-- Decide the spell to pull with
	if (HasSpell("Frostbolt") == 1) then
		if (Cast('Frostbolt', targetObj)) then 
			return; 
		end
	elseif (HasSpell("Frostbolt") == 0) then
		if (Cast('Fireball', targetObj)) then 
			return; 
		end
	end
end

function CombatRoutine(targetObj, bot_, hasPolymorphedTarget, localHealth)
	-- Check: Dismount 
	if (HasBuff(localObj, mountBuffName) == 1) then 
		UseItem(mountItemName); 
		return; 
	end

	-- use potion if needed
	if (usePotion()) then
		return;
	end

	-- Bot: Movement in combat
	if (bot_ == 1) then
		-- Find best path after combat
		ResetNavigate(); 
		-- Check if we need to stand up after eating and/or drinking
		if (IsStanding() == 0) then 
			StopMoving(); 
			return;
		end 
		if (IsInLineOfSight(targetObj) == 0 or IsSpellInRange(targetObj, 'Fireball') == 0) then
			MoveToTarget(targetObj); 
			return;
		else
			if (IsMoving() == 1) then 
				StopMoving(); 
				return; 
			end 
			FaceTarget(targetObj); 
		end	
	end

	-- Auto Attack target which also sets the enemy as target for us in the GUI
	AutoAttack(targetObj);

	-- Update target's HP
	targetHealth = GetHealthPercentage(targetObj);	

	-- Use Mana Gem when low on mana (under 20%)
	if (localMana < 20 and GetManaJadeTimer() == 1) then
    		if (HasItem('Mana Ruby') == 1) then 
    			UseItem('Mana Ruby'); SetManaJadeTimer(); 
    			return; 
    		end
    		if (HasItem('Mana Citrine') == 1) then 
    			UseItem('Mana Citrine'); 
    			SetManaJadeTimer(); 
    			return; 
    		end
    		if (HasItem('Mana Jade') == 1) then 
    			UseItem('Mana Jade'); 
    			SetManaJadeTimer(); 
    			return; 
    		end
			if (HasItem('Mana Agate') == 1) then 
				UseItem('Mana Agate'); 
				SetManaJadeTimer(); 
				return; 
			end
	end

	-- Keep Ice Barrier up
	if (HasSpell("Ice Barrier") == 1 and HasBuff(localObj, "Ice Barrier") == 0 and IsSpellOnCD("Ice Barrier") == 0 and localMana > 8) then
		if (Buff('Ice Barrier', localObj, targetObj)) then 
			return; 
		end
	-- Use Cold Snap to clear the Ice Barrier CD if possible
	elseif (HasSpell("Ice Barrier") == 1 and IsSpellOnCD("Ice Barrier") == 1 and HasSpell("Cold Snap") == 1 and IsSpellOnCD("Cold Snap") == 0 and HasBuff(localObj, "Ice Barrier") == 0 and localMana > 8) then
		CastSpellByName("Cold Snap"); 
		return;
	end

	-- Use Ice Block if we have less than 35% HP to regain some mana
	if (localHealth < 35 and HasSpell("Ice Block") == 1 and IsSpellOnCD("Ice Block") == 0) then 
		CastSpellByName("Ice Block"); 
		return; 
	end

	-- Use Evocation if we have low Mana but still a lot of HP left
	if (localMana < 15 and localHealth > 40 and HasSpell("Evocation") == 1 and IsSpellOnCD("Evocation") == 0) then		
		CastSpellByName("Evocation"); 
		SetWaitTimer(1); 
		return;
	end

	-- Use Mana shield if we don't have Ice Barrier and we have more than 35% Mana left
	if (localMana > 35 and HasBuff(localObj, "Mana Shield") == 0 and HasBuff(localObj, "Ice Barrier") == 0) then
		if(Buff('Mana Shield', localObj, targetObj)) then 
			return; 
		end
	end
	
	-- Wand when low on mana or target is low
	if (localMana <= 10 or targetHealth <= 5 and HasRangedWeapon(localObj) == 1) then
		if (IsAutoCasting('Shoot') == 0) then 
			if (Cast('Shoot', targetObj)) then 
				return; 
			end
		else
			return; -- Keep using the wand (fix 1.7)
		end
	end

	-- Check: Polymorph one target if we pulled add(s)
	if (EnemiesAttackingUs() >= 2 and not hasPolymorphedTarget) then 
		UpdateStatus(15); 
		if (PolymorphAdd(targetObj)) then 
			return;
		end
	end

	if (Cone()) then
		return;
	end
	
	-- Cast: Fireblast when target under 80% HP
	if (targetHealth <= 80 and GetDistance(targetObj) < 20) then
		if (Cast('Fire Blast', targetObj)) then 
			return; 
		end
	end

	-- Check: Frostnova when the target is close, but not when we polymorhped one enemy or the target is affected by Frostbite
	if (GetDistance(targetObj) < 5 and not hasPolymorphedTarget and HasDebuff(targetObj, "Frostbite") == 0 and HasSpell("Frost Nova") == 1 and IsSpellOnCD("Frost Nova") == 0 and targetHealth > 15) then
		CastSpellByName("Frost Nova");
		return;
	end

	-- Cast: Frostbolt (Main damage source)
	if (Cast('Frostbolt', targetObj)) then 
		return; 
	end

	-- Cast: Fire Ball (last choice e.g. at level 1)
	if (HasSpell("Frostbolt") == 0) then
		if (Cast('Fireball', targetObj)) then 
			return; 
		end
	end
end 

function Conjure(bot_)

	inventoryFull = true;
	-- Check bags 1-5
	for i=1,5 do 
		for y=1,GetContainerNumSlots(i-1) do 
			texture, itemCount, locked, quality, readable = GetContainerItemInfo(i-1,y);
			if (itemCount == 0 or itemCount == nil) then inventoryFull = false; end 
		end 
	end

	if (bot_ == 1 and IsStanding() == 1 and inventoryFull == false) then
		-- Conjure Water
		if (HasItem('Conjured Purified Water') == 0 and 
			HasItem('Conjured Fresh Water') == 0 and
			HasItem('Conjured Water') == 0 and
			HasItem('Conjured Spring Water') == 0 and
			HasItem('Conjured Mineral Water') == 0 and
			HasItem('Conjured Crystal Water') == 0) then
				-- Check: Dismount 
				if (HasBuff(localObj, mountBuffName) == 1) then 
					Dismount(); 
					return; 
				end
				UpdateStatus(4);
				if (localMana > 10 and HasSpell('Conjure Water') == 1) then 
					CastSpellByName('Conjure Water'); 
					SetWaitTimer(5); 
					return true; 
				end
		end 
		
		-- Conjure Food
		if (HasItem('Conjured Bread') == 0 and
			HasItem('Conjured Muffin') == 0 and
			HasItem('Conjured Rye') == 0 and
			HasItem('Conjured Pumpernickel') == 0 and
			HasItem('Conjured Sourdough') == 0) then			
			-- Check: Dismount 
			if (HasBuff(localObj, mountBuffName) == 1) then 
				Dismount(); 
				return; 
			end
			if (localMana > 10 and HasSpell('Conjure Food') == 1) then 
				CastSpellByName('Conjure Food'); 
				SetWaitTimer(5); 
				return true; 
			end
		end 

		-- Conjure Mana Gem
		if (HasItem('Mana Ruby') == 0 and HasItem('Mana Citrine') == 0 and HasItem('Mana Jade') == 0 and HasItem('Mana Agate') == 0) then
			-- Check: Dismount 
			if (HasBuff(localObj, mountBuffName) == 1) then 
				Dismount(); 
				return; 
			end
			UpdateStatus(4);
			if (localMana > 25) then 
				if (HasSpell("Conjure Mana Ruby") == 1) then 
					CastSpellByName('Conjure Mana Ruby'); 
					SetWaitTimer(5); 
					return true; 
				end
        		if (HasSpell("Conjure Mana Citrine") == 1) then 
        			CastSpellByName('Conjure Mana Citrine'); 
        			SetWaitTimer(5); 
        			return true; 
        		end
        		if (HasSpell("Conjure Mana Jade") == 1) then 
        			CastSpellByName('Conjure Mana Jade');
        			SetWaitTimer(5); 
        			return true; 
        		end
				if (HasSpell("Conjure Mana Agate") == 1) then 
					CastSpellByName('Conjure Mana Agate'); 
					SetWaitTimer(5); 
					return true; 
				end
			end 
		end 
	end 
	return false;
end

function EatDrink()
	UpdateStatus(5);	
	-- Drink Water

	if (IsTimeGood() == 1) then if (IsDrinking() == 0 and localMana < drinkMana) then if (IsMoving() == 1) then StopMoving(); return true; end

		if type(drinkList) == "string" then drinkList = {drinkList} 			end;
		for _,v in pairs (drinkList) do
			if v == "" or v == nil or  type(v) ~= "string" then
				v = "nil"
			end
			if HasItem(v) == 1 then
				if UseItem(v) == 1 then
					UpdateTimer();
					end
					return true;
				end
			end
		end
	end

	-- Eat Food

	if (IsEating() == 0 and (localHealth < eatHealth or (IsDrinking() == 1 and localHealth < 80))) then
		if (IsMoving() == 1) then StopMoving(); return true; 			end
		if type(eatList) == "string" then eatList = {eatList} 			end;
		for _,v in pairs (eatList) do
			if v == "" or v == nil or  type(v) ~= "string" then
				v = "nil"
			end
			if HasItem(v) == 1 then
				if UseItem(v) == 1 then
					UpdateTimer(0);
				end
				return true;
			end
		end
	end
	return false;
end

-- Run backwards if the target is within range
function RunBackwards(targetObj, range) 
	UpdateStatus(10);
	local localObj = GetLocalPlayer();
 	if targetObj ~= 0 then
 		local xT, yT, zT = GetPosition(targetObj);
 		local xP, yP, zP = GetPosition(localObj);
 		local distance = GetDistance(targetObj);
 		local xV, yV, zV = xP - xT, yP - yT, zP - zT;	
 		local vectorLength = math.sqrt(xV^2 + yV^2 + zV^2);
 		local xUV, yUV, zUV = (1/vectorLength)*xV, (1/vectorLength)*yV, (1/vectorLength)*zV;		
 		local moveX, moveY, moveZ = xT + xUV*100, yT + yUV*100, zT + zUV*100;		
 		if (distance < range and IsInLineOfSight(targetObj) == 1) then 
 			Move(moveX, moveY, moveZ);
 			return true;
 		end
	end
	return false;
end

function Paranoid(range)
	local currentObj, typeObj = GetFirstObject(); 
	local localObj = GetLocalPlayer();
	while currentObj ~= 0 do 
		if typeObj == 4 then -- player
	    	if (GetDistance(currentObj) < range and currentObj ~= localObj and IsInCombat() == 0) then 
	    		return true;
	    	end 
	    end
		currentObj, typeObj = GetNextObject(currentObj);
    end
	return false;
end

function UpdateStatus(statusNr) 
	SetVar('currentStatus', statusNr); 
end

function GetStatus() 
	local status = GetVar('currentStatus');
	if (status == 0) then 
		return "Script is paused/error?";
	elseif (status == 1) then 
		return "Navigating to the next point in the path...";
	elseif (status == 2) then
		return "Engaging the next target...";
	elseif (status == 3) then 
		return "Casting a spell...";
	elseif (status == 4) then 
		return "Conjuring food or drinks...";
	elseif (status == 5) then 
		return "Drinking and/or eating...";
	elseif (status == 6) then 
		return "Waiting 30 seconds before we release";
	elseif (status == 7) then 
		return "Navigating to corpse...";
	elseif (status == 8) then 
		return "Paused: player(s) within the paranoid range...";
	elseif (status == 9) then 
		return "Inventory is full: Stopping the bot...";
	elseif (status == 10) then 
		return "Moving away from frozen target...";
	elseif (status == 11) then 
		return "Looting...";
	elseif (status == 12) then 
		return "Buffing...";
	elseif (status == 13) then 
		return "Enemy player/pet was targeted. Clearing target and pausing for 30s...";
	elseif (status == 14) then 
		return "Wait timer: " .. GetWaitTime() .. " seconds...";
	elseif (status == 15) then 
		return "Add(s) detected, polymorphing...";
	elseif (status == 16) then 
		return "Inventory is full, going to the vendor...";
	else
		return "unknwown status";
	end
end

-----------------------------------
-- Local Variables
-----------------------------------
localObj = GetLocalPlayer();
localMana = GetManaPercentage(localObj);
localManaVal = GetMana(localObj);
localHealth = GetHealthPercentage(localObj);
localLevel = GetLevel(localObj);
local hasPolymorphedTarget = false;
local targetObj = 0;

-- Display Player and Monster data on the screen
if (drawUnitsData) then 
	DrawMonstersAndPlayersOnScreen(); 
end

-- Check: Run the if stuck function
if (logOutIfStuck) then
	StopIfStuck();
end

-- Check: If we are dead, run to corpse		
if (IsDead(localObj) == 1) then 
	UpdateStatus(7); 
	RetrieveCorpse(); -- Sometimes the Grave() function doesn not ress
	Grave(); 
	return; 
end

-- Check: Delete grey items
if (IsInCombat() == 0 and IsDead(localObj) == 0 and deleteGrey) then
		
	for bag = 0, 4 do 
		for slot = 1, GetContainerNumSlots(bag) do 
			local name = GetContainerItemLink(bag,slot)
			if name and string.find(name,"ff9d9d9d") then 
				PickupContainerItem(bag,slot); 
				DeleteCursorItem(); 
			end 
		end 
	end

end

-- Check: Fetch our current target if it's not dead
if (GetTarget() ~= 0) then
	if (IsDead(GetTarget()) == 0) then 
		targetObj = GetTarget();
	else
		targetObj = 0;
	end
end

-- Check: Move backwards if the target is affected by Frost Nova or Frost Bite
if ((HasDebuff(targetObj, "Frostbite") == 1 or HasDebuff(targetObj, "Frost Nova") == 1) and HasBuff(localObj, "Evocation") == 0 and targetObj ~= 0 and IsInCombat() == 1 and IsCasting() == 0 and IsMovementDisabed(localObj) == 0) then
	if (RunBackwards(targetObj, 7)) then -- Moves if the target is closer than 7 yards
		return; 
	end 
end

-- Check: wait for channeling, casting or the wait-timer
if (IsChanneling() == 1 or IsCasting() == 1) then 
	return; 
end 

if (Wait() == 0) then 
	UpdateStatus(14); 
	return; 
end 

if (IsTimeGood() == 0) 
	then return; 
end

-- Check: If Paranoid enabled, pause the bot when other players are within paranoidRange and we are not in combat
if (paranoid and Paranoid(paranoidRange) and IsInCombat() == 0 and bot_ == 1) then 
	UpdateStatus(8); 
	SavePos();
	ClearTarget(); 
	return; 
end

-- Check: Keep us buffed, but don't spend mana on buffs in combat
if (IsInCombat() == 0 and localMana > 40 and HasBuff(localObj, mountBuffName) == 0) then
	if (Buff('Arcane Intellect', localObj)) then 
		SavePos();
		SetWaitTimer(2); 
		return; 
	end
end
if (IsInCombat() == 0 and localMana > 10 and HasBuff(localObj, mountBuffName) == 0) then
	if (Buff('Dampen Magic', localObj)) then 
		SavePos();
		SetWaitTimer(2); 
		return; 
	end
end
if (HasSpell('Ice Armor') == 1 and HasBuff(localObj, 'Ice Armor') == 0) then
	if (IsInCombat() == 0 and localMana > 10 and HasBuff(localObj, mountBuffName) == 0) then
		if (Buff('Ice Armor', localObj)) then 
			SavePos();
			SetWaitTimer(2); 
			return; 
		end
	end
elseif (HasSpell('Frost Armor') == 1 and HasBuff(localObj, 'Frost Armor') == 0 and HasBuff(localObj, 'Ice Armor') == 0) then
	if (IsInCombat() == 0 and localMana > 10 and HasBuff(localObj, mountBuffName) == 0) then 
		if (Buff('Frost Armor', localObj)) then 
		SavePos();
    		SetWaitTimer(2); 
       		return; 
    	end
    end
end

-- Check: Clear target if we target ourselves
if (GetTarget() == localObj) then
	ClearTarget(); 
	return; 
end

if (bot_ == 0) then 
	-- Rotation: Pause the script until the player stops moving
	if (IsMoving() == 1) then 
		return; 
	end 	
else	
	-- Bot: Loot routine, regain HP/Mana before we loot
	local canLoot = true;
	local rest = false;

	-- Check: Should we rest before looting/pulling mobs
	if ((localHealth < eatHealth) or (localMana < drinkMana) or (IsEating() == 1) or (IsDrinking() == 1)) then
		rest = true; 
		canLoot = false;
	end

	-- Check: Loot
	if (canLoot and Loot() == 1 and targetObj == 0) or (Loot() == 1 and IsInCombat() == 0) then 
		if (IsDead(GetTarget()) == 0) then
			ClearTarget();
		end
		UpdateStatus(11); 
		return; 
	end

	-- Check: Vendor
	if (IsInCombat() == 0) then
		if (canLoot and Vendor() == 1) then
			SavePos();
			if (CanMerchantRepair()) then 
				RepairAllItems(); 
			end
           		UpdateStatus(16);
            		if (useMount and HasItem(mountItemName) == 1 and HasBuff(localObj, mountBuffName) == 0) then 
            			if (IsMoving() == 1) then 
                			StopMoving(); 
                			return; 
                		end 
                		if (UseItem(mountItemName)) then
                			return;
               			end 
           		end
            	return;
        	end
	end
	-- Get the enemy target if we are not resting 
	if (not rest) then 
		targetObj = AssignTarget(localObj, bot_); 
	end
	
end

-- Check: If there is only the polymorphed target left, select is as target
if (IsInCombat() == 1 and targetObj == 0 and GetPolymorphedTarget() ~= 0) then 
	targetObj = GetPolymorphedTarget(); 
end

-- Check: If we polymorphed one target to avoid mutiple casts
if (GetPolyTimer() == 0 or IsAddPolymorphed()) then 
	hasPolymorphedTarget = true; 
end

-- Check: If the target is a player or a player's pet, set the script to wait 10-30 seconds...
if (UnitPlayerControlled("target") and GetTarget() ~= localObj and bot_ == 1 and UnitFactionGroup("target") == enemyFaction) then 
	UpdateStatus(13); 
	SavePos();
	SetWaitTimer(random(10, 30)); 
	targetObj = 0; 
	ClearTarget(); 
	return; 
end

-- Check: If we reached the stop timer, stop the bot, HS if HSWhenStop is set to true
if (StopTime() == 1 and IsInCombat() == 0 and useStopTimer and Loot() == 0) then
	-- if no stop time or if we manually start the bot again, set the stop time
	if (GetStopStatus() ~= 1) then  
		SetStopTimer(maxRunTimeMinutes);
		SetStopStatus(1); -- Timer has been set
		UpdateTimer();
		return;
	end
	-- Make sure we stand still, if we are going to use HS
	if (IsMoving() == 1) then
		StopMoving();
		UpdateTimer(); 
		return;
	end
	-- HS before we stop and logout if possible and it's set to true
	if (GetContainerItemCooldown(hsBag-1,hsSlot) == 0 and hsWhenStop) then 
		UseItem('Hearthstone'); 
		return; 
	-- Stop Bot and Logout after HS has been used or if it's on CD
	else
		StopBot(); 
		SetStopStatus(2); -- Bot has stopped
		Logout(); 
		return; 
	end 
end

-- Check: Stop and HS when bags are full
if (stopOnFullBags and IsInCombat() == 0) then
	inventoryFull = true;
	-- Check bags 1-5
	for i=1,5 do 
		for y=1,GetContainerNumSlots(i-1) do 
			texture, itemCount, locked, quality, readable = GetContainerItemInfo(i-1,y);
			if (itemCount == 0 or itemCount == nil) then 
				inventoryFull = false; 
			end 
		end 
	end 
	if (inventoryFull) then
		UpdateStatus(9); 
		if (IsMoving() == 1) then 
			StopMoving(); 
			return 
		end
		if (GetContainerItemCooldown(hsBag-1,hsSlot) == 0 and hsWhenStop) then 
			UseItem('Hearthstone'); 
			UpdateTimer(); 
			return; 
		else -- Stop Bot and Logout after HS has been used / is on CD
			StopBot(); 
			Logout(); 
			return; 
		end 
	end
end

-- Check: Is the target an valid enemy, then do the pull/combat rotation
if (targetObj ~= 0 and targetObj ~= localObj) then
	-- Can't attack dead targets
	if (IsDead(targetObj) == 1) then 
		if (GetTarget() == targetObj) then 
			-- Add short delay so we get out of combat and we can loot...
			SetWaitTimer(Random(0.2,0.6));
			ClearTarget(); 
		end 
		return; 
	end
	-- Can't attack friendly targets
	if (CanAttack(targetObj) == 0) then 
		if (GetTarget() == targetObj) then 
			ClearTarget(); 
		end 
		return; 
	end
	
	-- Check: Dismount when in range to pull
	if (GetDistance(targetObj) < 30 and HasBuff(localObj, mountBuffName) == 1) then 
		UseItem(mountItemName); 
		return; 
	end

	if (IsInCombat() == 0) then 
		Oponer(targetObj, localHealth, localMana, bot_); -- Oponer/pull function
		return;
	else 
		CombatRoutine(targetObj, bot_, hasPolymorphedTarget, localHealth); -- In combat rotation
		return;
	end
else
	-- Bot: Regen HP/Mana then navigate along the path when we are out of combat
	if (bot_ == 1 and IsInCombat() == 0) then
		-- Conjure water/food if we need to
		if (Conjure(bot_)) then 
			return; 
		end
		
		-- Eat and/or drink if we need to 
		if (IsSwimming() == 1 and IsInCombat() == 0) then 
			-- Navigate until we are not swimming anymore so we can drink and/or drink
			Navigate(); 
			return;
		else
			if (Bandage()) then
				return;
			end
			if (EatDrink()) then 
				return; 
			end 	
		end	

		-- Wait for eating/drinking before we move on
		if(localMana >= 98 and localHealth >= 98 and IsStanding() == 0) then 
			StopMoving(); 
			return; 
		end
		if(IsStanding() == 0 and localMana > drinkMana and IsDrinking() == 0 and localHealth > eatHealth and IsEating() == 0) then 
			StopMoving(); 
			return; 
		end
		if(localMana < drinkMana or localHealth < eatHealth) then 
			if (IsMoving() == 1) then 
				StopMoving(); 
			end 
			return; 
		end
		if (IsDrinking() == 1 or IsEating() == 1) then 
			if (IsMoving() == 1) then 
				StopMoving(); 
			end 
			return; 
		end
		
		-- Mount before we navigate
		if (useMount and HasItem(mountItemName) == 1 and HasBuff(localObj, mountBuffName) == 0) then 
			if (IsMoving() == 1) then
				StopMoving(); 
				return; 
			end 
			if (UseItem(mountItemName)) then 
				return; 
			end 
		end
		
		-- Keep moving (navigate) to the next point in the path
		if (Navigate() == 1) then 
			UpdateStatus(1); 
			return; 
		end 
	end
end