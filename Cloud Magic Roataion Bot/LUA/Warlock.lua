local size = 1
local totemsFrame = {}
local WarlockBaseFrame = CreateFrame("frame", "WarlockBase", parent)
local function isDemonology()
	local _, class,index = UnitClass("player")
	return (index == 9 and GetSpecialization() == 2) and true or false
end
local function isWarlock()
	local _, class,index = UnitClass("player")
	return (index == 9 and GetSpecialization() == 2) and true or false
end


local WarlockDemons = {}
WarlockDemons.wildImpCount = 0
WarlockDemons.dreadStalkerCount = 0
WarlockDemons.GlareCount = 0
WarlockDemons.bigPetCount = 0
WarlockDemons.wildImpEP = 0
WarlockDemons.dreadStalkerEP = 0
WarlockDemons.GlareEP = 0
WarlockDemons.bigPetEP = 0
WarlockDemons.Pool = {{},{duration, note,creation,empowered,spellid}} 
WarlockDemons.validDemonsDB = {
[55659]  = {duration=12}, --wildImps
[99737]  = {duration=12}, -- Wild imps from dreadStalkers(talented only)
[98035]  = {duration=12}, -- dreadStalkers, which is a vehicle.Imps on dreadStalkers are 99737
[103673] = { duration = 12}, -- Darkglare
[17252]  = {duration=100}, -- Service/pet
[11859]  = {duration=25}, -- doomguard
[89]     = {duration=25} -- infernal 
}
local last = 1
local function updateTotemsFrame()
	if isDemonology then
	
		totemsFrame[0].t:SetColorTexture(WarlockDemons.wildImpCount/100, WarlockDemons.wildImpEP/100,0, alphaColor)
		totemsFrame[1].t:SetColorTexture(WarlockDemons.dreadStalkerCount/100, WarlockDemons.dreadStalkerEP/100,0, alphaColor)
		totemsFrame[2].t:SetColorTexture(WarlockDemons.GlareCount/100, WarlockDemons.GlareEP/100,0, alphaColor)
		totemsFrame[3].t:SetColorTexture(WarlockDemons.bigPetCount/100, WarlockDemons.bigPetEP/100,0, alphaColor)
	end
end
function petImpCount(event, ...)
    local compTime = GetTime()
    -- time out any imps(12 seconds)
	for index, v in pairs(WarlockDemons.Pool) do
        if v.creation ~= nil then
		   if ( v.creation + v.duration ) < compTime then

                    v.duration = nil
                    v.note = nil
                    v.creation = nil
                    v.empowered = nil
                    v.spell = nil

                    v = nil

            end
			--print(("Imp timed out. Count: |cff00ff00%d|r"):format(impCount))
        end
    end
    local _,timestamp, combat_event, _, sourceGUID, sourceName, sourceFlags, sourceFlags2, destGUID, destName, destFlags, destFlags2, spellId, spellName, spellSchool = ...
	
    if sourceGUID ~= UnitGUID('player')  then
        return
    end
    if combat_event == "SPELL_SUMMON" then
        --print("Pets Counter Summon fired")
        local _, _, _, _, _, _, _, creature_id, _ = destGUID:find('(%S+)-(%d+)-(%d+)-(%d+)-(%d+)-(%d+)-(%S+)')
        creature_id = tonumber(creature_id)
		
        for id, v in pairs(WarlockDemons.validDemonsDB) do
            if id == creature_id then
                WarlockDemons.Pool[destGUID] = { duration = v.duration, note = destGUID,creation = GetTime(),empowered = false, spell = id }
				return
            end
        end
    elseif combat_event == 'SPELL_INSTAKILL' then
        if spellId == 196278 then -- implosion
            --print("Pets Counter Implosion")
            for k, b in pairs(WarlockDemons.Pool) do
                if b.note == destGUID then

                    b = nil
                end
            end
        end
    end
		-- imp died
	if combat_event == "UNIT_DIED" or combat_event == "UNIT_DESTROYED" or combat_event == "UNIT_DISSIPATES" then
       for k, b in pairs(WarlockDemons.Pool) do
			if sourceGUID == k then

                b = nil
				--print(("Imp died. Count: |cff00ff00%d|r"):format(impCount))
			end
        end

    end
	if combat_event == 'SPELL_AURA_APPLIED' then
		if spellId == 193396 then -- Demonic Empowerment
           --print("Pets Counter Aura applied")
			for k, b in pairs(WarlockDemons.Pool) do
               b.empowered = true
			end
        end

    elseif combat_event == 'SPELL_AURA_REMOVED' then
		if spellId == 193396 then -- Demonic Empowerment
           --print("Pets Counter Aura removed")
           for k, b in pairs(WarlockDemons.Pool) do
				if b.note == destGUID and (v.creation + v.duration + 1 ) < compTime then

                    b.empowered = false
				end
            end

        end
    end

    WarlockDemons.wildImpCount = 0
	WarlockDemons.dreadStalkerCount = 0
	WarlockDemons.bigPetCount = 0
	WarlockDemons.wildImpEP = 0
	WarlockDemons.dreadStalkerEP = 0
	WarlockDemons.GlareEP = 0
	WarlockDemons.GlareCount = 0
	for i, v in pairs(WarlockDemons.Pool) do
		if v.spell == 55659 then

            WarlockDemons.wildImpCount = WarlockDemons.wildImpCount +1
			if v.empowered then

                WarlockDemons.wildImpEP = WarlockDemons.wildImpEP + 1
            end
        end
		if v.spell == 99737 or v.spell == 98035 then --193332 196273 19331 196274

            WarlockDemons.dreadStalkerCount = WarlockDemons.dreadStalkerCount + 1
			if v.empowered then

                WarlockDemons.dreadStalkerEP = WarlockDemons.dreadStalkerEP + 1

            end
        end
		if v.spell == 103673 then
            WarlockDemons.GlareCount = WarlockDemons.GlareCount + 1
			if v.empowered then

                WarlockDemons.GlareEP = WarlockDemons.GlareEP + 1

            end
        end
		if v.spell == 11859 or v.spell == 89 then
            WarlockDemons.bigPetCount = WarlockDemons.bigPetCount + 1
			if v.empowered then

                WarlockDemons.bigPetEP = WarlockDemons.bigPetEP + 1

            end
        end
    end
end
local function InitializeOne()
	 for i = 0, 4 do
	 	totemsFrame[i] = CreateFrame("frame", "", parent)
		totemsFrame[i]:SetSize(size, size);
		totemsFrame[i]:SetPoint("TOPLEFT", size * (i), -(size * 14))           -- column 10-14 row 21
		totemsFrame[i].t = totemsFrame[i]:CreateTexture()        
		totemsFrame[i].t:SetColorTexture(0, 0, 0, alphaColor)
		totemsFrame[i].t:SetAllPoints(totemsFrame[i])
		totemsFrame[i]:Show()
    end
	if	(isWarlock) then
		totemsFrame[table.maxn (totemsFrame)]:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
		totemsFrame[table.maxn (totemsFrame)]:SetScript("OnUpdate",updateTotemsFrame)
		totemsFrame[table.maxn (totemsFrame)]:SetScript("OnEvent",petImpCount)
	end
end

local function eventHandler(self, event, ...)
	local arg1 = ...
	if event == "ADDON_LOADED" then
		if (arg1 == "[CloudMagic]") then
			InitializeOne()
		end
	end
		if event == "PLAYER_ENTERING_WORLD"then
		currentSpec = GetSpecialization()
		currentSpecId = currentSpec and select(1, GetSpecializationInfo(currentSpec)) or 0
	end
	
end
WarlockBaseFrame:RegisterEvent("ADDON_LOADED")
WarlockBaseFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
WarlockBaseFrame:SetScript("OnEvent", eventHandler)