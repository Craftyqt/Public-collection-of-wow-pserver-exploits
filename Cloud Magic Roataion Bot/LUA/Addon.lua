-- Configurable Variables
local size = 1;	-- this is the size of the "pixels" at the top of the screen that will show stuff, currently 5x5 because its easier to see and debug with

---Tables
local npcDetect = {PlatesOn = 0,enemiesPlate = 0, activeUnitPlates = {}, npcCountFrame = nil}
Global_Npc_Nameplate = npcDetect.enemiesPlate
local EquipmentManger = {
invSlots = {
1,3,5,7,10,15
},
setItemsT19 = {
	--[DK-T19]
138355,138349,138361,138352,138358,138364,
--[DH-T19]
138378,138376,138380,138377,138379,138375,

--[Druid-T19]
138330,138324,138336,138327,138333,138366,

--[Hunter-T19]
138342,138339,138347,138340,138344,138368,

--[Mage-T19]
138312,138318,138321,138309,138315,138365,

--[Monk-T19]
138331,138325,138337,138328,138334,138367,

--[Paladin-T19]
138356,138350,138362,138353,138359,138369,

--[Priest-T19]
138313,138319,138322,138310,138316,138370,

--[Rogue-T19]
138332,138326,138338,138329,138335,138371,

--[Shaman-T19]
138343,138346,138348,138341,138345,138372,

--[Warlock-T19]
138314,138320,138323,138311,138317,138373,

--[Warrior-T19]
138357,138351,138363,138354,138360,138374,
},
 setItemsT20 = {
	--[DK-T20]
147124, 147126, 147122, 147121, 147123, 147125,

--[DH-T20]
147130, 147132, 147128, 147127, 147129, 147131,

--[Druid-T20]
147136, 147138, 147134, 147133, 147135, 147137,

--[Hunter-T20]
147142, 147144, 147140, 147139, 147141, 147143,

--[Mage-T20]
147147, 147150, 147145, 147149, 147146, 147148,

--[Monk-T20]
147154, 147156, 147152, 147151, 147153, 147155,

--[Paladin-T20]
147160, 147162, 147158, 147157, 147159, 147161,

--[Priest-T20]
147165, 147168, 147163, 147167, 147164, 147166,

--[Rogue-T20]
147172, 147174, 147170, 147169, 147171, 147173,

--[Shaman-T20]
147178, 147180, 147176, 147175, 147177, 147179,

--[Warlock-T20]
147183, 147186, 147181, 147185, 147182, 147184,

--[Warrior-T20]
147187, 147188, 147189, 147190, 147191, 147192,
},
T19 = 0,
T20 = 0,
Legendary1 = 0,
legendary2 = 0,
}


local Race = {
	["Human"] = 0.01,
	["Dwarf"]= 0.02,
	["NightElf"]= 0.03,
	["Gnome"]= 0.04,
	["Draenei"]= 0.05,
	["Pandaren"]= 0.06,
	["Orc"]= 0.07,
	["Scourge"]= 0.08,
	["Tauren"]= 0.09,
	["Troll"]= 0.10,
	["BloodElf"]= 0.11,
	["Goblin"]= 0.12,
    ["Worgen"] = 0.13,
}

local Spec = { Id ={
[0] = 0,
	[250] = 0.01,
	[251] = 0.02,
	[252] =0.03,
	[577] = 0.04,
	[581] =0.05,
	[102] = 0.06,
	[103] =0.07,
	[104] =0.08,
	[105] =0.09,
	[253] = 0.10,
	[254] =0.11,
	[255] = 0.12,
	[62] =0.13,
	[63] = 0.14,
	[64] =0.15,
	[268] = 0.16,
	[269] =0.17,
	[270] = 0.18,
	[65] = 0.19,
	[66] = 0.20,
	[70] =0.21,
	[256] = 0.22,
	[257]=.23,
	[258] =0.24,
	[259] =0.25,
	[260] =0.26,
	[261] = 0.27,
	[262] = 0.28,
    [263] = 0.29,
	[264] = 0.30,
	[265] = 0.31,
	[71] = 0.32,
	[72] = 0.33,
	[73] = 0.34,
	[266] = 0.35,
    [267] = 0.36},
	Interrupt = {	
	[ 262 ] =  57994 , -- Wind Shear
    [ 264 ] =  57994 , -- Wind Shear
    [ 263 ] =  57994 , -- Wind Shear
	[ 102 ] =  190984 , -- Solar Wrath
	[ 103 ] =  5221 , -- Shre
	[ 105 ] =  190984 , -- Solar Wrat
	[ 266 ] =  603 , -- Doom
	[ 265 ] =  980 , -- Agony
	[ 267 ] =  29722 , -- Incinerat
	[ 268 ] =  205523 , -- Blackout Strike
	[ 270 ] =  107428 , -- Rising Sun Kick
	[ 269 ] =  107428 , -- Rising Sun Kick
	[ 253 ] =  147362 , -- Counter Shoot
    [ 254 ] =  147362 , -- Counter Shot
	[ 255 ] =  190928 , -- Mongoose Bit
	[ 63 ] =  133 , -- Fireball
	[ 62 ] =  30451 , -- Arcane Blast
	[ 64 ] =  116 , -- Frostbolt
    [ 65 ] =  35395 , -- Crusader Strike
	[ 66 ] =  53600 , -- Shield of the Righteous
	[ 70 ] =  35395 , -- Crusader Strike
    [ 256 ] =  47540 , -- Penance
	[ 257 ] =  585 , -- Smite
	[ 258 ] =  8092 , -- Mind Blast
	[ 104 ] =  33917 , -- Mangle
	[ 102 ] =  190984 , -- Solar Wrath
	[ 103 ] =  5221 , -- Shred
	[ 105 ] =  5176 , -- Solar Wrat
	[ 251 ] =  49143 , -- Frost Strike
    [ 252 ] =  85948 , -- Festering Strike
	[ 250 ] =  49998 , -- Death Strike
	[ 71 ] =  12294 , -- Mortal Strike
	[ 577 ] = 162243 , --Demon's Bite
	[ 581 ] = 203782 , --Shear
	[ 259 ] = 1329 , --Mutilate
	[ 260 ] = 193315 , --Saber Slash
	[ 261 ] = 53 , --Backstab
	[ 72 ] = 23881 , --Bloodthirst
	[ 73 ] = 20243 , --Devastate	
	},
	Spell = {
	[ 102 ] =  190984 , -- Solar Wrath
	[ 103 ] =  5221 , -- Shre
	[ 105 ] =  190984 , -- Solar Wrat
	[ 262 ] =  188196 , -- Lightning Bolt
    [ 264 ] =  403 , -- Lightning Bolt
    [ 263 ] =  193786 , -- Rockbiter
	[ 266 ] =  603 , -- Doom
	[ 265 ] =  980 , -- Agony
	[ 267 ] =  29722 , -- Incinerat
	[ 268 ] =  205523 , -- Blackout Strike
	[ 270 ] =  107428 , -- Rising Sun Kick
	[ 269 ] =  107428 , -- Rising Sun Kick
	[ 253 ] =  147362 , -- Counter Shoot
    [ 254 ] =  147362 , -- Counter Shot
	[ 255 ] =  190928 , -- Mongoose Bit
	[ 63 ] =  133 , -- Fireball
	[ 62 ] =  30451 , -- Arcane Blast
	[ 64 ] =  116 , -- Frostbolt
    [ 65 ] =  35395 , -- Crusader Strike
	[ 66 ] =  53600 , -- Shield of the Righteous
	[ 70 ] =  35395 , -- Crusader Strike
    [ 256 ] =  47540 , -- Penance
	[ 257 ] =  585 , -- Smite
	[ 258 ] =  8092 , -- Mind Blast
	[ 104 ] =  33917 , -- Mangle
	[ 102 ] =  190984 , -- Solar Wrath
	[ 103 ] =  5221 , -- Shred
	[ 105 ] =  5176 , -- Solar Wrat
	[ 251 ] =  49143 , -- Frost Strike
    [ 252 ] =  85948 , -- Festering Strike
	[ 250 ] =  49998 , -- Death Strike
	[ 71 ] =  12294 , -- Mortal Strike
	[ 577 ] = 162243 , --Demon's Bite
	[ 581 ] = 203782 , --Shear
	[ 259 ] = 1329 , --Mutilate
	[ 260 ] = 193315 , --Saber Slash
	[ 261 ] = 53 , --Backstab
	[ 72 ] = 23881 , --Bloodthirst
	[ 73 ] = 20243 , --Devastate	
	},
}

-- Actual Addon Code below

parent = CreateFrame("frame", "ParentFrame", UIParent)
parent:SetSize(55 * size, 20 * size);  -- Width, Height
parent:SetPoint("TOPLEFT", 0, 0)
parent:RegisterEvent("ADDON_LOADED")
parent:RegisterEvent("NAME_PLATE_UNIT_ADDED")
parent:RegisterEvent("PLAYER_ENTERING_WORLD")
parent:RegisterEvent("PLAYER_REGEN_DISABLED")
parent:RegisterEvent("PLAYER_REGEN_ENABLED")
parent.t = parent:CreateTexture()
parent.t:SetColorTexture(0, 0, 0, 1)
parent.t:SetAllPoints(parent)
parent:SetFrameStrata("TOOLTIP");

local flagFrame = {}
local cooldownframes = {}
local updateSpellChargesFrame = {}
local buffFrames = {}
local playerDebuffFrames = {}
local petBuffFrames = {}
local lastSpellFrame = {}
local lastPower = 0
local currentSpec = GetSpecialization()
local currentSpecId = 0
local lastPlayerDebuffState = {}
local targetLastSpellFrame = {}
local targetArenaFrame = {}
local targetDebuffFrames = {}
local spellInRangeFrames = {}
local damageModifierFrames = {}
local IsDispellableFrame = {}
local healthFrame = nil
local wildPetsFrame = nil
local targetHealthFrames = {}
local isTargetFriendlyFrame = nil
local hasTargetFrame = nil
local powerFrames = {}
local hasteFrame = nil
local playerIsCastingFrame = nil
local targetIsCastingFrame = nil
local unitIsVisibleFrame = nil
local unitPetFrame = nil
local lastCooldownState = {}
local lastSpellChargeCharges = {}
local lastBuffState = {}
local lastBuffStatePet = {}
local lastDebuffState = {}
local TargetBuffs = { }
local itemframes = { }
local buffLastState  = { }
local runePrev = 0
local ssPrev = 0
local ccPrev = 0
local hpPrev = 0
local lastUnitPower = 0
local lastCombat = nil
local alphaColor = 1
local spellOverlayedFrames = {}
local PlayerStatFrame = {}
local playerClass, englishClass, classIndex = UnitClass("player");



local function TurnOnPlates()
	if GetCVar("nameplateShowEnemies") == "1" then
		npcDetect.PlatesOn= 1
	else
		npcDetect.PlatesOn= 0
	end
end
local function activeEnemies()
	currentSpecId = currentSpec and select(1, GetSpecializationInfo(GetSpecialization())) or 0
    npcDetect.enemiesPlate = 0
	local spell = Spec.Spell[currentSpecId]
	for k, v in pairs(npcDetect.activeUnitPlates) do
       if v ~= nil then
            if UnitCanAttack("player", k) and LibStub("SpellRange-1.0").IsSpellInRange(spell, k) == 1 and 
            UnitIsDead(k) == false and UnitAffectingCombat(k) then
                npcDetect.enemiesPlate = npcDetect.enemiesPlate + 1
            --print("what is k:",k,"Is ",v," In range ",LibStub("SpellRange-1.0").IsSpellInRange("Mongoose Bite", v)," Is unit dead :",UnitIsDead(v))
        
            end
        end
    end
	Global_Npc_Nameplate = npcDetect.enemiesPlate 
    npcDetect.enemiesPlate = npcDetect.enemiesPlate/100
    
end
local function NameplateFrameUPDATE()
	activeEnemies()
	TurnOnPlates()
	--TurnOnPlates()
	--print("Npc counT",npcDetect.enemiesPlate)
	npcDetect.npcCountFrame.t:SetColorTexture(1, npcDetect.enemiesPlate, npcDetect.PlatesOn, alphaColor)
end

local function AddNameplate(unitID)
	local GUID = false
	for k,v in pairs(npcDetect.activeUnitPlates)do
		 npcDetect.activeUnitPlates[k] = nil
	end	
	for i=1, 30 do
		if	UnitGUID ("nameplate"..i) ~= nil and not UnitIsPlayer("nameplate".. i) then
			for k, v in pairs(npcDetect.activeUnitPlates) do
			--print("Nameplate :","nameplate"..i,"GUID",UnitGUID ("nameplate"..i)  )
				if v == UnitGUID ("nameplate"..i) then
					GUID = true
				end
			end
			if GUID == false then
				--print("SET Nameplate :","nameplate"..i,"GUID",UnitGUID ("nameplate"..i)  )
				npcDetect.activeUnitPlates["nameplate"..i] = UnitGUID ("nameplate"..i)
				GUID = false
			end
		end
		GUID = false
	end
end
local function ClearNamePlates()
	for k,v in pairs(npcDetect.activeUnitPlates)do
		if  k ~=UnitGUID("target") then 
			npcDetect.activeUnitPlates[k] = nil
		end 
	end	
end

local function updateCombat(self, event, ...)	
    if event == "PLAYER_REGEN_ENABLED" then  
		--print("Leaving combat")
        unitCombatFrame.t:SetColorTexture(1, 1, 1, alphaColor)  
    end
	if event == "PLAYER_REGEN_DISABLED" then
		--print("Entering combat")
        unitCombatFrame.t:SetColorTexture(1, 0, 0, alphaColor)
    end
end

local function roundNumber(num)
    under = math.floor(num)
    upper = math.floor(num) + 1
    underV = -(under - num)
    upperV = upper - num
    if (upperV > underV) then
        return under
    else
        return upper
    end
end
local function updateLegendary()
	local count = 0
	EquipmentManger.Legendary1 = 0
	EquipmentManger.Legendary2 = 0
    for i =1, 18 do
		if GetInventoryItemID("player", i) ~= nil then
			local _, _, itemRarity, _, _, _,_, _, _, _, _ = GetItemInfo(GetInventoryItemID("player", i))
			if itemRarity == 5 then
				if count == 0 then
			        count = count +1
				    EquipmentManger.Legendary1 = i/100
            	else
					count = count + 1
					EquipmentManger.Legendary2 = i/100
				end
			end
		end
	end    
end
local function updateSetBonus()
	EquipmentManger.T19 = 0
	EquipmentManger.T20 = 0
	for _, v in pairs(EquipmentManger.invSlots) do
		itemID = GetInventoryItemID("player", v);
		for _,z in pairs(EquipmentManger.setItemsT19) do
			if(itemID == z)then
			--print(v, " ", z)
				EquipmentManger.T19= EquipmentManger.T19 +1
			end
		end
		for _,z in pairs(EquipmentManger.setItemsT20) do
			if(itemID == z)then
			--print(v, " ", z)
				EquipmentManger.T20= EquipmentManger.T20 + 1
			end
		end
	end
end


local function Talents()
		currentSpec = GetSpecialization()
		currentSpecId = currentSpec and select(1, GetSpecializationInfo(currentSpec)) or 0

		updateSetBonus()	
		updateLegendary()
		local Tier = {}
   		AllSeven = false
		for i = 1, GetMaxTalentTier() do 
		talenetSelected = false
			for z = 1, 3 do 
				local  selected = select(4, GetTalentInfo(i, z,1))
				if(selected == true) then
					Tier[i] = z/100
					talenetSelected = true
				end
				if talenetSelected == false and z == 3 then
					Tier[i]=0
				end
			end
			if i == 7 then
				AllSeven = true 
			end
		end
	if not AllSeven then
		for i = GetMaxTalentTier(), 7 do
			Tier[i] = 0	
		end
	end
	PlayerStatFrame[1].t:SetColorTexture(Tier[1], Tier[2],Tier[3], alphaColor)
	PlayerStatFrame[2].t:SetColorTexture(Tier[4],Tier[5],Tier[6], alphaColor)
	PlayerStatFrame[3].t:SetColorTexture(Tier[7],Race[select(2,UnitRace("player"))],0, alphaColor)
	PlayerStatFrame[4].t:SetColorTexture(Spec.Id[currentSpecId],EquipmentManger.T19/100,EquipmentManger.T20/100, alphaColor)
	PlayerStatFrame[5].t:SetColorTexture(EquipmentManger.Legendary1,EquipmentManger.Legendary2,0, alphaColor)
end


local function updateTargetBuffs()
	for _, auraId in pairs(buffs) do
		local auraName = GetSpellInfo(auraId)
		
		if auraName == nil then
            if (buffLastState[auraId] ~= "BuffOff") then
                TargetBuffs[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
                TargetBuffs[auraId].t:SetAllPoints(false)
                buffLastState[auraId] = "BuffOff"          
            end    
            return
        end
		
        local name, _, _, count, _, _, expirationTime, _, _, _, spellId = UnitBuff("target", auraName)

		if (name == auraName) then -- We have Aura up and Aura ID is matching our list
                local remainingTime = 0
                if(expirationTime~=0) then
                    remainingTime = expirationTime -GetTime() - select(4,GetNetStats())/1000
                end
                if (buffLastState[auraId] ~= "BuffOn" .. count .. remainingTime) then
                buffLastState[auraId] = "BuffOn" .. count 
                remainingTime = string.format("%00.2f", tostring(remainingTime))
			    local green = tonumber(strsub(tostring(remainingTime), 1, 2)) / 100
                local blue = tonumber(strsub(tostring(remainingTime), -2, -1)) / 100

               
              --  if spellId == 194084 then
                --    print("Remaining CD: ",remainingTime," Count : ",red, " Seconds :",green," tenths : ",blue)
                --end
		     TargetBuffs[auraId].t:SetColorTexture(count/100, green, blue, alphaColor)
             TargetBuffs[auraId].t:SetAllPoints(false)
		end
        else
            if (buffLastState[auraId] ~= "BuffOff") then
                TargetBuffs[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
                TargetBuffs[auraId].t:SetAllPoints(false)
                buffLastState[auraId] = "BuffOff"              
            end
        end
    end
end



local lastPet = nil
local function updateUnitPet(self, event)
    local pet = UnitExists("pet")
	if (pet == false or UnitIsDead("pet")) then			
        if (pet ~= lastPet) then
            --print("Pet Is Not Up")
            unitPetFrame.t:SetColorTexture(1, 1, 1, alphaColor)
            lastPet = pet
        end
	else
		if pet ~= lastPet and not UnitIsDead("player")  then
            --print("Pet is up!")
            unitPetFrame.t:SetColorTexture(1, 0, 0, alphaColor)
            lastPet = pet
        end

    end
end


local function updateSpellCooldowns(self, event) 
    for _, spellId in pairs(cooldowns) do
		-- start is the value of GetTime() at the point the spell began cooling down
		-- duration is the total duration of the cooldown, NOT the remaining
		local start, duration, _ = GetSpellCooldown(spellId)
        --print(" " .. spellId .. " is currently active, use it and wait " .. duration .. " seconds for the next one.")
        local remainingTime = (start + duration - GetTime() - select(4,GetNetStats() )/1000 )
        if remainingTime < 0 then
			 remainingTime = 0
		 end
        
		if remainingTime ~= 0 then -- the spell is not ready to be cast
            	--print("Spell with Id = " .. spellId .. " is on CD")
                --print(" " ..spellId.. " remaining time: " ..math.floor(remainingTime)..  " ")
				remainingTime = string.format("%00.2f",tostring(remainingTime) )
				if tonumber(remainingTime) >  100.00 then
					green = 1
				else
					green = tonumber(strsub(tostring(remainingTime), 1, 2))/100
				end
				local blue = tonumber(strsub( tostring(remainingTime), -2,-1))/100
				cooldownframes[spellId].t:SetColorTexture(0, green, blue, alphaColor)				
				cooldownframes[spellId].t:SetAllPoints(false)
		else
				cooldownframes[spellId].t:SetColorTexture(1, 1, 1, alphaColor)
				cooldownframes[spellId].t:SetAllPoints(false)
		end						
	end
end

local lastItemCooldownState = { }

local function updateItemCooldowns(self, event) 
  for _, itemId in pairs(items) do
    local start, duration, enable = GetItemCooldown(itemId)
    local remainingTime = start + duration - GetTime()
    if remainingTime < 0 then remainingTime = 0 end
    remainingTime = roundNumber(remainingTime)
   
    local itemCount = GetItemCount(itemId)/100


    if remainingTime ~= 0 and itemCount ~= 0  then
	           
      if (lastItemCooldownState[itemId] ~= "offCD" .. itemCount .. remainingTime) then
	   lastItemCooldownState[itemId] = "offCD" .. itemCount .. remainingTime
        itemframes[itemId].t:SetColorTexture(1, 0, itemCount, alphaColor)
        itemframes[itemId].t:SetAllPoints(false)
		--if itemId == 142117 then
			--print("Prolong on cooldown")
		--end
       
        --print("Count = " .. itemCount)
        --print("Remaining Time = " .. remainingTime)
        --print("OnCD = false")
      end
    else    
      if (lastItemCooldownState[itemId] ~= "onCD" .. itemCount .. remainingTime) then
        itemframes[itemId].t:SetColorTexture(0, 0, itemCount, alphaColor)
        itemframes[itemId].t:SetAllPoints(false)
        lastItemCooldownState[itemId] = "onCD" .. itemCount .. remainingTime
		--if itemId == 142117 then
			--print("Prolong off cooldown")
		--end
        --print("Count = " .. itemCount)
        --print("Remaining Time = " .. remainingTime)
        --print("OnCD = true")
      end
    end
  end
end
local function updateMyBuffs(self, event)
    local buffon = {}
	local COUNT = {}
	local auraInfo = {}
	for _, auraId in pairs(buffs) do
		if GetSpellInfo(auraId) == nil then
                buffFrames[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
                buffFrames[auraId].t:SetAllPoints(false)
            return
        end
		COUNT[auraId] = 0
		buffon[auraId] = 0

		for index = 1, 40  do
		    local name, _, _, count,_, duration, expirationTime, _, _, _, spellId, _, _, _, _, _ = UnitBuff("player", index)
				if name == nil then break end
				if auraId == spellId then
			        local remainingTime = 0
				    if(expirationTime ~=0) then
					     remainingTime = expirationTime - GetTime()
					end
					COUNT[auraId] = COUNT[auraId] +1
					if COUNT[auraId] >= count then
						count = COUNT[auraId]
					end

					remainingTime = string.format("%00.2f", tostring(remainingTime))
				    local green = tonumber(strsub(tostring(remainingTime), 1, 2)) / 100
		            local blue = tonumber(strsub(tostring(remainingTime), -2, -1)) / 100
					auraInfo[auraId] = {["count"] = count,["green"] = green,["blue"] = blue} 
					buffon[auraId] = 1
				end
		end

		if buffon[auraId] == 1 then
			buffFrames[auraId].t:SetColorTexture(auraInfo[auraId].count/100, auraInfo[auraId].green, auraInfo[auraId].blue, alphaColor)
			
			--if auraId ==120694 then
			  -- print("Remaining CD: ",remainingTime," Count : ",auraInfo[auraId].count, " Seconds :",auraInfo[auraId].green," tenths : ",auraInfo[auraId].blue)
            --end
		end
		if buffon[auraId] ~= 1 then
			buffFrames[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
			buffFrames[auraId].t:SetAllPoints(false)
			buffon[auraId] = 0
            --if spellId == 194310 then
                      --  print("Remaining CD:  Count : ",count)
            --end
		end	
    end
end
local function updatePlayerDebuffs(self, event)
    
	for _, auraId in pairs(debuffs) do
        local buff = "UnitDebuff";
		local auraName = GetSpellInfo(auraId)

        if auraName == nil then
            if (lastPlayerDebuffState[auraId] ~= "DebuffOff") then
                playerDebuffFrames[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
                playerDebuffFrames[auraId].t:SetAllPoints(false)
                lastPlayerDebuffState[auraId] = "DebuffOff"               
            end
    
            return
        end
        
		--print("Getting debuff for Id = " .. auraName)
		
        local name, _, _, count, _, _, expirationTime, _, _,_, spellId, _, _, _, _, _ = UnitDebuff("player", auraName)

		if (name == auraName) then -- We have Aura up and Aura ID is matching our list					
            local getTime = GetTime()
            local remainingTime = math.floor(expirationTime - getTime + 0.5) 	

			if (lastPlayerDebuffState[auraId] ~= "DebuffOn" .. count .. remainingTime) then
				lastPlayerDebuffState[auraId] = "DebuffOn" .. count .. remainingTime
                remainingTime = string.format("%00.2f",tostring(remainingTime) )
				local green = tonumber(strsub(tostring(remainingTime), 1, 2))/100
				local blue = tonumber(strsub(tostring(remainingTime), -2,-1))/100
                playerDebuffFrames[auraId].t:SetColorTexture(count/100, green, blue, alphaColor)
				playerDebuffFrames[auraId].t:SetAllPoints(false)
                --print("[" .. buff .. "] " .. auraName.. " " .. count .. " Green: " .. green .. " Blue: " .. blue)
            end
        else
            if (lastPlayerDebuffState[auraId] ~= "DebuffOff") then
                playerDebuffFrames[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
                playerDebuffFrames[auraId].t:SetAllPoints(false)
                lastPlayerDebuffState[auraId] = "DebuffOff"
                --print("[" .. buff .. "] " .. auraName.. " Off")
            end
        end
    end
end
local function updateTargetDebuffs(self, event)
    local debuffon = {}
	for _, auraId in pairs(debuffs) do
	
        if GetSpellInfo(auraId) == nil then
                targetDebuffFrames[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
                targetDebuffFrames[auraId].t:SetAllPoints(false)
            return
        end
		--print("Getting debuff for Id = " .. auraName)
		for index = 1, 20 do
		    local name, _, _, count,_, duration, expirationTime, _, _, _, spellId, _, _, _, _, _ = UnitDebuff("target", index, "PLAYER|HARMFUL")
			 if name == nil then break end
	        	if auraId == spellId then
			        local remainingTime = 0
				    if(expirationTime ~=0) then
					     remainingTime = expirationTime - GetTime()
					end
					if count == 0 then
						count = 1
					end
					remainingTime = string.format("%00.2f", tostring(remainingTime))
				    local green = tonumber(strsub(tostring(remainingTime), 1, 2)) / 100
		            local blue = tonumber(strsub(tostring(remainingTime), -2, -1)) / 100
				    --if spellId == 194310 then
                      --print("Remaining CD: ",remainingTime," Count : ",count, " Seconds :",green," tenths : ",blue)
                    --end
					targetDebuffFrames[auraId].t:SetColorTexture(count/100, green, blue, alphaColor)
					debuffon[auraId] = 1
					break
				end
		end
		if debuffon[auraId] ~= 1 then
			targetDebuffFrames[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
			targetDebuffFrames[auraId].t:SetAllPoints(false)
			targetDebuffFrames[auraId].t:SetAllPoints(false)
			debuffon[auraId] = 0
            --if spellId == 194310 then
                      --  print("Remaining CD:  Count : ",count)
            --end
					
		end	
	end
end


local lastSpellInRange = {}


local function updateSpellInRangeFrames(self, event) 
    
	for _, spellId in pairs(cooldowns) do		
		local inRange = 0		
		local name, _, _, _, _, _ = GetSpellInfo(spellId)
		local charges, _, _, _ = GetSpellCharges(spellId)
	
			-- http://wowwiki.wikia.com/wiki/API_IsSpellInRange	
		if (name == nil) then
			spellInRangeFrames[spellId].t:SetColorTexture(1, 0, 1, alphaColor)
			return
		else
			inRange = LibStub("SpellRange-1.0").IsSpellInRange(spellId, "target")  -- '0' if out of range, '1' if in range, or 'nil' if the unit is invalid.	
		end
		if (charges == nil) then
			charges = 0
		end
		if( inRange ~= 1) then
			inRange = 0
		end
		if lastSpellInRange[spellId] ~= tonumber(inRange) + charges then
			--print(inRange)					
			if (inRange == 1) then
				spellInRangeFrames[spellId].t:SetColorTexture(1, charges/100, 1, alphaColor)
			else
				spellInRangeFrames[spellId].t:SetColorTexture(1, charges/100, 0, alphaColor)
			end 
			spellInRangeFrames[spellId].t:SetAllPoints(false)
			lastSpellInRange[spellId] = tonumber(inRange) + charges
		end
			--print("Spell: " .. name .. " InRange = " .. inRange)
	end
end
local function PlayerNotMove()
	mountedplayer = 0
	moveTime = 1
	if IsMounted() then
		mountedplayer = .5
	end
	if GetUnitSpeed("Player") == 0 then
		moveTime = 0
	end
        PlayerMovingFrame.t:SetColorTexture(moveTime, mountedplayer, 1, alphaColor)
end

local function AutoAtacking()
    if IsCurrentSpell(6603) then
        AutoAtackingFrame.t:SetColorTexture(1, 0, 0, alphaColor)
    else 
		AutoAtackingFrame.t:SetColorTexture(1, 1, 1, alphaColor)
    end
end

local function updateIsPlayer()
	local target = {player = 0,threat = 0}
    if UnitIsPlayer("target")  then        
	    target.player = 1
    end
	
	if select(1,UnitDetailedThreatSituation("player", "target")) then
		target.threat = 1
	end
	targetIsPlayerFrame.t:SetColorTexture(target.player,target.threat,1, alphaColor)
end
local function updateOutdoors()
    if IsOutdoors() then        
        flagFrame.t:SetColorTexture(1, 0, 0, alphaColor) -- red = outside
    else 
		flagFrame.t:SetColorTexture(1, 1, 1, alphaColor) -- white = inside
    end
end

local lastHealth = 0

local function updateHealth(self, event)
    local level = UnitLevel("player")    

	local red = 0             
    local green = 0
    local blue = 0
		blue = tonumber(strsub(tostring( UnitLevel("player") ),1,2)) / 100
	if level >= 100 then
		green = tonumber(strsub(tostring(UnitLevel("player") ),1, 1)) / 100
		blue = tonumber(strsub(tostring( UnitLevel("player")),-2,-1)) / 100
	end
	
	local health = UnitHealth("player");		
	local maxHealth = UnitHealthMax("player");
	local percHealth = ceil((health / maxHealth) * 100)
	
	if (percHealth ~= lastHealth) then			
		local strHealth = "0.0" .. percHealth;
				
		if (percHealth >= 10) then
			strHealth = "0." .. percHealth;
		end
		red = tonumber(strHealth)
        if (percHealth == 100) then
               healthFrame.t:SetColorTexture(1, green, blue, alphaColor)
        else
            healthFrame.t:SetColorTexture(red, green, blue, alphaColor)
        end
	    lastHealth = percHealth
	end
end

local lastPetHealth = 0

local function updatePetHealth(self, event)
    
	local health = UnitHealth("pet");		
	local maxHealth = UnitHealthMax("pet");
    if maxHealth == nil then maxHealth = 1 end
    if maxHealth == 0 then maxHealth = 1 end

	local percHealth = ceil((health / maxHealth) * 100)
	
	if (lastPetHealth ~= percHealth) then			
		local red = 0             
		local strHealth = "0.0" .. percHealth;
				
		if (percHealth >= 10) then
			strHealth = "0." .. percHealth;
		end
		red = tonumber(strHealth)
        if (percHealth == 100) then
		    petHealthFrame.t:SetColorTexture(1, 0, 0, alphaColor)
        else
            petHealthFrame.t:SetColorTexture(red, 0, 0, alphaColor)
        end

		--print ("Pet Health = " .. percHealth .. " strHealth = ".. strHealth)
			
	lastPetHealth = percHealth
	end
end
local changed = 1
local lastTargetHealth = 0
local function updateTargetHealth(self, event,...)
    
	local guid = UnitGUID("target")

    local health = 0		
    local maxHealth = 100
    local percHealth = 0
	local strHealth = 0 
    if (guid ~= nil) then
	    health = UnitHealth("target");		
	    maxHealth = UnitHealthMax("target");
	    percHealth = (health / maxHealth)
    end	
		strHealth= string.format("%0.4f",percHealth)
		local green = tonumber(strsub(strHealth,5,6))/100
		local red = tonumber(strsub(strHealth,3,4))/100

		percHealth = (health / maxHealth) * 100
		if event == "PLAYER_TARGET_CHANGED" then
			if changed == 1 then
				changed = 0
			elseif changed == 0 then
				changed = 1
			end
		end
	    if (percHealth == 100) then
		    targetHealthFrame.t:SetColorTexture(1, 0, changed, alphaColor)
        else
            targetHealthFrame.t:SetColorTexture(red, green, changed, alphaColor)
        end		

end



local function updatePower(self, event)
	local red
	local green
	local blue    
	local power = UnitPower("player");		
	local maxPower = UnitPowerMax("player");
	local strPower
	
		-- If the class uses mana, then we need to calculate percent mana to show its power
		-- http://wowwiki.wikia.com/wiki/API_UnitClass
		-- http://wowwiki.wikia.com/wiki/SpecializationID
	if (
			((classIndex == 7) and (currentSpecId == 264))  -- Shaman Restoration
		 or (classIndex == 2)  -- Paladin
		 or (classIndex == 5)  -- Priest 
		 or (classIndex == 8)  -- Mage
		 or (classIndex == 9)  -- Lock
		 or ((classIndex == 11) and (currentSpecId == 102)) -- Druid Balance
		 or ((classIndex == 11) and (currentSpecId == 105)) -- Druid Resto 
		   ) 
		then 
			power = (power / maxPower) *100
			
			strPower = string.format("%0.4f",power/100)
			green = tonumber(strsub(strPower,5,6))/100
			red = tonumber(strsub(strPower,3,4))/100
	else
		strPower = string.format("%0.4f",power/10000)
		green = tonumber(strsub(strPower,5,6))/100
		red = tonumber(strsub(strPower,3,4))/100
	end
	
    local resource = 0
    local maxResource
    if classIndex == 2 then                                 -- Paladin
        resource = UnitPower("player", SPELL_POWER_HOLY_POWER)
    elseif classIndex == 9 then                                 -- Warlock
        resource = UnitPower("player", SPELL_POWER_SOUL_SHARDS)
    elseif classIndex == 8 then                                 -- Mage
        resource = UnitPower("player", SPELL_POWER_ARCANE_CHARGES)
    elseif classIndex == 4 then                                 -- Rogue 
        resource = UnitPower("player", SPELL_POWER_COMBO_POINTS)
    elseif classIndex == 11 then                                -- Druid Feral
        resource = UnitPower("player", SPELL_POWER_COMBO_POINTS)
    elseif classIndex == 6 then                                 -- DeathKnight                        
        local maxRunes = UnitPower("player", SPELL_POWER_RUNES)
	    local selectedRunes = 6
        local i = 1
        for i = 1, maxRunes do
            local runeReady = select(3, GetRuneCooldown(i))
            if not runeReady then
                selectedRunes = selectedRunes - 1
            end
        end
        resource = selectedRunes        
    elseif classIndex == 7 then
		maxResource = UnitPowerMax("player",SPELL_POWER_MANA);
		resource = UnitPower("player",SPELL_POWER_MANA)
		resource = ceil((resource / maxResource)*100)
	elseif classIndex == 10 then                                -- Monk
        resource = UnitPower("player", SPELL_POWER_CHI)
    end
  
    if (power == 100)  then
		powerFrame.t:SetColorTexture(1, 0, resource/100, alphaColor)
	else
        powerFrame.t:SetColorTexture(red, green, resource/100, alphaColor)
    end
end


local lastHaste = 0;

local function updateHaste()
	local ratingBonus = math.floor(GetHaste())
	local green = 0
	if lasthaste == ratingBonus then return end
	lastehaste = ratingBonus
	local red = 0
    if ratingBonus == math.abs(ratingBonus) then
		red = 1
	else
        red = 0
    end
	if(ratingBonus >=100) then
		green =	math.floor(ratingBonus/100)
		ratingBonus = ratingBonus - (green*100)
	end
	local blue = math.abs(tonumber(strsub(tostring(ratingBonus), 1,2))/100)
    hasteFrame.t:SetColorTexture(red,green,blue, alphaColor)
end
local lastIsFriend = true 
 
local function updateIsFriendly(self, event)
    
	isFriend = UnitIsFriend("player","target");
	
	if (isFriend ~= lastIsFriend) then
	
		if (isFriend == true) then
			--print ("Unit is friendly: True")
			
			isTargetFriendlyFrame.t:SetColorTexture(0, 1, 0, alphaColor)
		else
			--print ("Unit is friendly: False")
			
			isTargetFriendlyFrame.t:SetColorTexture(0, 0, 1, alphaColor)
		end
	
		lastIsFriend = isFriend
	end
end

local lastTargetGUID = ""

local function hasTarget()
	local guid = UnitGUID("target")
    local LibBoss = LibStub("LibBossIDs-1.0")
    local isDead = UnitIsDead("target")
    local mylevel = UnitLevel("player")  

	if (guid ~= lastTargetGUID) then
	    if guid == nil then
            hasTargetFrame.t:SetColorTexture(0, 0, 0, alphaColor)
	    else
	        if guid ~= nil then local type, _, _, _, _, mobID = strsplit(" - ", UnitGUID("target"))
	            if LibBoss.BossIDs[tonumber(mobID)] then
                    hasTargetFrame.t:SetColorTexture(0, 0, 1, alphaColor)
                    --print('|cFFFF0000[BOSS] ID: ' .. mobID)
                elseif type == "Player" then
                        hasTargetFrame.t:SetColorTexture(1, 0, 0, alphaColor)
                elseif not LibBoss.BossIDs[tonumber(mobID)] then               
                        if mobID ~= nil then
                            if tonumber(mobID) == 114631 or   -- NPC outside Kara registers as enemy for some reason ignore it
                               tonumber(mobID) == 114822 or   -- NPC outside Kara registers as enemy for some reason ignore it
							   tonumber(mobID) == 90463  or   -- NPC in Violet Citedal [Archmage Karlain] registers as enemy for some reason ignore it
							   tonumber(mobID) == 90418  or   -- NPC in Violet Citedal [Archmage Modera] registers as enemy for some reason ignore it
							   tonumber(mobID) == 90431  then -- NPC in Violet Citedal [Archmage Ansirem Runeweaver] registers as enemy for some reason ignore it
                                --print('|cFFFFFF00[NPC] ID: ' .. mobID)
                                hasTargetFrame.t:SetColorTexture(0, 0, 0, alphaColor)
                            else
                                --print('|cFFFFFF00[NPC] ID: ' .. mobID)
                                hasTargetFrame.t:SetColorTexture(1, 0, 0, alphaColor)        
                            end
                        end
	            elseif (guid ~= nil and isDead == true) then
                    hasTargetFrame.t:SetColorTexture(0, 0, 0, alphaColor)
                end
            end
        end
        lastTargetGUID = guid
    end
end

local lastCastID = 0
local lastChanneling = ""

local function updatePlayerIsCasting(self, event)
    
    spell, _, _, _, _,_, _, castID, _ = UnitCastingInfo("player")
    name, _, text, _, _, _, _, _ = UnitChannelInfo("player")
	

	if castID ~= nil then	
		if castID ~= lastCastID then
			--print("Casting spell: " .. spell)
		
			playerIsCastingFrame.t:SetColorTexture(1, 0, 0, alphaColor)
		
			lastCastID = castID		
		end
	else
		if castID ~= lastCastID then
			--print("Not casting")
			
			playerIsCastingFrame.t:SetColorTexture(1, 1, 1, alphaColor)
			
			lastCastID = castID		
		end	
	end		

    if name ~= nil then
        if text ~= lastChanneling then
        playerIsCastingFrame.t:SetColorTexture(0, 1, 0, alphaColor)
        --   print(text)
        lastChanneling = text
        end

	else
	    if text ~= lastChanneling then
        playerIsCastingFrame.t:SetColorTexture(1, 1, 1, alphaColor)
        lastChanneling = text
        end

    end
end

local lastTargetCastID = 0

local function InteruptSpellTime(startTime, endTime)
    return  math.abs(endTime - GetTime() * 1000 ) / math.abs (endTime - startTime)
    --print("Cast time: ", castTime, "Cast PCT: ", castPCT,"remaining :", remainingTime)
end

local function updateTargetIsCasting(self, event)	    
	spell, _, _, _, startTime, endTime, _, _, notInterrupt = UnitCastingInfo("target")
    if(spell == nil) then        
        spell, _, _, _, startTime, endTime, _,  notInterrupt = UnitChannelInfo("target")
    end
    
    if spell ~= nil then    
        --print(InteruptSpellTime(startTime, endTime))
        if notInterrupt == false then
            targetIsCastingFrame.t:SetColorTexture(1, InteruptSpellTime(startTime, endTime), 1, alphaColor)
        else
            targetIsCastingFrame.t:SetColorTexture(0, InteruptSpellTime(startTime, endTime), 1, alphaColor)
        end
    else
        if spell == nil then
            targetIsCastingFrame.t:SetColorTexture(0, 0, 0, alphaColor)
        end
    end
end

local function updateWildPetsFrame()
  local wild = 0;
  local retard = 0;
  for i = 1, 4 do
    haveTotem, name, startTime, duration, _ = GetTotemInfo(i)
    local Quesatime =  startTime + duration
    if haveTotem
    then
      if (name == "Wild Imps" or name == "Spirit Wolf" or name == "Totem Mastery")
         and(startTime + duration - GetTime() > 1.6) 
      then
        wild = wild + 1;
        end
      if name == "Dreadstalkers"
      and(startTime + duration - GetTime() > 1.6) 
      then
        retard = retard + 1;
        end
      end
    wilds = tonumber("0.0"..wild)
    retards = tonumber("0.0"..retard)
    wildPetsFrame.t:SetColorTexture(wilds, 0, retards, alphaColor)
  end
end

local lastVis = nil

local function updateUnitIsVisible(self, event)
    
	local vis = UnitIsVisible("target")
		
	if vis == nil then			
        if (vis ~= lastVis) then
		    --print("Target Is Not Visible")		

	        unitIsVisibleFrame.t:SetColorTexture(1, 1, 1, alphaColor)
		    lastVis = vis				
        end
	else
		if vis ~= lastVis then
			--print("Target Is Visible")			

			unitIsVisibleFrame.t:SetColorTexture(1, 0, 0, alphaColor)			
			lastVis = vis		
		end	
	end
end
local lastCastId = {}
lastCastId[1] = 00
lastCastId[2] = 00
lastCastId[3] = 00

local function updateLastSpell(self, event, ...)
    local spellId 
    local red=0
	local blue = 0
	local green = 0 
	local strColor
	local castable = false
	if event == "CURRENT_SPELL_CAST_CHANGED" then
		spellId = select(10, UnitCastingInfo("player"))
		
		if spellId == nil then return end
				
	end
	if event == "UNIT_SPELLCAST_SUCCEEDED" then
		_, _, _,_, spellId,_ = ...
	end
	
	for _, tableId in pairs(cooldowns) do
		if(spellId == tableId) then
			castable = true
			--print(event,castable)
			break
		end
	end
	if castable  then
	    strColor = string.format("%0.6f",spellId/1000000)
		--print(strColor)
		red = tonumber(strsub(strColor,3,4))/100
		green = tonumber(strsub(strColor,5,6))/100
		blue = tonumber(strsub(strColor,7,8))/100
		
		lastSpellFrame.t:SetColorTexture(red, green, blue, alphaColor)
		if event == "UNIT_SPELLCAST_SUCCEEDED" then
			lastCastId[1] = red
			lastCastId[2] = green
			lastCastId[3] = blue
		end
    end
    if event == "UNIT_SPELLCAST_FAILED" then
		lastSpellFrame.t:SetColorTexture(lastCastId[1], lastCastId[2], lastCastId[3], alphaColor)
	end
	--print(red,green,blue)
end
 
local function updateTargetCurrentSpell()            
    local spellID = select(10, UnitCastingInfo("target"))

    if spellID ~= nil then
        local strRed = ""
	    local strBlue = ""
	    local strGreen = ""
            
        for i = 1, 2 do        
	    	if(i==1) then
                strRedTemp = strsub( spellID, 1, 1)
                if (strRedTemp~=nil) then
                    strRed = "0.".. strRedTemp
                else strRed = 1 end

                strGreenTemp = strsub( spellID, 2, 2)
                if (strGreenTemp~=nil) then
                    strGreen = "0.".. strGreenTemp
                else strGreen = 1 end
                                
                strBlueTemp = strsub( spellID, 3, 3)
                if (strBlueTemp~=nil) then
                    strBlue = "0.".. strBlueTemp
                else strBlue = 1 end
                                
            end
            if(i==2) then
                strRedTemp = strsub( spellID, 4, 4)
                if (strRedTemp~=nil) then
                    strRed = "0.".. strRedTemp
                else strRed = 1 end

                strGreenTemp = strsub( spellID, 5, 5)
                if (strGreenTemp~=nil) then
                    strGreen = "0.".. strGreenTemp
                else strGreen = 1 end

                strBlueTemp = strsub( spellID, 6, 6)
                if (strBlueTemp~=nil) then
                strBlue = "0.".. strBlueTemp
                else strBlue = 1 end
            end
                        
            local red = tonumber(strRed)
            local green = tonumber(strGreen)
            local blue = tonumber(strBlue)

            --print (strRed)
            targetLastSpellFrame[i].t:SetColorTexture(red, green, blue, alphaColor)
        end
    else
        for i = 1, 2 do  
            targetLastSpellFrame[i].t:SetColorTexture(0, 0, 0, alphaColor)
        end
    end
end


local function updateArenaSpell()            
 for i = 1, 4 do 
	 local unit = "arean" .. i  
	 local notInterrupt
     if UnitExists(unit) and UnitCanAttack("player", unit) and LibStub("SpellRange-1.0").IsSpellInRange(Spec.Interrupt[currentSpecId], unit) and 
        UnitIsDead(unit) == false then
		local spellID = select(9, UnitCastingInfo(unit))
		if spellID ~= nil then
        --print("Arena 1: " .. spellID)
			local red = tonumber(strsub( spellID, 1, 2))/100
			local blue = tonumber(strsub(spellID,3,4))/100
			local green = tonumber(strsub(spellID,5,6))/100
			targetArenaFrame[i].t:SetColorTexture(red, green, blue, alphaColor)
		end
	end
	unit = "boss" .. i
	if UnitExists(unit) and UnitCanAttack("player", unit) and LibStub("SpellRange-1.0").IsSpellInRange(Spec.Interrupt[currentSpecId], unit) and 
        UnitIsDead(unit) == false and UnitAffectingCombat(unit) then
		local _, _, _, _, startTime, endTime, _, _, notInterrupt = UnitCastingInfo("target")
		if(notInterrupt == nil) then        
			spell, _, _, _, startTime, endTime, _,  notInterrupt = UnitChannelInfo("target")
	    end
    
		if notInterrupt == false then    
			--print(InteruptSpellTime(startTime, endTime))
			targetArenaFrame[i].t:SetColorTexture(1, InteruptSpellTime(startTime, endTime), 1, alphaColor)
   	    end
	end
	if notInterrupt ~= false then
			  targetArenaFrame[i].t:SetColorTexture(0, 0, 0, alphaColor)
	end
  end
end

local function updateMyPetBuffs(self, event) 
    
	for _, auraId in pairs(buffs) do
		local auraName = GetSpellInfo(auraId)
		
		if auraName == nil then
			if (lastBuffStatePet [auraId] ~= "BuffOff") then
				petBuffFrames[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
				petBuffFrames[auraId].t:SetAllPoints(false)
				lastBuffStatePet [auraId] = "BuffOff"
				--print("[" .. buff .. "] " .. auraName.. " Off")
			end
			return
		end
		
		local name, _, _, count, _, _, expirationTime, _, _, _, _= UnitBuff("pet", auraName)		
			
		if (name == auraName) then -- We have Aura up and Aura ID is matching our list	
		
			local getTime = GetTime()
			local remainingTime = 0
			if(expirationTime~=0) then
				remainingTime = math.floor(expirationTime - getTime + 0.5)
			end
			
			if (lastBuffStatePet[auraId] ~= "BuffOn" .. count .. remainingTime) then			
				lastBuffStatePet[auraId] = "BuffOn" .. count 
				remainingTime = string.format("%00.2f",tostring(remainingTime) )
				local green = tonumber(strsub(tostring(remainingTime), 1, 2))/100
				local blue = tonumber(strsub(tostring(remainingTime), -2,-1))/100
				--print("expirationTime:"..expirationTime.." remainingTime:" .. remainingTime .. " blue:" .. blue .. " strbluecount:" ..  strbluecount)
				petBuffFrames[auraId].t:SetColorTexture(count/100, green, blue, alphaColor)
				petBuffFrames[auraId].t:SetAllPoints(false)
				--print("[" .. buff .. "] " .. auraName.. " " .. count .. " Green: " .. green)
			end
		else
			if (lastBuffStatePet[auraId] ~= "BuffOff") then
				petBuffFrames[auraId].t:SetColorTexture(1, 1, 1, alphaColor)
				petBuffFrames[auraId].t:SetAllPoints(false)
				lastBuffStatePet[auraId] = "BuffOff"
				--print("[" .. buff .. "] " .. auraName.. " Off")
			end
		end
	end
end

local function updateIsSpellOverlayedFrames(self, event)    
	for _, spellId in pairs(cooldowns) do
        if IsSpellOverlayed(spellId) then
            --print('spell' .. spellId .. 'IsOverlayed')
            spellOverlayedFrames[spellId].t:SetColorTexture(1, 0, 0, alphaColor)
            spellOverlayedFrames[spellId].t:SetAllPoints(false)
        else
            spellOverlayedFrames[spellId].t:SetColorTexture(1, 1, 1, alphaColor)
            spellOverlayedFrames[spellId].t:SetAllPoints(false)
        end
    end
end

local function InitializeOne()
    local i = 0

	--print ("Initialising Health Frames")	
	healthFrame = CreateFrame("frame", "", parent)
	healthFrame:SetSize(size, size)
	healthFrame:SetPoint("TOPLEFT", 0, 0)                         -- row 1, column 1 [Player Health]
healthFrame.t = healthFrame:CreateTexture()        
	healthFrame.t:SetColorTexture(1, 1, 1, alphaColor)
	healthFrame.t:SetAllPoints(healthFrame)	
	healthFrame:Show()
	healthFrame:RegisterUnitEvent("UNIT_HEALTH","player")
	healthFrame:RegisterEvent("PLAYER_TARGET_CHANGED")
	healthFrame:SetScript("OnEvent", updateHealth)

	--print ("Initialising Target Health Frames")    
	targetHealthFrame = CreateFrame("frame","", parent)
	targetHealthFrame:SetSize(size, size)
	targetHealthFrame:SetPoint("TOPLEFT", 2 * size, 0)            -- row 1, column 3 [Target Health]

	targetHealthFrame.t = targetHealthFrame:CreateTexture()        
	targetHealthFrame.t:SetColorTexture(1, 1, 1, alphaColor)
	targetHealthFrame.t:SetAllPoints(targetHealthFrame)
	targetHealthFrame:Show()
	targetHealthFrame:RegisterEvent("PLAYER_REGEN_ENABLED")
    targetHealthFrame:RegisterEvent("PLAYER_REGEN_DISABLED")
	targetHealthFrame:RegisterEvent("UNIT_HEALTH","target")
	targetHealthFrame:RegisterEvent("PLAYER_TARGET_CHANGED")

    targetHealthFrame:SetScript("OnEvent", updateTargetHealth)	
 	
    --print ("Initialising InCombat Frames")    
    unitCombatFrame = CreateFrame("frame","", parent);
    unitCombatFrame:SetSize(size, size);
    unitCombatFrame:SetPoint("TOPLEFT", 3 * size, 0)              -- row 1, column 4 [UnitInCombat]
    unitCombatFrame.t = unitCombatFrame:CreateTexture()
    unitCombatFrame.t:SetColorTexture(1, 1, 1, alphaColor)
    unitCombatFrame.t:SetAllPoints(unitCombatFrame)
    unitCombatFrame:Show()
    unitCombatFrame:RegisterEvent("PLAYER_REGEN_ENABLED")
    unitCombatFrame:RegisterEvent("PLAYER_REGEN_DISABLED")
	unitCombatFrame:SetScript("OnEvent", updateCombat)

    --print ("Initialising UnitPower Frames")    
	powerFrame = CreateFrame("frame","", parent);
	powerFrame:SetSize(size, size)
	powerFrame:SetPoint("TOPLEFT", 4 * size, 0)               -- row 1, column 5 [Holy Power, etc...]
	powerFrame.t = powerFrame:CreateTexture()        
	powerFrame.t:SetColorTexture(0, 0, 0, alphaColor)
	powerFrame.t:SetAllPoints(powerFrame)
	powerFrame:Show()
	powerFrame:RegisterEvent("PLAYER_ENTERING_WORLD")		
	powerFrame:RegisterEvent("PLAYER_REGEN_ENABLED")
    powerFrame:RegisterEvent("PLAYER_REGEN_DISABLED")
	powerFrame:RegisterUnitEvent("UNIT_HEALTH","target")
    powerFrame:RegisterUnitEvent("UNIT_POWER_FREQUENT","player")
	powerFrame:RegisterUnitEvent("RUNE_POWER_UPDATE")
	powerFrame:SetScript("OnEvent",  updatePower)
		
    --print ("Initialising IsTargetFriendly Frame")
    isTargetFriendlyFrame = CreateFrame("frame","", parent);
    isTargetFriendlyFrame:SetSize(size, size);
    isTargetFriendlyFrame:SetPoint("TOPLEFT", 5 * size, 0)     -- row 1, column 6 [Target Is Friendly]
    isTargetFriendlyFrame.t = isTargetFriendlyFrame:CreateTexture()        
    isTargetFriendlyFrame.t:SetColorTexture(0, 1, 0, alphaColor)
    isTargetFriendlyFrame.t:SetAllPoints(isTargetFriendlyFrame)
    isTargetFriendlyFrame:Show()
	isTargetFriendlyFrame:RegisterEvent("PLAYER_REGEN_ENABLED")
   	isTargetFriendlyFrame:RegisterEvent("PLAYER_REGEN_DISABLED")
	isTargetFriendlyFrame:RegisterEvent("UNIT_HEALTH","target")
	isTargetFriendlyFrame:RegisterEvent("PLAYER_TARGET_CHANGED")
	isTargetFriendlyFrame:RegisterEvent("PLAYER_ENTER_COMBAT")
	isTargetFriendlyFrame:RegisterEvent("PLAYER_LEAVE_COMBAT")
    isTargetFriendlyFrame:SetScript("OnEvent", updateIsFriendly)

	--print ("Initialising HasTarget Frame")
	hasTargetFrame = CreateFrame("frame","", parent);
	hasTargetFrame:SetSize(size, size);
	hasTargetFrame:SetPoint("TOPLEFT", 6 * size, 0)                           -- row 1, column 7 [Has Target]
	hasTargetFrame.t = hasTargetFrame:CreateTexture()        
	hasTargetFrame.t:SetColorTexture(0, 1, 0, alphaColor)
	hasTargetFrame.t:SetAllPoints(hasTargetFrame)
	hasTargetFrame:Show()				
	hasTargetFrame:RegisterEvent("PLAYER_TARGET_CHANGED")
	hasTargetFrame:RegisterEvent("PLAYER_ENTER_COMBAT")
	hasTargetFrame:RegisterEvent("PLAYER_LEAVE_COMBAT")
	hasTargetFrame:SetScript("OnEvent", hasTarget)
	
	--print ("Initialising PlayerIsCasting Frame")
	playerIsCastingFrame = CreateFrame("frame","", parent);
	playerIsCastingFrame:SetSize(size, size);
	playerIsCastingFrame:SetPoint("TOPLEFT", 7 * size, 0)                     -- row 1, column 8 [Player Is Casting]
	playerIsCastingFrame.t = playerIsCastingFrame:CreateTexture()        
	playerIsCastingFrame.t:SetColorTexture(1, 1, 1, alphaColor)
	playerIsCastingFrame.t:SetAllPoints(playerIsCastingFrame)
	playerIsCastingFrame:Show()				
	playerIsCastingFrame:SetScript("OnUpdate", updatePlayerIsCasting)
	
	--print ("Initialising TargetIsCasting Frame")
	targetIsCastingFrame = CreateFrame("frame","", parent);
	targetIsCastingFrame:SetSize(size, size);
	targetIsCastingFrame:SetPoint("TOPLEFT", 8 * size, 0)                     -- row 1, column 9 [Target Is Casting]
	targetIsCastingFrame.t = targetIsCastingFrame:CreateTexture()        
	targetIsCastingFrame.t:SetColorTexture(1, 1, 1, alphaColor)
	targetIsCastingFrame.t:SetAllPoints(targetIsCastingFrame)
	targetIsCastingFrame:Show()				
	targetIsCastingFrame:SetScript("OnUpdate", updateTargetIsCasting)

	--print ("Initialising Haste Frames")  
	hasteFrame = CreateFrame("frame","", parent)
	hasteFrame:SetSize(size, size)
	hasteFrame:SetPoint("TOPLEFT", 9 * size, 0)                               -- row 1, column 10 [Player Haste]
	hasteFrame.t = hasteFrame:CreateTexture()        
	hasteFrame.t:SetColorTexture(1, 1, 1, alphaColor)
	hasteFrame.t:SetAllPoints(hasteFrame)    
	hasteFrame:Show()				
	hasteFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
	hasteFrame:RegisterUnitEvent("UNIT_SPELL_HASTE","player")
	hasteFrame:SetScript("OnUpdate", updateHaste)

	--print ("Initialising Target Is Visible Frame")
	unitIsVisibleFrame = CreateFrame("frame","", parent);
	unitIsVisibleFrame:SetSize(size, size);
	unitIsVisibleFrame:SetPoint("TOPLEFT", 10 * size, 0)                      -- row 1, column 11 [Target Visible]
	unitIsVisibleFrame.t = unitIsVisibleFrame:CreateTexture()        
	unitIsVisibleFrame.t:SetColorTexture(0, 1, 0, alphaColor)
	unitIsVisibleFrame.t:SetAllPoints(unitIsVisibleFrame)
	unitIsVisibleFrame:Show()			
	unitIsVisibleFrame:SetScript("OnUpdate", updateUnitIsVisible)

    if (classIndex == 6 or                                  -- DeathKnight   
        classIndex == 3 or                                  -- Hunter
        classIndex == 9 or                                  -- Warlock
        classIndex == 8 or                                  -- Mage
        classIndex == 7)                                    -- Shaman (Enh. Needs it for Wolves)
    then
        unitPetFrame = CreateFrame("frame","", parent);
        unitPetFrame:SetSize(size, size);
        unitPetFrame:SetPoint("TOPLEFT", 11 * size, 0)                        -- row 1, column 12 [Has Pet]
	    unitPetFrame.t = unitPetFrame:CreateTexture()    
        unitPetFrame.t:SetColorTexture(0, 1, 0, alphaColor)
        unitPetFrame.t:SetAllPoints(unitPetFrame)
        unitPetFrame:Show()		
        unitPetFrame:SetScript("OnUpdate", updateUnitPet)

        petHealthFrame = CreateFrame("frame","", parent)
	    petHealthFrame:SetSize(size, size)
	    petHealthFrame:SetPoint("TOPLEFT", size * 12, 0)                      -- row 1, column 13 [Pet Health]
	    petHealthFrame.t = petHealthFrame:CreateTexture()        
	    petHealthFrame.t:SetColorTexture(1, 1, 1, alphaColor)
	    petHealthFrame.t:SetAllPoints(petHealthFrame)	
	    petHealthFrame:Show()
		petHealthFrame:RegisterEvent("UNIT_HEALTH","pet")
	    petHealthFrame:SetScript("OnEvent", updatePetHealth)

        wildPetsFrame = CreateFrame("frame","", parent);
        wildPetsFrame:SetSize(size, size);
        wildPetsFrame:SetPoint("TOPLEFT", size * 13, 0)                       -- row 1, column 14 [Wild Pets]
        wildPetsFrame.t = wildPetsFrame:CreateTexture()
        wildPetsFrame.t:SetColorTexture(0, 1, 0, alphaColor)
        wildPetsFrame.t:SetAllPoints(wildPetsFrame)
        wildPetsFrame:Show()
        wildPetsFrame:SetScript("OnUpdate", updateWildPetsFrame)

	    --print ("Initialising Pet Buff Frames")
	    local i = 0
	    for _, buffId in pairs(buffs) do
		    petBuffFrames[buffId] = CreateFrame("frame","", parent)
		    petBuffFrames[buffId]:SetSize(size, size)
		    petBuffFrames[buffId]:SetPoint("TOPLEFT", i * size, -size * 9)                      -- row 10 [Pet Buffs]
		    petBuffFrames[buffId].t = petBuffFrames[buffId]:CreateTexture()        
		    petBuffFrames[buffId].t:SetColorTexture(1, 1, 1, alphaColor)
		    petBuffFrames[buffId].t:SetAllPoints(petBuffFrames[buffId])
		    petBuffFrames[buffId]:Show()		               
			
		i = i + 1
		end
	    petBuffFrames[table.maxn(petBuffFrames)]:SetScript("OnUpdate", updateMyPetBuffs)
    end

    --print ("Initialising Spell Cooldown Frames")
    i = 0
    for _, spellId in pairs(cooldowns) do	
    	cooldownframes[spellId] = CreateFrame("frame","", parent)
    	cooldownframes[spellId]:SetSize(size, size)
    	cooldownframes[spellId]:SetPoint("TOPLEFT", i * size, -size)    -- row 2, column 1+ [Spell Cooldowns]
    	cooldownframes[spellId].t = cooldownframes[spellId]:CreateTexture()        
    	cooldownframes[spellId].t:SetColorTexture(1, 1, 1, alphaColor)
    	cooldownframes[spellId].t:SetAllPoints(cooldownframes[spellId])
    	cooldownframes[spellId]:Show()		               
    	i = i + 1
    end
		cooldownframes[table.maxn (cooldownframes)]:SetScript("OnUpdate", updateSpellCooldowns)
	--print ("Initialising Spell In Range Frames")
	i = 0
	for _, spellId in pairs(cooldowns) do	
		spellInRangeFrames[spellId] = CreateFrame("frame","", parent)
		spellInRangeFrames[spellId]:SetSize(size, size)
		spellInRangeFrames[spellId]:SetPoint("TOPLEFT", i * size, -size * 2)          -- row 3, column 1+ [Spell In Range]
		spellInRangeFrames[spellId].t = spellInRangeFrames[spellId]:CreateTexture()        
		spellInRangeFrames[spellId].t:SetColorTexture(1, 1, 1, alphaColor)
		spellInRangeFrames[spellId].t:SetAllPoints(spellInRangeFrames[spellId])
		spellInRangeFrames[spellId]:Show()		               
		i = i + 1
	end
		spellInRangeFrames[table.maxn (spellInRangeFrames)]:SetScript("OnUpdate", updateSpellInRangeFrames)
	--print ("Initialising Target Debuff Frames")
	i = 0
	for _, debuffId in pairs(debuffs) do
		targetDebuffFrames[debuffId] = CreateFrame("frame","", parent)
		targetDebuffFrames[debuffId]:SetSize(size, size)
		targetDebuffFrames[debuffId]:SetPoint("TOPLEFT", i * size, -size * 3)         -- row 4, column 1+ [Spell In Range]
		targetDebuffFrames[debuffId].t = targetDebuffFrames[debuffId]:CreateTexture()        
		targetDebuffFrames[debuffId].t:SetColorTexture(1, 1, 1, alphaColor)
		targetDebuffFrames[debuffId].t:SetAllPoints(targetDebuffFrames[debuffId])
		targetDebuffFrames[debuffId]:Show()		               
		i = i + 1
	end
		targetDebuffFrames[table.maxn (targetDebuffFrames)]:SetScript("OnUpdate", updateTargetDebuffs)

	i = 0
	for _, buffId in pairs(buffs) do
		TargetBuffs[buffId] = CreateFrame("frame","", parent)
        TargetBuffs[buffId]:SetSize(size, size)
        TargetBuffs[buffId]:SetPoint("TOPLEFT", i * size, -size * 5)                            -- row 6, column 1+ [Target Buffs]
		TargetBuffs[buffId].t = TargetBuffs[buffId]:CreateTexture()
        TargetBuffs[buffId].t:SetColorTexture(1, 1, 1, alphaColor)
        TargetBuffs[buffId].t:SetAllPoints(TargetBuffs[buffId])
        TargetBuffs[buffId]:Show()
        i = i + 1
	end
	TargetBuffs[table.maxn (TargetBuffs)]:SetScript("OnUpdate", updateTargetBuffs)

    PlayerMovingFrame = CreateFrame("frame","", parent);
    PlayerMovingFrame:SetSize(size, size);
    PlayerMovingFrame:SetPoint("TOPLEFT", 0, -size * 6)                                         -- row 7, column 1 [Player Is Moving]
    PlayerMovingFrame.t = PlayerMovingFrame:CreateTexture()
    PlayerMovingFrame.t:SetColorTexture(1, 1, 1, alphaColor)
    PlayerMovingFrame.t:SetAllPoints(PlayerMovingFrame)
    PlayerMovingFrame:Show()    
    PlayerMovingFrame:SetScript("OnUpdate", PlayerNotMove)

    AutoAtackingFrame = CreateFrame("frame","", parent);
    AutoAtackingFrame:SetSize(size, size);
    AutoAtackingFrame:SetPoint("TOPLEFT", size, -size * 6)                                      -- row 7, column 2 [Auto Attacking]
    AutoAtackingFrame.t = AutoAtackingFrame:CreateTexture()
    AutoAtackingFrame.t:SetColorTexture(1, 1, 1, alphaColor)
    AutoAtackingFrame.t:SetAllPoints(AutoAtackingFrame)
    AutoAtackingFrame:Show()
	AutoAtackingFrame:RegisterEvent("PLAYER_TARGET_CHANGED")
	AutoAtackingFrame:RegisterEvent("PLAYER_ENTER_COMBAT")
	AutoAtackingFrame:RegisterEvent("PLAYER_LEAVE_COMBAT")
    AutoAtackingFrame:SetScript("OnEvent", AutoAtacking)

    --print ("Initialising Is Player Frame")
    targetIsPlayerFrame = CreateFrame("frame","", parent);
    targetIsPlayerFrame:SetSize(size, size);
    targetIsPlayerFrame:SetPoint("TOPLEFT", 2 * size, -size * 6)                                -- row 7, column 3 [Target Is Player]
    targetIsPlayerFrame.t = targetIsPlayerFrame:CreateTexture()
    targetIsPlayerFrame.t:SetColorTexture(1, 1, 1, alphaColor)
    targetIsPlayerFrame.t:SetAllPoints(targetIsPlayerFrame)
    targetIsPlayerFrame:Show()
	targetIsPlayerFrame:RegisterEvent("PLAYER_TARGET_CHANGED")
	targetIsPlayerFrame:RegisterUnitEvent("UNIT_HEALTH","target")
    targetIsPlayerFrame:SetScript("OnEvent", updateIsPlayer)
	
    flagFrame = CreateFrame("frame","", parent);
    flagFrame:SetSize(size, size);
    flagFrame:SetPoint("TOPLEFT", 3 * size, -size * 6)                                          -- row 7, column 4 [Outdoors] // Was Flag but was not used
    flagFrame.t = flagFrame:CreateTexture()
    flagFrame.t:SetColorTexture(1, 1, 1, alphaColor)
    flagFrame.t:SetAllPoints(flagFrame)
    flagFrame:Show()
    flagFrame:SetScript("OnUpdate", updateOutdoors)
end

local function InitializeTwo()
	--print ("Initialising Player Debuff Frames")
	    lastSpellFrame = CreateFrame("FRAME", "", parent);
        lastSpellFrame:SetSize(size, size);
        lastSpellFrame:SetPoint("TOPLEFT", (4) * size, -size * 6)                        -- row 7, column 4 [Last Spell Casted]
        lastSpellFrame.t = lastSpellFrame:CreateTexture()
        lastSpellFrame.t:SetColorTexture(0, 0, 0, alphaColor)
        lastSpellFrame.t:SetAllPoints(lastSpellFrame)
        lastSpellFrame:Show()
		lastSpellFrame:RegisterUnitEvent("UNIT_SPELLCAST_SUCCEEDED","player")
		lastSpellFrame:RegisterEvent("CURRENT_SPELL_CAST_CHANGED")
		lastSpellFrame:RegisterEvent("UNIT_SPELLCAST_FAILED","player")
        lastSpellFrame:SetScript("OnEvent", updateLastSpell)
    

    --print ("Initialising Target Last Spell Frame")
    for i = 1, 2 do
        targetLastSpellFrame[i] = CreateFrame("FRAME", "", parent);
        targetLastSpellFrame[i]:SetSize(size, size);
        targetLastSpellFrame[i]:SetPoint("TOPLEFT", (i + 5) * size, -size * 6)                  -- row 7, column 7 & 8 [Target Spell Casting Id]
        targetLastSpellFrame[i].t = targetLastSpellFrame[i]:CreateTexture()
        targetLastSpellFrame[i].t:SetColorTexture(0, 0, 0, alphaColor)
        targetLastSpellFrame[i].t:SetAllPoints(targetLastSpellFrame[i])
        targetLastSpellFrame[i]:Show()                
    end
		targetLastSpellFrame[table.maxn (targetLastSpellFrame)]:SetScript("OnUpdate", updateTargetCurrentSpell)
    --print ("Initialising Arena1 Frame")
    for i = 1, 4 do
        targetArenaFrame[i] = CreateFrame("FRAME", "", parent);
        targetArenaFrame[i]:SetSize(size, size);
        targetArenaFrame[i]:SetPoint("TOPLEFT", (i + 7) * size, -size * 6)                     -- row 7, column 9 & 10 [Arena1 Spell Casting Id]
        targetArenaFrame[i].t = targetArenaFrame[i]:CreateTexture()
        targetArenaFrame[i].t:SetColorTexture(0, 0, 0, alphaColor)
        targetArenaFrame[i].t:SetAllPoints(targetArenaFrame[i])
        targetArenaFrame[i]:Show()                
	end
		targetArenaFrame[table.maxn (targetArenaFrame)]:SetScript("OnUpdate", updateArenaSpell)
	--print ("Initialising Player Buff Frames")
	i = 0
	for _, buffId in pairs(buffs) do
		buffFrames[buffId] = CreateFrame("frame","", parent)
		buffFrames[buffId]:SetSize(size, size)
		buffFrames[buffId]:SetPoint("TOPLEFT", i * size, -size * 7)                            -- row 8 [Player Buffs]
		buffFrames[buffId].t = buffFrames[buffId]:CreateTexture()        
		buffFrames[buffId].t:SetColorTexture(1, 1, 1, alphaColor)
		buffFrames[buffId].t:SetAllPoints(buffFrames[buffId])
		buffFrames[buffId]:Show()		               
		i = i + 1
	end
		buffFrames[table.maxn (buffFrames)]:SetScript("OnUpdate", updateMyBuffs)
    i = 0
    for _, itemId in pairs(items) do    
        itemframes[itemId] = CreateFrame("frame","", parent)
        itemframes[itemId]:SetSize(size, size)
        itemframes[itemId]:SetPoint("TOPLEFT", i* size, -(size * 8))                           -- row 9 [Item Cooldowns]
        itemframes[itemId].t = itemframes[itemId]:CreateTexture()
        itemframes[itemId].t:SetColorTexture(1, 1, 1, alphaColor)
        itemframes[itemId].t:SetAllPoints(itemframes[itemId])
        itemframes[itemId]:Show()
        i = i + 1
    end
	if(table.getn(items) ~= 0) then
		itemframes[table.maxn (itemframes)]:RegisterEvent("ACTIONBAR_UPDATE_COOLDOWN")
		itemframes[table.maxn (itemframes)]:SetScript("OnEvent", updateItemCooldowns)
	end
	i=0
	for _, debuffId in pairs(debuffs) do
		playerDebuffFrames[debuffId] = CreateFrame("frame","", parent)
		playerDebuffFrames[debuffId]:SetSize(size, size)
		playerDebuffFrames[debuffId]:SetPoint("TOPLEFT", i * size, -size * 10)                 -- row 11, column 1+ [Player Debuff Frames]
		playerDebuffFrames[debuffId].t = playerDebuffFrames[debuffId]:CreateTexture()        
		playerDebuffFrames[debuffId].t:SetColorTexture(1, 1, 1, alphaColor)
		playerDebuffFrames[debuffId].t:SetAllPoints(playerDebuffFrames[debuffId])
		playerDebuffFrames[debuffId]:Show()		               
		playerDebuffFrames[debuffId]:SetScript("OnUpdate", updatePlayerDebuffs)
		i = i + 1
	end	
		playerDebuffFrames[table.maxn (playerDebuffFrames)]:SetScript("OnUpdate", updatePlayerDebuffs)		

    --print ("Initialising Spell Overlayed Frames")
    i = 0
    for _, spellId in pairs(cooldowns) do	
    	spellOverlayedFrames[spellId] = CreateFrame("frame","", parent)
    	spellOverlayedFrames[spellId]:SetSize(size, size)
    	spellOverlayedFrames[spellId]:SetPoint("TOPLEFT", i * size, -size * 11)    -- row 12, column 1+ [Spell IsOverlayed]
    	spellOverlayedFrames[spellId].t = spellOverlayedFrames[spellId]:CreateTexture()        
    	spellOverlayedFrames[spellId].t:SetColorTexture(1, 1, 1, alphaColor)
    	spellOverlayedFrames[spellId].t:SetAllPoints(spellOverlayedFrames[spellId])
    	spellOverlayedFrames[spellId]:Show()		               
    	i = i + 1
    end
	if(table.getn(cooldowns) ~= 0) then
		spellOverlayedFrames[table.maxn (spellOverlayedFrames)]:RegisterEvent("SPELL_ACTIVATION_OVERLAY_SHOW")
		spellOverlayedFrames[table.maxn (spellOverlayedFrames)]:RegisterEvent("SPELL_ACTIVATION_OVERLAY_HIDE")
		spellOverlayedFrames[table.maxn (spellOverlayedFrames)]:SetScript("OnEvent", updateIsSpellOverlayedFrames)
		
	end
		npcDetect.npcCountFrame = CreateFrame("frame", "", parent)
		npcDetect.npcCountFrame:SetSize(size, size)
		npcDetect.npcCountFrame:SetPoint("TOPLEFT", size*(0), -size *12 )   --  row 0,  column 20
		npcDetect.npcCountFrame.t = npcDetect.npcCountFrame:CreateTexture()        
		npcDetect.npcCountFrame.t:SetColorTexture(1, 1, 1, alphaColor)
		npcDetect.npcCountFrame.t:SetAllPoints(npcDetect.npcCountFrame)
		npcDetect.npcCountFrame:Show()
		npcDetect.npcCountFrame:SetScript("OnUpdate",NameplateFrameUPDATE)
	for i = 1, 5 do
		PlayerStatFrame[i] = CreateFrame("frame", "", parent)
		PlayerStatFrame[i]:SetSize(size, size)
		PlayerStatFrame[i]:SetPoint("TOPLEFT", size*(i), -size *12 )   --  row 2-6,  column 13
		PlayerStatFrame[i].t =PlayerStatFrame[i]:CreateTexture()        
		PlayerStatFrame[i].t:SetColorTexture(1, 1, 1, alphaColor)
		PlayerStatFrame[i].t:SetAllPoints(PlayerStatFrame[i])
		PlayerStatFrame[i]:Show()
	end
		PlayerStatFrame[table.maxn (PlayerStatFrame)]:RegisterEvent("PLAYER_ENTERING_WORLD")
		PlayerStatFrame[table.maxn (PlayerStatFrame)]:RegisterEvent("PLAYER_EQUIPMENT_CHANGED")
		PlayerStatFrame[table.maxn (PlayerStatFrame)]:RegisterEvent("PLAYER_REGEN_DISABLED")
		PlayerStatFrame[table.maxn(PlayerStatFrame)]:RegisterEvent("PLAYER_TALENT_UPDATE")
		PlayerStatFrame[table.maxn (PlayerStatFrame)]:SetScript("OnEvent",Talents)
	-- Rows 2-6 column 13

end
local function eventHandler(self, event, ...)
	local arg1 = ...
	if event == "ADDON_LOADED" then
		if (arg1 == "[CloudMagic]") then
			InitializeOne()
            InitializeTwo()
		end
	end
		 if event == "NAME_PLATE_UNIT_ADDED" then
			AddNameplate(select(1,...))
			activeEnemies()
    end
		if event == "PLAYER_ENTERING_WORLD"then
		currentSpec = GetSpecialization()
		currentSpecId = currentSpec and select(1, GetSpecializationInfo(currentSpec)) or 0
		TurnOnPlates()
	end
		if event == "PLAYER_REGEN_DISABLED"then 
		ClearNamePlates()
	end
	if event == "PLAYER_REGEN_ENABLED"then 
		ClearNamePlates()
		activeEnemies()
	end
end	
parent:SetScript("OnEvent", eventHandler)

