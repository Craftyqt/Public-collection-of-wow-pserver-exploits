
local size = 1

local party_units = {}
local raid_units = {}
local raidheal_cache = {}
local raidHealthFrame = {}
local RaidRole = {}
local RaidRange = {}
local raidBuff = {}
local RaidBuffFrame = {}
local raidBufftime = {}
local lasthp = {}
local lastbuff = {}
local lastdebuff = {}

local BaseHealingFrame = CreateFrame("frame", "HealingFrames", ParentFrame)
BaseHealingFrame:SetFrameStrata("TOOLTIP");
local healing_spells = {
	8004,
	19750,
	115151,
	5185,
	2061,
	200829}
local debuffraid = { debuffraidframes = {},
dispellType = {
	[250] = {type1= 'Magic', type2 = 'Curse', type3= "Poison", type4 = "Disease"},
	[251] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[252] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[577] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[581] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[102] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[103] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[104] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[105] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[253] =  {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[254] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[255] =  {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[62] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[63] =  {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[64] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[268] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[269] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[270] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[65] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[66] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[70] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[256] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[257]= {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[257] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[259] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[260] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[261] =  {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[262] =  {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
    [263] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[264] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[265] =  {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[71] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[72] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[73] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
	[266] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""},
    [267] = {type1= 'Magic', type2 = 'Curse', type3= "", type4 = ""}
	}
}
local debufftarget = {locX = 0,locY = 30, debufftargetframes = {},dispellType = {
	[250] = {type1= 'Magic'},
	[251] = {type1= 'Magic'},
	[252] = {type1= 'Magic'},
	[577] = {type1= 'Magic'},
	[581] = {type1= 'Magic'},
	[102] = {type1= 'Magic'},
	[103] = {type1= 'Magic'},
	[104] = {type1= 'Magic'},
	[105] = {type1= 'Magic'},
	[253] =  {type1= 'Magic'},
	[254] = {type1= 'Magic'},
	[255] =  {type1= 'Magic'},
	[62] = {type1= 'Magic'},
	[63] =  {type1= 'Magic'},
	[64] = {type1= 'Magic'},
	[268] = {type1= 'Magic'},
	[269] = {type1= 'Magic'},
	[270] = {type1= 'Magic'},
	[65] = {type1= 'Magic'},
	[66] = {type1= 'Magic'},
	[70] = {type1= 'Magic'},
	[256] = {type1= 'Magic'},
	[257]= {type1= 'Magic'},
	[257] = {type1= 'Magic'},
	[259] = {type1= 'Magic'},
	[260] = {type1= 'Magic'},
	[261] =  {type1= 'Magic'},
	[262] =  {type1= 'Magic'},
    [263] = {type1= 'Magic'},
	[264] = {type1= 'Magic'},
	[265] =  {type1= 'Magic'},
	[71] = {type1= 'Magic'},
	[72] = {type1= 'Magic'},
	[73] = {type1= 'Magic'},
	[266] = {type1= 'Magic'},
    [267] = {type1= 'Magic'}},
	debuff = {targetdebuff}}

local function IsHealer()
	if  currentSpecId == 270
		 or currentSpecId == 65
		 or currentSpecId== 257
		 or currentSpecId == 256
		 or currentSpecId == 264
		 or currentSpecId == 105 then
		return true
	else
		return false-- Druid Resto
	end
end

local function UnitIsPartyUnit(unit)
	--print("checking :", unit)
	for _, v in next, party_units do
		if unit == v then return true end
	end
	return false
end
local function UnitIsRaidUnit(unit)
	for _, v in next, raid_units do
		if unit == v then return true end
	end
	return false
end

local function updateRaidDebuff(self,event,unitID)
	if not IsHealer() then return end
	if not UnitIsRaidUnit(unitID) and not UnitIsPartyUnit(unitID) then return  end
	if GetTime() - lastdebuff[unitID]  > 10 then return end
		local inparty = false
		local type= {}
		local debuffDispell = {}
		local dispell = {
		unit = tonumber(string.match(unitID, "%d+")),
		}
		type[dispell.unit] = 0
		debuffDispell[dispell.unit]= 0
			
		for i=1, 40 do
            local name, _,_, _, debuffType, _, _, _, StealOrPurge, _, spellID, _, _, _ = UnitAura(unitID, i, "HARMFUL|RAID")
			if name == nil then	break end
				if debuffType == debuffraid.dispellType[currentSpecId].type1 then
					type[dispell.unit] = .20
					debuffDispell[dispell.unit]= .5
					--print(dispell.unit,debuffDispell[dispell.unit])
				elseif debuffType == debuffraid.dispellType[currentSpecId].type2 then 
					type[dispell.unit] = .40
					debuffDispell[dispell.unit]= .5
					--print(dispell.unit,debuffDispell[dispell.unit])
				elseif debuffType == debuffraid.dispellType[currentSpecId].type3 then
					type[dispell.unit] = .60
					--print(dispell.unit,debuffDispell[dispell.unit])
					debuffDispell[dispell.unit]= .5
				elseif debuffType == debuffraid.dispellType[currentSpecId].type4 then
					type[dispell.unit] = .80
					debuffDispell[dispell.unit]= .5
					--print(dispell.unit,debuffDispell[dispell.unit])
				else
					type[dispell.unit] = 0
					debuffDispell[dispell.unit] = 0
				end

				for k, debuff in pairs(dispells) do
					if(spellId == k and debuff.priority == true ) then
						debuffDispell[dispell.unit]= 1
					end
					if(spellId == k and debuff.ignore == true ) then
						debuffDispell[dispell.unit]= 0
					end
				end
				if debuffDispell[dispell.unit] == 1 then break end
		end
		for i, key in pairs(debuffDispell) do
			if key >=.01 then
				if RaidRole[dispell.unit] == 1  then
					--print("Tank: ",debuffDispell[dispell.unit],dispell.unit)
					debuffraid.debuffraidframes.t:SetColorTexture(debuffDispell[dispell.unit],type[dispell.unit] , dispell.unit/100, alphaColor)
					return
				elseif RaidRole[dispell.unit] == .5 then
					--print("Healer: ",debuffDispell[dispell.unit],dispell.unit)
					 debuffraid.debuffraidframes.t:SetColorTexture(debuffDispell[dispell.unit],type[dispell.unit] , dispell.unit/100, alphaColor)
					 return
				else
					--print("Dps: ",i,debuffDispell[dispell.unit],dispell.unit)
					debuffraid.debuffraidframes.t:SetColorTexture(debuffDispell[dispell.unit],type[dispell.unit] , dispell.unit/100, alphaColor)
				end
			end
		end
		lastdebuff[unitID] = GetTime()
end



local function HealthChangedEvent(unit)
	local h = UnitHealth(unit)
	if h==lasthp[unit] then return end
	lasthp[unit]=h
	local m = UnitHealthMax(unit);
	h = (h / m)
	raidheal_cache[unit] = h
end

local function RangeCheck(unit)
	if LibStub("SpellRange-1.0").IsSpellInRange("Healing Wave", unit) == 1 then
		RaidRange[unit] = 1;
	else
		RaidRange[unit] = .5;
	end
end

local function RaidRoleCheck(unit)
	if UnitGroupRolesAssigned(unit) == "TANK" then
		RaidRole[unit] = 1;
	elseif UnitGroupRolesAssigned(unit) == "HEALER" then
		RaidRole[unit] = .5;
	else
		RaidRole[unit] = 0;
	end
end

local function UpdateRaidIndicators(self,event,unit)
	if not IsHealer() then return end
		if UnitIsPartyUnit(unit) and not UnitIsRaidUnit (unit) then
		--print(unit,"needs heals")
					HealthChangedEvent(unit)
					RangeCheck(unit)
					RaidRoleCheck(unit)
					--print(unit, "is at :", raidheal_cache[unit])
					raidHealthFrame[tonumber(string.match(unit, "%d+"))].t:SetColorTexture(raidheal_cache[unit], RaidRange[unit], RaidRole[unit], alphaColor)

		elseif UnitIsRaidUnit(unit) then 
                   HealthChangedEvent(unit)
				RangeCheck(unit)
				RaidRoleCheck(unit)
				--print(unit, "is at :", raidheal_cache[unit], " and At : ", i)
				raidHealthFrame[tonumber(string.match(unit, "%d+"))].t:SetColorTexture(raidheal_cache[unit], RaidRange[unit], RaidRole[unit], alphaColor)
		end
end


local function register_unit(tbl, unit)
		table.insert(tbl, unit)
end
do
	for i = 1, 5 do
		register_unit(party_units, ("party%d"):format(i))
		lastbuff[("party%d"):format(i)] = 0
		lastdebuff[("party%d"):format(i)] = 0
	end
	for	i = 1,30 do
		register_unit(raid_units, ("raid%d"):format(i))
				lastbuff[("raid%d"):format(i)] = 0
		lastdebuff[("raid%d"):format(i)] = 0
	end
	
end

local function UdateRaidSizeFrame(self, event)
	if not IsHealer() then return end
	partySize = GetNumGroupMembers() ;
	--print("Party Size: ",partySize)
	partySize = partySize /100
	if partySize > .30 then
		partySize = .30
	end
	--print("Partyupdate :",partySize)
	--print("Name plates :", PlatesOn)
	raidSizeFrame.t:SetColorTexture(partySize, 0, 0, alphaColor)
	if not UnitInRaid ("player") and not UnitInParty ("player") then
		for i=0, 30 do
			raidHealthFrame[i].t:SetColorTexture(0, 0, 0, alphaColor)
		end
	end
end
local function UpdateRaidBuffs(self,event,unitId)
	if not IsHealer() or unitId == "player" then return end
	if not UnitIsRaidUnit(unitId) and not UnitIsPartyUnit(unitId) then return end
	--print(lastbuff[unitId],unitId)
	if lastbuff[unitId] - GetTime() > 10 then return end
	local spellname
	local Buffs = {0,0,0,0,0,0}
	local red = 0
	local green = 0 
	local blue = 0
	if not UnitInRaid(unitId) and UnitInParty(unitId) then
		print("fires party")
		for key, auraId in pairs(healingBuff) do
			spellname = GetSpellInfo(auraId)
			
			if spellname == nil then
				Buffs[key] = 0
				break
			end

			local name, _, _, _, _, _, _, _, _, _, _ = UnitBuff(unitId, spellname,nil,"player")
			
			if(name ~= nil) then
				Buffs[key] = 1
			elseif(name == nil) then
				Buffs[key] = 0
			end
			red  = (Buffs[0]*10 + Buffs[1])/100
			green = (Buffs[2]*10 + Buffs[3])/100
			blue = (Buffs[4]*10 + Buffs[5])/100
		end
	elseif UnitInRaid (unitId) then
		for key, auraId in pairs(healingBuff) do
			spellname = GetSpellInfo(auraId)
			if spellname == nil then
				Buffs[key] = 0
				break
			end

			local name, _, _, _, _, _, _, _, _, _, _ = UnitBuff(unitId, spellname,nil,"player")
		
			if(name ~= nil) then
				Buffs[key] = 1
			elseif(name == nil) then
				Buffs[key] = 0
			end
		end
	end
	red  = (Buffs[1]*10 + Buffs[2])/100
	green = (Buffs[3]*10 + Buffs[4])/100
	blue = (Buffs[5]*10 + Buffs[6])/100
	RaidBuffFrame[tonumber(string.match(unitId, "%d+"))].t:SetColorTexture(red, green, blue, alphaColor)
	lastbuff[unitId] = GetTime()
end

local function InitializeOne()

	local strunit
	local strparty
	for i = 0, 30 do	
		raidHealthFrame[i] = CreateFrame("frame", "", parent)
		raidHealthFrame[i]:SetSize(size, size)
		raidHealthFrame[i]:SetPoint("TOPLEFT", size*(i), -size *17 )   --  row 1-20,  column 19
		raidHealthFrame[i].t = raidHealthFrame[i]:CreateTexture()        
		raidHealthFrame[i].t:SetColorTexture(0, 0, 0, alphaColor)
		raidHealthFrame[i].t:SetAllPoints(raidHealthFrame[i])
		raidHealthFrame[i]:Show()
		strunit = "raid" .. i 
		strparty = "party" .. i
		raidHealthFrame[i]:RegisterUnitEvent("UNIT_HEALTH",strunit,strparty)
		raidHealthFrame[i]:SetScript("OnEvent",UpdateRaidIndicators)
		i = i+1
	end

		raidSizeFrame = CreateFrame("frame", "", parent)
		raidSizeFrame:SetSize(size, size)
		raidSizeFrame:SetPoint("TOPLEFT", size*(20), -size *15 )   --  row 11,  column 20
		raidSizeFrame.t = raidSizeFrame:CreateTexture()        
		raidSizeFrame.t:SetColorTexture(1, 1, 1, alphaColor)
		raidSizeFrame.t:SetAllPoints(raidSizeFrame)
		raidSizeFrame:Show()
		raidSizeFrame:RegisterEvent("RAID_ROSTER_UPDATE")
		raidSizeFrame:RegisterEvent("GROUP_ROSTER_UPDATE")
		raidSizeFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
		raidSizeFrame:SetScript("OnEvent",UdateRaidSizeFrame)
		
	for i = 0, 30 do		
		RaidBuffFrame[i] = CreateFrame("frame", "", parent)
		RaidBuffFrame[i]:SetSize(size, size)
		RaidBuffFrame[i]:SetPoint("TOPLEFT", size*(i), -size *18)   --  row 12-15,  column 20
		RaidBuffFrame[i].t = RaidBuffFrame[i]:CreateTexture()        
		RaidBuffFrame[i].t:SetColorTexture(0, 0, 0, alphaColor)
		RaidBuffFrame[i].t:SetAllPoints(RaidBuffFrame[i])
		RaidBuffFrame[i]:Show()
		strunit = "raid" .. i 
		strparty = "party" .. i
		RaidBuffFrame[i]:RegisterUnitEvent("UNIT_AURA",strunit,strparty)
		RaidBuffFrame[i]:SetScript("OnEvent",UpdateRaidBuffs)
		i=i+1
	end
		debuffraid.debuffraidframes = CreateFrame("frame","", parent)
		debuffraid.debuffraidframes:SetSize(size, size)
		debuffraid.debuffraidframes:SetPoint("TOPLEFT", 19 * size, -size * 15)         -- row 4, column 1+ [Spell In Range]
		debuffraid.debuffraidframes.t = debuffraid.debuffraidframes:CreateTexture()        
		debuffraid.debuffraidframes.t:SetColorTexture(1, 1, 1, alphaColor)
		debuffraid.debuffraidframes.t:SetAllPoints(debuffraid.debuffraidframes)
		debuffraid.debuffraidframes:Show()	
		debuffraid.debuffraidframes:RegisterEvent("UNIT_AURA")			
		debuffraid.debuffraidframes:SetScript("OnEvent", updateRaidDebuff)
end

local function eventHandler(self, event, ...)
	local arg1 = ...
		if (arg1 == "[CloudMagic]") then
			InitializeOne()
       end
	if event == "PLAYER_ENTERING_WORLD" or event == "ACTIVE_TALENT_GROUP_CHANGED"then
		currentSpec = GetSpecialization()
		currentSpecId = currentSpec and select(1, GetSpecializationInfo(currentSpec)) or 0
	end

end
BaseHealingFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
BaseHealingFrame:RegisterEvent("ACTIVE_TALENT_GROUP_CHANGED")
BaseHealingFrame:RegisterEvent("ADDON_LOADED")
BaseHealingFrame:SetScript("OnEvent", eventHandler)


