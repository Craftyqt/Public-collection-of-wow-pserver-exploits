-- RareFinder 1.9.14 by WuhTehFuh
-- Programmed for WoWPlus

---------------------------------------------------
--                   Variables                   --
---------------------------------------------------

-- Get a 1kb CodeCave where we can put in our assembly stuff...
local CodeCave = Memory.Allocate();

-- rare objects
-- Credits: Cencil, WoWHead, Filmfilm, Meteox, ...
local objects = {
    1765,   -- Worn Wooden Chest
    2560,   -- Half-Buried Bottle
    2843,   -- Battered Chest
    2844,   -- Tattered Chest
    2845,   -- Tattered Chest
    2846,   -- Tattered Chest
    2847,   -- Tattered Chest
    2850,   -- Solid Chest
    3715,   -- Tattered Chest
    74447,  -- Large Iron Bound Chest
    75293,  -- Large Battered Chest
    75300,  -- Large Solid Chest
    105578, -- Tattered Chest
    131978, -- Large Mithril Bound Chest
    131979, -- Large Darkwood Chest
    153468, -- Large Mithril Bound Chest
    179697, -- Arena Treasure Chest
    181665, -- Burial Chest
    181798, -- Fel Iron Chest
    181800, -- Heavy Fel Iron Chest
    181802, -- Adamantite Bound Chest
    181804, -- Felsteel Chest
    184793, -- Primitive Chest
    184933, -- Solid Fel Iron Chest
    184935, -- Solid Fel Iron Chest
    184939, -- Solid Adamantite Chest
    185915, -- Netherwing Egg
    192708, -- The Schools of Arcane Magic - Introduction
    192709, -- The Schools of Arcane Magic - Abjuration
    192710, -- The Schools of Arcane Magic - Conjuration
    192711, -- The Schools of Arcane Magic - Divination
    192713, -- The Schools of Arcane Magic - Enchantment
    192865, -- The Schools of Arcane Magic - Illusion
    192866, -- The Schools of Arcane Magic - Necromancy
    192867, -- The Schools of Arcane Magic - Transmutation
    202080, -- Dart's Nest
    202081, -- Takk's Nest
    202082, -- Ravasaur Matriarch's Nest
    202083, -- Razormaw Matriarch's Nest
    205878, -- Battered Chest
    205879, -- Battered Chest
    205880, -- Battered Chest
    205881, -- Battered Chest
    207472, -- Silverbound Treasure Chest
    207473, -- Silverbound Treasure Chest
    207474, -- Silverbound Treasure Chest
    207475, -- Silverbound Treasure Chest
    207476, -- Silverbound Treasure Chest
    207477, -- Silverbound Treasure Chest
    207478, -- Silverbound Treasure Chest
    207479, -- Silverbound Treasure Chest
    207480, -- Silverbound Treasure Chest
    207484, -- Sturdy Treasure Chest
    207485, -- Sturdy Treasure Chest
    207486, -- Sturdy Treasure Chest
    207487, -- Sturdy Treasure Chest
    207488, -- Sturdy Treasure Chest
    207489, -- Sturdy Treasure Chest
    207492, -- Sturdy Treasure Chest
    207493, -- Sturdy Treasure Chest
    207494, -- Sturdy Treasure Chest
    207495, -- Sturdy Treasure Chest
    207496, -- Dark Iron Treasure Chest
    207497, -- Dark Iron Treasure Chest
    207512, -- Silken Treasure Chest
    207517, -- Silken Treasure Chest
    207518, -- Silken Treasure Chest
    207519, -- Silken Treasure Chest
    207520, -- Maplewood Treasure Chest
    207521, -- Maplewood Treasure Chest
    207522, -- Maplewood Treasure Chest
    207523, -- Maplewood Treasure Chest
    207524, -- Maplewood Treasure Chest
    207528, -- Maplewood Treasure Chest
    207529, -- Maplewood Treasure Chest
    207533, -- Runestone Treasure Chest
    207534, -- Runestone Treasure Chest
    207535, -- Runestone Treasure Chest
    207540, -- Runestone Treasure Chest
    207542, -- Runestone Treasure Chest
    209354, -- Golden Lotus
    209620, -- Darkmoon Treasure Chest
    210565, -- Dark Soil
    210582, -- Dark Soil
    211642, -- Lucky Golden Coin
    213363, -- Wodin's Mantid Shanker
    213364, -- Ancient Pandaren Mining Pick
    213366, -- Ancient Pandaren Tea Pot
    213368, -- Lucky Pandaren Coin
    213649, -- Cache of Pilfered Goods
    213650, -- Virmen Treasure Cache
    213651, -- Equipment Locker
    213653, -- Pandaren Fishing Spear
    213748, -- Pandaren Ritual Stone
    213749, -- Staff of the Hidden Master
    213750, -- Saurok Stone Tablet
    213751, -- Sprite's Cloth Chest
    213765, -- Tablet of Ren Yun
    213768, -- Hozen Warrior Spear
    213769, -- Hozen Treasure Cache
    213770, -- Stolen Sprite Treasure
    213771, -- Statue of Xuen
    213774, -- Lost Adventurer's Belongings
    213782, -- Terracotta Head
    213793, -- Rikktik's Tiny Chest
    213842, -- Stash of Yaungol Weapons
    213844, -- Amber Encased Moth
    213845, -- The Hammer of Folly
    213956, -- Fragment of Dread
    213959, -- Hardened Sap of Kri'vess
    213960, -- Yaungol Fire Carrier
    213961, -- Abandoned Crate of Goods
    213962, -- Wind-Reaver's Dagger of Quick Strikes
    213964, -- Malik's Stalwart Spear
    213967, -- Blade of the Prime
    213968, -- Swarming Cleaver of Ka'roz
    213969, -- Dissector's Staff of Mutation
    213970, -- Bloodsoaked Chitin Fragment
    214325, -- Forgotten Lockbox
    214337, -- Stash of Gems
    214338, -- Offering of Rememberance
    214340, -- Boat-Building Instructions
    214388, -- Ancient Guo-Lai Cache
    214403, -- Stack of Papers
    214407, -- Mo-Mo's Treasure Chest
    214429, -- Worn Tracks
    214430, -- Barely Visible Tracks
    214431, -- Muddy Tracks
    214432, -- Mysterious Tracks
    214433, -- Heavy Tracks
    214434, -- Puzzling Tracks
    214435, -- Dusty Tracks
    214436, -- Bloody Tracks
    214437, -- Flooded Tracks
    214438, -- Ancient Mogu Tablet
    214439, -- Recipe: Banana Infused Rum
    214945, -- Onyx Egg
    231742, -- Hammer of Ten Thunders
};

local npcs = {
    3868,  -- Bloodseeker
    8666,  -- Lil Timmy <Boy with kittens>
    50409, -- Mysterious Camel Figurine
    50410, -- Mysterious Camel Figurine (FAKE)
    58336, -- Darkmoon Rabbit
};

-- ignored npc's
local inpcs = {
    32435, -- Vern
    64403, -- Alani
    60491, -- Sha of Anger
}

-- "nearby objects" label and listbox
local g_lNearbyObjects  = nil;
local g_lbNearbyObjects = nil;

-- object list, need this to stop announcing objects over and over
local g_objectList = {};

-- load (default) settings
local closebut, minbut, maxbut, fFrame, cbPlaySound1, cbPlaySound2 = nil;
local g_fadeTimer = 0;

---------------------------------------------------
--                    Startup                    --
---------------------------------------------------

function Load()
    Plus.PrintChat("RareFinder loaded.");
    
    -- Write the assembly code (ret) to our codecave.
    -- We need this to force a return on a detoured function.
    Memory.WriteBuffer(CodeCave, 0xC3);

    -- Hook the SendChatMessage function
    Memory.Hook(ShowGUI, Memory.GetModuleBase() + 0x58A780);
    
    -- Draw Frame
    fFrame = Frame.CreateEmpty("RareFinder by WuhTehFuh", 292, 260, true);
    Rectangle.Create(fFrame, 0, 0, 290, 259, 0x90000050);
    Border.Create(fFrame, 0, 0, 290, 259, 1, 0x90FFFFFF);
    
    Rectangle.Create(fFrame, 4, 4, 283, 23, 0x20FFFFFF);
    Rectangle.Create(fFrame, 0, 30, 319, 1, 0x20FFFFFF);
    
    Label.Create(fFrame, "RareFinder v.1.9.14", 10, 7, false, false, 0xF0FFFFFF);
    
    closebut = Button.Create(fFrame, "X", 245, 7, 15, 15);
    minbut   = Button.Create(fFrame, "◄", 267, 7, 15, 15);
    maxbut   = Button.Create(fFrame, "►", 267, 7, 15, 15);
    minbut:SetVisible(false);
    
    fFrame:SetPosition(-260, 200);
    
    g_lNearbyObjects  = Label.Create(fFrame, "Nearby objects/creatures: 0", 8, 35);
    g_lbNearbyObjects = ListBox.Create(fFrame, 10, 60, 270, 100);

    cbPlaySound1 = CheckBox.Create(fFrame, "Play sound (Rare creatures)", 10, 170, GetSetting("playSound1", true));
    cbPlaySound2 = CheckBox.Create(fFrame, "Play sound (Rare objects)", 10, 195, GetSetting("playSound2", true));
    
    local bTarget = Button.Create(fFrame, "Target", 10, 225, 132, 20);

    Event.RegisterFrameCallback(OncbPlaySound1Changed, cbPlaySound1, "OnClick");
    Event.RegisterFrameCallback(OncbPlaySound2Changed, cbPlaySound2, "OnClick");
    Event.RegisterFrameCallback(OnTargetClick, bTarget, "OnClick");
    Event.RegisterFrameCallback(fadeTimer, closebut, "OnClick");
    Event.RegisterFrameCallback(fadeTimer, minbut, "OnClick");
    Event.RegisterFrameCallback(fadeTimer, maxbut, "OnClick");
    Event.RegisterTimerCallback(Pulse, 400, true);
end

function Unload()
    local oList = g_objectList;
    for k, v in pairs(oList) do
        k:SetTracked(false);
    end
    
    -- Free the allocated memory for our codecave...
    Memory.Free(CodeCave);
    
    Plus.PrintChat("Thank you for using RareFinder by WuhTehFuh :)");
    Plus.PrintChat("Check out http://www.wow-plus.net for more, useful stuff.");
end

function ShowGUI(hookID, address, eax, ebp, ebx, ecx, edi, edx, eip, esi, esp)
    -- Message is in ESI
    local message = Memory.ReadString(esi);

    -- Check if message is "!rare"
    if message == "!rare" then        
        -- Show GUI
        fFrame:SetVisible(true);

        -- We don't want to send the message: Jump to our "return" codecave.
        -- EIP is the jump back address when our codecave finishes execution.
        Memory.HookSetContext(eax, ebp, ebx, ecx, edi, edx, CodeCave, esi, esp);
    end
end

-- WHOAH!
function fadeTimer(eventID, cbSender)    
    if cbSender == minbut then
        Event.RegisterTimerCallback(fadeout, 10, true);
    elseif cbSender == maxbut then
        Event.RegisterTimerCallback(fadein, 10, true);
    else
        Event.RegisterTimerCallback(hidewindow, 10, true);
    end
end

function GetFadeTime()
    local timeNow = Plus.GetTimeStamp();
    local timeElapsed = timeNow - g_fadeTimer;
    g_fadeTimer = timeNow;
    
    if timeElapsed > 100 then
       timeElapsed = 10;
    end
    
    return timeElapsed;
end

function fadein(id, iv)
    local timeElapsed = GetFadeTime();
    local x, y = fFrame:GetPosition();
    
    if x < 0 then
        fFrame:SetPosition(x + timeElapsed * 0.5, y);
        return;
    end
    
    minbut:SetVisible(true);
    maxbut:SetVisible(false);
    Event.RemoveTimerCallback(id);
end

function fadeout(id, iv)
    local timeElapsed = GetFadeTime();
    local x, y = fFrame:GetPosition();
    
    if x > -260 then
        fFrame:SetPosition(x - timeElapsed * 0.5, y);
        return;
    end
    
    minbut:SetVisible(false);
    maxbut:SetVisible(true);
    Event.RemoveTimerCallback(id);
end

function hidewindow(id, iv)
    local timeElapsed = GetFadeTime();
    local width = fFrame:GetWidth();
    local height = fFrame:GetHeight();
    
    if width > 0 then
        fFrame:SetWidth(width - timeElapsed);
        
        if height > 0 then
            fFrame:SetHeight(height - timeElapsed);
        end
        
        return;
    end
    
    fFrame:SetVisible(false);
    fFrame:SetWidth(290);
    fFrame:SetHeight(319);
    Event.RemoveTimerCallback(id);
    
    Plus.PrintChat("RareFinder is now hidden. Type !rare to bring it back.");
end
--

---------------------------------------------------
--                 Main Functions                --
---------------------------------------------------

local trackedObj, objID, oHealth, oDynFlags, objType, objRank, objReaction, objName, x, y, z, oType = nil;

function Pulse(eventID, timer)
    RemoveInvalidObjects();

    local cnt = ObjectManager.GetObjectListEntryCount();
    for i = 1, cnt, 1 do
        trackedObj  = ObjectManager.GetObjectListEntry(i);
        objID       = trackedObj:GetDescriptor(OBJECT_FIELD_ENTRY, "int");
        oHealth     = trackedObj:GetDescriptor(UNIT_FIELD_HEALTH, "int");
        oDynFlags   = trackedObj:GetDescriptor(UNIT_FIELD_DYNAMIC_FLAGS, "int");
        objType     = trackedObj:GetType();
        objRank     = trackedObj:GetCreatureRank();
        objReaction = ObjectManager.GetActivePlayer():GetReaction(trackedObj);
        objName     = trackedObj:GetName();
        x, y, z     = trackedObj:GetLocation();
        oType       = "Object";

        if      (
                    (not isIgnored() and (isTracked(1) or (oHealth > 0 and Bit.And(oDynFlags, 0x20) ~= 0x20 and objType ~= 7 and (objRank == 2 or objRank == 4) and objReaction <= 3)))
                 or
                    (objType ~= 3 and objType ~= 4 and objType ~= 7 and isTracked(2))
                )
        and     trackedObj:IsValid()
        and     objName ~= "Unknown"     -- English
        and     objName ~= "Unbekannt"   -- German
        and     objName ~= "Inconnu"     -- French
        and     objName ~= "Неизвестный" -- Russian
        and     objName ~= ""
        and not IsAlreadyAdded()
        and not (x == 0.00 and y == 0.00 and z == 0.00)
        then
            AddObject();
            
            if objType ~= 3 and objType ~= 4 and objType ~= 7 then
                if cbPlaySound2:GetChecked() then
                    Plus.DoString('PlaySound("RaidWarning", "Master")');
                end
            else
                oType = "Creature"
                
                if cbPlaySound1:GetChecked() then
                    Plus.DoString('PlaySoundFile([[Sound\\Event Sounds\\Event_wardrum_ogre.wav]], "Master")');
                    Plus.DoString('PlaySoundFile([[Sound\\Events\\scourge_horn.wav]], "Master")');
                end
            end
                
            Plus.PrintWarning("Rare " .. oType .. " \"" .. objName .. "\" found!");
            Plus.PrintChat("Rare " .. oType .. " \"" .. c(objName, "fff569") .. "\" found!");
        end
    end

    UpdateObjectCount();
end

function AddObject()
    local lbeNewEntry = ListBoxEntry.Create(g_lbNearbyObjects, objName);
    Event.RegisterFrameCallback(OnTargetClick, lbeNewEntry, "OnDoubleClick");
    g_objectList[trackedObj] = lbeNewEntry;
    trackedObj:SetTracked(true);
end

function RemoveInvalidObjects()
    local oList = g_objectList;
    for k, v in pairs(oList) do
        local rank = k:GetCreatureRank();
        local health = k:GetDescriptor(UNIT_FIELD_HEALTH, "int");
        if not k:IsValid() or ((rank == 2 or rank == 4) and health <= 0) then
            v:Destroy();
            oList[k] = nil;
        end
    end
end

function UpdateObjectCount()
    local oList = g_objectList;
    local counter = 0;
    for k, v in pairs(oList) do
        counter = counter + 1;
    end

    g_lNearbyObjects:SetText("Nearby objects/creatures: " .. counter);
end

function OnTargetUnit(eventID, lbeSender)
    local oList = g_objectList;
    for k, v in pairs(oList) do
        if v == lbeSender then
            if k:IsValid() then
                Player.Target(k);
            end
            return;
        end
    end
end

function OnTargetClick(eventID, bSender)
    local lbeSelectedItem = g_lbNearbyObjects:GetSelectedItem();
    if lbeSelectedItem ~= nil then
        OnTargetUnit(eventID, lbeSelectedItem);
    end
end

function OncbPlaySound1Changed(eventID, cbSender)
    cbPlaySound1 = cbSender:GetChecked();
    SetSetting("playSound1", cbPlaySound1);
    
    if cbPlaySound1 then
        Plus.PrintChat("Play sound (Rare creatures) enabled.");
    else
        Plus.PrintChat("Play sound (Rare creatures) disabled.");
    end
end

function OncbPlaySound2Changed(eventID, cbSender)
    cbPlaySound2 = cbSender:GetChecked();
    SetSetting("playSound2", cbPlaySound2);
    
    if cbPlaySound2 then
        Plus.PrintChat("Play sound (Rare objects) enabled.");
    else
        Plus.PrintChat("Play sound (Rare objects) disabled.");
    end
end

function isTracked(tbl)
    if tbl == 1 then
        tbl = npcs
    else
        tbl = objects
    end
    
    for _,v in pairs(tbl) do
        if v == objID then
            return true;
        end
    end
    
    return false;
end

function isIgnored()    
    for _,v in pairs(inpcs) do
        if v == objID then
            return true;
        end
    end
    
    return false;
end

function IsAlreadyAdded()
    return g_objectList[trackedObj] ~= nil;
end

--

function SetSetting(setting, value)    
    -- Pseudo Cast
    if value == true then
        value = "true";
    elseif value == false then
        value = "false";
    elseif value == nil then
        value = "nil";
    end
    -- End

    Plus.WriteConfigSetting(setting, value);
end

function GetSetting(setting, defaultvalue)    
    -- Pseudo Cast
    if defaultvalue == true then
        defaultvalue = "true";
    elseif defaultvalue == false then
        defaultvalue = "false";
    elseif defaultvalue == nil then
        defaultvalue = "nil";
    end
    -- End
     
    local ret = Plus.ReadConfigSetting(setting, defaultvalue);
    
    -- Pseudo Cast
    if ret == "true" then
        return true;
    elseif ret == "false" then
        return false;
    elseif ret == "nil" then
        return nil;
    -- End
    else
        return ret;
    end
end

function c(text, hex)
    return "|cff" .. hex .. text .. "|cffffffff";
end