-- Auto Interrupt v1.0 by zdennis
-- Programmed for WoWPlus v1.1.2.567

local g_List;
local g_BlackList = {}

local g_Interrupt_All = true;
local g_Interrupt_List = false;
local g_Interrupt_Choose = "all"

local g_IsRunning = false;
function Load()
Plus.PrintChat( "Auto Interrupt v1.0 loaded" );
	local fFrame = Frame.Create( "by zdennis", 268, 270 );
	Label.Create( fFrame, "Which spells will be interrupted:", 16, 0 );
	g_List = ListBox.Create( fFrame, 8, 20, 250, 90 );
	AddSpellNameString = TextBox.Create( fFrame, "Spell name", 8, 111,130,20,50)
	local AddButton = Button.Create( fFrame, "Add", 140, 111,59,20 );
	local RemoveButton = Button.Create( fFrame, "Remove", 200, 111,58,20 );
	
	Event.RegisterFrameCallback( "AddSpell", AddButton, "OnClick" );
	Event.RegisterFrameCallback( "RemoveSpell", RemoveButton, "OnClick" );
	
	Label.Create( fFrame, "Interrupt Spell:", 8, 141 );
	InterruptNameString = TextBox.Create( fFrame, "Kick", 129, 138.5,130,20,50)
	Button.Create( fFrame, "", 1, 164,300,0.5 );
	
	InterruptAllSpells = CheckBox.Create( fFrame, "Interrupt all Spells!", 8, 180, g_Interrupt_All );
	InterruptByLIst = CheckBox.Create( fFrame, "Interrupt by using the list!", 8, 200, g_Interrupt_List );
	
	Event.RegisterFrameCallback( "ChooseSpellWay", InterruptAllSpells, "OnClick" );
	Event.RegisterFrameCallback( "ChooseSpellWay", InterruptByLIst, "OnClick" );
	
	Event.RegisterFrameCallback( "FieldEdit", AddSpellNameString, "OnContentChanged" );
	Event.RegisterFrameCallback( "FieldEdit", InterruptNameString, "OnContentChanged" );
	
	
	Button.Create( fFrame, "", 1, 224,300,0.5 );
	
	IsRunning = Button.Create( fFrame, "Enable the interrupting", 30, 230,200,20 );
	
	Event.RegisterFrameCallback( "StartStop", IsRunning, "OnClick" );
										
	
	AutoLoad()

	Event.RegisterSignalCallback( "AutoLoad", FRAMEEVENT_PLAYER_ENTERING_WORLD );
	Event.RegisterTimerCallback( "CheckForSpell", 10, true );
end
function Unload()
end

function CheckForSpell()

target = ObjectManager.GetCurrentTarget()
	if Plus.IsInGame() == true and target and g_IsRunning == true then	
		local InterruptSpell = InterruptNameString:GetText()
		 Plus.DoString("spell, rank, displayName, icon, startTime, endTime, isTradeSkill, castID, interrupt = UnitCastingInfo('target')")
		 Plus.DoString("spell2, rank2, displayName2, icon2, startTime2, endTime2, isTradeSkill2, interrupt2 = UnitChannelInfo('target')")
		local spell1 = Plus.DoString("return spell")		
		local spell2 = Plus.DoString("return spell2")		
		local interrupt = Plus.DoString("return interrupt")		
		local interrupt1 = 	Plus.DoString("return interrupt2")	
		local IsMounted = Plus.DoString("return IsMounted()")	
		local attackable = Plus.DoString("return UnitCanAttack('player', 'target')")	
		local InFight = Plus.DoString("return UnitAffectingCombat('player')")	
		local Inrange =  Plus.DoString("return IsSpellInRange('" .. InterruptSpell .."', 'target')")		
		local Cooldown1,Cooldown2,Cooldown3 = Plus.DoString("return GetSpellCooldown('".. InterruptSpell .."')")
		if (interrupt == "false" or interrupt1 == "false") and Cooldown3 == "0" and Inrange == "1" and IsMounted == "nil" and attackable == "1" and InFight == "1" then
			if spell1 ~= "nil" then
			spell = spell1
			else
			spell = spell2
			end
			if CheckSpell(spell) == true and g_Interrupt_Choose == "list" then
				Player.CastSpell(InterruptSpell)
			elseif g_Interrupt_Choose == "all" then
				Player.CastSpell(InterruptSpell)
			end
		end
	
	end
end

function AutoLoad()
	if Plus.IsInGame() == true then
		local SafeFileData = "AI_" .. ObjectManager.GetActivePlayer():GetName() .. ".txt"
		value = file_exists(SafeFileData)
		if value == true then
			LoadData()
		end
	end
end

function AddSpell()
	SpellName = AddSpellNameString:GetText()
	local lbeNewEntry = ListBoxEntry.Create( g_List, SpellName );
	g_BlackList[ SpellName ] = lbeNewEntry;
	SaveData()
end

function AddSpellByName(Name)
	for k, v in pairs( g_BlackList ) do
		if 	k == Name then
			v:Destroy();
			g_BlackList[ k ] = nil;
			return;
		end
	end
	SpellName = Name
	local lbeNewEntry = ListBoxEntry.Create( g_List, SpellName );
	g_BlackList[ SpellName ] = lbeNewEntry;
end

function RemoveSpell(  )
	local spell =  g_List:GetSelectedItem()
		
	local spell = spell:GetText()
	for k, v in pairs( g_BlackList ) do
		if string.lower(k) == string.lower(spell) then
			v:Destroy();
			g_BlackList[ k ] = nil;
			SaveData()
			return;
		end
	end
	
end

function CheckSpell(Name)
	for k, v in pairs( g_BlackList ) do
		if string.lower(k) == string.lower(Name) then
			return true;
		end
	end
	return false;
end

function file_exists(name)
   local f=io.open(name,"r")
   if f~=nil then io.close(f) return true else return false end
end

function FieldEdit()
SaveData()
end

function StartStop() -- IsRunning

if IsRunning:GetText() == "Enable the interrupting" then
IsRunning:SetText( "Disable the interrupting" )
g_IsRunning = true;
else
IsRunning:SetText( "Enable the interrupting" )
g_IsRunning = false;
end
SaveData()
end

function ChooseSpellWay() -- IsRunning
if g_Interrupt_Choose == "all" then
	g_Interrupt_All = false;
	g_Interrupt_List = true;
	InterruptAllSpells:SetChecked( false )
	InterruptByLIst:SetChecked( true )
g_Interrupt_Choose = "list"
else
	g_Interrupt_All = true;
	g_Interrupt_List = false;
	InterruptAllSpells:SetChecked( true )
	InterruptByLIst:SetChecked( false )
g_Interrupt_Choose = "all"
end
SaveData()
end

function LoadData()
if Plus.IsInGame() == true then
local SafeFileData = "AI_" .. ObjectManager.GetActivePlayer():GetName() .. ".txt"
	local linecount = 1
	for line in io.lines(SafeFileData) do 
		if linecount == 1 then
			AddSpellNameString:SetText(line)
		elseif linecount == 2 then
			InterruptNameString:SetText(line)
		elseif linecount == 3 then
			g_Interrupt_Choose = line
		else
			
			if line ~= "End of save file" then
				AddSpellByName(line)
			
			end
			
			
		end
	linecount = linecount + 1
	end
if g_Interrupt_Choose == "list" then
	g_Interrupt_All = false;
	g_Interrupt_List = true;
	InterruptAllSpells:SetChecked( false )
	InterruptByLIst:SetChecked( true )
else
	g_Interrupt_All = true;
	g_Interrupt_List = false;
	InterruptAllSpells:SetChecked( true )
	InterruptByLIst:SetChecked( false )
end
end
end
function SaveData()
	if Plus.IsInGame() == true then
local SafeFileData = "AI_" .. ObjectManager.GetActivePlayer():GetName() .. ".txt"

local SaveList = ""
SaveList = SaveList .. AddSpellNameString:GetText() .. "\n"
SaveList = SaveList .. InterruptNameString:GetText() .. "\n"
SaveList = SaveList .. g_Interrupt_Choose .. "\n"

	for k, v in pairs( g_BlackList ) do
		if k ~= nil then
			SaveList = SaveList .. k .. "\n"
		end
	end

io.output(io.open(SafeFileData,"w"))
io.write( SaveList .. "End of save file")

io.close()
end
end