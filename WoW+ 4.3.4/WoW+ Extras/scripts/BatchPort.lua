-- L'Explorateur v2.4.1 by Whoknowsit
-- Programmed for WoWPlus

---------------------------------------------------
--          Variables (L'Explorateur)            --
---------------------------------------------------

local e_restart         = nil;
local b_restart         = nil;
local g_secureport      = true;
local g_fixedz          = false;
local g_fixedz2         = 500;
local g_timer           = false;
local g_timer2          = 750;
local g_loop            = false
local lb_lists          = nil;
local g_started         = false;
local g_ctmCheck        = nil;
local g_ctmCheck2       = nil;
local g_ctmCheck3       = nil;
local g_ctmCheck4       = nil;
local b_proceed         = nil;
local g_waypointList    = {};
local g_waypointCurrent = 1;
local g_waypointCount   = 0;
local playernear        = false;
local lastfile          = nil;
local lFrame            = nil;
local oFrame            = nil;
local g_stop            = false;
local g_sound           = true;
local g_interact        = false;
local g_trackdead       = false;
local t_pulse           = nil;
local t_interact        = nil;


---------------------------------------------------
--          Variables (Objecttracker)            --
---------------------------------------------------

local lb_objects = nil;
local lb_units = nil;

-- object list, need this to stop announcing objects over and over
local t_nearbyList = {};
local t_objects = {};
local t_units = {};

---------------------------------------------------
--                 Startup & GUI                 --
---------------------------------------------------

function Load()
    Plus.PrintChat("L'Explorateur loaded.");
    
	-- Retardet, but required
	lexplorateurGUI();
	objectTrackerGUI();
	lexplorateurGUI();
end

function Unload()
    Plus.CancelTeleportEvent();
    
    for k, v in pairs(t_nearbyList) do
        k:SetTracked(false);
    end
    
    Plus.PrintChat("Thank you for using L'Explorateur by Whoknowsit :)");
    Plus.PrintChat("Check out http://www.wow-pl.us for more, useful stuff.");
end

function lexplorateurGUI()
    if oFrame ~= nil then
        lFrame:SetVisible(true);
        lFrame:SetPosition(oFrame:GetPosition());
        oFrame:SetVisible(false);
    else
        lFrame = Frame.Create("L'Explorateur by Whoknowsit", 500, 470, true, 0x90003300);
        
        Label.Create(lFrame, "Choose settings category:", 10, 3);
        Button.Create(lFrame, "L'Explorateur", 237, 0, 120, 20);
        b_objecttracker = Button.Create(lFrame, "Object-Tracker", 367, 0, 120, 20);

        Line.Create(lFrame, 10, 30, 490, 30, 1);
        
        lb_lists = ListBox.Create(lFrame, 10, 40, 250, 175);
        
		local fileList = Plus.GetDirectoryFiles(Plus.GetModulePath() .. "batch\\*.txt", true);
		
        for _, v in pairs(fileList) do
            lbeNewEntry = ListBoxEntry.Create(lb_lists, v, false, false);
            Event.RegisterFrameCallback(LoadPositions, lbeNewEntry, "OnDoubleClick");
            Event.RegisterFrameCallback(OnlbEntryChanged, lbeNewEntry, "OnClick");
        end
        
        b_proceed = Button.Create(lFrame, "Start", 10, 230, 120, 20);
        b_restart = Button.Create(lFrame, "Restart", 140, 230, 120, 20);
        b_restart:SetVisible(false);
        
        cbFixedZ = CheckBox.Create(lFrame, "Fixed Z-Axis", 270, 40, g_fixedz);    
        Label.Create(lFrame, "Z-Axis:", 270, 68);
        tb_fixedz = TextBox.Create(lFrame, g_fixedz2, 330, 65, 100, 20, 5);
            
        cbTimer = CheckBox.Create(lFrame, "Set timer manually", 270, 100, g_timer);
        Label.Create(lFrame, "Timer:", 270, 128);
        tb_timer = TextBox.Create(lFrame, g_timer2, 330, 125, 100, 20, 5);
        Label.Create(lFrame, "ms", 440, 128);
        
        cbLoop = CheckBox.Create(lFrame, "Loop infinite", 270, 160, g_loop);
        
        cbSecurePort = CheckBox.Create(lFrame, "Secure Teleport", 270, 190, g_secureport);
        
        Line.Create(lFrame, 10, 270, 490, 270, 1);
        
        lb_log = ListBox.Create(lFrame, 10, 290, 480, 150);
        addLogEntry("L'Explorateur loaded.");

        Event.RegisterFrameCallback(OncbFixedZChanged, cbFixedZ, "OnClick");
        Event.RegisterFrameCallback(OncbTimerChanged, cbTimer, "OnClick");
        Event.RegisterFrameCallback(OncbLoopChanged, cbLoop, "OnClick");
        Event.RegisterFrameCallback(OncbSecurePortChanged, cbSecurePort, "OnClick");
        Event.RegisterFrameCallback(LoadPositions, b_proceed, "OnClick");
        Event.RegisterFrameCallback(restart, b_restart, "OnClick");
        
        -- GUI switch
        Event.RegisterFrameCallback(objectTrackerGUI, b_objecttracker, "OnClick");
    end
end

function objectTrackerGUI()
    if lFrame ~= nil and oFrame ~= nil then
        oFrame:SetVisible(true);
        oFrame:SetPosition(lFrame:GetPosition());
        lFrame:SetVisible(false);
    else        
        oFrame = Frame.Create("L'Explorateur by Whoknowsit", 500, 470, true, 0x90003300);
        oFrame:SetPosition(lFrame:GetPosition());
        lFrame:SetVisible(false);
        
        Label.Create(oFrame, "Choose settings category:", 10, 3);
        b_lexplorateur = Button.Create(oFrame, "L'Explorateur", 237, 0, 120, 20);
        Button.Create(oFrame, "Object-Tracker", 367, 0, 120, 20);

        Line.Create(oFrame, 10, 30, 490, 30, 1);
        
        Label.Create(oFrame, "Objects (Chests, Eggs, etc...)" , 10, 40);
        Label.Create(oFrame, "Units (Rares, NPCs, etc...)" , 263, 40);
        
        lb_objects = ListBox.Create(oFrame, 10, 70, 224, 175);
        lb_units = ListBox.Create(oFrame, 263, 70, 224, 175);
        
		local trackerFile = Plus.GetModulePath() .. "batch\\tracker";
        local file = io.open(trackerFile, "r");
        
		if file ~= nil then
			local lines = io.lines(trackerFile);
			
            for line in lines do
                toTrack = explode(";", line);
                if toTrack[2] == nil then
                    break;
                else
                    if string.lower(toTrack[1]) == "object" then
						local lbeNewEntry = ListBoxEntry.Create(lb_objects, toTrack[2]);
						t_objects[string.lower(toTrack[2])] = lbeNewEntry;
                    elseif string.lower(toTrack[1]) == "unit" then
						local lbeNewEntry = ListBoxEntry.Create(lb_units, toTrack[2]);
						t_units[string.lower(toTrack[2])] = lbeNewEntry;
                    end
                end
            end
        end
        
        tb_objects = TextBox.Create(oFrame, "", 10, 260, 160, 20, 100);
        b_addobject = Button.Create(oFrame, "+", 183, 260, 20, 20);
        b_delobject = Button.Create(oFrame, "-", 213, 260, 20, 20);
        
        tb_units = TextBox.Create(oFrame, "", 263, 260, 160, 20, 100);
        b_addunit = Button.Create(oFrame, "+", 436, 260, 20, 20);
        b_delunit = Button.Create(oFrame, "-", 466, 260, 20, 20);
        
        Line.Create(oFrame, 10, 300, 490, 300, 1);
        
        cbStop = CheckBox.Create(oFrame, "Pause teleport on find", 10, 315, g_stop);
        cbSound = CheckBox.Create(oFrame, "Play sound on find", 10, 340, g_sound);
        cbInteract = CheckBox.Create(oFrame, "Interact with found objects (Use with caution!)", 10, 365, g_interact, 0x40FF4500);
        cbTrackDead = CheckBox.Create(oFrame, "Track dead units", 10, 390, g_trackdead);
        
        Event.RegisterFrameCallback(OncbStopChanged, cbStop, "OnClick");
        Event.RegisterFrameCallback(OncbSoundChanged, cbSound, "OnClick");
        Event.RegisterFrameCallback(OncbInteractChanged, cbInteract, "OnClick");
        Event.RegisterFrameCallback(OncbTrackDeadChanged, cbTrackDead, "OnClick");
        Event.RegisterFrameCallback(OnAddObjectClicked, b_addobject, "OnClick" );
        Event.RegisterFrameCallback(OnDelObjectClicked, b_delobject, "OnClick" );
        Event.RegisterFrameCallback(OnAddUnitClicked, b_addunit, "OnClick" );
        Event.RegisterFrameCallback(OnDelUnitClicked, b_delunit, "OnClick" );
        
        -- GUI switch
        Event.RegisterFrameCallback(lexplorateurGUI, b_lexplorateur, "OnClick");
    end    
end

---------------------------------------------------
--                     Events                    --
---------------------------------------------------

function OnAddObjectClicked()
    local object = tb_objects:GetText();
    
    if t_objects[object] ~= nil then
        addLogEntry("Object \"" .. object .. "\" already added.", 1);
        return;
    end
    
    if object ~= "" then
        addLogEntry("Added \"" .. object .. "\" to objects list.");
        local lbeNewEntry = ListBoxEntry.Create(lb_objects, object);
        t_objects[string.lower(object)] = lbeNewEntry;
        tb_objects:SetText("");
    end
end

function OnDelObjectClicked()
    local object = lb_objects:GetSelectedItem();
    
    if object ~= nil then
        local objectName = object:GetText();
        
        addLogEntry("Removed \"" .. objectName .. "\" from units list.");
        
        for k, v in pairs(t_nearbyList) do
            if string.lower(k:GetName()) == string.lower(objectName) then
                if k:IsValid() then
                    k:SetTracked(false);
                end
                
                lb_log:GetItemByIndex(lb_log:GetIndexByItem(v)+1):Destroy();
                v:Destroy();
                t_nearbyList[k] = nil;
            end
        end
        
        t_objects[objectName] = nil;
        object:Destroy();
    end
end

function OnAddUnitClicked()
    local unit = tb_units:GetText();
    
    if t_units[unit] ~= nil then
        addLogEntry("Unit \"" .. unit .. "\" already added.", 1);
        return;
    end
    
    if unit ~= "" then
        addLogEntry("Added \"" .. unit .. "\" to units list.");
        local lbeNewEntry = ListBoxEntry.Create(lb_units, unit);
        t_units[string.lower(unit)] = lbeNewEntry;
        tb_units:SetText("");
    end
end

function OnDelUnitClicked()
    local unit = lb_units:GetSelectedItem();
    
    if unit ~= nil then
        local unitName = unit:GetText();
        
        addLogEntry("Removed \"" .. unitName .. "\" from units list.");
        
        for k, v in pairs(t_nearbyList) do
            if string.lower(k:GetName()) == string.lower(unitName) then
                if k:IsValid() then
                    k:SetTracked(false);
                end
                
                lb_log:GetItemByIndex(lb_log:GetIndexByItem(v)+1):Destroy();
                v:Destroy();
                t_nearbyList[k] = nil;
            end
        end
        
        t_units[unitName] = nil;
        unit:Destroy();
    end
end

function OncbTrackDeadChanged(eventID, cbSender)
    g_trackdead = cbSender:GetChecked();
    
    if g_trackdead then
        addLogEntry("Track dead units enabled.");
    else
        addLogEntry("Track dead units disabled.");
    end
end

function OncbStopChanged(eventID, cbSender)
    g_stop = cbSender:GetChecked();
    
    if g_stop then
        addLogEntry("Stop teleport on find enabled.");
    else
        addLogEntry("Stop teleport on find disabled.");
    end
end

function OncbSoundChanged(eventID, cbSender)
    g_sound = cbSender:GetChecked();
    
    if g_sound then
        addLogEntry("Sound on find enabled.");
    else
        addLogEntry("Sound on find disabled.");
    end
end

function OncbInteractChanged(eventID, cbSender)
    g_interact = cbSender:GetChecked();
    
    if g_interact then
        addLogEntry("Interact enabled.");
    else
        addLogEntry("Interact disabled.");
    end
end

function OncbFixedZChanged(eventID, cbSender)
    g_fixedz = cbSender:GetChecked();
    
    if g_fixedz then
        addLogEntry("Fixed Z-Axis enabled.");
    else
        addLogEntry("Fixed Z-Axis disabled.");
    end
end

function OncbTimerChanged(eventID, cbSender)
    g_timer = cbSender:GetChecked();
    
    if g_timer then
        addLogEntry("Manual Timer enabled.");
    else
        addLogEntry("Manual Timer disabled.");
    end
end

function OncbLoopChanged(eventID, cbSender)
    g_loop = cbSender:GetChecked();
    
    if g_loop then
        addLogEntry("Loop enabled.");
    else
        addLogEntry("Loop disabled.");
    end
end

function OncbSecurePortChanged(eventID, cbSender)
    g_secureport = cbSender:GetChecked();

    if g_secureport then
        addLogEntry("Secure teleport enabled.");
    else
        addLogEntry("Secure teleport disabled.");
    end
end

function OnlbEntryChanged()
    if lastfile ~= lb_lists:GetSelectedItem():GetText() then
        b_proceed:SetText("Start");
        b_restart:SetVisible(false);
	elseif g_started then
		b_proceed:SetText("Pause");
    else
        b_proceed:SetText("Continue");
        b_restart:SetVisible(true);
    end
end

---------------------------------------------------
--               Logging Functions               --
---------------------------------------------------

function addLogEntry(txt, ltype)
    if ltype == 0 then
        ltype = "         "
    elseif ltype == 1 then
        ltype = "[ERROR]: "
    else
        ltype = " [INFO]: ";
    end
    
    ListBoxEntry.Create(lb_log, ltype .. txt, false, false, 1); -- L33T!
end

---------------------------------------------------
--                Tracker Functions              --
---------------------------------------------------

local trackedObj, oHealth, oDynFlags, objType, objName, x, y, z, oType = nil;

function Pulse()
    RemoveInvalidObjects();
    
    local cnt = ObjectManager.GetObjectListEntryCount();

    for i = 1, cnt, 1 do
        trackedObj = ObjectManager.GetObjectListEntry(i);
        oHealth    = trackedObj:GetDescriptor(0x1B, "int"); -- UNIT_FIELD_HEALTH
        oDynFlags  = trackedObj:GetDescriptor(0x4A, "int"); -- UNIT_DYNAMIC_FLAGS
        objType    = trackedObj:GetType();
        objName    = trackedObj:GetName();
        x, y, z    = trackedObj:GetLocation();
        oType      = "Object";

        if      g_started
        and     ((t_units[string.lower(objName)] ~= nil and (g_trackdead or (not g_trackdead and oHealth >= 1 and Bit.And(oDynFlags, 0x20) ~= 0x20 and objType ~= 7)))
                 or (t_objects[string.lower(objName)] ~= nil and objType ~= 3 and objType ~= 4 and objType ~= 7))
        and     trackedObj:IsValid()
        and     objName ~= "Unknown"     -- English
        and     objName ~= "Unbekannt"   -- German
        and     objName ~= "Inconnu"     -- French
        and     objName ~= "Неизвестный" -- Russian
        and     objName ~= ""
        and not IsAlreadyAdded()
        and not (x == 0.00 and y == 0.00 and z == 0.00)
        then                
            if objType ~= 3 and objType ~= 4 and objType ~= 7 then
                if g_sound then
                    Plus.DoString('PlaySound("RaidWarning", "Master")');
                end
            else
                oType = "Creature"
                    
                if g_sound then
                    Plus.DoString('PlaySoundFile([[Sound\\Event Sounds\\Event_wardrum_ogre.wav]], "Master")');
                    Plus.DoString('PlaySoundFile([[Sound\\Events\\scourge_horn.wav]], "Master")');
                end
            end

            addLogEntry("Position: " .. math.floor(x) .. " " .. math.floor(y) .. " " .. math.floor(z), 0);
            Plus.PrintWarning("Tracked " .. oType .. " \"" .. objName .. "\" found!");
            Plus.PrintChat("Tracked " .. oType .. " \"" .. objName .. "\" found!");
            
            AddObject();
            
            if g_stop or (g_interact and objType ~= 3 and objType ~= 4 and objType ~= 7) then
                killCallbacks();
                
                if g_interact then
                    addLogEntry("Interacting with \"" .. objName .. "\"...");
                    t_interact = Event.RegisterTimerCallback(interactWith, 2250, true); -- failsafe
                elseif g_stop then
                    addLogEntry("L'Explorateur paused.");
                    trackFound();
                end
                
                return;
            end
        elseif IsAlreadyAdded()
        and    (t_units[string.lower(objName)] == nil and not g_trackdead and (oHealth <= 0 or Bit.And(oDynFlags, 0x20) == 0x20 or objType == 7)
                or (t_objects[string.lower(objName)] == nil and (objType ~= 3 and objType ~= 4 and objType ~= 7)))
        then
            RemoveObject();
        end
    end
end

function interactWith()
    if Plus.IsTeleportActive()
    or objType == 3
    or objType == 4
    or objType == 7
    then
        return;
    end
    
    local player = ObjectManager.GetActivePlayer();
    local px, py, pz = player:GetLocation();
    local result = D3D.TraceLine(x, y, z + 2.35, px, py, pz + 2.35, Bit.Or(INTERSECT_M2, INTERSECT_WMO));
    local distance = math.floor(math.sqrt((px - x) * (px - x) + (py - y) * (py - y)));
    
    if trackedObj:IsValid() and result == nil and distance <= 4 then
		face();
        Player.Interact(trackedObj);
        
        Event.RemoveTimerCallback(t_interact);
        t_interact = Event.RegisterTimerCallback(interactWith, 2000, true); -- failsafe
        return;
    elseif not trackedObj:IsValid() then        
        Event.RemoveSignalCallback(t_interact);
        
        if g_stop then
            addLogEntry("Interact done. L'Explorateur paused.");
            trackFound();
            return;
        else
            addLogEntry("Interact done. Continue...");
            trackInteracted();
            return;
        end
    else
        Plus.CreateTeleportEvent(x, y, z);
        return;
    end
end

function IsAlreadyAdded()
    return t_nearbyList[trackedObj] ~= nil;
end

function AddObject()    
    if objType == 3 or objType == 4 or objType == 7 then
        objTypeX = "Unit"
    else
        objTypeX = "Object"
    end
    
    local lbeNewEntry = ListBoxEntry.Create(lb_log, " [Info]: Tracked " .. objTypeX .. " \"" .. objName .. "\" found!", false, false, 1);
    Event.RegisterFrameCallback(OnTeleportToUnit, lbeNewEntry, "OnDoubleClick");
    t_nearbyList[trackedObj] = lbeNewEntry;
    trackedObj:SetTracked(true);
end

function RemoveInvalidObjects()    
    local oList = t_nearbyList;
    for k, v in pairs(oList) do
        if not k:IsValid() then
            oList[k] = nil;
        end
    end
end

function RemoveObject()
    local oList = t_nearbyList;
    for k, v in pairs(oList) do
        if k == trackedObj then
            lb_log:GetItemByIndex(lb_log:GetIndexByItem(v)+1):Destroy();
            v:Destroy();
            oList[k] = nil;
            trackedObj:SetTracked(false);
            return;
        end
    end
end

function OnTeleportToUnit(eventID, lbeSender)
    local oList = t_nearbyList;
    for k, v in pairs(oList) do
        if v == lbeSender then
            if k:IsValid() then
                if not Plus.CreateTeleportEvent(k:GetLocation()) then
                    Plus.PrintChat("Restricted movement flag for teleport! Are you mounted?");
                end
            end

            return;
        end
    end
end

---------------------------------------------------
--               Teleport Functions              --
---------------------------------------------------

function LoadPositions()
    if lb_lists:GetSelectedItem() == nil then
        addLogEntry("No list selected.", 1);
        return;
    end
    
    local line = {};
    local coords = {};
    local i = 1;
    local selfile = lb_lists:GetSelectedItem():GetText();
    
    if lastfile ~= selfile then
        lastfile = selfile;
        g_waypointList = {};
        g_waypointCurrent = 1;
        g_waypointCount = 0;
		b_proceed:SetText("Start");
		g_started = false;
		playernear = false;
        
        addLogEntry("Using list \"" .. lastfile .. "\".");
        
        for line in io.lines(Plus.GetModulePath() .. "batch\\" .. lastfile) do
            coords = explode(";", string.gsub(line, ",", "."));
            
            if coords[1] ~= nil and coords[5] ~= nil and tonumber(coords[5]) == Plus.GetMapID() then
                g_waypointList[i] = {
                    coords[1],
                    tonumber(coords[2]),
                    tonumber(coords[3]),
                    tonumber(coords[4]),
                    tonumber(coords[5])
                }            
                i = i + 1
            end
        end

        for _ in pairs(g_waypointList) do
            g_waypointCount = g_waypointCount + 1
        end
    end
    
    if g_waypointCount <= 0 then
        addLogEntry("Please choose another coordinates file and try again.", 0);
        addLogEntry("None of the coords are matching your current map.", 1);
        return;
    else
        Proceed();
    end
end

function Proceed()
    if g_started then
        addLogEntry("L'Explorateur paused!");
        
        if g_waypointCurrent > 1 then
            g_waypointCurrent = g_waypointCurrent - 1;
        end
        
        b_restart:SetVisible(true);        
        b_proceed:SetText("Continue");
        g_started = false;
        playernear = false;
        
        killCallbacks();

        if Plus.IsTeleportActive() then
            Plus.CancelTeleportEvent();
        end
    else
        addLogEntry("L'Explorateur started!");
        
        b_restart:SetVisible(false);
        b_proceed:SetText("Pause");
        g_started = true;
        
        if g_ctmCheck == nil then
            g_ctmCheck  = Event.RegisterTimerCallback(RefreshWaypoint, tb_timer:GetText(), true);
            g_ctmCheck2 = Event.RegisterSignalCallback(dc, 0x114); -- EVENT_PLAYER_CAMPING 
            g_ctmCheck3 = Event.RegisterSignalCallback(dc, 0x111); -- EVENT_PLAYER_LEAVING_WORLD
            g_ctmCheck4 = Event.RegisterCallback(face, "OnTeleportEventCompleted");
            t_pulse     = Event.RegisterTimerCallback(Pulse, (tb_timer:GetText()/2), true);
        end
    end
end

function RefreshWaypoint()
    if not Plus.IsInGame() then
        dc();
        return;
    elseif Plus.DoString("return UnitIsDeadOrGhost(\"player\")") ~= "nil" then
        dc(nil, "dead");
        return;
    elseif Plus.DoString("return IsFalling()") ~= "nil" then
        dc(nil, "falling");
        return;
    elseif Plus.IsTeleportActive() then
        return;
    elseif f_interact then
        return;
    end
    
    if g_secureport == true and PlayerIsNear() == true then
        if not playernear then
            addLogEntry("Another player is near. Waiting...");
            playernear = true;
        end
        
        return;
    end
    
    -- Stop and Go
    playernear = false;
    Player.MoveTo(0,0,0)
    Player.CancelMoveTo();
    --
    
    unMount();

    if g_loop == true and g_waypointCurrent > g_waypointCount then
        g_waypointCurrent = 1;
    elseif g_loop ~= true and g_waypointCurrent > g_waypointCount then
        finish();
        return;
    end

    x = g_waypointList[g_waypointCurrent][2];
    y = g_waypointList[g_waypointCurrent][3];
    
    if g_fixedz == true then
        z = tonumber(tb_fixedz:GetText());
    else
        z = g_waypointList[g_waypointCurrent][4];
    end

    addLogEntry("X: " .. math.floor(x) .. ", Y: " .. math.floor(y) .. ", Z: " .. math.floor(z), 0);
    addLogEntry("Processing entry " .. g_waypointCurrent .. " of " .. g_waypointCount .. ":");

    --[[
        ToDo: disable notifications
    ]]
    
    Plus.CreateTeleportEvent(x, y, z);

    g_waypointCurrent = g_waypointCurrent + 1;
end

-- Taken from zdennis
function PlayerIsNear()
    for i = 1, ObjectManager.GetObjectListEntryCount(), 1 do
        local object = ObjectManager.GetObjectListEntry(i)
        
        if object ~= ObjectManager.GetActivePlayer() and object:GetType() == 4 then
            return true;
        end
    end

    return false;
end

function face()
    Player.Face(0,0);
    
    --[[
        ToDo: Re enable notifications
    ]]
end

function dc(identifier, ctype)
    if Plus.IsTeleportActive() then
        Plus.CancelTeleportEvent();
    end
    
    if ctype == 0x114 then
        addLogEntry("Logging out. L'Explorateur paused!", 1);
    elseif ctype == "falling" then
        addLogEntry("You're falling or jumping. L'Explorateur paused!", 1);
    elseif ctype == "dead" then
        addLogEntry("You're dead. L'Explorateur paused!", 1);
    else
        addLogEntry("Not ingame. L'Explorateur paused!", 1);
    end

    if g_waypointCurrent > 1 then
        g_waypointCurrent = g_waypointCurrent - 1;
    end
        
    b_proceed:SetText("Continue");
    g_started = false;
    playernear = false;
    
    killCallbacks();
end

function trackInteracted()
    if g_waypointCurrent > 1 then
        g_waypointCurrent = g_waypointCurrent - 1;
    end
    
    b_proceed:SetText("Start");
    g_started = false;
    playernear = false;
    
    killCallbacks();    
    Proceed();
end

function trackFound()
    if g_waypointCurrent > 1 then
        g_waypointCurrent = g_waypointCurrent - 1;
    end
        
    b_proceed:SetText("Continue");
    g_started = false;
    playernear = false;
end

function finish()
    Plus.DoString('PlaySoundFile([[Sound\\creature\\Peasant\\PeasantWhat3.ogg]], "Master")');
    addLogEntry("Job finished. L'Explorateur stopped!");
    g_waypointCurrent = 1;
        
    b_proceed:SetText("Start");
    g_started = false;
    playernear = false;
    
    killCallbacks();
end

function restart()
    addLogEntry("Restarting profile!");
    g_waypointCurrent = 1;
        
    b_proceed:SetText("Start");
    g_started = false;
    playernear = false;
    
    killCallbacks();    
    Proceed();
end

---------------------------------------------------
--               DoString Functions              --
---------------------------------------------------

function unMount()
    if Plus.DoString("return IsMounted() ~= nil") == "true" then
        Plus.DoString("Dismount()");
        addLogEntry("Dismounted.");
    end
end

---------------------------------------------------
--                 Misc Functions                --
---------------------------------------------------

function explode(div, str)
    if div == "" then
        return false;
    end
    
    local pos, arr = 0, {};

    for st,sp in function() return string.find(str, div, pos, true) end do
        table.insert(arr, string.sub(str, pos, st - 1));
        pos = sp + 1;
    end
    
    table.insert(arr, string.sub(str, pos));
    
    return arr;
end

function killCallbacks()
    if g_ctmCheck ~= nil then
        Event.RemoveTimerCallback(g_ctmCheck);
        g_ctmCheck  = nil;
    end
    
    if g_ctmCheck2 ~= nil then
        Event.RemoveSignalCallback(g_ctmCheck2);
        g_ctmCheck2  = nil;
    end
    
    if g_ctmCheck3 ~= nil then
        Event.RemoveCallback(g_ctmCheck3);
        g_ctmCheck3  = nil;
    end
    
    if g_ctmCheck4 ~= nil then
        Event.RemoveCallback(g_ctmCheck4);
        g_ctmCheck4  = nil;
    end
    
    if t_pulse ~= nil then
        Event.RemoveTimerCallback(t_pulse);
        t_pulse  = nil;
    end
end