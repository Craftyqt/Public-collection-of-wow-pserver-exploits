--[[------------------------------------------------]]--
--[[              MapPort & LocalPort               ]]--
--[[                     v3.1                       ]]--
--[[                 by CrysisMK2                   ]]--
--[[               Updated by Crush                 ]]--
--[[------------------------------------------------]]--

local core_settings = {};
core_settings[7] = 3.1;

function Load()
	Plus.PrintChat("|cffadff2fMapPort & LocalPort |cffffffffv"..core_settings[7].." loaded!");
	readSettings();
	injectLua();
	usrGUI();
	if tostring(core_settings[5]) == "true" then developerGUI(); end
	system_command = Event.RegisterCommandCallback(hookMapClick, "parseMapPortUpdate");
	system_sigWorld = Event.RegisterSignalCallback(injectLua, FRAMEEVENT_PLAYER_ENTERING_WORLD);
	system_sigLogin = Event.RegisterSignalCallback(injectLua, FRAMEEVENT_PLAYER_LOGIN);
	if core_settings[5] == true then developerGUI(); end
end
function Unload()
	os.remove(Plus.GetModulePath().."scripts\\MapPort+LocalPort.lua");
	Plus.DoString( "MapPortLoaded = false;" );
    Plus.PrintChat("Thank you for using |cffadff2fMapPort & LocalPort |cffffffffby CrysisMK2.");
    Plus.PrintChat("Check out |cff5555ffhttp://www.wow-pl.us |cfffffffffor more useful stuff.");
end
function usrGUI()
	usrFrame = Frame.Create( "Settings", 425, 325, true, 0x8087CEFA);
	chatSpamLabel1 = Label.Create(usrFrame, "Check this to enable chat notifications of successful", 10, 0);
	chatSpamLabel2 = Label.Create(usrFrame, "and failed MapPort operations.", 10, 10);
	chatSpamCheck = CheckBox.Create(usrFrame, "ChatSpam", 10, 25);
	useJumpLabel = Label.Create(usrFrame, "Uncheck this to disable jumping down.", 10, 45);
	useJumpCheck = CheckBox.Create(usrFrame, "Use Jump", 10, 60);
	useMountLabel1 = Label.Create(usrFrame, "Check this to enable using a flying mount to travel up", 10, 80);
	useMountLabel2 = Label.Create(usrFrame, "or down on a MapPort operation. Previous option overrides", 10, 90);
	useMountLabel3 = Label.Create(usrFrame, "this option for going down. This is buggy, if you have", 10, 100);
	useMountLabel4 = Label.Create(usrFrame, "problems disable it.", 10, 110);
	useMountCheck = CheckBox.Create(usrFrame, "Use Mount", 10, 125);
	mountIDLabel1 = Label.Create(usrFrame, "Required for the previous option to work. Input a flying", 10, 145);
	mountIDLabel2 = Label.Create(usrFrame, "mount ID here.", 10, 155);
	mountIDEdit = TextBox.Create(usrFrame, "nil", 10, 170);
	isDeveloperLabel = Label.Create(usrFrame, "Check this only if you know what it does.", 10, 195);
	isDeveloperCheck = CheckBox.Create(usrFrame, "Developer", 10, 210);
	hideUILabel1 = Label.Create(usrFrame, "Check this to hide this window when hack is first started.", 10, 230);
	hideUILabel2 = Label.Create(usrFrame, "You may show it at any time using the \"Windows\" button on", 10, 240);
	hideUILabel3 = Label.Create(usrFrame, "the hack's main menu.", 10, 250);
	hideUICheck = CheckBox.Create(usrFrame, "Hide Settings", 10, 265);
	loadSettings();
	loadSettingsButton = Button.Create(usrFrame, "Reset", 10, 285, 60, 20, 0x80FF00FF);
	saveSettingsButton = Button.Create(usrFrame, "Save", 110, 285, 60, 20, 0x80FF00FF);
	events1 = {};
	events1[1] = Event.RegisterFrameCallback( loadSettings, loadSettingsButton, "OnClick");
	events1[2] = Event.RegisterFrameCallback( saveSettings, saveSettingsButton, "OnClick");
	if tostring(core_settings[6]) == "true" then usrFrame:SetVisible(false); end
	return;
end
function developerGUI()
	devFrame      = Frame.Create(             "D.",      182, 200, true,     0x8087CEFA);		
	refPtA        = Button.Create(  devFrame, "RefPt A", 8,   4,   80,   20, 0x80FF00FF);
	refPtAMapID   = TextBox.Create( devFrame, "MapID",   94,  4,   80,   20, 99);
	refPtAXY      = TextBox.Create( devFrame, "gX|gY",   8,   30,  80,   20, 99);
	refPtAlXY     = TextBox.Create( devFrame, "lX|lY",   94,  30,  80,   20, 99);
	refPtAMapName = TextBox.Create( devFrame, "MapName", 8,   56,  142,  20, 99);
	refPtAMapLvl  = TextBox.Create( devFrame, "L",       156, 56,  18,   20, 99);
	refPtB        = Button.Create(  devFrame, "RefPt B", 8,   82,  80,   20, 0x80FF00FF);
	refPtBMapID   = TextBox.Create( devFrame, "MapID",   94,  82,  80,   20, 99);
	refPtBXY      = TextBox.Create( devFrame, "gX|gY",   8,   108, 80,   20, 99);
	refPtBlXY     = TextBox.Create( devFrame, "lX|lY",   94,  108, 80,   20, 99);
	refPtBMapName = TextBox.Create( devFrame, "MapName", 8,   134, 142,  20, 99);
	refPtBMapLvl  = TextBox.Create( devFrame, "L",       156, 134, 18,   20, 99);
	mark          = Button.Create(  devFrame, "Mark",    8,   160, 80,   20, 0x80FF00FF);
	refPtAMapID:SetCentered(true);
	refPtAXY:SetCentered(true);
	refPtAlXY:SetCentered(true);
	refPtAMapName:SetCentered(true);
	refPtAMapLvl:SetCentered(true);
	refPtBMapID:SetCentered(true);
	refPtBXY:SetCentered(true);
	refPtBlXY:SetCentered(true);
	refPtBMapName:SetCentered(true);
	refPtBMapLvl:SetCentered(true);
	events = {};
	events[1] = Event.RegisterFrameCallback( setRefPtA, refPtA, "OnClick");
	events[2] = Event.RegisterFrameCallback( setRefPtB, refPtB, "OnClick");
	events[3] = Event.RegisterFrameCallback( saveMark,  mark, "OnClick");
	return;
end
function loadSettings()
	if tostring(core_settings[1]) == "true" then chatSpamCheck:SetChecked(true); else chatSpamCheck:SetChecked(false); end
	if tostring(core_settings[2]) == "true" then useJumpCheck:SetChecked(true); else useJumpCheck:SetChecked(false); end
	if tostring(core_settings[3]) == "true" then useMountCheck:SetChecked(true); else useMountCheck:SetChecked(false); end
	if tostring(core_settings[5]) == "true" then isDeveloperCheck:SetChecked(true); else isDeveloperCheck:SetChecked(false); end
	if tostring(core_settings[6]) == "true" then hideUICheck:SetChecked(true); else hideUICheck:SetChecked(false); end
	mountIDEdit:SetText(tostring(core_settings[4]));
	return;
end
function saveSettings()
	core_settings[1] = chatSpamCheck:GetChecked();
	core_settings[2] = useJumpCheck:GetChecked();
	core_settings[3] = useMountCheck:GetChecked();
	core_settings[4] = mountIDEdit:GetText();
	core_settings[5] = isDeveloperCheck:GetChecked();
	core_settings[6] = hideUICheck:GetChecked();
	writeSettings();
	return;
end
function writeSettings()
	Plus.WriteConfigSetting("showChatSpam", tostring(core_settings[1]));
	Plus.WriteConfigSetting("useJump", tostring(core_settings[2]));
	Plus.WriteConfigSetting("useMount", tostring(core_settings[3]));
	Plus.WriteConfigSetting("mountID", tostring(core_settings[4]));
	Plus.WriteConfigSetting("isDeveloper", tostring(core_settings[5]));
	Plus.WriteConfigSetting("hideUI", tostring(core_settings[6]));
end
function readSettings()
	core_settings[1] = Plus.ReadConfigSetting("showChatSpam", "true");
	core_settings[2] = Plus.ReadConfigSetting("useJump", "true");
	core_settings[3] = Plus.ReadConfigSetting("useMount", "false");
	core_settings[4] = Plus.ReadConfigSetting("mountID", "0");
	core_settings[5] = Plus.ReadConfigSetting("isDeveloper", "false");
	core_settings[6] = Plus.ReadConfigSetting("hideUI", "false");
end
function injectLua()
	Plus.DoString( "MapPortLoaded = true;" );
	Plus.DoString( "local origScript = WorldMapButton_OnClick; WorldMapButton_OnClick = function(self, ...) local mouseButton, button = ...; if mouseButton == \"LeftButton\" then if IsShiftKeyDown() == 1 then local m, _ = GetCurrentMapAreaID() if not m then return origScript and origScript(self, ...) or true end if MapPortLoaded then SendChatMessage(\".script parseMapPortUpdate LSHIFT\" ,\"WHISPER\" , nil, UnitName(\"player\")); end elseif IsControlKeyDown() == 1 then local m, _ = GetCurrentMapAreaID(); if not m then return origScript and origScript(self, ...) or true; end if MapPortLoaded then SendChatMessage(\".script parseMapPortUpdate LCTRL\" ,\"WHISPER\" , nil, UnitName(\"player\")); end else return origScript and origScript(self, ...) or true; end else return origScript and origScript(self, ...) or true; end end if WorldMapButton:GetScript(\"OnMouseUp\") == origScript then WorldMapButton:SetScript(\"OnMouseUp\", WorldMapButton_OnClick); end" )
 	return;
end
function round(num, idp)
  local mult = 10^(idp or 0)
  return math.floor(num * mult + 0.5) / mult
end
function setRefPtA()
	local player = ObjectManager.GetActivePlayer();
	aY, aX, aZ = player:GetLocation();
	laX, laY = Plus.DoString("return GetPlayerMapPosition(\"player\");");
	laX = laX*100
	laY = laY*100
	aMapID = Plus.GetMapID();
	aMapName = Plus.DoString("return GetMapInfo();");
	aMapLevel = Plus.DoString("return GetCurrentMapDungeonLevel();");
	refPtAXY:SetText(round(aX).."|"..round(aY));
	refPtAlXY:SetText(round(laX).."|"..round(laY));
	refPtAMapName:SetText(aMapName);
	refPtAMapID:SetText(""..aMapID);
	refPtAMapLvl:SetText(""..aMapLevel);
	return;
end
function setRefPtB()
	local player = ObjectManager.GetActivePlayer();
	bY, bX, bZ = player:GetLocation();
	lbX, lbY = Plus.DoString("return GetPlayerMapPosition(\"player\");");
	lbX = lbX*100
	lbY = lbY*100
	bMapID = Plus.GetMapID();
	bMapName = Plus.DoString("return GetMapInfo();");
	bMapLevel = Plus.DoString("return GetCurrentMapDungeonLevel();");
	refPtBXY:SetText(round(bX).."|"..round(bY));
	refPtBlXY:SetText(round(lbX).."|"..round(lbY));
	refPtBMapName:SetText(bMapName);
	refPtBMapID:SetText(""..bMapID);
	refPtBMapLvl:SetText(""..bMapLevel);
	return;
end
function saveMark()
	if (aMapID==bMapID) and (aMapName==bMapName) and (aMapLevel==bMapLevel) then
		s = {};
		yDelta = (bY - aY)/(lbY - laY);
		xDelta = (bX - aX)/(lbX - laX);
		yStart = aY - (laY * yDelta);
		xStart = aX - (laX * xDelta);
		s[1] = aMapName;
		s[2] = yStart;
		s[3] = xStart;
		s[4] = yDelta;
		s[5] = xDelta;
		s[6] = aMapID;
		s[7] = aMapLevel
		if ((""..s[2]) ~= "-1.#IND") and ((""..s[3]) ~= "-1.#IND") then
			dat = io.open(Plus.GetModulePath() .. "scripts\\zones.dat", "a+");
			dat:write("\n"..s[1]..","..s[2]..","..s[3]..","..s[4]..","..s[5]..","..s[6]..","..s[7]);
			dat:close();
		end
	end
	return;
end
function hookMapClick(_, _, key)
	callKey = key;
	system_bastardHack = Event.RegisterTimerCallback(execMapPort, 1, false);
	return;
end
function execMapPort(test)
	local WorldMapName, WorldMapID, WorldMapLevel, World_adjustedX, World_adjustedY = getMapInfo();
	local zone, startY, startX, deltaY, deltaX = checkDatabase(WorldMapName, WorldMapID, WorldMapLevel, World_adjustedX, World_adjustedY);
	local player = ObjectManager.GetActivePlayer();
	local _, _, globalZ = player:GetLocation();
	local globalY = startY + ( deltaY * World_adjustedY );
	local globalX = startX + ( deltaX * World_adjustedX );
	if core_settings[1] == true then
		--Plus.PrintChat("Porting to: " .. zone .. " " .. x .. ", " .. y .. " (" .. globalY .. ", " .. globalX .. ", " .. globalZ .. ")");
	end
	if callKey == "LCTRL" then
		zTeleport = true;
	else
		zTeleport = false;
	end
	Plus.SafeTeleportTo(globalY, globalX, globalZ);
end
function portTo()
	Plus.SafeTeleportTo(archY, archX, archZ);
	return;
end
function getMapInfo()
	local World_scale                  = Plus.DoString("return WorldMapDetailFrame:GetEffectiveScale();");
	local World_width                  = Plus.DoString("return WorldMapDetailFrame:GetWidth();");
	local World_height                 = Plus.DoString("return WorldMapDetailFrame:GetHeight();");
	local World_centerX, World_centerY = Plus.DoString("return WorldMapDetailFrame:GetCenter();");
	local World_x, World_y             = Plus.DoString("return GetCursorPosition();");
	local WorldMapName                 = Plus.DoString("return GetMapInfo();");
	local WorldMapLevel                = Plus.DoString("return GetCurrentMapDungeonLevel();");
	local WorldMapID                   = Plus.GetMapID();
	local World_adjustedX = (World_x / World_scale - (World_centerX - (World_width/2))) / World_width;
	local World_adjustedY = (World_centerY + (World_height/2) - World_y / World_scale) / World_height;
	local World_adjustedX = World_adjustedX * 100 
	if World_adjustedX < 0 or World_adjustedX > 100 then return "Map Error"; end
	local World_adjustedY = World_adjustedY * 100
	if World_adjustedY < 0 or World_adjustedY > 100 then return "Map Error"; end
	return WorldMapName, WorldMapID, WorldMapLevel, World_adjustedX, World_adjustedY;
end
function checkDatabase(zone, map, level, x, y)
	for line in io.lines(Plus.GetModulePath() .. "scripts\\zones.dat") do
		local v = {};
		local i = 1;
		for n in string.gmatch(line, "[%w%-%_%.]+") do
			v[i] = n;
			i = i+1;
		end
		if string.lower(v[1]) == string.lower(zone) and tonumber(v[7]) == tonumber(level) then
			if tonumber(v[6]) == Plus.GetMapID() then
				return v[1], v[2], v[3], v[4], v[5], v[6], v[7];
			end
		end
	end
	return "Not In Database";
end