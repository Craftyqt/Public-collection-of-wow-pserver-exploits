-- UltraTrack v1.1 by Master674
-- Programmed for WoWPlus v1.1
-- Supports units, players, enemys, rares, quest objectives and quest accept/turn-in mobs
-- Listing all found objects, teleporting to them (also double click), and targeting them

-- tracking states
g_trackUnits = false;
g_trackPlayers = false;
g_trackEnemys = false;
g_trackRares = false;
g_trackQuests = false;
g_trackObjectives = false;

-- announcement states
g_printChat = false;
g_printBubble = false;
g_printWarning = false;

-- "nearby objects" label and listbox
g_lNearbyObjects = nil;
g_lbNearbyObjects = nil;

-- object list, need this to stop announcing objects over and over
g_objectList = {};

function Load()
	Plus.PrintChat( "UltraTrack v1.1 loaded!" );
	
	local fFrame = Frame.Create( "UltraTrack v1.1", 290, 310 );
	local lObjects = Label.Create( fFrame, "Tracking modes:", 8, 0 );
	local cbTrackUnits = CheckBox.Create( fFrame, "Track units", 10, 20, g_trackUnits );
	local cbTrackPlayers = CheckBox.Create( fFrame, "Track players", 140, 20, g_trackPlayers );
	local cbTrackEnemys = CheckBox.Create( fFrame, "Track enemys", 10, 45, g_trackEnemys );
	local cbTrackRares = CheckBox.Create( fFrame, "Track rares", 140, 45, g_trackRares );
	local cbTrackQuests = CheckBox.Create( fFrame, "Track quests", 10, 70, g_trackQuests );
	local cbTrackObjectives = CheckBox.Create( fFrame, "Track objectives", 140, 70, g_trackObjectives );
	local lAnnouncement = Label.Create( fFrame, "Announcement modes:", 8, 95 );
	local cbPrintChat = CheckBox.Create( fFrame, "Chat", 10, 115, g_printChat );
	local cbPrintBubble = CheckBox.Create( fFrame, "Bubble", 90, 115, g_printBubble );
	local cbPrintWarning = CheckBox.Create( fFrame, "Warning", 180, 115, g_printWarning );
	g_lNearbyObjects = Label.Create( fFrame, "Nearby objects: 0", 10, 140 );
	g_lbNearbyObjects = ListBox.Create( fFrame, 10, 160, 270, 100 );
	local bTeleport = Button.Create( fFrame, "Teleport", 10, 265, 132, 20 );
	local bTarget = Button.Create( fFrame, "Target", 148, 265, 132, 20 );

	Event.RegisterFrameCallback( OnTrackUnitsChanged, cbTrackUnits, "OnClick" );
	Event.RegisterFrameCallback( OnTrackPlayersChanged, cbTrackPlayers, "OnClick" );
	Event.RegisterFrameCallback( OnTrackEnemysChanged, cbTrackEnemys, "OnClick" );
	Event.RegisterFrameCallback( OnTrackRaresChanged, cbTrackRares, "OnClick" );
	Event.RegisterFrameCallback( OnTrackQuestsChanged, cbTrackQuests, "OnClick" );
	Event.RegisterFrameCallback( OnTrackObjectivesChanged, cbTrackObjectives, "OnClick" );
	Event.RegisterFrameCallback( OnPrintChatChanged, cbPrintChat, "OnClick" );
	Event.RegisterFrameCallback( OnPrintBubbleChanged, cbPrintBubble, "OnClick" );
	Event.RegisterFrameCallback( OnPrintWarningChanged, cbPrintWarning, "OnClick" );
	Event.RegisterFrameCallback( OnTeleportClick, bTeleport, "OnClick" );
	Event.RegisterFrameCallback( OnTargetClick, bTarget, "OnClick" );
	Event.RegisterTimerCallback( PulseObjects, 500, true ); -- keep checking every 500 ms
end

function Unload()
end

function PulseObjects( eventID, timer )
	RemoveInvalidObjects();
	local entryCount = ObjectManager.GetObjectListEntryCount(); -- get our list entry count

	for i = 1, entryCount, 1 do
		local object = ObjectManager.GetObjectListEntry( i ); -- get the object at given index
		local alreadyAdded = IsAlreadyAdded( object );

		if IsTrackedObject( object ) then
			if not alreadyAdded then -- don't announce already added mobs
				local objectName = object:GetName();
				
				if objectName ~= "Unknown" -- English
				and objectName ~= "Unbekannt" -- German
				and objectName ~= "Inconnu" -- French
				and objectName ~= "Неизвестный" -- Russian
				then
					AddObject( object, objectName );
					PrintMessage( "Tracked object '" .. objectName .. "' is near!" )
				end
			end
		elseif alreadyAdded then -- is not tracked, but added: remove it!
				RemoveObject( object );
		end
	end

	UpdateObjectCount();
end

function AddObject( object, objectName )
	local lbeNewEntry = ListBoxEntry.Create( g_lbNearbyObjects, objectName );
	Event.RegisterFrameCallback( OnTeleportToUnit, lbeNewEntry, "OnDoubleClick" );
	g_objectList[ object ] = lbeNewEntry;
	object:SetTracked( true );
end

function RemoveObject( object )
	for k, v in pairs( g_objectList ) do
		if k == object then
			v:Destroy();
			g_objectList[ k ] = nil;
			object:SetTracked( false );
			return;
		end
	end
end

function RemoveInvalidObjects()
	for k, v in pairs( g_objectList ) do
		if not k:IsValid() then
			v:Destroy();
			g_objectList[ k ] = nil;
		end
	end
end

function IsAlreadyAdded( object )
	return g_objectList[ object ] ~= nil;
end

function PrintMessage( message )
	if g_printChat then
		Plus.PrintChat( message );
	end

	if g_printBubble then
		Plus.PrintBubble( message );
	end

	if g_printWarning then
		Plus.PrintWarning( message );
	end
end

function IsTrackedObject( object )
	local player = ObjectManager.GetActivePlayer();

	if object ~= player then -- don't track myself
		local objectType = object:GetType();
		local unitReaction = player:GetReaction( object );
		local creatureRank = object:GetCreatureRank();

		if ( g_trackUnits and objectType == 3 )  -- check track units
		or ( g_trackPlayers and objectType == 4 ) -- check track players
		or ( g_trackEnemys and ( objectType == 3 or objectType == 4 ) and unitReaction < 3 ) -- check track enemys
		or ( g_trackRares and ( creatureRank == 2 or creatureRank == 4 ) ) -- check track rares
		or ( g_trackQuests and object:IsActiveQuestGiver() ) -- check quest givers
		or ( g_trackObjectives and object:IsQuestObjective() ) -- check objectives
		then
			return true;
		end
	end
	return false;
end

function UpdateObjectCount()
	local counter = 0;
	for k, v in pairs( g_objectList ) do
		counter = counter + 1;
	end

	g_lNearbyObjects:SetText( "Nearby objects: " .. counter );
end

function OnTeleportToUnit( eventID, lbeSender )
	for k, v in pairs( g_objectList ) do
		if v == lbeSender then
			if k:IsValid() then
				Plus.CreateTeleportEvent( k:GetLocation() );
			end
			return;
		end
	end
end

function OnTargetUnit( eventID, lbeSender )
	for k, v in pairs( g_objectList ) do
		if v == lbeSender then
			if k:IsValid() then
				Player.Target( k );
			end
			return;
		end
	end
end

function OnTrackUnitsChanged( eventID, cbSender )
	g_trackUnits = cbSender:GetChecked();
end

function OnTrackPlayersChanged( eventID, cbSender )
	g_trackPlayers = cbSender:GetChecked();
end

function OnTrackEnemysChanged( eventID, cbSender )
	g_trackEnemys = cbSender:GetChecked();
end

function OnTrackRaresChanged( eventID, cbSender )
	g_trackRares = cbSender:GetChecked();
end

function OnTrackQuestsChanged( eventID, cbSender )
	g_trackQuests = cbSender:GetChecked();
end

function OnTrackObjectivesChanged( eventID, cbSender )
	g_trackObjectives = cbSender:GetChecked();
end

function OnPrintChatChanged( eventID, cbSender )
	g_printChat = cbSender:GetChecked();
end

function OnPrintBubbleChanged( eventID, cbSender )
	g_printBubble = cbSender:GetChecked();
end

function OnPrintWarningChanged( eventID, cbSender )
	g_printWarning = cbSender:GetChecked();
end

function OnTeleportClick( eventID, bSender )
	local lbeSelectedItem = g_lbNearbyObjects:GetSelectedItem();
	if lbeSelectedItem ~= nil then
		OnTeleportToUnit( eventID, lbeSelectedItem );
	end
end

function OnTargetClick( eventID, bSender )
	local lbeSelectedItem = g_lbNearbyObjects:GetSelectedItem();
	if lbeSelectedItem ~= nil then
		OnTargetUnit( eventID, lbeSelectedItem );
	end
end
